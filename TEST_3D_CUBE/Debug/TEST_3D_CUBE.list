
TEST_3D_CUBE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a42c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  0800a5e0  0800a5e0  0001a5e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab90  0800ab90  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab90  0800ab90  0001ab90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab98  0800ab98  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab98  0800ab98  0001ab98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab9c  0800ab9c  0001ab9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800aba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00027a9c  20000024  0800abc4  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20027ac0  0800abc4  00027ac0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d715  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003934  00000000  00000000  0003d769  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a80  00000000  00000000  000410a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018f8  00000000  00000000  00042b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000277e9  00000000  00000000  00044418  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015450  00000000  00000000  0006bc01  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8189  00000000  00000000  00081051  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001691da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075b4  00000000  00000000  00169258  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000024 	.word	0x20000024
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a5c4 	.word	0x0800a5c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000028 	.word	0x20000028
 80001ec:	0800a5c4 	.word	0x0800a5c4

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2f>:
 8000aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af4:	bf24      	itt	cs
 8000af6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afe:	d90d      	bls.n	8000b1c <__aeabi_d2f+0x30>
 8000b00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b14:	bf08      	it	eq
 8000b16:	f020 0001 	biceq.w	r0, r0, #1
 8000b1a:	4770      	bx	lr
 8000b1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b20:	d121      	bne.n	8000b66 <__aeabi_d2f+0x7a>
 8000b22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b26:	bfbc      	itt	lt
 8000b28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	4770      	bxlt	lr
 8000b2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b36:	f1c2 0218 	rsb	r2, r2, #24
 8000b3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b42:	fa20 f002 	lsr.w	r0, r0, r2
 8000b46:	bf18      	it	ne
 8000b48:	f040 0001 	orrne.w	r0, r0, #1
 8000b4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b58:	ea40 000c 	orr.w	r0, r0, ip
 8000b5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b64:	e7cc      	b.n	8000b00 <__aeabi_d2f+0x14>
 8000b66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6a:	d107      	bne.n	8000b7c <__aeabi_d2f+0x90>
 8000b6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b70:	bf1e      	ittt	ne
 8000b72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7a:	4770      	bxne	lr
 8000b7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b972 	b.w	8000e88 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9e08      	ldr	r6, [sp, #32]
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	4688      	mov	r8, r1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d14b      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bca:	428a      	cmp	r2, r1
 8000bcc:	4615      	mov	r5, r2
 8000bce:	d967      	bls.n	8000ca0 <__udivmoddi4+0xe4>
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	b14a      	cbz	r2, 8000bea <__udivmoddi4+0x2e>
 8000bd6:	f1c2 0720 	rsb	r7, r2, #32
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	fa20 f707 	lsr.w	r7, r0, r7
 8000be2:	4095      	lsls	r5, r2
 8000be4:	ea47 0803 	orr.w	r8, r7, r3
 8000be8:	4094      	lsls	r4, r2
 8000bea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bf4:	fa1f fc85 	uxth.w	ip, r5
 8000bf8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bfc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c00:	fb07 f10c 	mul.w	r1, r7, ip
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x60>
 8000c08:	18eb      	adds	r3, r5, r3
 8000c0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c0e:	f080 811b 	bcs.w	8000e48 <__udivmoddi4+0x28c>
 8000c12:	4299      	cmp	r1, r3
 8000c14:	f240 8118 	bls.w	8000e48 <__udivmoddi4+0x28c>
 8000c18:	3f02      	subs	r7, #2
 8000c1a:	442b      	add	r3, r5
 8000c1c:	1a5b      	subs	r3, r3, r1
 8000c1e:	b2a4      	uxth	r4, r4
 8000c20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c30:	45a4      	cmp	ip, r4
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x8c>
 8000c34:	192c      	adds	r4, r5, r4
 8000c36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3a:	f080 8107 	bcs.w	8000e4c <__udivmoddi4+0x290>
 8000c3e:	45a4      	cmp	ip, r4
 8000c40:	f240 8104 	bls.w	8000e4c <__udivmoddi4+0x290>
 8000c44:	3802      	subs	r0, #2
 8000c46:	442c      	add	r4, r5
 8000c48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c4c:	eba4 040c 	sub.w	r4, r4, ip
 8000c50:	2700      	movs	r7, #0
 8000c52:	b11e      	cbz	r6, 8000c5c <__udivmoddi4+0xa0>
 8000c54:	40d4      	lsrs	r4, r2
 8000c56:	2300      	movs	r3, #0
 8000c58:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5c:	4639      	mov	r1, r7
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0xbe>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f000 80eb 	beq.w	8000e42 <__udivmoddi4+0x286>
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c72:	4638      	mov	r0, r7
 8000c74:	4639      	mov	r1, r7
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	fab3 f783 	clz	r7, r3
 8000c7e:	2f00      	cmp	r7, #0
 8000c80:	d147      	bne.n	8000d12 <__udivmoddi4+0x156>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xd0>
 8000c86:	4282      	cmp	r2, r0
 8000c88:	f200 80fa 	bhi.w	8000e80 <__udivmoddi4+0x2c4>
 8000c8c:	1a84      	subs	r4, r0, r2
 8000c8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	4698      	mov	r8, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d0e0      	beq.n	8000c5c <__udivmoddi4+0xa0>
 8000c9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c9e:	e7dd      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000ca0:	b902      	cbnz	r2, 8000ca4 <__udivmoddi4+0xe8>
 8000ca2:	deff      	udf	#255	; 0xff
 8000ca4:	fab2 f282 	clz	r2, r2
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	f040 808f 	bne.w	8000dcc <__udivmoddi4+0x210>
 8000cae:	1b49      	subs	r1, r1, r5
 8000cb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb4:	fa1f f885 	uxth.w	r8, r5
 8000cb8:	2701      	movs	r7, #1
 8000cba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x124>
 8000cd0:	18eb      	adds	r3, r5, r3
 8000cd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x122>
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	f200 80cd 	bhi.w	8000e78 <__udivmoddi4+0x2bc>
 8000cde:	4684      	mov	ip, r0
 8000ce0:	1a59      	subs	r1, r3, r1
 8000ce2:	b2a3      	uxth	r3, r4
 8000ce4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cf0:	fb08 f800 	mul.w	r8, r8, r0
 8000cf4:	45a0      	cmp	r8, r4
 8000cf6:	d907      	bls.n	8000d08 <__udivmoddi4+0x14c>
 8000cf8:	192c      	adds	r4, r5, r4
 8000cfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x14a>
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	f200 80b6 	bhi.w	8000e72 <__udivmoddi4+0x2b6>
 8000d06:	4618      	mov	r0, r3
 8000d08:	eba4 0408 	sub.w	r4, r4, r8
 8000d0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d10:	e79f      	b.n	8000c52 <__udivmoddi4+0x96>
 8000d12:	f1c7 0c20 	rsb	ip, r7, #32
 8000d16:	40bb      	lsls	r3, r7
 8000d18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d20:	fa01 f407 	lsl.w	r4, r1, r7
 8000d24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d30:	4325      	orrs	r5, r4
 8000d32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d36:	0c2c      	lsrs	r4, r5, #16
 8000d38:	fb08 3319 	mls	r3, r8, r9, r3
 8000d3c:	fa1f fa8e 	uxth.w	sl, lr
 8000d40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d44:	fb09 f40a 	mul.w	r4, r9, sl
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d52:	d90b      	bls.n	8000d6c <__udivmoddi4+0x1b0>
 8000d54:	eb1e 0303 	adds.w	r3, lr, r3
 8000d58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d5c:	f080 8087 	bcs.w	8000e6e <__udivmoddi4+0x2b2>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f240 8084 	bls.w	8000e6e <__udivmoddi4+0x2b2>
 8000d66:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6a:	4473      	add	r3, lr
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	b2ad      	uxth	r5, r5
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3310 	mls	r3, r8, r0, r3
 8000d78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d80:	45a2      	cmp	sl, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1da>
 8000d84:	eb1e 0404 	adds.w	r4, lr, r4
 8000d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8c:	d26b      	bcs.n	8000e66 <__udivmoddi4+0x2aa>
 8000d8e:	45a2      	cmp	sl, r4
 8000d90:	d969      	bls.n	8000e66 <__udivmoddi4+0x2aa>
 8000d92:	3802      	subs	r0, #2
 8000d94:	4474      	add	r4, lr
 8000d96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d9e:	eba4 040a 	sub.w	r4, r4, sl
 8000da2:	454c      	cmp	r4, r9
 8000da4:	46c2      	mov	sl, r8
 8000da6:	464b      	mov	r3, r9
 8000da8:	d354      	bcc.n	8000e54 <__udivmoddi4+0x298>
 8000daa:	d051      	beq.n	8000e50 <__udivmoddi4+0x294>
 8000dac:	2e00      	cmp	r6, #0
 8000dae:	d069      	beq.n	8000e84 <__udivmoddi4+0x2c8>
 8000db0:	ebb1 050a 	subs.w	r5, r1, sl
 8000db4:	eb64 0403 	sbc.w	r4, r4, r3
 8000db8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dbc:	40fd      	lsrs	r5, r7
 8000dbe:	40fc      	lsrs	r4, r7
 8000dc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000dc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000dc8:	2700      	movs	r7, #0
 8000dca:	e747      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000dd4:	4095      	lsls	r5, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	fa21 f303 	lsr.w	r3, r1, r3
 8000dde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de2:	4338      	orrs	r0, r7
 8000de4:	0c01      	lsrs	r1, r0, #16
 8000de6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dea:	fa1f f885 	uxth.w	r8, r5
 8000dee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000df2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df6:	fb07 f308 	mul.w	r3, r7, r8
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x256>
 8000e02:	1869      	adds	r1, r5, r1
 8000e04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e08:	d22f      	bcs.n	8000e6a <__udivmoddi4+0x2ae>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d92d      	bls.n	8000e6a <__udivmoddi4+0x2ae>
 8000e0e:	3f02      	subs	r7, #2
 8000e10:	4429      	add	r1, r5
 8000e12:	1acb      	subs	r3, r1, r3
 8000e14:	b281      	uxth	r1, r0
 8000e16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb00 f308 	mul.w	r3, r0, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x27e>
 8000e2a:	1869      	adds	r1, r5, r1
 8000e2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e30:	d217      	bcs.n	8000e62 <__udivmoddi4+0x2a6>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d915      	bls.n	8000e62 <__udivmoddi4+0x2a6>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4429      	add	r1, r5
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e40:	e73b      	b.n	8000cba <__udivmoddi4+0xfe>
 8000e42:	4637      	mov	r7, r6
 8000e44:	4630      	mov	r0, r6
 8000e46:	e709      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000e48:	4607      	mov	r7, r0
 8000e4a:	e6e7      	b.n	8000c1c <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fb      	b.n	8000c48 <__udivmoddi4+0x8c>
 8000e50:	4541      	cmp	r1, r8
 8000e52:	d2ab      	bcs.n	8000dac <__udivmoddi4+0x1f0>
 8000e54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e58:	eb69 020e 	sbc.w	r2, r9, lr
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	4613      	mov	r3, r2
 8000e60:	e7a4      	b.n	8000dac <__udivmoddi4+0x1f0>
 8000e62:	4660      	mov	r0, ip
 8000e64:	e7e9      	b.n	8000e3a <__udivmoddi4+0x27e>
 8000e66:	4618      	mov	r0, r3
 8000e68:	e795      	b.n	8000d96 <__udivmoddi4+0x1da>
 8000e6a:	4667      	mov	r7, ip
 8000e6c:	e7d1      	b.n	8000e12 <__udivmoddi4+0x256>
 8000e6e:	4681      	mov	r9, r0
 8000e70:	e77c      	b.n	8000d6c <__udivmoddi4+0x1b0>
 8000e72:	3802      	subs	r0, #2
 8000e74:	442c      	add	r4, r5
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0x14c>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	442b      	add	r3, r5
 8000e7e:	e72f      	b.n	8000ce0 <__udivmoddi4+0x124>
 8000e80:	4638      	mov	r0, r7
 8000e82:	e708      	b.n	8000c96 <__udivmoddi4+0xda>
 8000e84:	4637      	mov	r7, r6
 8000e86:	e6e9      	b.n	8000c5c <__udivmoddi4+0xa0>

08000e88 <__aeabi_idiv0>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <apply_rotation_to_point>:
#include "cube_3d.h"

// obrot Z -> y -> x
proxy_point_3d apply_rotation_to_point(point_3d *point){
 8000e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e90:	ed2d 8b02 	vpush	{d8}
 8000e94:	b084      	sub	sp, #16
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	6039      	str	r1, [r7, #0]
	point->x -= 100;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	3b64      	subs	r3, #100	; 0x64
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	801a      	strh	r2, [r3, #0]
	point->y -= 100;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	3b64      	subs	r3, #100	; 0x64
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	805a      	strh	r2, [r3, #2]

	proxy_point_3d proxy_point;

	proxy_point.x = cos(point->z_angle) * cos(point->y_angle) * point->x;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff faf7 	bl	80004b8 <__aeabi_f2d>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	ec43 2b10 	vmov	d0, r2, r3
 8000ed2:	f008 fb21 	bl	8009518 <cos>
 8000ed6:	ec59 8b10 	vmov	r8, r9, d0
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff faea 	bl	80004b8 <__aeabi_f2d>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	ec43 2b10 	vmov	d0, r2, r3
 8000eec:	f008 fb14 	bl	8009518 <cos>
 8000ef0:	ec53 2b10 	vmov	r2, r3, d0
 8000ef4:	4640      	mov	r0, r8
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	f7ff fb36 	bl	8000568 <__aeabi_dmul>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	4690      	mov	r8, r2
 8000f02:	4699      	mov	r9, r3
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fac2 	bl	8000494 <__aeabi_i2d>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	4640      	mov	r0, r8
 8000f16:	4649      	mov	r1, r9
 8000f18:	f7ff fb26 	bl	8000568 <__aeabi_dmul>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	f7ff fdba 	bl	8000a9c <__aeabi_d2iz>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	813b      	strh	r3, [r7, #8]
	proxy_point.x += (cos(point->z_angle) * sin(point->y_angle) * sin(point->x_angle) -
 8000f2e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff faae 	bl	8000494 <__aeabi_i2d>
 8000f38:	4680      	mov	r8, r0
 8000f3a:	4689      	mov	r9, r1
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	691b      	ldr	r3, [r3, #16]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fab9 	bl	80004b8 <__aeabi_f2d>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	ec43 2b10 	vmov	d0, r2, r3
 8000f4e:	f008 fae3 	bl	8009518 <cos>
 8000f52:	ec5b ab10 	vmov	sl, fp, d0
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff faac 	bl	80004b8 <__aeabi_f2d>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	ec43 2b10 	vmov	d0, r2, r3
 8000f68:	f008 fb1a 	bl	80095a0 <sin>
 8000f6c:	ec53 2b10 	vmov	r2, r3, d0
 8000f70:	4650      	mov	r0, sl
 8000f72:	4659      	mov	r1, fp
 8000f74:	f7ff faf8 	bl	8000568 <__aeabi_dmul>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4692      	mov	sl, r2
 8000f7e:	469b      	mov	fp, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fa97 	bl	80004b8 <__aeabi_f2d>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	ec43 2b10 	vmov	d0, r2, r3
 8000f92:	f008 fb05 	bl	80095a0 <sin>
 8000f96:	ec53 2b10 	vmov	r2, r3, d0
 8000f9a:	4650      	mov	r0, sl
 8000f9c:	4659      	mov	r1, fp
 8000f9e:	f7ff fae3 	bl	8000568 <__aeabi_dmul>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4692      	mov	sl, r2
 8000fa8:	469b      	mov	fp, r3
					sin(point->z_angle) * cos(point->x_angle)) * point->y;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fa82 	bl	80004b8 <__aeabi_f2d>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	ec43 2b10 	vmov	d0, r2, r3
 8000fbc:	f008 faf0 	bl	80095a0 <sin>
 8000fc0:	eeb0 8a40 	vmov.f32	s16, s0
 8000fc4:	eef0 8a60 	vmov.f32	s17, s1
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fa73 	bl	80004b8 <__aeabi_f2d>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	ec43 2b10 	vmov	d0, r2, r3
 8000fda:	f008 fa9d 	bl	8009518 <cos>
 8000fde:	ec53 2b10 	vmov	r2, r3, d0
 8000fe2:	ec51 0b18 	vmov	r0, r1, d8
 8000fe6:	f7ff fabf 	bl	8000568 <__aeabi_dmul>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
	proxy_point.x += (cos(point->z_angle) * sin(point->y_angle) * sin(point->x_angle) -
 8000fee:	4650      	mov	r0, sl
 8000ff0:	4659      	mov	r1, fp
 8000ff2:	f7ff f901 	bl	80001f8 <__aeabi_dsub>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4692      	mov	sl, r2
 8000ffc:	469b      	mov	fp, r3
					sin(point->z_angle) * cos(point->x_angle)) * point->y;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fa45 	bl	8000494 <__aeabi_i2d>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4650      	mov	r0, sl
 8001010:	4659      	mov	r1, fp
 8001012:	f7ff faa9 	bl	8000568 <__aeabi_dmul>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
	proxy_point.x += (cos(point->z_angle) * sin(point->y_angle) * sin(point->x_angle) -
 800101a:	4640      	mov	r0, r8
 800101c:	4649      	mov	r1, r9
 800101e:	f7ff f8ed 	bl	80001fc <__adddf3>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f7ff fd37 	bl	8000a9c <__aeabi_d2iz>
 800102e:	4603      	mov	r3, r0
 8001030:	b21b      	sxth	r3, r3
 8001032:	813b      	strh	r3, [r7, #8]
	proxy_point.x += (cos(point->z_angle) * sin(point->y_angle) * cos(point->x_angle) +
 8001034:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fa2b 	bl	8000494 <__aeabi_i2d>
 800103e:	4680      	mov	r8, r0
 8001040:	4689      	mov	r9, r1
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa36 	bl	80004b8 <__aeabi_f2d>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	ec43 2b10 	vmov	d0, r2, r3
 8001054:	f008 fa60 	bl	8009518 <cos>
 8001058:	ec5b ab10 	vmov	sl, fp, d0
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fa29 	bl	80004b8 <__aeabi_f2d>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	ec43 2b10 	vmov	d0, r2, r3
 800106e:	f008 fa97 	bl	80095a0 <sin>
 8001072:	ec53 2b10 	vmov	r2, r3, d0
 8001076:	4650      	mov	r0, sl
 8001078:	4659      	mov	r1, fp
 800107a:	f7ff fa75 	bl	8000568 <__aeabi_dmul>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4692      	mov	sl, r2
 8001084:	469b      	mov	fp, r3
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fa14 	bl	80004b8 <__aeabi_f2d>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	ec43 2b10 	vmov	d0, r2, r3
 8001098:	f008 fa3e 	bl	8009518 <cos>
 800109c:	ec53 2b10 	vmov	r2, r3, d0
 80010a0:	4650      	mov	r0, sl
 80010a2:	4659      	mov	r1, fp
 80010a4:	f7ff fa60 	bl	8000568 <__aeabi_dmul>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4692      	mov	sl, r2
 80010ae:	469b      	mov	fp, r3
					sin(point->z_angle) * sin(point->x_angle)) * point->z;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff f9ff 	bl	80004b8 <__aeabi_f2d>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	ec43 2b10 	vmov	d0, r2, r3
 80010c2:	f008 fa6d 	bl	80095a0 <sin>
 80010c6:	eeb0 8a40 	vmov.f32	s16, s0
 80010ca:	eef0 8a60 	vmov.f32	s17, s1
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff f9f0 	bl	80004b8 <__aeabi_f2d>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	ec43 2b10 	vmov	d0, r2, r3
 80010e0:	f008 fa5e 	bl	80095a0 <sin>
 80010e4:	ec53 2b10 	vmov	r2, r3, d0
 80010e8:	ec51 0b18 	vmov	r0, r1, d8
 80010ec:	f7ff fa3c 	bl	8000568 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
	proxy_point.x += (cos(point->z_angle) * sin(point->y_angle) * cos(point->x_angle) +
 80010f4:	4650      	mov	r0, sl
 80010f6:	4659      	mov	r1, fp
 80010f8:	f7ff f880 	bl	80001fc <__adddf3>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4692      	mov	sl, r2
 8001102:	469b      	mov	fp, r3
					sin(point->z_angle) * sin(point->x_angle)) * point->z;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff f9c2 	bl	8000494 <__aeabi_i2d>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4650      	mov	r0, sl
 8001116:	4659      	mov	r1, fp
 8001118:	f7ff fa26 	bl	8000568 <__aeabi_dmul>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
	proxy_point.x += (cos(point->z_angle) * sin(point->y_angle) * cos(point->x_angle) +
 8001120:	4640      	mov	r0, r8
 8001122:	4649      	mov	r1, r9
 8001124:	f7ff f86a 	bl	80001fc <__adddf3>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fcb4 	bl	8000a9c <__aeabi_d2iz>
 8001134:	4603      	mov	r3, r0
 8001136:	b21b      	sxth	r3, r3
 8001138:	813b      	strh	r3, [r7, #8]

	proxy_point.y = sin(point->z_angle) * cos(point->y_angle) * point->x;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f9ba 	bl	80004b8 <__aeabi_f2d>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	ec43 2b10 	vmov	d0, r2, r3
 800114c:	f008 fa28 	bl	80095a0 <sin>
 8001150:	ec59 8b10 	vmov	r8, r9, d0
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f9ad 	bl	80004b8 <__aeabi_f2d>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	ec43 2b10 	vmov	d0, r2, r3
 8001166:	f008 f9d7 	bl	8009518 <cos>
 800116a:	ec53 2b10 	vmov	r2, r3, d0
 800116e:	4640      	mov	r0, r8
 8001170:	4649      	mov	r1, r9
 8001172:	f7ff f9f9 	bl	8000568 <__aeabi_dmul>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4690      	mov	r8, r2
 800117c:	4699      	mov	r9, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f985 	bl	8000494 <__aeabi_i2d>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4640      	mov	r0, r8
 8001190:	4649      	mov	r1, r9
 8001192:	f7ff f9e9 	bl	8000568 <__aeabi_dmul>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff fc7d 	bl	8000a9c <__aeabi_d2iz>
 80011a2:	4603      	mov	r3, r0
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	817b      	strh	r3, [r7, #10]
	proxy_point.y += (sin(point->z_angle) * sin(point->y_angle) * sin(point->x_angle) +
 80011a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f971 	bl	8000494 <__aeabi_i2d>
 80011b2:	4680      	mov	r8, r0
 80011b4:	4689      	mov	r9, r1
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f97c 	bl	80004b8 <__aeabi_f2d>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	ec43 2b10 	vmov	d0, r2, r3
 80011c8:	f008 f9ea 	bl	80095a0 <sin>
 80011cc:	ec5b ab10 	vmov	sl, fp, d0
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f96f 	bl	80004b8 <__aeabi_f2d>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	ec43 2b10 	vmov	d0, r2, r3
 80011e2:	f008 f9dd 	bl	80095a0 <sin>
 80011e6:	ec53 2b10 	vmov	r2, r3, d0
 80011ea:	4650      	mov	r0, sl
 80011ec:	4659      	mov	r1, fp
 80011ee:	f7ff f9bb 	bl	8000568 <__aeabi_dmul>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4692      	mov	sl, r2
 80011f8:	469b      	mov	fp, r3
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f95a 	bl	80004b8 <__aeabi_f2d>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	ec43 2b10 	vmov	d0, r2, r3
 800120c:	f008 f9c8 	bl	80095a0 <sin>
 8001210:	ec53 2b10 	vmov	r2, r3, d0
 8001214:	4650      	mov	r0, sl
 8001216:	4659      	mov	r1, fp
 8001218:	f7ff f9a6 	bl	8000568 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4692      	mov	sl, r2
 8001222:	469b      	mov	fp, r3
					cos(point->z_angle) * cos(point->x_angle)) * point->y;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f945 	bl	80004b8 <__aeabi_f2d>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	ec43 2b10 	vmov	d0, r2, r3
 8001236:	f008 f96f 	bl	8009518 <cos>
 800123a:	eeb0 8a40 	vmov.f32	s16, s0
 800123e:	eef0 8a60 	vmov.f32	s17, s1
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f936 	bl	80004b8 <__aeabi_f2d>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	ec43 2b10 	vmov	d0, r2, r3
 8001254:	f008 f960 	bl	8009518 <cos>
 8001258:	ec53 2b10 	vmov	r2, r3, d0
 800125c:	ec51 0b18 	vmov	r0, r1, d8
 8001260:	f7ff f982 	bl	8000568 <__aeabi_dmul>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
	proxy_point.y += (sin(point->z_angle) * sin(point->y_angle) * sin(point->x_angle) +
 8001268:	4650      	mov	r0, sl
 800126a:	4659      	mov	r1, fp
 800126c:	f7fe ffc6 	bl	80001fc <__adddf3>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4692      	mov	sl, r2
 8001276:	469b      	mov	fp, r3
					cos(point->z_angle) * cos(point->x_angle)) * point->y;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f908 	bl	8000494 <__aeabi_i2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4650      	mov	r0, sl
 800128a:	4659      	mov	r1, fp
 800128c:	f7ff f96c 	bl	8000568 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
	proxy_point.y += (sin(point->z_angle) * sin(point->y_angle) * sin(point->x_angle) +
 8001294:	4640      	mov	r0, r8
 8001296:	4649      	mov	r1, r9
 8001298:	f7fe ffb0 	bl	80001fc <__adddf3>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f7ff fbfa 	bl	8000a9c <__aeabi_d2iz>
 80012a8:	4603      	mov	r3, r0
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	817b      	strh	r3, [r7, #10]
	proxy_point.y += (sin(point->z_angle) * sin(point->y_angle) * cos(point->x_angle) -
 80012ae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f8ee 	bl	8000494 <__aeabi_i2d>
 80012b8:	4680      	mov	r8, r0
 80012ba:	4689      	mov	r9, r1
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f8f9 	bl	80004b8 <__aeabi_f2d>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	ec43 2b10 	vmov	d0, r2, r3
 80012ce:	f008 f967 	bl	80095a0 <sin>
 80012d2:	ec5b ab10 	vmov	sl, fp, d0
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f8ec 	bl	80004b8 <__aeabi_f2d>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	ec43 2b10 	vmov	d0, r2, r3
 80012e8:	f008 f95a 	bl	80095a0 <sin>
 80012ec:	ec53 2b10 	vmov	r2, r3, d0
 80012f0:	4650      	mov	r0, sl
 80012f2:	4659      	mov	r1, fp
 80012f4:	f7ff f938 	bl	8000568 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4692      	mov	sl, r2
 80012fe:	469b      	mov	fp, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f8d7 	bl	80004b8 <__aeabi_f2d>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	ec43 2b10 	vmov	d0, r2, r3
 8001312:	f008 f901 	bl	8009518 <cos>
 8001316:	ec53 2b10 	vmov	r2, r3, d0
 800131a:	4650      	mov	r0, sl
 800131c:	4659      	mov	r1, fp
 800131e:	f7ff f923 	bl	8000568 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4692      	mov	sl, r2
 8001328:	469b      	mov	fp, r3
					cos(point->z_angle) * sin(point->x_angle)) * point->z;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f8c2 	bl	80004b8 <__aeabi_f2d>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	ec43 2b10 	vmov	d0, r2, r3
 800133c:	f008 f8ec 	bl	8009518 <cos>
 8001340:	eeb0 8a40 	vmov.f32	s16, s0
 8001344:	eef0 8a60 	vmov.f32	s17, s1
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f8b3 	bl	80004b8 <__aeabi_f2d>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	ec43 2b10 	vmov	d0, r2, r3
 800135a:	f008 f921 	bl	80095a0 <sin>
 800135e:	ec53 2b10 	vmov	r2, r3, d0
 8001362:	ec51 0b18 	vmov	r0, r1, d8
 8001366:	f7ff f8ff 	bl	8000568 <__aeabi_dmul>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
	proxy_point.y += (sin(point->z_angle) * sin(point->y_angle) * cos(point->x_angle) -
 800136e:	4650      	mov	r0, sl
 8001370:	4659      	mov	r1, fp
 8001372:	f7fe ff41 	bl	80001f8 <__aeabi_dsub>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4692      	mov	sl, r2
 800137c:	469b      	mov	fp, r3
					cos(point->z_angle) * sin(point->x_angle)) * point->z;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f885 	bl	8000494 <__aeabi_i2d>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4650      	mov	r0, sl
 8001390:	4659      	mov	r1, fp
 8001392:	f7ff f8e9 	bl	8000568 <__aeabi_dmul>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
	proxy_point.y += (sin(point->z_angle) * sin(point->y_angle) * cos(point->x_angle) -
 800139a:	4640      	mov	r0, r8
 800139c:	4649      	mov	r1, r9
 800139e:	f7fe ff2d 	bl	80001fc <__adddf3>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4610      	mov	r0, r2
 80013a8:	4619      	mov	r1, r3
 80013aa:	f7ff fb77 	bl	8000a9c <__aeabi_d2iz>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	817b      	strh	r3, [r7, #10]

	proxy_point.z = -sin(point->y_angle) * point->x;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f87d 	bl	80004b8 <__aeabi_f2d>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	ec43 2b10 	vmov	d0, r2, r3
 80013c6:	f008 f8eb 	bl	80095a0 <sin>
 80013ca:	ec53 2b10 	vmov	r2, r3, d0
 80013ce:	4614      	mov	r4, r2
 80013d0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f85a 	bl	8000494 <__aeabi_i2d>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4620      	mov	r0, r4
 80013e6:	4629      	mov	r1, r5
 80013e8:	f7ff f8be 	bl	8000568 <__aeabi_dmul>
 80013ec:	4603      	mov	r3, r0
 80013ee:	460c      	mov	r4, r1
 80013f0:	4618      	mov	r0, r3
 80013f2:	4621      	mov	r1, r4
 80013f4:	f7ff fb52 	bl	8000a9c <__aeabi_d2iz>
 80013f8:	4603      	mov	r3, r0
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	81bb      	strh	r3, [r7, #12]
	proxy_point.z += cos(point->y_angle) * sin(point->x_angle) * point->y;
 80013fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f846 	bl	8000494 <__aeabi_i2d>
 8001408:	4604      	mov	r4, r0
 800140a:	460d      	mov	r5, r1
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f851 	bl	80004b8 <__aeabi_f2d>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	ec43 2b10 	vmov	d0, r2, r3
 800141e:	f008 f87b 	bl	8009518 <cos>
 8001422:	ec59 8b10 	vmov	r8, r9, d0
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f844 	bl	80004b8 <__aeabi_f2d>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	ec43 2b10 	vmov	d0, r2, r3
 8001438:	f008 f8b2 	bl	80095a0 <sin>
 800143c:	ec53 2b10 	vmov	r2, r3, d0
 8001440:	4640      	mov	r0, r8
 8001442:	4649      	mov	r1, r9
 8001444:	f7ff f890 	bl	8000568 <__aeabi_dmul>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4690      	mov	r8, r2
 800144e:	4699      	mov	r9, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f81c 	bl	8000494 <__aeabi_i2d>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4640      	mov	r0, r8
 8001462:	4649      	mov	r1, r9
 8001464:	f7ff f880 	bl	8000568 <__aeabi_dmul>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4620      	mov	r0, r4
 800146e:	4629      	mov	r1, r5
 8001470:	f7fe fec4 	bl	80001fc <__adddf3>
 8001474:	4603      	mov	r3, r0
 8001476:	460c      	mov	r4, r1
 8001478:	4618      	mov	r0, r3
 800147a:	4621      	mov	r1, r4
 800147c:	f7ff fb0e 	bl	8000a9c <__aeabi_d2iz>
 8001480:	4603      	mov	r3, r0
 8001482:	b21b      	sxth	r3, r3
 8001484:	81bb      	strh	r3, [r7, #12]
	proxy_point.z += cos(point->y_angle) * cos(point->x_angle) * point->z;
 8001486:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f802 	bl	8000494 <__aeabi_i2d>
 8001490:	4604      	mov	r4, r0
 8001492:	460d      	mov	r5, r1
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff f80d 	bl	80004b8 <__aeabi_f2d>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	ec43 2b10 	vmov	d0, r2, r3
 80014a6:	f008 f837 	bl	8009518 <cos>
 80014aa:	ec59 8b10 	vmov	r8, r9, d0
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f800 	bl	80004b8 <__aeabi_f2d>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	ec43 2b10 	vmov	d0, r2, r3
 80014c0:	f008 f82a 	bl	8009518 <cos>
 80014c4:	ec53 2b10 	vmov	r2, r3, d0
 80014c8:	4640      	mov	r0, r8
 80014ca:	4649      	mov	r1, r9
 80014cc:	f7ff f84c 	bl	8000568 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4690      	mov	r8, r2
 80014d6:	4699      	mov	r9, r3
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7fe ffd8 	bl	8000494 <__aeabi_i2d>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4640      	mov	r0, r8
 80014ea:	4649      	mov	r1, r9
 80014ec:	f7ff f83c 	bl	8000568 <__aeabi_dmul>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4620      	mov	r0, r4
 80014f6:	4629      	mov	r1, r5
 80014f8:	f7fe fe80 	bl	80001fc <__adddf3>
 80014fc:	4603      	mov	r3, r0
 80014fe:	460c      	mov	r4, r1
 8001500:	4618      	mov	r0, r3
 8001502:	4621      	mov	r1, r4
 8001504:	f7ff faca 	bl	8000a9c <__aeabi_d2iz>
 8001508:	4603      	mov	r3, r0
 800150a:	b21b      	sxth	r3, r3
 800150c:	81bb      	strh	r3, [r7, #12]

	point->x += 100;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001514:	b29b      	uxth	r3, r3
 8001516:	3364      	adds	r3, #100	; 0x64
 8001518:	b29b      	uxth	r3, r3
 800151a:	b21a      	sxth	r2, r3
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	801a      	strh	r2, [r3, #0]
	point->y += 100;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001526:	b29b      	uxth	r3, r3
 8001528:	3364      	adds	r3, #100	; 0x64
 800152a:	b29b      	uxth	r3, r3
 800152c:	b21a      	sxth	r2, r3
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	805a      	strh	r2, [r3, #2]
	proxy_point.x += 100;
 8001532:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001536:	b29b      	uxth	r3, r3
 8001538:	3364      	adds	r3, #100	; 0x64
 800153a:	b29b      	uxth	r3, r3
 800153c:	b21b      	sxth	r3, r3
 800153e:	813b      	strh	r3, [r7, #8]
	proxy_point.y += 100;
 8001540:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001544:	b29b      	uxth	r3, r3
 8001546:	3364      	adds	r3, #100	; 0x64
 8001548:	b29b      	uxth	r3, r3
 800154a:	b21b      	sxth	r3, r3
 800154c:	817b      	strh	r3, [r7, #10]

	return proxy_point;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	461a      	mov	r2, r3
 8001552:	f107 0308 	add.w	r3, r7, #8
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	6010      	str	r0, [r2, #0]
 800155a:	889b      	ldrh	r3, [r3, #4]
 800155c:	8093      	strh	r3, [r2, #4]
}
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	ecbd 8b02 	vpop	{d8}
 8001568:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800156c <apply_rotation_to_point_only_z>:

float apply_rotation_to_point_only_z(point_3d *point){
 800156c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
	point->x -= 100;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157c:	b29b      	uxth	r3, r3
 800157e:	3b64      	subs	r3, #100	; 0x64
 8001580:	b29b      	uxth	r3, r3
 8001582:	b21a      	sxth	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	801a      	strh	r2, [r3, #0]
	point->y -= 100;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800158e:	b29b      	uxth	r3, r3
 8001590:	3b64      	subs	r3, #100	; 0x64
 8001592:	b29b      	uxth	r3, r3
 8001594:	b21a      	sxth	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	805a      	strh	r2, [r3, #2]
	float z = -sin(point->y_angle) * point->x;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe ff8a 	bl	80004b8 <__aeabi_f2d>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	ec43 2b10 	vmov	d0, r2, r3
 80015ac:	f007 fff8 	bl	80095a0 <sin>
 80015b0:	ec53 2b10 	vmov	r2, r3, d0
 80015b4:	4614      	mov	r4, r2
 80015b6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ff67 	bl	8000494 <__aeabi_i2d>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4620      	mov	r0, r4
 80015cc:	4629      	mov	r1, r5
 80015ce:	f7fe ffcb 	bl	8000568 <__aeabi_dmul>
 80015d2:	4603      	mov	r3, r0
 80015d4:	460c      	mov	r4, r1
 80015d6:	4618      	mov	r0, r3
 80015d8:	4621      	mov	r1, r4
 80015da:	f7ff fa87 	bl	8000aec <__aeabi_d2f>
 80015de:	4603      	mov	r3, r0
 80015e0:	60fb      	str	r3, [r7, #12]
	z += cos(point->y_angle) * sin(point->x_angle) * point->y;
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f7fe ff68 	bl	80004b8 <__aeabi_f2d>
 80015e8:	4604      	mov	r4, r0
 80015ea:	460d      	mov	r5, r1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ff61 	bl	80004b8 <__aeabi_f2d>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	ec43 2b10 	vmov	d0, r2, r3
 80015fe:	f007 ff8b 	bl	8009518 <cos>
 8001602:	ec59 8b10 	vmov	r8, r9, d0
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ff54 	bl	80004b8 <__aeabi_f2d>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	ec43 2b10 	vmov	d0, r2, r3
 8001618:	f007 ffc2 	bl	80095a0 <sin>
 800161c:	ec53 2b10 	vmov	r2, r3, d0
 8001620:	4640      	mov	r0, r8
 8001622:	4649      	mov	r1, r9
 8001624:	f7fe ffa0 	bl	8000568 <__aeabi_dmul>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4690      	mov	r8, r2
 800162e:	4699      	mov	r9, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff2c 	bl	8000494 <__aeabi_i2d>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4640      	mov	r0, r8
 8001642:	4649      	mov	r1, r9
 8001644:	f7fe ff90 	bl	8000568 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4620      	mov	r0, r4
 800164e:	4629      	mov	r1, r5
 8001650:	f7fe fdd4 	bl	80001fc <__adddf3>
 8001654:	4603      	mov	r3, r0
 8001656:	460c      	mov	r4, r1
 8001658:	4618      	mov	r0, r3
 800165a:	4621      	mov	r1, r4
 800165c:	f7ff fa46 	bl	8000aec <__aeabi_d2f>
 8001660:	4603      	mov	r3, r0
 8001662:	60fb      	str	r3, [r7, #12]
	z += cos(point->y_angle) * cos(point->x_angle) * point->z;
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f7fe ff27 	bl	80004b8 <__aeabi_f2d>
 800166a:	4604      	mov	r4, r0
 800166c:	460d      	mov	r5, r1
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff20 	bl	80004b8 <__aeabi_f2d>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	ec43 2b10 	vmov	d0, r2, r3
 8001680:	f007 ff4a 	bl	8009518 <cos>
 8001684:	ec59 8b10 	vmov	r8, r9, d0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff13 	bl	80004b8 <__aeabi_f2d>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	ec43 2b10 	vmov	d0, r2, r3
 800169a:	f007 ff3d 	bl	8009518 <cos>
 800169e:	ec53 2b10 	vmov	r2, r3, d0
 80016a2:	4640      	mov	r0, r8
 80016a4:	4649      	mov	r1, r9
 80016a6:	f7fe ff5f 	bl	8000568 <__aeabi_dmul>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4690      	mov	r8, r2
 80016b0:	4699      	mov	r9, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe feeb 	bl	8000494 <__aeabi_i2d>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4640      	mov	r0, r8
 80016c4:	4649      	mov	r1, r9
 80016c6:	f7fe ff4f 	bl	8000568 <__aeabi_dmul>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4620      	mov	r0, r4
 80016d0:	4629      	mov	r1, r5
 80016d2:	f7fe fd93 	bl	80001fc <__adddf3>
 80016d6:	4603      	mov	r3, r0
 80016d8:	460c      	mov	r4, r1
 80016da:	4618      	mov	r0, r3
 80016dc:	4621      	mov	r1, r4
 80016de:	f7ff fa05 	bl	8000aec <__aeabi_d2f>
 80016e2:	4603      	mov	r3, r0
 80016e4:	60fb      	str	r3, [r7, #12]
	point->x += 100;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	3364      	adds	r3, #100	; 0x64
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	b21a      	sxth	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	801a      	strh	r2, [r3, #0]
	point->y += 100;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3364      	adds	r3, #100	; 0x64
 8001702:	b29b      	uxth	r3, r3
 8001704:	b21a      	sxth	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	805a      	strh	r2, [r3, #2]
	return z;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	ee07 3a90 	vmov	s15, r3
}
 8001710:	eeb0 0a67 	vmov.f32	s0, s15
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800171c <rotate_vertex>:

void rotate_vertex(vertex_3d *vertex, float angle, axis_3d axis){
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	ed87 0a02 	vstr	s0, [r7, #8]
 8001728:	460b      	mov	r3, r1
 800172a:	71fb      	strb	r3, [r7, #7]
	if(axis == X_AXIS){
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d128      	bne.n	8001784 <rotate_vertex+0x68>
		vertex->a.x_angle += angle;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	ed93 7a02 	vldr	s14, [r3, #8]
 8001738:	edd7 7a02 	vldr	s15, [r7, #8]
 800173c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	edc3 7a02 	vstr	s15, [r3, #8]
		vertex->b.x_angle += angle;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	ed93 7a07 	vldr	s14, [r3, #28]
 800174c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	edc3 7a07 	vstr	s15, [r3, #28]
		vertex->c.x_angle += angle;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001760:	edd7 7a02 	vldr	s15, [r7, #8]
 8001764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		vertex->normal_vec.x_angle += angle;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001774:	edd7 7a02 	vldr	s15, [r7, #8]
 8001778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		vertex->a.z_angle += angle;
		vertex->b.z_angle += angle;
		vertex->c.z_angle += angle;
		vertex->normal_vec.z_angle += angle;
	}
}
 8001782:	e053      	b.n	800182c <rotate_vertex+0x110>
	else if(axis == Y_AXIS){
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d128      	bne.n	80017dc <rotate_vertex+0xc0>
		vertex->a.y_angle += angle;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001790:	edd7 7a02 	vldr	s15, [r7, #8]
 8001794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	edc3 7a03 	vstr	s15, [r3, #12]
		vertex->b.y_angle += angle;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	ed93 7a08 	vldr	s14, [r3, #32]
 80017a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80017a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	edc3 7a08 	vstr	s15, [r3, #32]
		vertex->c.y_angle += angle;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80017b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80017bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		vertex->normal_vec.y_angle += angle;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80017cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80017d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
}
 80017da:	e027      	b.n	800182c <rotate_vertex+0x110>
		vertex->a.z_angle += angle;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	ed93 7a04 	vldr	s14, [r3, #16]
 80017e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80017e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	edc3 7a04 	vstr	s15, [r3, #16]
		vertex->b.z_angle += angle;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80017f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80017fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		vertex->c.z_angle += angle;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800180a:	edd7 7a02 	vldr	s15, [r7, #8]
 800180e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		vertex->normal_vec.z_angle += angle;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800181e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <rotate_cube>:

void rotate_cube(float angle, axis_3d axis){
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001842:	4603      	mov	r3, r0
 8001844:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < VERTEX_COUNT; i++){
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e010      	b.n	800186e <rotate_cube+0x36>
		rotate_vertex(&(cube_model[i]), angle, axis);
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	4a09      	ldr	r2, [pc, #36]	; (800187c <rotate_cube+0x44>)
 8001858:	4413      	add	r3, r2
 800185a:	78fa      	ldrb	r2, [r7, #3]
 800185c:	4611      	mov	r1, r2
 800185e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ff5a 	bl	800171c <rotate_vertex>
	for(int i = 0; i < VERTEX_COUNT; i++){
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	3301      	adds	r3, #1
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2b0b      	cmp	r3, #11
 8001872:	ddeb      	ble.n	800184c <rotate_cube+0x14>
	}
}
 8001874:	bf00      	nop
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	200000a4 	.word	0x200000a4

08001880 <set_rotation_cube>:

void set_rotation_cube(float angle_x, float angle_y, float angle_z){
 8001880:	b480      	push	{r7}
 8001882:	b087      	sub	sp, #28
 8001884:	af00      	add	r7, sp, #0
 8001886:	ed87 0a03 	vstr	s0, [r7, #12]
 800188a:	edc7 0a02 	vstr	s1, [r7, #8]
 800188e:	ed87 1a01 	vstr	s2, [r7, #4]
	for(int i = 0; i < VERTEX_COUNT; i++){
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	e07a      	b.n	800198e <set_rotation_cube+0x10e>
		cube_model[i].a.x_angle = angle_x;
 8001898:	4941      	ldr	r1, [pc, #260]	; (80019a0 <set_rotation_cube+0x120>)
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	440b      	add	r3, r1
 80018a6:	3308      	adds	r3, #8
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	601a      	str	r2, [r3, #0]
		cube_model[i].a.y_angle = angle_y;
 80018ac:	493c      	ldr	r1, [pc, #240]	; (80019a0 <set_rotation_cube+0x120>)
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	440b      	add	r3, r1
 80018ba:	330c      	adds	r3, #12
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	601a      	str	r2, [r3, #0]
		cube_model[i].a.z_angle = angle_z;
 80018c0:	4937      	ldr	r1, [pc, #220]	; (80019a0 <set_rotation_cube+0x120>)
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	440b      	add	r3, r1
 80018ce:	3310      	adds	r3, #16
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	601a      	str	r2, [r3, #0]

		cube_model[i].b.x_angle = angle_x;
 80018d4:	4932      	ldr	r1, [pc, #200]	; (80019a0 <set_rotation_cube+0x120>)
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	440b      	add	r3, r1
 80018e2:	331c      	adds	r3, #28
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	601a      	str	r2, [r3, #0]
		cube_model[i].b.y_angle = angle_y;
 80018e8:	492d      	ldr	r1, [pc, #180]	; (80019a0 <set_rotation_cube+0x120>)
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	440b      	add	r3, r1
 80018f6:	3320      	adds	r3, #32
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	601a      	str	r2, [r3, #0]
		cube_model[i].b.z_angle = angle_z;
 80018fc:	4928      	ldr	r1, [pc, #160]	; (80019a0 <set_rotation_cube+0x120>)
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	011b      	lsls	r3, r3, #4
 8001908:	440b      	add	r3, r1
 800190a:	3324      	adds	r3, #36	; 0x24
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	601a      	str	r2, [r3, #0]

		cube_model[i].c.x_angle = angle_x;
 8001910:	4923      	ldr	r1, [pc, #140]	; (80019a0 <set_rotation_cube+0x120>)
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	440b      	add	r3, r1
 800191e:	3330      	adds	r3, #48	; 0x30
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	601a      	str	r2, [r3, #0]
		cube_model[i].c.y_angle = angle_y;
 8001924:	491e      	ldr	r1, [pc, #120]	; (80019a0 <set_rotation_cube+0x120>)
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	440b      	add	r3, r1
 8001932:	3334      	adds	r3, #52	; 0x34
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	601a      	str	r2, [r3, #0]
		cube_model[i].c.z_angle = angle_z;
 8001938:	4919      	ldr	r1, [pc, #100]	; (80019a0 <set_rotation_cube+0x120>)
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	440b      	add	r3, r1
 8001946:	3338      	adds	r3, #56	; 0x38
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	601a      	str	r2, [r3, #0]

		cube_model[i].normal_vec.x_angle = angle_x;
 800194c:	4914      	ldr	r1, [pc, #80]	; (80019a0 <set_rotation_cube+0x120>)
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	440b      	add	r3, r1
 800195a:	3344      	adds	r3, #68	; 0x44
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	601a      	str	r2, [r3, #0]
		cube_model[i].normal_vec.y_angle = angle_y;
 8001960:	490f      	ldr	r1, [pc, #60]	; (80019a0 <set_rotation_cube+0x120>)
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	440b      	add	r3, r1
 800196e:	3348      	adds	r3, #72	; 0x48
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	601a      	str	r2, [r3, #0]
		cube_model[i].normal_vec.z_angle = angle_z;
 8001974:	490a      	ldr	r1, [pc, #40]	; (80019a0 <set_rotation_cube+0x120>)
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	440b      	add	r3, r1
 8001982:	334c      	adds	r3, #76	; 0x4c
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < VERTEX_COUNT; i++){
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3301      	adds	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2b0b      	cmp	r3, #11
 8001992:	dd81      	ble.n	8001898 <set_rotation_cube+0x18>
	}
}
 8001994:	bf00      	nop
 8001996:	371c      	adds	r7, #28
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	200000a4 	.word	0x200000a4

080019a4 <init_cube>:

void init_cube(){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	f5ad 7d70 	sub.w	sp, sp, #960	; 0x3c0
 80019aa:	af00      	add	r7, sp, #0
	vertex_3d vertex_1 =   {{CUBE_SIZE,CUBE_SIZE,-CUBE_SIZE, 0,0, 0},
 80019ac:	4a97      	ldr	r2, [pc, #604]	; (8001c0c <init_cube+0x268>)
 80019ae:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80019b2:	4611      	mov	r1, r2
 80019b4:	2250      	movs	r2, #80	; 0x50
 80019b6:	4618      	mov	r0, r3
 80019b8:	f007 fd9a 	bl	80094f0 <memcpy>
		  		  	  	   {-CUBE_SIZE,CUBE_SIZE,-CUBE_SIZE, 0,0, 0},
		  				   {CUBE_SIZE,-CUBE_SIZE,-CUBE_SIZE, 0,0, 0},
						   {0,0,-10,0,0,0}};
	translate_vertex(&vertex_1, 100, 100, 0);
 80019bc:	f507 705c 	add.w	r0, r7, #880	; 0x370
 80019c0:	2300      	movs	r3, #0
 80019c2:	2264      	movs	r2, #100	; 0x64
 80019c4:	2164      	movs	r1, #100	; 0x64
 80019c6:	f000 f93b 	bl	8001c40 <translate_vertex>

	  vertex_3d vertex_2 = {{-CUBE_SIZE,-CUBE_SIZE,-CUBE_SIZE, 0,0, 0},
 80019ca:	4a91      	ldr	r2, [pc, #580]	; (8001c10 <init_cube+0x26c>)
 80019cc:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80019d0:	4611      	mov	r1, r2
 80019d2:	2250      	movs	r2, #80	; 0x50
 80019d4:	4618      	mov	r0, r3
 80019d6:	f007 fd8b 	bl	80094f0 <memcpy>
			  	  	  	   {-CUBE_SIZE,CUBE_SIZE,-CUBE_SIZE, 0,0, 0},
						   {CUBE_SIZE,-CUBE_SIZE,-CUBE_SIZE, 0,0, 0},
						   {0,0,-10,0,0,0}};
	  translate_vertex(&vertex_2, 100, 100, 0);
 80019da:	f507 7048 	add.w	r0, r7, #800	; 0x320
 80019de:	2300      	movs	r3, #0
 80019e0:	2264      	movs	r2, #100	; 0x64
 80019e2:	2164      	movs	r1, #100	; 0x64
 80019e4:	f000 f92c 	bl	8001c40 <translate_vertex>
//-------------------------------------------------------------
	  vertex_3d vertex_3 = {{-CUBE_SIZE,-CUBE_SIZE,-CUBE_SIZE, 0,0, 0},
 80019e8:	4a8a      	ldr	r2, [pc, #552]	; (8001c14 <init_cube+0x270>)
 80019ea:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80019ee:	4611      	mov	r1, r2
 80019f0:	2250      	movs	r2, #80	; 0x50
 80019f2:	4618      	mov	r0, r3
 80019f4:	f007 fd7c 	bl	80094f0 <memcpy>
	  		  	  	  	   {-CUBE_SIZE,CUBE_SIZE,-CUBE_SIZE, 0,0, 0},
	  					   {-CUBE_SIZE,CUBE_SIZE,CUBE_SIZE, 0,0, 0},
						   {-10,0,0,0,0,0}};
	  translate_vertex(&vertex_3, 100, 100, 0);
 80019f8:	f507 7034 	add.w	r0, r7, #720	; 0x2d0
 80019fc:	2300      	movs	r3, #0
 80019fe:	2264      	movs	r2, #100	; 0x64
 8001a00:	2164      	movs	r1, #100	; 0x64
 8001a02:	f000 f91d 	bl	8001c40 <translate_vertex>

	  vertex_3d vertex_4 = {{-CUBE_SIZE,CUBE_SIZE,CUBE_SIZE, 0,0, 0},
 8001a06:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001a0a:	4a83      	ldr	r2, [pc, #524]	; (8001c18 <init_cube+0x274>)
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	4611      	mov	r1, r2
 8001a10:	2350      	movs	r3, #80	; 0x50
 8001a12:	461a      	mov	r2, r3
 8001a14:	f007 fd6c 	bl	80094f0 <memcpy>
	    		  	  	   {-CUBE_SIZE,-CUBE_SIZE,CUBE_SIZE, 0,0, 0},
	    				   {-CUBE_SIZE,-CUBE_SIZE,-CUBE_SIZE, 0,0, 0},
						   {-10,0,0,0,0,0}};
	  translate_vertex(&vertex_4, 100, 100, 0);
 8001a18:	f507 7020 	add.w	r0, r7, #640	; 0x280
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	2264      	movs	r2, #100	; 0x64
 8001a20:	2164      	movs	r1, #100	; 0x64
 8001a22:	f000 f90d 	bl	8001c40 <translate_vertex>
//-------------------------------------------------------------
  	  vertex_3d vertex_5 = {{-CUBE_SIZE,-CUBE_SIZE,-CUBE_SIZE, 0,0, 0},
 8001a26:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001a2a:	4a7c      	ldr	r2, [pc, #496]	; (8001c1c <init_cube+0x278>)
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	4611      	mov	r1, r2
 8001a30:	2350      	movs	r3, #80	; 0x50
 8001a32:	461a      	mov	r2, r3
 8001a34:	f007 fd5c 	bl	80094f0 <memcpy>
  	  		  	  	  	   {-CUBE_SIZE,-CUBE_SIZE,CUBE_SIZE, 0,0, 0},
  	  					   {CUBE_SIZE,-CUBE_SIZE,-CUBE_SIZE, 0,0, 0},
						   {0,-10,0,0,0,0}};
  	  translate_vertex(&vertex_5, 100, 100, 0);
 8001a38:	f507 700c 	add.w	r0, r7, #560	; 0x230
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	2264      	movs	r2, #100	; 0x64
 8001a40:	2164      	movs	r1, #100	; 0x64
 8001a42:	f000 f8fd 	bl	8001c40 <translate_vertex>

  	  vertex_3d vertex_6 = {{CUBE_SIZE,-CUBE_SIZE,-CUBE_SIZE, 0,0, 0},
 8001a46:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001a4a:	4a75      	ldr	r2, [pc, #468]	; (8001c20 <init_cube+0x27c>)
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	4611      	mov	r1, r2
 8001a50:	2350      	movs	r3, #80	; 0x50
 8001a52:	461a      	mov	r2, r3
 8001a54:	f007 fd4c 	bl	80094f0 <memcpy>
  	    		  	  	   {-CUBE_SIZE,-CUBE_SIZE,CUBE_SIZE, 0,0, 0},
  	    				   {CUBE_SIZE,-CUBE_SIZE,CUBE_SIZE, 0,0, 0},
						   {0,-10,0,0,0,0}};
  	  translate_vertex(&vertex_6, 100, 100, 0);
 8001a58:	f507 70f0 	add.w	r0, r7, #480	; 0x1e0
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	2264      	movs	r2, #100	; 0x64
 8001a60:	2164      	movs	r1, #100	; 0x64
 8001a62:	f000 f8ed 	bl	8001c40 <translate_vertex>
//-------------------------------------------------------------
		vertex_3d vertex_7 = {{CUBE_SIZE,-CUBE_SIZE,-CUBE_SIZE, 0,0, 0},
 8001a66:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001a6a:	4a6e      	ldr	r2, [pc, #440]	; (8001c24 <init_cube+0x280>)
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	4611      	mov	r1, r2
 8001a70:	2350      	movs	r3, #80	; 0x50
 8001a72:	461a      	mov	r2, r3
 8001a74:	f007 fd3c 	bl	80094f0 <memcpy>
							 {CUBE_SIZE,CUBE_SIZE,-CUBE_SIZE, 0,0, 0},
							 {CUBE_SIZE,CUBE_SIZE,CUBE_SIZE, 0,0, 0},
							 {10,0,0,0,0,0}};
		translate_vertex(&vertex_7, 100, 100, 0);
 8001a78:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	2264      	movs	r2, #100	; 0x64
 8001a80:	2164      	movs	r1, #100	; 0x64
 8001a82:	f000 f8dd 	bl	8001c40 <translate_vertex>

		vertex_3d vertex_8 = {{CUBE_SIZE,CUBE_SIZE,CUBE_SIZE, 0,0, 0},
 8001a86:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001a8a:	4a67      	ldr	r2, [pc, #412]	; (8001c28 <init_cube+0x284>)
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	4611      	mov	r1, r2
 8001a90:	2350      	movs	r3, #80	; 0x50
 8001a92:	461a      	mov	r2, r3
 8001a94:	f007 fd2c 	bl	80094f0 <memcpy>
							 {CUBE_SIZE,-CUBE_SIZE,CUBE_SIZE, 0,0, 0},
							 {CUBE_SIZE,-CUBE_SIZE,-CUBE_SIZE, 0,0, 0},
							 {10,0,0,0,0,0}};
		translate_vertex(&vertex_8, 100, 100, 0);
 8001a98:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2264      	movs	r2, #100	; 0x64
 8001aa0:	2164      	movs	r1, #100	; 0x64
 8001aa2:	f000 f8cd 	bl	8001c40 <translate_vertex>
//-------------------------------------------------------------
		vertex_3d vertex_9 = {{-CUBE_SIZE,CUBE_SIZE,-CUBE_SIZE, 0,0, 0},
 8001aa6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001aaa:	4a60      	ldr	r2, [pc, #384]	; (8001c2c <init_cube+0x288>)
 8001aac:	4618      	mov	r0, r3
 8001aae:	4611      	mov	r1, r2
 8001ab0:	2350      	movs	r3, #80	; 0x50
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	f007 fd1c 	bl	80094f0 <memcpy>
							 {CUBE_SIZE,CUBE_SIZE,-CUBE_SIZE, 0,0, 0},
							 {CUBE_SIZE,CUBE_SIZE,CUBE_SIZE, 0,0, 0},
							 {0,10,0,0,0,0}};
		translate_vertex(&vertex_9, 100, 100, 0);
 8001ab8:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8001abc:	2300      	movs	r3, #0
 8001abe:	2264      	movs	r2, #100	; 0x64
 8001ac0:	2164      	movs	r1, #100	; 0x64
 8001ac2:	f000 f8bd 	bl	8001c40 <translate_vertex>

		vertex_3d vertex_10 = {{CUBE_SIZE,CUBE_SIZE,CUBE_SIZE, 0,0, 0},
 8001ac6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001aca:	4a59      	ldr	r2, [pc, #356]	; (8001c30 <init_cube+0x28c>)
 8001acc:	4618      	mov	r0, r3
 8001ace:	4611      	mov	r1, r2
 8001ad0:	2350      	movs	r3, #80	; 0x50
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	f007 fd0c 	bl	80094f0 <memcpy>
							 {-CUBE_SIZE,CUBE_SIZE,CUBE_SIZE, 0,0, 0},
							 {-CUBE_SIZE,CUBE_SIZE,-CUBE_SIZE, 0,0, 0},
							 {0,10,0,0,0,0}};
		translate_vertex(&vertex_10, 100, 100, 0);
 8001ad8:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8001adc:	2300      	movs	r3, #0
 8001ade:	2264      	movs	r2, #100	; 0x64
 8001ae0:	2164      	movs	r1, #100	; 0x64
 8001ae2:	f000 f8ad 	bl	8001c40 <translate_vertex>
//-------------------------------------------------------------
		vertex_3d vertex_11 =   {{CUBE_SIZE,CUBE_SIZE,CUBE_SIZE, 0,0, 0},
 8001ae6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001aea:	4a52      	ldr	r2, [pc, #328]	; (8001c34 <init_cube+0x290>)
 8001aec:	4618      	mov	r0, r3
 8001aee:	4611      	mov	r1, r2
 8001af0:	2350      	movs	r3, #80	; 0x50
 8001af2:	461a      	mov	r2, r3
 8001af4:	f007 fcfc 	bl	80094f0 <memcpy>
			  		  	  	   {-CUBE_SIZE,CUBE_SIZE,CUBE_SIZE, 0,0, 0},
			  				   {CUBE_SIZE,-CUBE_SIZE,CUBE_SIZE, 0,0, 0},
							   {0,0,10,0,0,0}};
		translate_vertex(&vertex_11, 100, 100, 0);
 8001af8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001afc:	2300      	movs	r3, #0
 8001afe:	2264      	movs	r2, #100	; 0x64
 8001b00:	2164      	movs	r1, #100	; 0x64
 8001b02:	f000 f89d 	bl	8001c40 <translate_vertex>

		  vertex_3d vertex_12 = {{-CUBE_SIZE,-CUBE_SIZE,CUBE_SIZE, 0,0, 0},
 8001b06:	463b      	mov	r3, r7
 8001b08:	4a4b      	ldr	r2, [pc, #300]	; (8001c38 <init_cube+0x294>)
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	2350      	movs	r3, #80	; 0x50
 8001b10:	461a      	mov	r2, r3
 8001b12:	f007 fced 	bl	80094f0 <memcpy>
				  	  	  	   {-CUBE_SIZE,CUBE_SIZE,CUBE_SIZE, 0,0, 0},
							   {CUBE_SIZE,-CUBE_SIZE,CUBE_SIZE, 0,0, 0},
							   {0,0,10,0,0,0}};
		  translate_vertex(&vertex_12, 100, 100, 0);
 8001b16:	4638      	mov	r0, r7
 8001b18:	2300      	movs	r3, #0
 8001b1a:	2264      	movs	r2, #100	; 0x64
 8001b1c:	2164      	movs	r1, #100	; 0x64
 8001b1e:	f000 f88f 	bl	8001c40 <translate_vertex>

  	cube_model[0] = vertex_1;
 8001b22:	4b46      	ldr	r3, [pc, #280]	; (8001c3c <init_cube+0x298>)
 8001b24:	4618      	mov	r0, r3
 8001b26:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b2a:	2250      	movs	r2, #80	; 0x50
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f007 fcdf 	bl	80094f0 <memcpy>
  	cube_model[1] = vertex_2;
 8001b32:	4b42      	ldr	r3, [pc, #264]	; (8001c3c <init_cube+0x298>)
 8001b34:	3350      	adds	r3, #80	; 0x50
 8001b36:	f507 7148 	add.w	r1, r7, #800	; 0x320
 8001b3a:	2250      	movs	r2, #80	; 0x50
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f007 fcd7 	bl	80094f0 <memcpy>
  	cube_model[2] = vertex_3;
 8001b42:	4b3e      	ldr	r3, [pc, #248]	; (8001c3c <init_cube+0x298>)
 8001b44:	33a0      	adds	r3, #160	; 0xa0
 8001b46:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 8001b4a:	2250      	movs	r2, #80	; 0x50
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f007 fccf 	bl	80094f0 <memcpy>
  	cube_model[3] = vertex_4;
 8001b52:	4b3a      	ldr	r3, [pc, #232]	; (8001c3c <init_cube+0x298>)
 8001b54:	f507 7220 	add.w	r2, r7, #640	; 0x280
 8001b58:	33f0      	adds	r3, #240	; 0xf0
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	2250      	movs	r2, #80	; 0x50
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f007 fcc6 	bl	80094f0 <memcpy>
  	cube_model[4] = vertex_5;
 8001b64:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <init_cube+0x298>)
 8001b66:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001b6a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001b6e:	4611      	mov	r1, r2
 8001b70:	2250      	movs	r2, #80	; 0x50
 8001b72:	4618      	mov	r0, r3
 8001b74:	f007 fcbc 	bl	80094f0 <memcpy>
  	cube_model[5] = vertex_6;
 8001b78:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <init_cube+0x298>)
 8001b7a:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8001b7e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001b82:	4611      	mov	r1, r2
 8001b84:	2250      	movs	r2, #80	; 0x50
 8001b86:	4618      	mov	r0, r3
 8001b88:	f007 fcb2 	bl	80094f0 <memcpy>
  	cube_model[6] = vertex_7;
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <init_cube+0x298>)
 8001b8e:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8001b92:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001b96:	4611      	mov	r1, r2
 8001b98:	2250      	movs	r2, #80	; 0x50
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f007 fca8 	bl	80094f0 <memcpy>
  	cube_model[7] = vertex_8;
 8001ba0:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <init_cube+0x298>)
 8001ba2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001ba6:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001baa:	4611      	mov	r1, r2
 8001bac:	2250      	movs	r2, #80	; 0x50
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f007 fc9e 	bl	80094f0 <memcpy>
  	cube_model[8] = vertex_9;
 8001bb4:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <init_cube+0x298>)
 8001bb6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001bba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	2250      	movs	r2, #80	; 0x50
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f007 fc94 	bl	80094f0 <memcpy>
  	cube_model[9] = vertex_10;
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <init_cube+0x298>)
 8001bca:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001bce:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	2250      	movs	r2, #80	; 0x50
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f007 fc8a 	bl	80094f0 <memcpy>
  	cube_model[10] = vertex_11;
 8001bdc:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <init_cube+0x298>)
 8001bde:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001be2:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8001be6:	4611      	mov	r1, r2
 8001be8:	2250      	movs	r2, #80	; 0x50
 8001bea:	4618      	mov	r0, r3
 8001bec:	f007 fc80 	bl	80094f0 <memcpy>
  	cube_model[11] = vertex_12;
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <init_cube+0x298>)
 8001bf2:	463a      	mov	r2, r7
 8001bf4:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	2250      	movs	r2, #80	; 0x50
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f007 fc77 	bl	80094f0 <memcpy>
}
 8001c02:	bf00      	nop
 8001c04:	f507 7770 	add.w	r7, r7, #960	; 0x3c0
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	0800a5e0 	.word	0x0800a5e0
 8001c10:	0800a630 	.word	0x0800a630
 8001c14:	0800a680 	.word	0x0800a680
 8001c18:	0800a6d0 	.word	0x0800a6d0
 8001c1c:	0800a720 	.word	0x0800a720
 8001c20:	0800a770 	.word	0x0800a770
 8001c24:	0800a7c0 	.word	0x0800a7c0
 8001c28:	0800a810 	.word	0x0800a810
 8001c2c:	0800a860 	.word	0x0800a860
 8001c30:	0800a8b0 	.word	0x0800a8b0
 8001c34:	0800a900 	.word	0x0800a900
 8001c38:	0800a950 	.word	0x0800a950
 8001c3c:	200000a4 	.word	0x200000a4

08001c40 <translate_vertex>:

void translate_vertex(vertex_3d *vertex, int16_t dx, int16_t dy, int16_t dz){
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	4608      	mov	r0, r1
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4603      	mov	r3, r0
 8001c50:	817b      	strh	r3, [r7, #10]
 8001c52:	460b      	mov	r3, r1
 8001c54:	813b      	strh	r3, [r7, #8]
 8001c56:	4613      	mov	r3, r2
 8001c58:	80fb      	strh	r3, [r7, #6]
	vertex->a.x += dx;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	897b      	ldrh	r3, [r7, #10]
 8001c64:	4413      	add	r3, r2
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	b21a      	sxth	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	801a      	strh	r2, [r3, #0]
	vertex->a.y += dy;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	893b      	ldrh	r3, [r7, #8]
 8001c78:	4413      	add	r3, r2
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	b21a      	sxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	805a      	strh	r2, [r3, #2]
	vertex->a.z += dz;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	b21a      	sxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	809a      	strh	r2, [r3, #4]

	vertex->b.x += dx;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	897b      	ldrh	r3, [r7, #10]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	b21a      	sxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	829a      	strh	r2, [r3, #20]
	vertex->b.y += dy;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	893b      	ldrh	r3, [r7, #8]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	b21a      	sxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	82da      	strh	r2, [r3, #22]
	vertex->b.z += dz;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	4413      	add	r3, r2
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	b21a      	sxth	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	831a      	strh	r2, [r3, #24]

	vertex->c.x += dx;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	897b      	ldrh	r3, [r7, #10]
 8001cdc:	4413      	add	r3, r2
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	b21a      	sxth	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	851a      	strh	r2, [r3, #40]	; 0x28
	vertex->c.y += dy;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	893b      	ldrh	r3, [r7, #8]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b21a      	sxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
	vertex->c.z += dz;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	4413      	add	r3, r2
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	b21a      	sxth	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	859a      	strh	r2, [r3, #44]	; 0x2c

	vertex->normal_vec.x += dx;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	897b      	ldrh	r3, [r7, #10]
 8001d18:	4413      	add	r3, r2
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	b21a      	sxth	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	879a      	strh	r2, [r3, #60]	; 0x3c
	vertex->normal_vec.y += dy;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	893b      	ldrh	r3, [r7, #8]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	87da      	strh	r2, [r3, #62]	; 0x3e
	vertex->normal_vec.z += dz;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	4413      	add	r3, r2
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	b21a      	sxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <draw_demo_page>:
#include "draw.h"

uint16_t color_array[] = {0x001f, 0x0be4, 0xeca0, 0xe816, 0xf880, 0x3475};

void draw_demo_page(uint16_t *canvas){
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 200 * 200; i ++){
 8001d60:	2300      	movs	r3, #0
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	e009      	b.n	8001d7a <draw_demo_page+0x22>
		canvas[i] = 0xffff;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d72:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < 200 * 200; i ++){
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	3301      	adds	r3, #1
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001d80:	4293      	cmp	r3, r2
 8001d82:	ddf0      	ble.n	8001d66 <draw_demo_page+0xe>
	}
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <draw_vertex>:
			DRAW_PIXEL_AT(canvas,m_x,m_y,0xe8bb);
		}
	}
}

void draw_vertex(uint16_t *canvas, vertex_3d *vertex, uint16_t color){
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b08d      	sub	sp, #52	; 0x34
 8001d94:	af02      	add	r7, sp, #8
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	80fb      	strh	r3, [r7, #6]
	proxy_point_3d proxy_a = apply_rotation_to_point(&(vertex->a));
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	f107 0320 	add.w	r3, r7, #32
 8001da4:	4611      	mov	r1, r2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff f870 	bl	8000e8c <apply_rotation_to_point>
	proxy_point_3d proxy_b = apply_rotation_to_point(&(vertex->b));
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f103 0214 	add.w	r2, r3, #20
 8001db2:	f107 0318 	add.w	r3, r7, #24
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff f867 	bl	8000e8c <apply_rotation_to_point>
	proxy_point_3d proxy_c = apply_rotation_to_point(&(vertex->c));
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff f85e 	bl	8000e8c <apply_rotation_to_point>

	draw_line(canvas, proxy_a.x, proxy_a.y, proxy_b.x, proxy_b.y, color);
 8001dd0:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 8001dd4:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
 8001dd8:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001ddc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001de0:	88fa      	ldrh	r2, [r7, #6]
 8001de2:	9201      	str	r2, [sp, #4]
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	4623      	mov	r3, r4
 8001de8:	4602      	mov	r2, r0
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 f824 	bl	8001e38 <draw_line>
	draw_line(canvas, proxy_a.x, proxy_a.y, proxy_c.x, proxy_c.y, color);
 8001df0:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 8001df4:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
 8001df8:	f9b7 4010 	ldrsh.w	r4, [r7, #16]
 8001dfc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e00:	88fa      	ldrh	r2, [r7, #6]
 8001e02:	9201      	str	r2, [sp, #4]
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	4623      	mov	r3, r4
 8001e08:	4602      	mov	r2, r0
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 f814 	bl	8001e38 <draw_line>
	draw_line(canvas, proxy_c.x, proxy_c.y, proxy_b.x, proxy_b.y, color);
 8001e10:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8001e14:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8001e18:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001e1c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e20:	88fa      	ldrh	r2, [r7, #6]
 8001e22:	9201      	str	r2, [sp, #4]
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	4623      	mov	r3, r4
 8001e28:	4602      	mov	r2, r0
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 f804 	bl	8001e38 <draw_line>
}
 8001e30:	bf00      	nop
 8001e32:	372c      	adds	r7, #44	; 0x2c
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd90      	pop	{r4, r7, pc}

08001e38 <draw_line>:

void draw_line(uint16_t *canvas, int16_t ax, int16_t ay, int16_t bx, int16_t by, uint16_t color){
 8001e38:	b480      	push	{r7}
 8001e3a:	b08d      	sub	sp, #52	; 0x34
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	4608      	mov	r0, r1
 8001e42:	4611      	mov	r1, r2
 8001e44:	461a      	mov	r2, r3
 8001e46:	4603      	mov	r3, r0
 8001e48:	817b      	strh	r3, [r7, #10]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	813b      	strh	r3, [r7, #8]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	80fb      	strh	r3, [r7, #6]
	if(abs(ax - bx) > abs(ay - by)){
 8001e52:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001e60:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001e64:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001e68:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001e6c:	1acb      	subs	r3, r1, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	bfb8      	it	lt
 8001e72:	425b      	neglt	r3, r3
 8001e74:	429a      	cmp	r2, r3
 8001e76:	dd55      	ble.n	8001f24 <draw_line+0xec>
		int8_t dx = ax < bx ? 1 : -1;
 8001e78:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	da01      	bge.n	8001e88 <draw_line+0x50>
 8001e84:	2301      	movs	r3, #1
 8001e86:	e001      	b.n	8001e8c <draw_line+0x54>
 8001e88:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8c:	76fb      	strb	r3, [r7, #27]
		float y = ay;
 8001e8e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e9a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		float dy = (by - ay) / (float) abs(bx - ax);
 8001e9e:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 8001ea2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	ee07 3a90 	vmov	s15, r3
 8001eac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001eb0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001eb4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	bfb8      	it	lt
 8001ebe:	425b      	neglt	r3, r3
 8001ec0:	ee07 3a90 	vmov	s15, r3
 8001ec4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ecc:	edc7 7a05 	vstr	s15, [r7, #20]

		for(uint8_t x = ax; x != bx; x += dx){
 8001ed0:	897b      	ldrh	r3, [r7, #10]
 8001ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001ed6:	e01e      	b.n	8001f16 <draw_line+0xde>
			DRAW_PIXEL_AT(canvas,x,(int)y,color);
 8001ed8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001edc:	22c8      	movs	r2, #200	; 0xc8
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ee6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eea:	ee17 2a90 	vmov	r2, s15
 8001eee:	4413      	add	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001ef8:	801a      	strh	r2, [r3, #0]
			y += dy;
 8001efa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001efe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f06:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		for(uint8_t x = ax; x != bx; x += dx){
 8001f0a:	7efa      	ldrb	r2, [r7, #27]
 8001f0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f10:	4413      	add	r3, r2
 8001f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001f16:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001f1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d1da      	bne.n	8001ed8 <draw_line+0xa0>
		for(uint8_t y = ay; y != by; y += dy){
			DRAW_PIXEL_AT(canvas,(int)x,y,color);
			x += dx;
		}
	}
}
 8001f22:	e056      	b.n	8001fd2 <draw_line+0x19a>
		int8_t dy = ay < by ? 1 : -1;
 8001f24:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001f28:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	da01      	bge.n	8001f34 <draw_line+0xfc>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e001      	b.n	8001f38 <draw_line+0x100>
 8001f34:	f04f 33ff 	mov.w	r3, #4294967295
 8001f38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		float x = ax;
 8001f3c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f40:	ee07 3a90 	vmov	s15, r3
 8001f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f48:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float dx = (bx - ax) / (float) abs(by - ay);
 8001f4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f5e:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 8001f62:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bfb8      	it	lt
 8001f6c:	425b      	neglt	r3, r3
 8001f6e:	ee07 3a90 	vmov	s15, r3
 8001f72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f7a:	edc7 7a07 	vstr	s15, [r7, #28]
		for(uint8_t y = ay; y != by; y += dy){
 8001f7e:	893b      	ldrh	r3, [r7, #8]
 8001f80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001f84:	e01f      	b.n	8001fc6 <draw_line+0x18e>
			DRAW_PIXEL_AT(canvas,(int)x,y,color);
 8001f86:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f8e:	ee17 2a90 	vmov	r2, s15
 8001f92:	23c8      	movs	r3, #200	; 0xc8
 8001f94:	fb03 f202 	mul.w	r2, r3, r2
 8001f98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f9c:	4413      	add	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001fa6:	801a      	strh	r2, [r3, #0]
			x += dx;
 8001fa8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001fac:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		for(uint8_t y = ay; y != by; y += dy){
 8001fb8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001fbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001fc6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001fca:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d1d9      	bne.n	8001f86 <draw_line+0x14e>
}
 8001fd2:	bf00      	nop
 8001fd4:	3734      	adds	r7, #52	; 0x34
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <draw_cube>:

void draw_cube(uint16_t *canvas){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < VERTEX_COUNT; i++){
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	e033      	b.n	8002056 <draw_cube+0x76>
		float normal_z = apply_rotation_to_point_only_z(&(cube_model[i].normal_vec));
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	3338      	adds	r3, #56	; 0x38
 8001ffa:	4a1a      	ldr	r2, [pc, #104]	; (8002064 <draw_cube+0x84>)
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3304      	adds	r3, #4
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fab3 	bl	800156c <apply_rotation_to_point_only_z>
 8002006:	ed87 0a02 	vstr	s0, [r7, #8]
		if(normal_z > 0) continue;
 800200a:	edd7 7a02 	vldr	s15, [r7, #8]
 800200e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002016:	dc1a      	bgt.n	800204e <draw_cube+0x6e>
		draw_vertex(canvas, &(cube_model[i]), color_array[i%6]);
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	4a10      	ldr	r2, [pc, #64]	; (8002064 <draw_cube+0x84>)
 8002024:	1898      	adds	r0, r3, r2
 8002026:	68f9      	ldr	r1, [r7, #12]
 8002028:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <draw_cube+0x88>)
 800202a:	fb83 3201 	smull	r3, r2, r3, r1
 800202e:	17cb      	asrs	r3, r1, #31
 8002030:	1ad2      	subs	r2, r2, r3
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	1aca      	subs	r2, r1, r3
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <draw_cube+0x8c>)
 800203e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002042:	461a      	mov	r2, r3
 8002044:	4601      	mov	r1, r0
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff fea2 	bl	8001d90 <draw_vertex>
 800204c:	e000      	b.n	8002050 <draw_cube+0x70>
		if(normal_z > 0) continue;
 800204e:	bf00      	nop
	for(int i = 0; i < VERTEX_COUNT; i++){
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3301      	adds	r3, #1
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b0b      	cmp	r3, #11
 800205a:	ddc8      	ble.n	8001fee <draw_cube+0xe>
	}
}
 800205c:	bf00      	nop
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	200000a4 	.word	0x200000a4
 8002068:	2aaaaaab 	.word	0x2aaaaaab
 800206c:	20000000 	.word	0x20000000

08002070 <L3GD20_init>:
// Inicjalizacja modułu żyroskopu do odczytu
/*
 * SPI_HandleTypeDef *m_hspi_handle port - układ SPI który będzie wykorzystywany do komunikacji.
 * L3GD20 *L3GD20_data - struktura przechowuąca odczytane wartości  z żyroskopu
 */
int L3GD20_init(SPI_HandleTypeDef *m_hspi_handle, L3GD20 *L3GD20_data){
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
	L3GD20_data->hspi_handle = m_hspi_handle;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8002080:	2201      	movs	r2, #1
 8002082:	2102      	movs	r1, #2
 8002084:	4812      	ldr	r0, [pc, #72]	; (80020d0 <L3GD20_init+0x60>)
 8002086:	f002 fb73 	bl	8004770 <HAL_GPIO_WritePin>

	if(L3GD20_recive(L3GD20_WHO_AM_I, L3GD20_data) != 212)
 800208a:	6839      	ldr	r1, [r7, #0]
 800208c:	200f      	movs	r0, #15
 800208e:	f000 f847 	bl	8002120 <L3GD20_recive>
 8002092:	4603      	mov	r3, r0
 8002094:	2bd4      	cmp	r3, #212	; 0xd4
 8002096:	d001      	beq.n	800209c <L3GD20_init+0x2c>
	{
		// Jeśli identyfikator urządzenia nie odpowiada żyroskopowi
		return 0;
 8002098:	2300      	movs	r3, #0
 800209a:	e014      	b.n	80020c6 <L3GD20_init+0x56>
	}

	L3GD20_send(L3GD20_CTRL_REG1, 0x0F, L3GD20_data); // aktywuje odczyty z żyroskopu
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	210f      	movs	r1, #15
 80020a0:	2020      	movs	r0, #32
 80020a2:	f000 f817 	bl	80020d4 <L3GD20_send>
	L3GD20_send(L3GD20_CTRL_REG4, 0x20, L3GD20_data); // Okreslenie skali 500 dps
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	2120      	movs	r1, #32
 80020aa:	2023      	movs	r0, #35	; 0x23
 80020ac:	f000 f812 	bl	80020d4 <L3GD20_send>
	L3GD20_send(L3GD20_CTRL_REG2, 0x00, L3GD20_data); // ustawia filtr górnoprzepustowy (Normal mode)
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	2100      	movs	r1, #0
 80020b4:	2021      	movs	r0, #33	; 0x21
 80020b6:	f000 f80d 	bl	80020d4 <L3GD20_send>
	L3GD20_send(L3GD20_CTRL_REG5, 0x10, L3GD20_data); // włącza filtr górnoprzepustowy (enable)
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	2110      	movs	r1, #16
 80020be:	2024      	movs	r0, #36	; 0x24
 80020c0:	f000 f808 	bl	80020d4 <L3GD20_send>
	return 1;
 80020c4:	2301      	movs	r3, #1
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40020800 	.word	0x40020800

080020d4 <L3GD20_send>:
 * L3GD20 *L3GD20_data - struktura przechowuąca odczytane wartości z żyroskopu
 * uint8_t address - adres rejestru
 * uint8_t data - dane do przesłania (1 bajt)
 */
void L3GD20_send(uint8_t address, uint8_t data, L3GD20 *L3GD20_data)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	603a      	str	r2, [r7, #0]
 80020de:	71fb      	strb	r3, [r7, #7]
 80020e0:	460b      	mov	r3, r1
 80020e2:	71bb      	strb	r3, [r7, #6]
	uint8_t transmit_data[2];
	transmit_data[0] = address;
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	733b      	strb	r3, [r7, #12]
	transmit_data[1] = data;
 80020e8:	79bb      	ldrb	r3, [r7, #6]
 80020ea:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2102      	movs	r1, #2
 80020f0:	480a      	ldr	r0, [pc, #40]	; (800211c <L3GD20_send+0x48>)
 80020f2:	f002 fb3d 	bl	8004770 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(L3GD20_data->hspi_handle, transmit_data, 2, L3GD20_SPI_WAIT_TIME);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	f107 010c 	add.w	r1, r7, #12
 80020fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002102:	2202      	movs	r2, #2
 8002104:	f005 f9e2 	bl	80074cc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8002108:	2201      	movs	r2, #1
 800210a:	2102      	movs	r1, #2
 800210c:	4803      	ldr	r0, [pc, #12]	; (800211c <L3GD20_send+0x48>)
 800210e:	f002 fb2f 	bl	8004770 <HAL_GPIO_WritePin>
}
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40020800 	.word	0x40020800

08002120 <L3GD20_recive>:
/*
 * L3GD20 *L3GD20_data - struktura przechowuąca odczytane wartości z żyroskopu
 * uint8_t address - adres rejestru
 */
uint8_t L3GD20_recive(uint8_t addres, L3GD20 *L3GD20_data)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af02      	add	r7, sp, #8
 8002126:	4603      	mov	r3, r0
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	71fb      	strb	r3, [r7, #7]
	uint8_t transmit_data[2];
	uint8_t recive_data[2];
	transmit_data[0] = addres | 0x80;
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002132:	b2db      	uxtb	r3, r3
 8002134:	733b      	strb	r3, [r7, #12]
	transmit_data[1] = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	737b      	strb	r3, [r7, #13]
	recive_data[1] = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	727b      	strb	r3, [r7, #9]
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 800213e:	2200      	movs	r2, #0
 8002140:	2102      	movs	r1, #2
 8002142:	480c      	ldr	r0, [pc, #48]	; (8002174 <L3GD20_recive+0x54>)
 8002144:	f002 fb14 	bl	8004770 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(L3GD20_data->hspi_handle, transmit_data, recive_data, 2, L3GD20_SPI_WAIT_TIME);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	f107 0208 	add.w	r2, r7, #8
 8002150:	f107 010c 	add.w	r1, r7, #12
 8002154:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2302      	movs	r3, #2
 800215c:	f005 faea 	bl	8007734 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8002160:	2201      	movs	r2, #1
 8002162:	2102      	movs	r1, #2
 8002164:	4803      	ldr	r0, [pc, #12]	; (8002174 <L3GD20_recive+0x54>)
 8002166:	f002 fb03 	bl	8004770 <HAL_GPIO_WritePin>
	return recive_data[1];
 800216a:	7a7b      	ldrb	r3, [r7, #9]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40020800 	.word	0x40020800

08002178 <L3GD20_readRawData>:

// Odczytuje z żyroskopu nieprzetworzone dane o prędkościaach obrotowych wokół osi XYZ
// i zapisuje je do struktury L3GD20 *L3GD20_data
void L3GD20_readRawData(L3GD20 *L3GD20_data)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	L3GD20_data->X_raw = L3GD20_recive(L3GD20_OUT_X_L, L3GD20_data);		//młodszy bajt
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	2028      	movs	r0, #40	; 0x28
 8002184:	f7ff ffcc 	bl	8002120 <L3GD20_recive>
 8002188:	4603      	mov	r3, r0
 800218a:	b21a      	sxth	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	809a      	strh	r2, [r3, #4]
	L3GD20_data->X_raw |= L3GD20_recive(L3GD20_OUT_X_H, L3GD20_data) << 8;	//starszy bajt
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	2029      	movs	r0, #41	; 0x29
 8002194:	f7ff ffc4 	bl	8002120 <L3GD20_recive>
 8002198:	4603      	mov	r3, r0
 800219a:	0219      	lsls	r1, r3, #8
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80021a2:	b20b      	sxth	r3, r1
 80021a4:	4313      	orrs	r3, r2
 80021a6:	b21a      	sxth	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	809a      	strh	r2, [r3, #4]

	L3GD20_data->Y_raw = L3GD20_recive(L3GD20_OUT_Y_L, L3GD20_data);
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	202a      	movs	r0, #42	; 0x2a
 80021b0:	f7ff ffb6 	bl	8002120 <L3GD20_recive>
 80021b4:	4603      	mov	r3, r0
 80021b6:	b21a      	sxth	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	80da      	strh	r2, [r3, #6]
	L3GD20_data->Y_raw |= L3GD20_recive(L3GD20_OUT_Y_H, L3GD20_data) << 8;
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	202b      	movs	r0, #43	; 0x2b
 80021c0:	f7ff ffae 	bl	8002120 <L3GD20_recive>
 80021c4:	4603      	mov	r3, r0
 80021c6:	0219      	lsls	r1, r3, #8
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80021ce:	b20b      	sxth	r3, r1
 80021d0:	4313      	orrs	r3, r2
 80021d2:	b21a      	sxth	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	80da      	strh	r2, [r3, #6]

	L3GD20_data->Z_raw = L3GD20_recive(L3GD20_OUT_Z_L, L3GD20_data);
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	202c      	movs	r0, #44	; 0x2c
 80021dc:	f7ff ffa0 	bl	8002120 <L3GD20_recive>
 80021e0:	4603      	mov	r3, r0
 80021e2:	b21a      	sxth	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	811a      	strh	r2, [r3, #8]
	L3GD20_data->Z_raw |= L3GD20_recive(L3GD20_OUT_Z_H, L3GD20_data) << 8;
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	202d      	movs	r0, #45	; 0x2d
 80021ec:	f7ff ff98 	bl	8002120 <L3GD20_recive>
 80021f0:	4603      	mov	r3, r0
 80021f2:	0219      	lsls	r1, r3, #8
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80021fa:	b20b      	sxth	r3, r1
 80021fc:	4313      	orrs	r3, r2
 80021fe:	b21a      	sxth	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	811a      	strh	r2, [r3, #8]
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	0000      	movs	r0, r0
	...

08002210 <L3GD20_convertRawData>:

// Konwertuje nieprzetworzone dane o prędkości obrotowej na stopnie na seukndę
void L3GD20_convertRawData(struct L3GD20 *L3GD20_data)
{
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	L3GD20_data->X_val = (L3GD20_data->X_raw + L3GD20_X_OFFSET) * SENSITIVITY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800221e:	3b1e      	subs	r3, #30
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe f937 	bl	8000494 <__aeabi_i2d>
 8002226:	a31e      	add	r3, pc, #120	; (adr r3, 80022a0 <L3GD20_convertRawData+0x90>)
 8002228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222c:	f7fe f99c 	bl	8000568 <__aeabi_dmul>
 8002230:	4603      	mov	r3, r0
 8002232:	460c      	mov	r4, r1
 8002234:	4618      	mov	r0, r3
 8002236:	4621      	mov	r1, r4
 8002238:	f7fe fc58 	bl	8000aec <__aeabi_d2f>
 800223c:	4602      	mov	r2, r0
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	60da      	str	r2, [r3, #12]
	L3GD20_data->Y_val = (L3GD20_data->Y_raw + L3GD20_Y_OFFSET) * SENSITIVITY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002248:	3b05      	subs	r3, #5
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe f922 	bl	8000494 <__aeabi_i2d>
 8002250:	a313      	add	r3, pc, #76	; (adr r3, 80022a0 <L3GD20_convertRawData+0x90>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fe f987 	bl	8000568 <__aeabi_dmul>
 800225a:	4603      	mov	r3, r0
 800225c:	460c      	mov	r4, r1
 800225e:	4618      	mov	r0, r3
 8002260:	4621      	mov	r1, r4
 8002262:	f7fe fc43 	bl	8000aec <__aeabi_d2f>
 8002266:	4602      	mov	r2, r0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	611a      	str	r2, [r3, #16]
	L3GD20_data->Z_val = (L3GD20_data->Z_raw + L3GD20_Z_OFFSET) * SENSITIVITY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002272:	330d      	adds	r3, #13
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe f90d 	bl	8000494 <__aeabi_i2d>
 800227a:	a309      	add	r3, pc, #36	; (adr r3, 80022a0 <L3GD20_convertRawData+0x90>)
 800227c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002280:	f7fe f972 	bl	8000568 <__aeabi_dmul>
 8002284:	4603      	mov	r3, r0
 8002286:	460c      	mov	r4, r1
 8002288:	4618      	mov	r0, r3
 800228a:	4621      	mov	r1, r4
 800228c:	f7fe fc2e 	bl	8000aec <__aeabi_d2f>
 8002290:	4602      	mov	r2, r0
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	615a      	str	r2, [r3, #20]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	bd90      	pop	{r4, r7, pc}
 800229e:	bf00      	nop
 80022a0:	70a3d70a 	.word	0x70a3d70a
 80022a4:	3fb70a3d 	.word	0x3fb70a3d

080022a8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80022ac:	f000 fecc 	bl	8003048 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80022b0:	20ca      	movs	r0, #202	; 0xca
 80022b2:	f000 f943 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80022b6:	20c3      	movs	r0, #195	; 0xc3
 80022b8:	f000 f94d 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80022bc:	2008      	movs	r0, #8
 80022be:	f000 f94a 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80022c2:	2050      	movs	r0, #80	; 0x50
 80022c4:	f000 f947 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80022c8:	20cf      	movs	r0, #207	; 0xcf
 80022ca:	f000 f937 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80022ce:	2000      	movs	r0, #0
 80022d0:	f000 f941 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80022d4:	20c1      	movs	r0, #193	; 0xc1
 80022d6:	f000 f93e 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80022da:	2030      	movs	r0, #48	; 0x30
 80022dc:	f000 f93b 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80022e0:	20ed      	movs	r0, #237	; 0xed
 80022e2:	f000 f92b 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80022e6:	2064      	movs	r0, #100	; 0x64
 80022e8:	f000 f935 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80022ec:	2003      	movs	r0, #3
 80022ee:	f000 f932 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80022f2:	2012      	movs	r0, #18
 80022f4:	f000 f92f 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80022f8:	2081      	movs	r0, #129	; 0x81
 80022fa:	f000 f92c 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80022fe:	20e8      	movs	r0, #232	; 0xe8
 8002300:	f000 f91c 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002304:	2085      	movs	r0, #133	; 0x85
 8002306:	f000 f926 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800230a:	2000      	movs	r0, #0
 800230c:	f000 f923 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002310:	2078      	movs	r0, #120	; 0x78
 8002312:	f000 f920 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002316:	20cb      	movs	r0, #203	; 0xcb
 8002318:	f000 f910 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800231c:	2039      	movs	r0, #57	; 0x39
 800231e:	f000 f91a 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002322:	202c      	movs	r0, #44	; 0x2c
 8002324:	f000 f917 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002328:	2000      	movs	r0, #0
 800232a:	f000 f914 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800232e:	2034      	movs	r0, #52	; 0x34
 8002330:	f000 f911 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002334:	2002      	movs	r0, #2
 8002336:	f000 f90e 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800233a:	20f7      	movs	r0, #247	; 0xf7
 800233c:	f000 f8fe 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002340:	2020      	movs	r0, #32
 8002342:	f000 f908 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002346:	20ea      	movs	r0, #234	; 0xea
 8002348:	f000 f8f8 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800234c:	2000      	movs	r0, #0
 800234e:	f000 f902 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002352:	2000      	movs	r0, #0
 8002354:	f000 f8ff 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002358:	20b1      	movs	r0, #177	; 0xb1
 800235a:	f000 f8ef 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800235e:	2000      	movs	r0, #0
 8002360:	f000 f8f9 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002364:	201b      	movs	r0, #27
 8002366:	f000 f8f6 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800236a:	20b6      	movs	r0, #182	; 0xb6
 800236c:	f000 f8e6 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002370:	200a      	movs	r0, #10
 8002372:	f000 f8f0 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002376:	20a2      	movs	r0, #162	; 0xa2
 8002378:	f000 f8ed 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800237c:	20c0      	movs	r0, #192	; 0xc0
 800237e:	f000 f8dd 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002382:	2010      	movs	r0, #16
 8002384:	f000 f8e7 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002388:	20c1      	movs	r0, #193	; 0xc1
 800238a:	f000 f8d7 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800238e:	2010      	movs	r0, #16
 8002390:	f000 f8e1 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002394:	20c5      	movs	r0, #197	; 0xc5
 8002396:	f000 f8d1 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800239a:	2045      	movs	r0, #69	; 0x45
 800239c:	f000 f8db 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80023a0:	2015      	movs	r0, #21
 80023a2:	f000 f8d8 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80023a6:	20c7      	movs	r0, #199	; 0xc7
 80023a8:	f000 f8c8 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80023ac:	2090      	movs	r0, #144	; 0x90
 80023ae:	f000 f8d2 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80023b2:	2036      	movs	r0, #54	; 0x36
 80023b4:	f000 f8c2 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80023b8:	20c8      	movs	r0, #200	; 0xc8
 80023ba:	f000 f8cc 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80023be:	20f2      	movs	r0, #242	; 0xf2
 80023c0:	f000 f8bc 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80023c4:	2000      	movs	r0, #0
 80023c6:	f000 f8c6 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80023ca:	20b0      	movs	r0, #176	; 0xb0
 80023cc:	f000 f8b6 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80023d0:	20c2      	movs	r0, #194	; 0xc2
 80023d2:	f000 f8c0 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80023d6:	20b6      	movs	r0, #182	; 0xb6
 80023d8:	f000 f8b0 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80023dc:	200a      	movs	r0, #10
 80023de:	f000 f8ba 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80023e2:	20a7      	movs	r0, #167	; 0xa7
 80023e4:	f000 f8b7 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80023e8:	2027      	movs	r0, #39	; 0x27
 80023ea:	f000 f8b4 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80023ee:	2004      	movs	r0, #4
 80023f0:	f000 f8b1 	bl	8002556 <ili9341_WriteData>

  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80023f4:	202a      	movs	r0, #42	; 0x2a
 80023f6:	f000 f8a1 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80023fa:	2000      	movs	r0, #0
 80023fc:	f000 f8ab 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002400:	2000      	movs	r0, #0
 8002402:	f000 f8a8 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002406:	2000      	movs	r0, #0
 8002408:	f000 f8a5 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800240c:	20ef      	movs	r0, #239	; 0xef
 800240e:	f000 f8a2 	bl	8002556 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002412:	202b      	movs	r0, #43	; 0x2b
 8002414:	f000 f892 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002418:	2000      	movs	r0, #0
 800241a:	f000 f89c 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800241e:	2000      	movs	r0, #0
 8002420:	f000 f899 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002424:	2001      	movs	r0, #1
 8002426:	f000 f896 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800242a:	203f      	movs	r0, #63	; 0x3f
 800242c:	f000 f893 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002430:	20f6      	movs	r0, #246	; 0xf6
 8002432:	f000 f883 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002436:	2001      	movs	r0, #1
 8002438:	f000 f88d 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800243c:	2000      	movs	r0, #0
 800243e:	f000 f88a 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002442:	2006      	movs	r0, #6
 8002444:	f000 f887 	bl	8002556 <ili9341_WriteData>

  ili9341_WriteReg(LCD_GRAM);
 8002448:	202c      	movs	r0, #44	; 0x2c
 800244a:	f000 f877 	bl	800253c <ili9341_WriteReg>
  LCD_Delay(200);
 800244e:	20c8      	movs	r0, #200	; 0xc8
 8002450:	f000 feb6 	bl	80031c0 <LCD_Delay>

  ili9341_WriteReg(LCD_GAMMA);
 8002454:	2026      	movs	r0, #38	; 0x26
 8002456:	f000 f871 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800245a:	2001      	movs	r0, #1
 800245c:	f000 f87b 	bl	8002556 <ili9341_WriteData>

  ili9341_WriteReg(LCD_PGAMMA);
 8002460:	20e0      	movs	r0, #224	; 0xe0
 8002462:	f000 f86b 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002466:	200f      	movs	r0, #15
 8002468:	f000 f875 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800246c:	2029      	movs	r0, #41	; 0x29
 800246e:	f000 f872 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002472:	2024      	movs	r0, #36	; 0x24
 8002474:	f000 f86f 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002478:	200c      	movs	r0, #12
 800247a:	f000 f86c 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800247e:	200e      	movs	r0, #14
 8002480:	f000 f869 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002484:	2009      	movs	r0, #9
 8002486:	f000 f866 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800248a:	204e      	movs	r0, #78	; 0x4e
 800248c:	f000 f863 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002490:	2078      	movs	r0, #120	; 0x78
 8002492:	f000 f860 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002496:	203c      	movs	r0, #60	; 0x3c
 8002498:	f000 f85d 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800249c:	2009      	movs	r0, #9
 800249e:	f000 f85a 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80024a2:	2013      	movs	r0, #19
 80024a4:	f000 f857 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80024a8:	2005      	movs	r0, #5
 80024aa:	f000 f854 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80024ae:	2017      	movs	r0, #23
 80024b0:	f000 f851 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80024b4:	2011      	movs	r0, #17
 80024b6:	f000 f84e 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f000 f84b 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80024c0:	20e1      	movs	r0, #225	; 0xe1
 80024c2:	f000 f83b 	bl	800253c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80024c6:	2000      	movs	r0, #0
 80024c8:	f000 f845 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80024cc:	2016      	movs	r0, #22
 80024ce:	f000 f842 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80024d2:	201b      	movs	r0, #27
 80024d4:	f000 f83f 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80024d8:	2004      	movs	r0, #4
 80024da:	f000 f83c 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80024de:	2011      	movs	r0, #17
 80024e0:	f000 f839 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80024e4:	2007      	movs	r0, #7
 80024e6:	f000 f836 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80024ea:	2031      	movs	r0, #49	; 0x31
 80024ec:	f000 f833 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80024f0:	2033      	movs	r0, #51	; 0x33
 80024f2:	f000 f830 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80024f6:	2042      	movs	r0, #66	; 0x42
 80024f8:	f000 f82d 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80024fc:	2005      	movs	r0, #5
 80024fe:	f000 f82a 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002502:	200c      	movs	r0, #12
 8002504:	f000 f827 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002508:	200a      	movs	r0, #10
 800250a:	f000 f824 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800250e:	2028      	movs	r0, #40	; 0x28
 8002510:	f000 f821 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002514:	202f      	movs	r0, #47	; 0x2f
 8002516:	f000 f81e 	bl	8002556 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800251a:	200f      	movs	r0, #15
 800251c:	f000 f81b 	bl	8002556 <ili9341_WriteData>

  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002520:	2011      	movs	r0, #17
 8002522:	f000 f80b 	bl	800253c <ili9341_WriteReg>
  LCD_Delay(200);
 8002526:	20c8      	movs	r0, #200	; 0xc8
 8002528:	f000 fe4a 	bl	80031c0 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800252c:	2029      	movs	r0, #41	; 0x29
 800252e:	f000 f805 	bl	800253c <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002532:	202c      	movs	r0, #44	; 0x2c
 8002534:	f000 f802 	bl	800253c <ili9341_WriteReg>
}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}

0800253c <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	4618      	mov	r0, r3
 800254a:	f000 fe17 	bl	800317c <LCD_IO_WriteReg>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	4603      	mov	r3, r0
 800255e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fde8 	bl	8003138 <LCD_IO_WriteData>
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002576:	f001 fae1 	bl	8003b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800257a:	f000 f899 	bl	80026b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800257e:	f000 fb8b 	bl	8002c98 <MX_GPIO_Init>
  MX_CRC_Init();
 8002582:	f000 f919 	bl	80027b8 <MX_CRC_Init>
  MX_DMA2D_Init();
 8002586:	f000 f92b 	bl	80027e0 <MX_DMA2D_Init>
  MX_FMC_Init();
 800258a:	f000 fb35 	bl	8002bf8 <MX_FMC_Init>
  MX_I2C3_Init();
 800258e:	f000 f959 	bl	8002844 <MX_I2C3_Init>
  MX_LTDC_Init();
 8002592:	f000 f997 	bl	80028c4 <MX_LTDC_Init>
  MX_SPI5_Init();
 8002596:	f000 fa53 	bl	8002a40 <MX_SPI5_Init>
  MX_TIM1_Init();
 800259a:	f000 fa87 	bl	8002aac <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800259e:	f000 fad5 	bl	8002b4c <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 80025a2:	f000 fafd 	bl	8002ba0 <MX_USB_OTG_HS_HCD_Init>
  /* USER CODE BEGIN 2 */

  init_cube();
 80025a6:	f7ff f9fd 	bl	80019a4 <init_cube>
  L3GD20 m_gyro;
  L3GD20_init(&hspi5, &m_gyro);
 80025aa:	463b      	mov	r3, r7
 80025ac:	4619      	mov	r1, r3
 80025ae:	4836      	ldr	r0, [pc, #216]	; (8002688 <main+0x118>)
 80025b0:	f7ff fd5e 	bl	8002070 <L3GD20_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	L3GD20_readRawData(&m_gyro);
 80025b4:	463b      	mov	r3, r7
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fdde 	bl	8002178 <L3GD20_readRawData>
	L3GD20_convertRawData(&m_gyro);
 80025bc:	463b      	mov	r3, r7
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fe26 	bl	8002210 <L3GD20_convertRawData>

	rotate_cube(-m_gyro.Z_val / (float)1800.0, Z_AXIS);
 80025c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80025c8:	eef1 7a67 	vneg.f32	s15, s15
 80025cc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800268c <main+0x11c>
 80025d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025d4:	2001      	movs	r0, #1
 80025d6:	eeb0 0a66 	vmov.f32	s0, s13
 80025da:	f7ff f92d 	bl	8001838 <rotate_cube>
	rotate_cube(-m_gyro.Y_val / (float)1300.0, X_AXIS);
 80025de:	edd7 7a04 	vldr	s15, [r7, #16]
 80025e2:	eef1 7a67 	vneg.f32	s15, s15
 80025e6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002690 <main+0x120>
 80025ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025ee:	2000      	movs	r0, #0
 80025f0:	eeb0 0a66 	vmov.f32	s0, s13
 80025f4:	f7ff f920 	bl	8001838 <rotate_cube>
	rotate_cube(m_gyro.X_val / (float)1300.0, Y_AXIS);
 80025f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80025fc:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002690 <main+0x120>
 8002600:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002604:	2002      	movs	r0, #2
 8002606:	eeb0 0a66 	vmov.f32	s0, s13
 800260a:	f7ff f915 	bl	8001838 <rotate_cube>

	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET){
 800260e:	2101      	movs	r1, #1
 8002610:	4820      	ldr	r0, [pc, #128]	; (8002694 <main+0x124>)
 8002612:	f002 f895 	bl	8004740 <HAL_GPIO_ReadPin>
 8002616:	4603      	mov	r3, r0
 8002618:	2b01      	cmp	r3, #1
 800261a:	d107      	bne.n	800262c <main+0xbc>
		set_rotation_cube(0, 0, 0);
 800261c:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8002698 <main+0x128>
 8002620:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8002698 <main+0x128>
 8002624:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8002698 <main+0x128>
 8002628:	f7ff f92a 	bl	8001880 <set_rotation_cube>
	}

	activeLayer = layers[(index++) % 2];
 800262c:	4b1b      	ldr	r3, [pc, #108]	; (800269c <main+0x12c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	b2d1      	uxtb	r1, r2
 8002634:	4a19      	ldr	r2, [pc, #100]	; (800269c <main+0x12c>)
 8002636:	7011      	strb	r1, [r2, #0]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	4a18      	ldr	r2, [pc, #96]	; (80026a0 <main+0x130>)
 800263e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002642:	4a18      	ldr	r2, [pc, #96]	; (80026a4 <main+0x134>)
 8002644:	6013      	str	r3, [r2, #0]

	draw_demo_page(activeLayer);
 8002646:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <main+0x134>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fb84 	bl	8001d58 <draw_demo_page>
	draw_cube(activeLayer);
 8002650:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <main+0x134>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fcc3 	bl	8001fe0 <draw_cube>

	hltdc.LayerCfg[1].FBStartAdress = activeLayer;
 800265a:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <main+0x134>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <main+0x138>)
 8002662:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	HAL_LTDC_ConfigLayer(&hltdc, &(hltdc.LayerCfg[1]), 1);
 8002666:	2201      	movs	r2, #1
 8002668:	4910      	ldr	r1, [pc, #64]	; (80026ac <main+0x13c>)
 800266a:	480f      	ldr	r0, [pc, #60]	; (80026a8 <main+0x138>)
 800266c:	f003 fe46 	bl	80062fc <HAL_LTDC_ConfigLayer>
	while(hltdc.State == HAL_LTDC_STATE_BUSY);
 8002670:	bf00      	nop
 8002672:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <main+0x138>)
 8002674:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d0f9      	beq.n	8002672 <main+0x102>
	HAL_Delay(33);
 800267e:	2021      	movs	r0, #33	; 0x21
 8002680:	f001 fa9e 	bl	8003bc0 <HAL_Delay>
	L3GD20_readRawData(&m_gyro);
 8002684:	e796      	b.n	80025b4 <main+0x44>
 8002686:	bf00      	nop
 8002688:	200004b8 	.word	0x200004b8
 800268c:	44e10000 	.word	0x44e10000
 8002690:	44a28000 	.word	0x44a28000
 8002694:	40020000 	.word	0x40020000
 8002698:	00000000 	.word	0x00000000
 800269c:	20000040 	.word	0x20000040
 80026a0:	2000000c 	.word	0x2000000c
 80026a4:	20027a04 	.word	0x20027a04
 80026a8:	20013d98 	.word	0x20013d98
 80026ac:	20013e04 	.word	0x20013e04

080026b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b0a0      	sub	sp, #128	; 0x80
 80026b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026ba:	2230      	movs	r2, #48	; 0x30
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f006 ff21 	bl	8009506 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026d4:	f107 030c 	add.w	r3, r7, #12
 80026d8:	2230      	movs	r2, #48	; 0x30
 80026da:	2100      	movs	r1, #0
 80026dc:	4618      	mov	r0, r3
 80026de:	f006 ff12 	bl	8009506 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	4b32      	ldr	r3, [pc, #200]	; (80027b0 <SystemClock_Config+0x100>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a31      	ldr	r2, [pc, #196]	; (80027b0 <SystemClock_Config+0x100>)
 80026ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
 80026f2:	4b2f      	ldr	r3, [pc, #188]	; (80027b0 <SystemClock_Config+0x100>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80026fe:	2300      	movs	r3, #0
 8002700:	607b      	str	r3, [r7, #4]
 8002702:	4b2c      	ldr	r3, [pc, #176]	; (80027b4 <SystemClock_Config+0x104>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800270a:	4a2a      	ldr	r2, [pc, #168]	; (80027b4 <SystemClock_Config+0x104>)
 800270c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	4b28      	ldr	r3, [pc, #160]	; (80027b4 <SystemClock_Config+0x104>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800271e:	2301      	movs	r3, #1
 8002720:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002726:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002728:	2302      	movs	r3, #2
 800272a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800272c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002730:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002732:	2304      	movs	r3, #4
 8002734:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002736:	2348      	movs	r3, #72	; 0x48
 8002738:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800273a:	2302      	movs	r3, #2
 800273c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800273e:	2303      	movs	r3, #3
 8002740:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002742:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002746:	4618      	mov	r0, r3
 8002748:	f003 ffae 	bl	80066a8 <HAL_RCC_OscConfig>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002752:	f000 fbd3 	bl	8002efc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002756:	230f      	movs	r3, #15
 8002758:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800275a:	2302      	movs	r3, #2
 800275c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800275e:	2300      	movs	r3, #0
 8002760:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002766:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002768:	2300      	movs	r3, #0
 800276a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800276c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002770:	2102      	movs	r1, #2
 8002772:	4618      	mov	r0, r3
 8002774:	f004 fa08 	bl	8006b88 <HAL_RCC_ClockConfig>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800277e:	f000 fbbd 	bl	8002efc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002782:	2308      	movs	r3, #8
 8002784:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8002786:	233c      	movs	r3, #60	; 0x3c
 8002788:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800278a:	2305      	movs	r3, #5
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800278e:	2300      	movs	r3, #0
 8002790:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002792:	f107 030c 	add.w	r3, r7, #12
 8002796:	4618      	mov	r0, r3
 8002798:	f004 fc1a 	bl	8006fd0 <HAL_RCCEx_PeriphCLKConfig>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80027a2:	f000 fbab 	bl	8002efc <Error_Handler>
  }
}
 80027a6:	bf00      	nop
 80027a8:	3780      	adds	r7, #128	; 0x80
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40007000 	.word	0x40007000

080027b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <MX_CRC_Init+0x20>)
 80027be:	4a07      	ldr	r2, [pc, #28]	; (80027dc <MX_CRC_Init+0x24>)
 80027c0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80027c2:	4805      	ldr	r0, [pc, #20]	; (80027d8 <MX_CRC_Init+0x20>)
 80027c4:	f001 fb00 	bl	8003dc8 <HAL_CRC_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80027ce:	f000 fb95 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000510 	.word	0x20000510
 80027dc:	40023000 	.word	0x40023000

080027e0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80027e4:	4b15      	ldr	r3, [pc, #84]	; (800283c <MX_DMA2D_Init+0x5c>)
 80027e6:	4a16      	ldr	r2, [pc, #88]	; (8002840 <MX_DMA2D_Init+0x60>)
 80027e8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80027ea:	4b14      	ldr	r3, [pc, #80]	; (800283c <MX_DMA2D_Init+0x5c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80027f0:	4b12      	ldr	r3, [pc, #72]	; (800283c <MX_DMA2D_Init+0x5c>)
 80027f2:	2202      	movs	r2, #2
 80027f4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80027f6:	4b11      	ldr	r3, [pc, #68]	; (800283c <MX_DMA2D_Init+0x5c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80027fc:	4b0f      	ldr	r3, [pc, #60]	; (800283c <MX_DMA2D_Init+0x5c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8002802:	4b0e      	ldr	r3, [pc, #56]	; (800283c <MX_DMA2D_Init+0x5c>)
 8002804:	2202      	movs	r2, #2
 8002806:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <MX_DMA2D_Init+0x5c>)
 800280a:	2200      	movs	r2, #0
 800280c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800280e:	4b0b      	ldr	r3, [pc, #44]	; (800283c <MX_DMA2D_Init+0x5c>)
 8002810:	2200      	movs	r2, #0
 8002812:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002814:	4809      	ldr	r0, [pc, #36]	; (800283c <MX_DMA2D_Init+0x5c>)
 8002816:	f001 faf3 	bl	8003e00 <HAL_DMA2D_Init>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8002820:	f000 fb6c 	bl	8002efc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002824:	2101      	movs	r1, #1
 8002826:	4805      	ldr	r0, [pc, #20]	; (800283c <MX_DMA2D_Init+0x5c>)
 8002828:	f001 fc44 	bl	80040b4 <HAL_DMA2D_ConfigLayer>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8002832:	f000 fb63 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20027a08 	.word	0x20027a08
 8002840:	4002b000 	.word	0x4002b000

08002844 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002848:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <MX_I2C3_Init+0x74>)
 800284a:	4a1c      	ldr	r2, [pc, #112]	; (80028bc <MX_I2C3_Init+0x78>)
 800284c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800284e:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <MX_I2C3_Init+0x74>)
 8002850:	4a1b      	ldr	r2, [pc, #108]	; (80028c0 <MX_I2C3_Init+0x7c>)
 8002852:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002854:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <MX_I2C3_Init+0x74>)
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800285a:	4b17      	ldr	r3, [pc, #92]	; (80028b8 <MX_I2C3_Init+0x74>)
 800285c:	2200      	movs	r2, #0
 800285e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002860:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <MX_I2C3_Init+0x74>)
 8002862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002866:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <MX_I2C3_Init+0x74>)
 800286a:	2200      	movs	r2, #0
 800286c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <MX_I2C3_Init+0x74>)
 8002870:	2200      	movs	r2, #0
 8002872:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002874:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <MX_I2C3_Init+0x74>)
 8002876:	2200      	movs	r2, #0
 8002878:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800287a:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <MX_I2C3_Init+0x74>)
 800287c:	2200      	movs	r2, #0
 800287e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002880:	480d      	ldr	r0, [pc, #52]	; (80028b8 <MX_I2C3_Init+0x74>)
 8002882:	f003 f9ff 	bl	8005c84 <HAL_I2C_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800288c:	f000 fb36 	bl	8002efc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002890:	2100      	movs	r1, #0
 8002892:	4809      	ldr	r0, [pc, #36]	; (80028b8 <MX_I2C3_Init+0x74>)
 8002894:	f003 fb2e 	bl	8005ef4 <HAL_I2CEx_ConfigAnalogFilter>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800289e:	f000 fb2d 	bl	8002efc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80028a2:	2100      	movs	r1, #0
 80028a4:	4804      	ldr	r0, [pc, #16]	; (80028b8 <MX_I2C3_Init+0x74>)
 80028a6:	f003 fb61 	bl	8005f6c <HAL_I2CEx_ConfigDigitalFilter>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80028b0:	f000 fb24 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000464 	.word	0x20000464
 80028bc:	40005c00 	.word	0x40005c00
 80028c0:	000186a0 	.word	0x000186a0

080028c4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b09a      	sub	sp, #104	; 0x68
 80028c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80028ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028ce:	2234      	movs	r2, #52	; 0x34
 80028d0:	2100      	movs	r1, #0
 80028d2:	4618      	mov	r0, r3
 80028d4:	f006 fe17 	bl	8009506 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80028d8:	463b      	mov	r3, r7
 80028da:	2234      	movs	r2, #52	; 0x34
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f006 fe11 	bl	8009506 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */
	  ili9341_Init();
 80028e4:	f7ff fce0 	bl	80022a8 <ili9341_Init>
  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80028e8:	4b52      	ldr	r3, [pc, #328]	; (8002a34 <MX_LTDC_Init+0x170>)
 80028ea:	4a53      	ldr	r2, [pc, #332]	; (8002a38 <MX_LTDC_Init+0x174>)
 80028ec:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80028ee:	4b51      	ldr	r3, [pc, #324]	; (8002a34 <MX_LTDC_Init+0x170>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80028f4:	4b4f      	ldr	r3, [pc, #316]	; (8002a34 <MX_LTDC_Init+0x170>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80028fa:	4b4e      	ldr	r3, [pc, #312]	; (8002a34 <MX_LTDC_Init+0x170>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002900:	4b4c      	ldr	r3, [pc, #304]	; (8002a34 <MX_LTDC_Init+0x170>)
 8002902:	2200      	movs	r2, #0
 8002904:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8002906:	4b4b      	ldr	r3, [pc, #300]	; (8002a34 <MX_LTDC_Init+0x170>)
 8002908:	2209      	movs	r2, #9
 800290a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800290c:	4b49      	ldr	r3, [pc, #292]	; (8002a34 <MX_LTDC_Init+0x170>)
 800290e:	2201      	movs	r2, #1
 8002910:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8002912:	4b48      	ldr	r3, [pc, #288]	; (8002a34 <MX_LTDC_Init+0x170>)
 8002914:	221d      	movs	r2, #29
 8002916:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8002918:	4b46      	ldr	r3, [pc, #280]	; (8002a34 <MX_LTDC_Init+0x170>)
 800291a:	2203      	movs	r2, #3
 800291c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800291e:	4b45      	ldr	r3, [pc, #276]	; (8002a34 <MX_LTDC_Init+0x170>)
 8002920:	f240 120d 	movw	r2, #269	; 0x10d
 8002924:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8002926:	4b43      	ldr	r3, [pc, #268]	; (8002a34 <MX_LTDC_Init+0x170>)
 8002928:	f240 1243 	movw	r2, #323	; 0x143
 800292c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800292e:	4b41      	ldr	r3, [pc, #260]	; (8002a34 <MX_LTDC_Init+0x170>)
 8002930:	f240 1217 	movw	r2, #279	; 0x117
 8002934:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8002936:	4b3f      	ldr	r3, [pc, #252]	; (8002a34 <MX_LTDC_Init+0x170>)
 8002938:	f240 1247 	movw	r2, #327	; 0x147
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800293e:	4b3d      	ldr	r3, [pc, #244]	; (8002a34 <MX_LTDC_Init+0x170>)
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002946:	4b3b      	ldr	r3, [pc, #236]	; (8002a34 <MX_LTDC_Init+0x170>)
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 800294e:	4b39      	ldr	r3, [pc, #228]	; (8002a34 <MX_LTDC_Init+0x170>)
 8002950:	22ff      	movs	r2, #255	; 0xff
 8002952:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002956:	4837      	ldr	r0, [pc, #220]	; (8002a34 <MX_LTDC_Init+0x170>)
 8002958:	f003 fb48 	bl	8005fec <HAL_LTDC_Init>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_LTDC_Init+0xa2>
  {
    Error_Handler();
 8002962:	f000 facb 	bl	8002efc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002966:	2300      	movs	r3, #0
 8002968:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 50;
 800296a:	2332      	movs	r3, #50	; 0x32
 800296c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 50;
 8002972:	2332      	movs	r3, #50	; 0x32
 8002974:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002976:	2302      	movs	r3, #2
 8002978:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 100;
 800297a:	2364      	movs	r3, #100	; 0x64
 800297c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002982:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002986:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002988:	2307      	movs	r3, #7
 800298a:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0x00000000;
 800298c:	2300      	movs	r3, #0
 800298e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 50;
 8002990:	2332      	movs	r3, #50	; 0x32
 8002992:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 50;
 8002994:	2332      	movs	r3, #50	; 0x32
 8002996:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 255;
 800299e:	23ff      	movs	r3, #255	; 0xff
 80029a0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 255;
 80029a4:	23ff      	movs	r3, #255	; 0xff
 80029a6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80029aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029ae:	2200      	movs	r2, #0
 80029b0:	4619      	mov	r1, r3
 80029b2:	4820      	ldr	r0, [pc, #128]	; (8002a34 <MX_LTDC_Init+0x170>)
 80029b4:	f003 fca2 	bl	80062fc <HAL_LTDC_ConfigLayer>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_LTDC_Init+0xfe>
  {
    Error_Handler();
 80029be:	f000 fa9d 	bl	8002efc <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 20;
 80029c2:	2314      	movs	r3, #20
 80029c4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 220;
 80029c6:	23dc      	movs	r3, #220	; 0xdc
 80029c8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 50;
 80029ca:	2332      	movs	r3, #50	; 0x32
 80029cc:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 250;
 80029ce:	23fa      	movs	r3, #250	; 0xfa
 80029d0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80029d2:	2302      	movs	r3, #2
 80029d4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 255;
 80029d6:	23ff      	movs	r3, #255	; 0xff
 80029d8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 255;
 80029da:	23ff      	movs	r3, #255	; 0xff
 80029dc:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80029de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029e2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80029e4:	2305      	movs	r3, #5
 80029e6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 200;
 80029ec:	23c8      	movs	r3, #200	; 0xc8
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 200;
 80029f0:	23c8      	movs	r3, #200	; 0xc8
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 255;
 80029f4:	23ff      	movs	r3, #255	; 0xff
 80029f6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 255;
 80029fa:	23ff      	movs	r3, #255	; 0xff
 80029fc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 255;
 8002a00:	23ff      	movs	r3, #255	; 0xff
 8002a02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002a06:	463b      	mov	r3, r7
 8002a08:	2201      	movs	r2, #1
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4809      	ldr	r0, [pc, #36]	; (8002a34 <MX_LTDC_Init+0x170>)
 8002a0e:	f003 fc75 	bl	80062fc <HAL_LTDC_ConfigLayer>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_LTDC_Init+0x158>
  {
    Error_Handler();
 8002a18:	f000 fa70 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
	  pLayerCfg1.FBStartAdress = (uint32_t)&ball2;
 8002a1c:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <MX_LTDC_Init+0x178>)
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1);
 8002a20:	463b      	mov	r3, r7
 8002a22:	2201      	movs	r2, #1
 8002a24:	4619      	mov	r1, r3
 8002a26:	4803      	ldr	r0, [pc, #12]	; (8002a34 <MX_LTDC_Init+0x170>)
 8002a28:	f003 fc68 	bl	80062fc <HAL_LTDC_ConfigLayer>
  /* USER CODE END LTDC_Init 2 */

}
 8002a2c:	bf00      	nop
 8002a2e:	3768      	adds	r7, #104	; 0x68
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20013d98 	.word	0x20013d98
 8002a38:	40016800 	.word	0x40016800
 8002a3c:	20013e40 	.word	0x20013e40

08002a40 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002a44:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <MX_SPI5_Init+0x64>)
 8002a46:	4a18      	ldr	r2, [pc, #96]	; (8002aa8 <MX_SPI5_Init+0x68>)
 8002a48:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002a4a:	4b16      	ldr	r3, [pc, #88]	; (8002aa4 <MX_SPI5_Init+0x64>)
 8002a4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a50:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <MX_SPI5_Init+0x64>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a58:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <MX_SPI5_Init+0x64>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a5e:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <MX_SPI5_Init+0x64>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a64:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <MX_SPI5_Init+0x64>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002a6a:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <MX_SPI5_Init+0x64>)
 8002a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a70:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002a72:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <MX_SPI5_Init+0x64>)
 8002a74:	2218      	movs	r2, #24
 8002a76:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a78:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <MX_SPI5_Init+0x64>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <MX_SPI5_Init+0x64>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a84:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <MX_SPI5_Init+0x64>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <MX_SPI5_Init+0x64>)
 8002a8c:	220a      	movs	r2, #10
 8002a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002a90:	4804      	ldr	r0, [pc, #16]	; (8002aa4 <MX_SPI5_Init+0x64>)
 8002a92:	f004 fc8f 	bl	80073b4 <HAL_SPI_Init>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002a9c:	f000 fa2e 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002aa0:	bf00      	nop
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	200004b8 	.word	0x200004b8
 8002aa8:	40015000 	.word	0x40015000

08002aac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ab2:	f107 0308 	add.w	r3, r7, #8
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ac0:	463b      	mov	r3, r7
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <MX_TIM1_Init+0x98>)
 8002aca:	4a1f      	ldr	r2, [pc, #124]	; (8002b48 <MX_TIM1_Init+0x9c>)
 8002acc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002ace:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <MX_TIM1_Init+0x98>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <MX_TIM1_Init+0x98>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002ada:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <MX_TIM1_Init+0x98>)
 8002adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ae0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ae2:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <MX_TIM1_Init+0x98>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ae8:	4b16      	ldr	r3, [pc, #88]	; (8002b44 <MX_TIM1_Init+0x98>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aee:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <MX_TIM1_Init+0x98>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002af4:	4813      	ldr	r0, [pc, #76]	; (8002b44 <MX_TIM1_Init+0x98>)
 8002af6:	f005 f879 	bl	8007bec <HAL_TIM_Base_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002b00:	f000 f9fc 	bl	8002efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b0a:	f107 0308 	add.w	r3, r7, #8
 8002b0e:	4619      	mov	r1, r3
 8002b10:	480c      	ldr	r0, [pc, #48]	; (8002b44 <MX_TIM1_Init+0x98>)
 8002b12:	f005 f9c2 	bl	8007e9a <HAL_TIM_ConfigClockSource>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002b1c:	f000 f9ee 	bl	8002efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b20:	2300      	movs	r3, #0
 8002b22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b28:	463b      	mov	r3, r7
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4805      	ldr	r0, [pc, #20]	; (8002b44 <MX_TIM1_Init+0x98>)
 8002b2e:	f005 fbcd 	bl	80082cc <HAL_TIMEx_MasterConfigSynchronization>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002b38:	f000 f9e0 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002b3c:	bf00      	nop
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	200279c4 	.word	0x200279c4
 8002b48:	40010000 	.word	0x40010000

08002b4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <MX_USART1_UART_Init+0x4c>)
 8002b52:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <MX_USART1_UART_Init+0x50>)
 8002b54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b56:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <MX_USART1_UART_Init+0x4c>)
 8002b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <MX_USART1_UART_Init+0x4c>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b64:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <MX_USART1_UART_Init+0x4c>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b6a:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <MX_USART1_UART_Init+0x4c>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <MX_USART1_UART_Init+0x4c>)
 8002b72:	220c      	movs	r2, #12
 8002b74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b76:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <MX_USART1_UART_Init+0x4c>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <MX_USART1_UART_Init+0x4c>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b82:	4805      	ldr	r0, [pc, #20]	; (8002b98 <MX_USART1_UART_Init+0x4c>)
 8002b84:	f005 fc32 	bl	80083ec <HAL_UART_Init>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b8e:	f000 f9b5 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200276c0 	.word	0x200276c0
 8002b9c:	40011000 	.word	0x40011000

08002ba0 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8002ba4:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002ba6:	4a13      	ldr	r2, [pc, #76]	; (8002bf4 <MX_USB_OTG_HS_HCD_Init+0x54>)
 8002ba8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8002baa:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002bac:	220c      	movs	r2, #12
 8002bae:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8002bc8:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8002bda:	4805      	ldr	r0, [pc, #20]	; (8002bf0 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8002bdc:	f001 fde1 	bl	80047a2 <HAL_HCD_Init>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8002be6:	f000 f989 	bl	8002efc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20027700 	.word	0x20027700
 8002bf4:	40040000 	.word	0x40040000

08002bf8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002bfe:	1d3b      	adds	r3, r7, #4
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
 8002c0c:	615a      	str	r2, [r3, #20]
 8002c0e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002c10:	4b1f      	ldr	r3, [pc, #124]	; (8002c90 <MX_FMC_Init+0x98>)
 8002c12:	4a20      	ldr	r2, [pc, #128]	; (8002c94 <MX_FMC_Init+0x9c>)
 8002c14:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8002c16:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <MX_FMC_Init+0x98>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002c1c:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <MX_FMC_Init+0x98>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002c22:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <MX_FMC_Init+0x98>)
 8002c24:	2204      	movs	r2, #4
 8002c26:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002c28:	4b19      	ldr	r3, [pc, #100]	; (8002c90 <MX_FMC_Init+0x98>)
 8002c2a:	2210      	movs	r2, #16
 8002c2c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002c2e:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <MX_FMC_Init+0x98>)
 8002c30:	2240      	movs	r2, #64	; 0x40
 8002c32:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002c34:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <MX_FMC_Init+0x98>)
 8002c36:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002c3a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <MX_FMC_Init+0x98>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002c42:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <MX_FMC_Init+0x98>)
 8002c44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c48:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <MX_FMC_Init+0x98>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8002c50:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <MX_FMC_Init+0x98>)
 8002c52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002c5c:	2307      	movs	r3, #7
 8002c5e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002c60:	2304      	movs	r3, #4
 8002c62:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002c64:	2307      	movs	r3, #7
 8002c66:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002c70:	2302      	movs	r3, #2
 8002c72:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	4619      	mov	r1, r3
 8002c78:	4805      	ldr	r0, [pc, #20]	; (8002c90 <MX_FMC_Init+0x98>)
 8002c7a:	f004 fb67 	bl	800734c <HAL_SDRAM_Init>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002c84:	f000 f93a 	bl	8002efc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002c88:	bf00      	nop
 8002c8a:	3720      	adds	r7, #32
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20027a48 	.word	0x20027a48
 8002c94:	a0000140 	.word	0xa0000140

08002c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08e      	sub	sp, #56	; 0x38
 8002c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	609a      	str	r2, [r3, #8]
 8002caa:	60da      	str	r2, [r3, #12]
 8002cac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	623b      	str	r3, [r7, #32]
 8002cb2:	4b7a      	ldr	r3, [pc, #488]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	4a79      	ldr	r2, [pc, #484]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002cb8:	f043 0304 	orr.w	r3, r3, #4
 8002cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbe:	4b77      	ldr	r3, [pc, #476]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	623b      	str	r3, [r7, #32]
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	4b73      	ldr	r3, [pc, #460]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	4a72      	ldr	r2, [pc, #456]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002cd4:	f043 0320 	orr.w	r3, r3, #32
 8002cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cda:	4b70      	ldr	r3, [pc, #448]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	61fb      	str	r3, [r7, #28]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61bb      	str	r3, [r7, #24]
 8002cea:	4b6c      	ldr	r3, [pc, #432]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	4a6b      	ldr	r2, [pc, #428]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf6:	4b69      	ldr	r3, [pc, #420]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	4b65      	ldr	r3, [pc, #404]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	4a64      	ldr	r2, [pc, #400]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	6313      	str	r3, [r2, #48]	; 0x30
 8002d12:	4b62      	ldr	r3, [pc, #392]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	4b5e      	ldr	r3, [pc, #376]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	4a5d      	ldr	r2, [pc, #372]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002d28:	f043 0302 	orr.w	r3, r3, #2
 8002d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2e:	4b5b      	ldr	r3, [pc, #364]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	4b57      	ldr	r3, [pc, #348]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	4a56      	ldr	r2, [pc, #344]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d48:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4a:	4b54      	ldr	r3, [pc, #336]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	4b50      	ldr	r3, [pc, #320]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	4a4f      	ldr	r2, [pc, #316]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002d60:	f043 0310 	orr.w	r3, r3, #16
 8002d64:	6313      	str	r3, [r2, #48]	; 0x30
 8002d66:	4b4d      	ldr	r3, [pc, #308]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	4b49      	ldr	r3, [pc, #292]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	4a48      	ldr	r2, [pc, #288]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002d7c:	f043 0308 	orr.w	r3, r3, #8
 8002d80:	6313      	str	r3, [r2, #48]	; 0x30
 8002d82:	4b46      	ldr	r3, [pc, #280]	; (8002e9c <MX_GPIO_Init+0x204>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	607b      	str	r3, [r7, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2116      	movs	r1, #22
 8002d92:	4843      	ldr	r0, [pc, #268]	; (8002ea0 <MX_GPIO_Init+0x208>)
 8002d94:	f001 fcec 	bl	8004770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2180      	movs	r1, #128	; 0x80
 8002d9c:	4841      	ldr	r0, [pc, #260]	; (8002ea4 <MX_GPIO_Init+0x20c>)
 8002d9e:	f001 fce7 	bl	8004770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002da2:	2200      	movs	r2, #0
 8002da4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002da8:	483f      	ldr	r0, [pc, #252]	; (8002ea8 <MX_GPIO_Init+0x210>)
 8002daa:	f001 fce1 	bl	8004770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002dae:	2200      	movs	r2, #0
 8002db0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002db4:	483d      	ldr	r0, [pc, #244]	; (8002eac <MX_GPIO_Init+0x214>)
 8002db6:	f001 fcdb 	bl	8004770 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002dba:	2316      	movs	r3, #22
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4833      	ldr	r0, [pc, #204]	; (8002ea0 <MX_GPIO_Init+0x208>)
 8002dd2:	f001 fa01 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002dd6:	f248 0307 	movw	r3, #32775	; 0x8007
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002ddc:	4b34      	ldr	r3, [pc, #208]	; (8002eb0 <MX_GPIO_Init+0x218>)
 8002dde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de8:	4619      	mov	r1, r3
 8002dea:	482e      	ldr	r0, [pc, #184]	; (8002ea4 <MX_GPIO_Init+0x20c>)
 8002dec:	f001 f9f4 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002df4:	2301      	movs	r3, #1
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e04:	4619      	mov	r1, r3
 8002e06:	4827      	ldr	r0, [pc, #156]	; (8002ea4 <MX_GPIO_Init+0x20c>)
 8002e08:	f001 f9e6 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002e0c:	2320      	movs	r3, #32
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002e10:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <MX_GPIO_Init+0x218>)
 8002e12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4820      	ldr	r0, [pc, #128]	; (8002ea0 <MX_GPIO_Init+0x208>)
 8002e20:	f001 f9da 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002e24:	2304      	movs	r3, #4
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e34:	4619      	mov	r1, r3
 8002e36:	481f      	ldr	r0, [pc, #124]	; (8002eb4 <MX_GPIO_Init+0x21c>)
 8002e38:	f001 f9ce 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002e3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e42:	2300      	movs	r3, #0
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4815      	ldr	r0, [pc, #84]	; (8002ea8 <MX_GPIO_Init+0x210>)
 8002e52:	f001 f9c1 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002e56:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e64:	2300      	movs	r3, #0
 8002e66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	480e      	ldr	r0, [pc, #56]	; (8002ea8 <MX_GPIO_Init+0x210>)
 8002e70:	f001 f9b2 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002e74:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	2300      	movs	r3, #0
 8002e84:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4807      	ldr	r0, [pc, #28]	; (8002eac <MX_GPIO_Init+0x214>)
 8002e8e:	f001 f9a3 	bl	80041d8 <HAL_GPIO_Init>

}
 8002e92:	bf00      	nop
 8002e94:	3738      	adds	r7, #56	; 0x38
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40020800 	.word	0x40020800
 8002ea4:	40020000 	.word	0x40020000
 8002ea8:	40020c00 	.word	0x40020c00
 8002eac:	40021800 	.word	0x40021800
 8002eb0:	10120000 	.word	0x10120000
 8002eb4:	40020400 	.word	0x40020400

08002eb8 <HAL_LTDC_ReloadEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ec6:	4803      	ldr	r0, [pc, #12]	; (8002ed4 <HAL_LTDC_ReloadEventCallback+0x1c>)
 8002ec8:	f001 fc52 	bl	8004770 <HAL_GPIO_WritePin>
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40021800 	.word	0x40021800

08002ed8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d101      	bne.n	8002eee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002eea:	f000 fe49 	bl	8003b80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40001000 	.word	0x40001000

08002efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002f10:	4819      	ldr	r0, [pc, #100]	; (8002f78 <SPIx_Init+0x6c>)
 8002f12:	f004 fdb1 	bl	8007a78 <HAL_SPI_GetState>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d12b      	bne.n	8002f74 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002f1c:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <SPIx_Init+0x6c>)
 8002f1e:	4a17      	ldr	r2, [pc, #92]	; (8002f7c <SPIx_Init+0x70>)
 8002f20:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <SPIx_Init+0x6c>)
 8002f24:	2218      	movs	r2, #24
 8002f26:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002f28:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <SPIx_Init+0x6c>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002f2e:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <SPIx_Init+0x6c>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002f34:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <SPIx_Init+0x6c>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <SPIx_Init+0x6c>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002f40:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <SPIx_Init+0x6c>)
 8002f42:	2207      	movs	r2, #7
 8002f44:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002f46:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <SPIx_Init+0x6c>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <SPIx_Init+0x6c>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <SPIx_Init+0x6c>)
 8002f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f58:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002f5a:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <SPIx_Init+0x6c>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <SPIx_Init+0x6c>)
 8002f62:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f66:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8002f68:	4803      	ldr	r0, [pc, #12]	; (8002f78 <SPIx_Init+0x6c>)
 8002f6a:	f000 f833 	bl	8002fd4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002f6e:	4802      	ldr	r0, [pc, #8]	; (8002f78 <SPIx_Init+0x6c>)
 8002f70:	f004 fa20 	bl	80073b4 <HAL_SPI_Init>
  }
}
 8002f74:	bf00      	nop
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	20000044 	.word	0x20000044
 8002f7c:	40015000 	.word	0x40015000

08002f80 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <SPIx_Write+0x34>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	1db9      	adds	r1, r7, #6
 8002f94:	2201      	movs	r2, #1
 8002f96:	4808      	ldr	r0, [pc, #32]	; (8002fb8 <SPIx_Write+0x38>)
 8002f98:	f004 fa98 	bl	80074cc <HAL_SPI_Transmit>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002fa6:	f000 f809 	bl	8002fbc <SPIx_Error>
  }
}
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000014 	.word	0x20000014
 8002fb8:	20000044 	.word	0x20000044

08002fbc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002fc0:	4803      	ldr	r0, [pc, #12]	; (8002fd0 <SPIx_Error+0x14>)
 8002fc2:	f004 fa5b 	bl	800747c <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002fc6:	f7ff ffa1 	bl	8002f0c <SPIx_Init>
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000044 	.word	0x20000044

08002fd4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	; 0x28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002fdc:	2300      	movs	r3, #0
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	4b17      	ldr	r3, [pc, #92]	; (8003040 <SPIx_MspInit+0x6c>)
 8002fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe4:	4a16      	ldr	r2, [pc, #88]	; (8003040 <SPIx_MspInit+0x6c>)
 8002fe6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fea:	6453      	str	r3, [r2, #68]	; 0x44
 8002fec:	4b14      	ldr	r3, [pc, #80]	; (8003040 <SPIx_MspInit+0x6c>)
 8002fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	4b10      	ldr	r3, [pc, #64]	; (8003040 <SPIx_MspInit+0x6c>)
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	4a0f      	ldr	r2, [pc, #60]	; (8003040 <SPIx_MspInit+0x6c>)
 8003002:	f043 0320 	orr.w	r3, r3, #32
 8003006:	6313      	str	r3, [r2, #48]	; 0x30
 8003008:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <SPIx_MspInit+0x6c>)
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003014:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003018:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800301a:	2302      	movs	r3, #2
 800301c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800301e:	2302      	movs	r3, #2
 8003020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003022:	2301      	movs	r3, #1
 8003024:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8003026:	2305      	movs	r3, #5
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 800302a:	f107 0314 	add.w	r3, r7, #20
 800302e:	4619      	mov	r1, r3
 8003030:	4804      	ldr	r0, [pc, #16]	; (8003044 <SPIx_MspInit+0x70>)
 8003032:	f001 f8d1 	bl	80041d8 <HAL_GPIO_Init>
}
 8003036:	bf00      	nop
 8003038:	3728      	adds	r7, #40	; 0x28
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40023800 	.word	0x40023800
 8003044:	40021400 	.word	0x40021400

08003048 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800304e:	4b36      	ldr	r3, [pc, #216]	; (8003128 <LCD_IO_Init+0xe0>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d164      	bne.n	8003120 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8003056:	4b34      	ldr	r3, [pc, #208]	; (8003128 <LCD_IO_Init+0xe0>)
 8003058:	2201      	movs	r2, #1
 800305a:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800305c:	2300      	movs	r3, #0
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	4b32      	ldr	r3, [pc, #200]	; (800312c <LCD_IO_Init+0xe4>)
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	4a31      	ldr	r2, [pc, #196]	; (800312c <LCD_IO_Init+0xe4>)
 8003066:	f043 0308 	orr.w	r3, r3, #8
 800306a:	6313      	str	r3, [r2, #48]	; 0x30
 800306c:	4b2f      	ldr	r3, [pc, #188]	; (800312c <LCD_IO_Init+0xe4>)
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800307c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800307e:	2301      	movs	r3, #1
 8003080:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003086:	2302      	movs	r3, #2
 8003088:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800308a:	f107 030c 	add.w	r3, r7, #12
 800308e:	4619      	mov	r1, r3
 8003090:	4827      	ldr	r0, [pc, #156]	; (8003130 <LCD_IO_Init+0xe8>)
 8003092:	f001 f8a1 	bl	80041d8 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	4b24      	ldr	r3, [pc, #144]	; (800312c <LCD_IO_Init+0xe4>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	4a23      	ldr	r2, [pc, #140]	; (800312c <LCD_IO_Init+0xe4>)
 80030a0:	f043 0308 	orr.w	r3, r3, #8
 80030a4:	6313      	str	r3, [r2, #48]	; 0x30
 80030a6:	4b21      	ldr	r3, [pc, #132]	; (800312c <LCD_IO_Init+0xe4>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	607b      	str	r3, [r7, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80030b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80030b8:	2301      	movs	r3, #1
 80030ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80030c0:	2302      	movs	r3, #2
 80030c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80030c4:	f107 030c 	add.w	r3, r7, #12
 80030c8:	4619      	mov	r1, r3
 80030ca:	4819      	ldr	r0, [pc, #100]	; (8003130 <LCD_IO_Init+0xe8>)
 80030cc:	f001 f884 	bl	80041d8 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80030d0:	2300      	movs	r3, #0
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	4b15      	ldr	r3, [pc, #84]	; (800312c <LCD_IO_Init+0xe4>)
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	4a14      	ldr	r2, [pc, #80]	; (800312c <LCD_IO_Init+0xe4>)
 80030da:	f043 0304 	orr.w	r3, r3, #4
 80030de:	6313      	str	r3, [r2, #48]	; 0x30
 80030e0:	4b12      	ldr	r3, [pc, #72]	; (800312c <LCD_IO_Init+0xe4>)
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80030ec:	2304      	movs	r3, #4
 80030ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80030f0:	2301      	movs	r3, #1
 80030f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80030f8:	2302      	movs	r3, #2
 80030fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80030fc:	f107 030c 	add.w	r3, r7, #12
 8003100:	4619      	mov	r1, r3
 8003102:	480c      	ldr	r0, [pc, #48]	; (8003134 <LCD_IO_Init+0xec>)
 8003104:	f001 f868 	bl	80041d8 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003108:	2200      	movs	r2, #0
 800310a:	2104      	movs	r1, #4
 800310c:	4809      	ldr	r0, [pc, #36]	; (8003134 <LCD_IO_Init+0xec>)
 800310e:	f001 fb2f 	bl	8004770 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003112:	2201      	movs	r2, #1
 8003114:	2104      	movs	r1, #4
 8003116:	4807      	ldr	r0, [pc, #28]	; (8003134 <LCD_IO_Init+0xec>)
 8003118:	f001 fb2a 	bl	8004770 <HAL_GPIO_WritePin>

    SPIx_Init();
 800311c:	f7ff fef6 	bl	8002f0c <SPIx_Init>
  }
}
 8003120:	bf00      	nop
 8003122:	3720      	adds	r7, #32
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	2000009c 	.word	0x2000009c
 800312c:	40023800 	.word	0x40023800
 8003130:	40020c00 	.word	0x40020c00
 8003134:	40020800 	.word	0x40020800

08003138 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003142:	2201      	movs	r2, #1
 8003144:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003148:	480a      	ldr	r0, [pc, #40]	; (8003174 <LCD_IO_WriteData+0x3c>)
 800314a:	f001 fb11 	bl	8004770 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800314e:	2200      	movs	r2, #0
 8003150:	2104      	movs	r1, #4
 8003152:	4809      	ldr	r0, [pc, #36]	; (8003178 <LCD_IO_WriteData+0x40>)
 8003154:	f001 fb0c 	bl	8004770 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff ff10 	bl	8002f80 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003160:	2201      	movs	r2, #1
 8003162:	2104      	movs	r1, #4
 8003164:	4804      	ldr	r0, [pc, #16]	; (8003178 <LCD_IO_WriteData+0x40>)
 8003166:	f001 fb03 	bl	8004770 <HAL_GPIO_WritePin>
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40020c00 	.word	0x40020c00
 8003178:	40020800 	.word	0x40020800

0800317c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003186:	2200      	movs	r2, #0
 8003188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800318c:	480a      	ldr	r0, [pc, #40]	; (80031b8 <LCD_IO_WriteReg+0x3c>)
 800318e:	f001 faef 	bl	8004770 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003192:	2200      	movs	r2, #0
 8003194:	2104      	movs	r1, #4
 8003196:	4809      	ldr	r0, [pc, #36]	; (80031bc <LCD_IO_WriteReg+0x40>)
 8003198:	f001 faea 	bl	8004770 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff feed 	bl	8002f80 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80031a6:	2201      	movs	r2, #1
 80031a8:	2104      	movs	r1, #4
 80031aa:	4804      	ldr	r0, [pc, #16]	; (80031bc <LCD_IO_WriteReg+0x40>)
 80031ac:	f001 fae0 	bl	8004770 <HAL_GPIO_WritePin>
}
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40020c00 	.word	0x40020c00
 80031bc:	40020800 	.word	0x40020800

080031c0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 fcf9 	bl	8003bc0 <HAL_Delay>
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	607b      	str	r3, [r7, #4]
 80031e2:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_MspInit+0x54>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	4a11      	ldr	r2, [pc, #68]	; (800322c <HAL_MspInit+0x54>)
 80031e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031ec:	6453      	str	r3, [r2, #68]	; 0x44
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <HAL_MspInit+0x54>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f6:	607b      	str	r3, [r7, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	603b      	str	r3, [r7, #0]
 80031fe:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_MspInit+0x54>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	4a0a      	ldr	r2, [pc, #40]	; (800322c <HAL_MspInit+0x54>)
 8003204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003208:	6413      	str	r3, [r2, #64]	; 0x40
 800320a:	4b08      	ldr	r3, [pc, #32]	; (800322c <HAL_MspInit+0x54>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003216:	2200      	movs	r2, #0
 8003218:	210f      	movs	r1, #15
 800321a:	f06f 0001 	mvn.w	r0, #1
 800321e:	f000 fda9 	bl	8003d74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800

08003230 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a0b      	ldr	r2, [pc, #44]	; (800326c <HAL_CRC_MspInit+0x3c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d10d      	bne.n	800325e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <HAL_CRC_MspInit+0x40>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	4a09      	ldr	r2, [pc, #36]	; (8003270 <HAL_CRC_MspInit+0x40>)
 800324c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003250:	6313      	str	r3, [r2, #48]	; 0x30
 8003252:	4b07      	ldr	r3, [pc, #28]	; (8003270 <HAL_CRC_MspInit+0x40>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800325e:	bf00      	nop
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40023000 	.word	0x40023000
 8003270:	40023800 	.word	0x40023800

08003274 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0e      	ldr	r2, [pc, #56]	; (80032bc <HAL_DMA2D_MspInit+0x48>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d115      	bne.n	80032b2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <HAL_DMA2D_MspInit+0x4c>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	4a0c      	ldr	r2, [pc, #48]	; (80032c0 <HAL_DMA2D_MspInit+0x4c>)
 8003290:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003294:	6313      	str	r3, [r2, #48]	; 0x30
 8003296:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <HAL_DMA2D_MspInit+0x4c>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80032a2:	2200      	movs	r2, #0
 80032a4:	2105      	movs	r1, #5
 80032a6:	205a      	movs	r0, #90	; 0x5a
 80032a8:	f000 fd64 	bl	8003d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80032ac:	205a      	movs	r0, #90	; 0x5a
 80032ae:	f000 fd7d 	bl	8003dac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80032b2:	bf00      	nop
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	4002b000 	.word	0x4002b000
 80032c0:	40023800 	.word	0x40023800

080032c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08a      	sub	sp, #40	; 0x28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032cc:	f107 0314 	add.w	r3, r7, #20
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a29      	ldr	r2, [pc, #164]	; (8003388 <HAL_I2C_MspInit+0xc4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d14b      	bne.n	800337e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	4b28      	ldr	r3, [pc, #160]	; (800338c <HAL_I2C_MspInit+0xc8>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	4a27      	ldr	r2, [pc, #156]	; (800338c <HAL_I2C_MspInit+0xc8>)
 80032f0:	f043 0304 	orr.w	r3, r3, #4
 80032f4:	6313      	str	r3, [r2, #48]	; 0x30
 80032f6:	4b25      	ldr	r3, [pc, #148]	; (800338c <HAL_I2C_MspInit+0xc8>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	4b21      	ldr	r3, [pc, #132]	; (800338c <HAL_I2C_MspInit+0xc8>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	4a20      	ldr	r2, [pc, #128]	; (800338c <HAL_I2C_MspInit+0xc8>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	6313      	str	r3, [r2, #48]	; 0x30
 8003312:	4b1e      	ldr	r3, [pc, #120]	; (800338c <HAL_I2C_MspInit+0xc8>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800331e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003324:	2312      	movs	r3, #18
 8003326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003328:	2301      	movs	r3, #1
 800332a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332c:	2300      	movs	r3, #0
 800332e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003330:	2304      	movs	r3, #4
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003334:	f107 0314 	add.w	r3, r7, #20
 8003338:	4619      	mov	r1, r3
 800333a:	4815      	ldr	r0, [pc, #84]	; (8003390 <HAL_I2C_MspInit+0xcc>)
 800333c:	f000 ff4c 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003346:	2312      	movs	r3, #18
 8003348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800334a:	2301      	movs	r3, #1
 800334c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334e:	2300      	movs	r3, #0
 8003350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003352:	2304      	movs	r3, #4
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003356:	f107 0314 	add.w	r3, r7, #20
 800335a:	4619      	mov	r1, r3
 800335c:	480d      	ldr	r0, [pc, #52]	; (8003394 <HAL_I2C_MspInit+0xd0>)
 800335e:	f000 ff3b 	bl	80041d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <HAL_I2C_MspInit+0xc8>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	4a08      	ldr	r2, [pc, #32]	; (800338c <HAL_I2C_MspInit+0xc8>)
 800336c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003370:	6413      	str	r3, [r2, #64]	; 0x40
 8003372:	4b06      	ldr	r3, [pc, #24]	; (800338c <HAL_I2C_MspInit+0xc8>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800337e:	bf00      	nop
 8003380:	3728      	adds	r7, #40	; 0x28
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40005c00 	.word	0x40005c00
 800338c:	40023800 	.word	0x40023800
 8003390:	40020800 	.word	0x40020800
 8003394:	40020000 	.word	0x40020000

08003398 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08e      	sub	sp, #56	; 0x38
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	60da      	str	r2, [r3, #12]
 80033ae:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a7b      	ldr	r2, [pc, #492]	; (80035a4 <HAL_LTDC_MspInit+0x20c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	f040 80f0 	bne.w	800359c <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80033bc:	2300      	movs	r3, #0
 80033be:	623b      	str	r3, [r7, #32]
 80033c0:	4b79      	ldr	r3, [pc, #484]	; (80035a8 <HAL_LTDC_MspInit+0x210>)
 80033c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c4:	4a78      	ldr	r2, [pc, #480]	; (80035a8 <HAL_LTDC_MspInit+0x210>)
 80033c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033ca:	6453      	str	r3, [r2, #68]	; 0x44
 80033cc:	4b76      	ldr	r3, [pc, #472]	; (80035a8 <HAL_LTDC_MspInit+0x210>)
 80033ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033d4:	623b      	str	r3, [r7, #32]
 80033d6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	4b72      	ldr	r3, [pc, #456]	; (80035a8 <HAL_LTDC_MspInit+0x210>)
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	4a71      	ldr	r2, [pc, #452]	; (80035a8 <HAL_LTDC_MspInit+0x210>)
 80033e2:	f043 0320 	orr.w	r3, r3, #32
 80033e6:	6313      	str	r3, [r2, #48]	; 0x30
 80033e8:	4b6f      	ldr	r3, [pc, #444]	; (80035a8 <HAL_LTDC_MspInit+0x210>)
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f4:	2300      	movs	r3, #0
 80033f6:	61bb      	str	r3, [r7, #24]
 80033f8:	4b6b      	ldr	r3, [pc, #428]	; (80035a8 <HAL_LTDC_MspInit+0x210>)
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	4a6a      	ldr	r2, [pc, #424]	; (80035a8 <HAL_LTDC_MspInit+0x210>)
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	6313      	str	r3, [r2, #48]	; 0x30
 8003404:	4b68      	ldr	r3, [pc, #416]	; (80035a8 <HAL_LTDC_MspInit+0x210>)
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	4b64      	ldr	r3, [pc, #400]	; (80035a8 <HAL_LTDC_MspInit+0x210>)
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	4a63      	ldr	r2, [pc, #396]	; (80035a8 <HAL_LTDC_MspInit+0x210>)
 800341a:	f043 0302 	orr.w	r3, r3, #2
 800341e:	6313      	str	r3, [r2, #48]	; 0x30
 8003420:	4b61      	ldr	r3, [pc, #388]	; (80035a8 <HAL_LTDC_MspInit+0x210>)
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800342c:	2300      	movs	r3, #0
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	4b5d      	ldr	r3, [pc, #372]	; (80035a8 <HAL_LTDC_MspInit+0x210>)
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	4a5c      	ldr	r2, [pc, #368]	; (80035a8 <HAL_LTDC_MspInit+0x210>)
 8003436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800343a:	6313      	str	r3, [r2, #48]	; 0x30
 800343c:	4b5a      	ldr	r3, [pc, #360]	; (80035a8 <HAL_LTDC_MspInit+0x210>)
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	4b56      	ldr	r3, [pc, #344]	; (80035a8 <HAL_LTDC_MspInit+0x210>)
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	4a55      	ldr	r2, [pc, #340]	; (80035a8 <HAL_LTDC_MspInit+0x210>)
 8003452:	f043 0304 	orr.w	r3, r3, #4
 8003456:	6313      	str	r3, [r2, #48]	; 0x30
 8003458:	4b53      	ldr	r3, [pc, #332]	; (80035a8 <HAL_LTDC_MspInit+0x210>)
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003464:	2300      	movs	r3, #0
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	4b4f      	ldr	r3, [pc, #316]	; (80035a8 <HAL_LTDC_MspInit+0x210>)
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	4a4e      	ldr	r2, [pc, #312]	; (80035a8 <HAL_LTDC_MspInit+0x210>)
 800346e:	f043 0308 	orr.w	r3, r3, #8
 8003472:	6313      	str	r3, [r2, #48]	; 0x30
 8003474:	4b4c      	ldr	r3, [pc, #304]	; (80035a8 <HAL_LTDC_MspInit+0x210>)
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003486:	2302      	movs	r3, #2
 8003488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348e:	2300      	movs	r3, #0
 8003490:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003492:	230e      	movs	r3, #14
 8003494:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800349a:	4619      	mov	r1, r3
 800349c:	4843      	ldr	r0, [pc, #268]	; (80035ac <HAL_LTDC_MspInit+0x214>)
 800349e:	f000 fe9b 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80034a2:	f641 0358 	movw	r3, #6232	; 0x1858
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a8:	2302      	movs	r3, #2
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b0:	2300      	movs	r3, #0
 80034b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034b4:	230e      	movs	r3, #14
 80034b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034bc:	4619      	mov	r1, r3
 80034be:	483c      	ldr	r0, [pc, #240]	; (80035b0 <HAL_LTDC_MspInit+0x218>)
 80034c0:	f000 fe8a 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80034c4:	2303      	movs	r3, #3
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	2302      	movs	r3, #2
 80034ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d0:	2300      	movs	r3, #0
 80034d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80034d4:	2309      	movs	r3, #9
 80034d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034dc:	4619      	mov	r1, r3
 80034de:	4835      	ldr	r0, [pc, #212]	; (80035b4 <HAL_LTDC_MspInit+0x21c>)
 80034e0:	f000 fe7a 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80034e4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ea:	2302      	movs	r3, #2
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f2:	2300      	movs	r3, #0
 80034f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034f6:	230e      	movs	r3, #14
 80034f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034fe:	4619      	mov	r1, r3
 8003500:	482c      	ldr	r0, [pc, #176]	; (80035b4 <HAL_LTDC_MspInit+0x21c>)
 8003502:	f000 fe69 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003506:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350c:	2302      	movs	r3, #2
 800350e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003510:	2300      	movs	r3, #0
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003514:	2300      	movs	r3, #0
 8003516:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003518:	230e      	movs	r3, #14
 800351a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800351c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003520:	4619      	mov	r1, r3
 8003522:	4825      	ldr	r0, [pc, #148]	; (80035b8 <HAL_LTDC_MspInit+0x220>)
 8003524:	f000 fe58 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003528:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352e:	2302      	movs	r3, #2
 8003530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003532:	2300      	movs	r3, #0
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003536:	2300      	movs	r3, #0
 8003538:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800353a:	230e      	movs	r3, #14
 800353c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800353e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003542:	4619      	mov	r1, r3
 8003544:	481d      	ldr	r0, [pc, #116]	; (80035bc <HAL_LTDC_MspInit+0x224>)
 8003546:	f000 fe47 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800354a:	2348      	movs	r3, #72	; 0x48
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354e:	2302      	movs	r3, #2
 8003550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003552:	2300      	movs	r3, #0
 8003554:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003556:	2300      	movs	r3, #0
 8003558:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800355a:	230e      	movs	r3, #14
 800355c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800355e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003562:	4619      	mov	r1, r3
 8003564:	4816      	ldr	r0, [pc, #88]	; (80035c0 <HAL_LTDC_MspInit+0x228>)
 8003566:	f000 fe37 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800356a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003570:	2302      	movs	r3, #2
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	2300      	movs	r3, #0
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003578:	2300      	movs	r3, #0
 800357a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800357c:	2309      	movs	r3, #9
 800357e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003584:	4619      	mov	r1, r3
 8003586:	480c      	ldr	r0, [pc, #48]	; (80035b8 <HAL_LTDC_MspInit+0x220>)
 8003588:	f000 fe26 	bl	80041d8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800358c:	2200      	movs	r2, #0
 800358e:	2105      	movs	r1, #5
 8003590:	2058      	movs	r0, #88	; 0x58
 8003592:	f000 fbef 	bl	8003d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003596:	2058      	movs	r0, #88	; 0x58
 8003598:	f000 fc08 	bl	8003dac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800359c:	bf00      	nop
 800359e:	3738      	adds	r7, #56	; 0x38
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40016800 	.word	0x40016800
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40021400 	.word	0x40021400
 80035b0:	40020000 	.word	0x40020000
 80035b4:	40020400 	.word	0x40020400
 80035b8:	40021800 	.word	0x40021800
 80035bc:	40020800 	.word	0x40020800
 80035c0:	40020c00 	.word	0x40020c00

080035c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08a      	sub	sp, #40	; 0x28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	609a      	str	r2, [r3, #8]
 80035d8:	60da      	str	r2, [r3, #12]
 80035da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a19      	ldr	r2, [pc, #100]	; (8003648 <HAL_SPI_MspInit+0x84>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d12c      	bne.n	8003640 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	4b18      	ldr	r3, [pc, #96]	; (800364c <HAL_SPI_MspInit+0x88>)
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	4a17      	ldr	r2, [pc, #92]	; (800364c <HAL_SPI_MspInit+0x88>)
 80035f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035f4:	6453      	str	r3, [r2, #68]	; 0x44
 80035f6:	4b15      	ldr	r3, [pc, #84]	; (800364c <HAL_SPI_MspInit+0x88>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035fe:	613b      	str	r3, [r7, #16]
 8003600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	4b11      	ldr	r3, [pc, #68]	; (800364c <HAL_SPI_MspInit+0x88>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	4a10      	ldr	r2, [pc, #64]	; (800364c <HAL_SPI_MspInit+0x88>)
 800360c:	f043 0320 	orr.w	r3, r3, #32
 8003610:	6313      	str	r3, [r2, #48]	; 0x30
 8003612:	4b0e      	ldr	r3, [pc, #56]	; (800364c <HAL_SPI_MspInit+0x88>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800361e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003624:	2302      	movs	r3, #2
 8003626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003628:	2300      	movs	r3, #0
 800362a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362c:	2300      	movs	r3, #0
 800362e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003630:	2305      	movs	r3, #5
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	4619      	mov	r1, r3
 800363a:	4805      	ldr	r0, [pc, #20]	; (8003650 <HAL_SPI_MspInit+0x8c>)
 800363c:	f000 fdcc 	bl	80041d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8003640:	bf00      	nop
 8003642:	3728      	adds	r7, #40	; 0x28
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40015000 	.word	0x40015000
 800364c:	40023800 	.word	0x40023800
 8003650:	40021400 	.word	0x40021400

08003654 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a08      	ldr	r2, [pc, #32]	; (8003684 <HAL_SPI_MspDeInit+0x30>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d10a      	bne.n	800367c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003666:	4b08      	ldr	r3, [pc, #32]	; (8003688 <HAL_SPI_MspDeInit+0x34>)
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	4a07      	ldr	r2, [pc, #28]	; (8003688 <HAL_SPI_MspDeInit+0x34>)
 800366c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003670:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003672:	f44f 7160 	mov.w	r1, #896	; 0x380
 8003676:	4805      	ldr	r0, [pc, #20]	; (800368c <HAL_SPI_MspDeInit+0x38>)
 8003678:	f000 ff58 	bl	800452c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800367c:	bf00      	nop
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40015000 	.word	0x40015000
 8003688:	40023800 	.word	0x40023800
 800368c:	40021400 	.word	0x40021400

08003690 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a0b      	ldr	r2, [pc, #44]	; (80036cc <HAL_TIM_Base_MspInit+0x3c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d10d      	bne.n	80036be <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036a2:	2300      	movs	r3, #0
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <HAL_TIM_Base_MspInit+0x40>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	4a09      	ldr	r2, [pc, #36]	; (80036d0 <HAL_TIM_Base_MspInit+0x40>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	6453      	str	r3, [r2, #68]	; 0x44
 80036b2:	4b07      	ldr	r3, [pc, #28]	; (80036d0 <HAL_TIM_Base_MspInit+0x40>)
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80036be:	bf00      	nop
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40010000 	.word	0x40010000
 80036d0:	40023800 	.word	0x40023800

080036d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08a      	sub	sp, #40	; 0x28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036dc:	f107 0314 	add.w	r3, r7, #20
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	605a      	str	r2, [r3, #4]
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	60da      	str	r2, [r3, #12]
 80036ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a19      	ldr	r2, [pc, #100]	; (8003758 <HAL_UART_MspInit+0x84>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d12c      	bne.n	8003750 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	4b18      	ldr	r3, [pc, #96]	; (800375c <HAL_UART_MspInit+0x88>)
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	4a17      	ldr	r2, [pc, #92]	; (800375c <HAL_UART_MspInit+0x88>)
 8003700:	f043 0310 	orr.w	r3, r3, #16
 8003704:	6453      	str	r3, [r2, #68]	; 0x44
 8003706:	4b15      	ldr	r3, [pc, #84]	; (800375c <HAL_UART_MspInit+0x88>)
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	f003 0310 	and.w	r3, r3, #16
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	4b11      	ldr	r3, [pc, #68]	; (800375c <HAL_UART_MspInit+0x88>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	4a10      	ldr	r2, [pc, #64]	; (800375c <HAL_UART_MspInit+0x88>)
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	6313      	str	r3, [r2, #48]	; 0x30
 8003722:	4b0e      	ldr	r3, [pc, #56]	; (800375c <HAL_UART_MspInit+0x88>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800372e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003734:	2302      	movs	r3, #2
 8003736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373c:	2303      	movs	r3, #3
 800373e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003740:	2307      	movs	r3, #7
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	4619      	mov	r1, r3
 800374a:	4805      	ldr	r0, [pc, #20]	; (8003760 <HAL_UART_MspInit+0x8c>)
 800374c:	f000 fd44 	bl	80041d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003750:	bf00      	nop
 8003752:	3728      	adds	r7, #40	; 0x28
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40011000 	.word	0x40011000
 800375c:	40023800 	.word	0x40023800
 8003760:	40020000 	.word	0x40020000

08003764 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08a      	sub	sp, #40	; 0x28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376c:	f107 0314 	add.w	r3, r7, #20
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_HS)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a24      	ldr	r2, [pc, #144]	; (8003814 <HAL_HCD_MspInit+0xb0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d141      	bne.n	800380a <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	4b23      	ldr	r3, [pc, #140]	; (8003818 <HAL_HCD_MspInit+0xb4>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	4a22      	ldr	r2, [pc, #136]	; (8003818 <HAL_HCD_MspInit+0xb4>)
 8003790:	f043 0302 	orr.w	r3, r3, #2
 8003794:	6313      	str	r3, [r2, #48]	; 0x30
 8003796:	4b20      	ldr	r3, [pc, #128]	; (8003818 <HAL_HCD_MspInit+0xb4>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80037a2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80037a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a8:	2302      	movs	r3, #2
 80037aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b0:	2300      	movs	r3, #0
 80037b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80037b4:	230c      	movs	r3, #12
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b8:	f107 0314 	add.w	r3, r7, #20
 80037bc:	4619      	mov	r1, r3
 80037be:	4817      	ldr	r0, [pc, #92]	; (800381c <HAL_HCD_MspInit+0xb8>)
 80037c0:	f000 fd0a 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80037c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037ca:	2300      	movs	r3, #0
 80037cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80037d2:	f107 0314 	add.w	r3, r7, #20
 80037d6:	4619      	mov	r1, r3
 80037d8:	4810      	ldr	r0, [pc, #64]	; (800381c <HAL_HCD_MspInit+0xb8>)
 80037da:	f000 fcfd 	bl	80041d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	4b0d      	ldr	r3, [pc, #52]	; (8003818 <HAL_HCD_MspInit+0xb4>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	4a0c      	ldr	r2, [pc, #48]	; (8003818 <HAL_HCD_MspInit+0xb4>)
 80037e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037ec:	6313      	str	r3, [r2, #48]	; 0x30
 80037ee:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <HAL_HCD_MspInit+0xb4>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80037fa:	2200      	movs	r2, #0
 80037fc:	2100      	movs	r1, #0
 80037fe:	204d      	movs	r0, #77	; 0x4d
 8003800:	f000 fab8 	bl	8003d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8003804:	204d      	movs	r0, #77	; 0x4d
 8003806:	f000 fad1 	bl	8003dac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 800380a:	bf00      	nop
 800380c:	3728      	adds	r7, #40	; 0x28
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40040000 	.word	0x40040000
 8003818:	40023800 	.word	0x40023800
 800381c:	40020400 	.word	0x40020400

08003820 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003826:	1d3b      	adds	r3, r7, #4
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	60da      	str	r2, [r3, #12]
 8003832:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003834:	4b3b      	ldr	r3, [pc, #236]	; (8003924 <HAL_FMC_MspInit+0x104>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d16f      	bne.n	800391c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800383c:	4b39      	ldr	r3, [pc, #228]	; (8003924 <HAL_FMC_MspInit+0x104>)
 800383e:	2201      	movs	r2, #1
 8003840:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	603b      	str	r3, [r7, #0]
 8003846:	4b38      	ldr	r3, [pc, #224]	; (8003928 <HAL_FMC_MspInit+0x108>)
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	4a37      	ldr	r2, [pc, #220]	; (8003928 <HAL_FMC_MspInit+0x108>)
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	6393      	str	r3, [r2, #56]	; 0x38
 8003852:	4b35      	ldr	r3, [pc, #212]	; (8003928 <HAL_FMC_MspInit+0x108>)
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	603b      	str	r3, [r7, #0]
 800385c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800385e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003862:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003864:	2302      	movs	r3, #2
 8003866:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800386c:	2303      	movs	r3, #3
 800386e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003870:	230c      	movs	r3, #12
 8003872:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003874:	1d3b      	adds	r3, r7, #4
 8003876:	4619      	mov	r1, r3
 8003878:	482c      	ldr	r0, [pc, #176]	; (800392c <HAL_FMC_MspInit+0x10c>)
 800387a:	f000 fcad 	bl	80041d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800387e:	2301      	movs	r3, #1
 8003880:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003882:	2302      	movs	r3, #2
 8003884:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800388a:	2303      	movs	r3, #3
 800388c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800388e:	230c      	movs	r3, #12
 8003890:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8003892:	1d3b      	adds	r3, r7, #4
 8003894:	4619      	mov	r1, r3
 8003896:	4826      	ldr	r0, [pc, #152]	; (8003930 <HAL_FMC_MspInit+0x110>)
 8003898:	f000 fc9e 	bl	80041d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800389c:	f248 1333 	movw	r3, #33075	; 0x8133
 80038a0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a2:	2302      	movs	r3, #2
 80038a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038aa:	2303      	movs	r3, #3
 80038ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038ae:	230c      	movs	r3, #12
 80038b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80038b2:	1d3b      	adds	r3, r7, #4
 80038b4:	4619      	mov	r1, r3
 80038b6:	481f      	ldr	r0, [pc, #124]	; (8003934 <HAL_FMC_MspInit+0x114>)
 80038b8:	f000 fc8e 	bl	80041d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80038bc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80038c0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c2:	2302      	movs	r3, #2
 80038c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ca:	2303      	movs	r3, #3
 80038cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038ce:	230c      	movs	r3, #12
 80038d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038d2:	1d3b      	adds	r3, r7, #4
 80038d4:	4619      	mov	r1, r3
 80038d6:	4818      	ldr	r0, [pc, #96]	; (8003938 <HAL_FMC_MspInit+0x118>)
 80038d8:	f000 fc7e 	bl	80041d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80038dc:	f24c 7303 	movw	r3, #50947	; 0xc703
 80038e0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e2:	2302      	movs	r3, #2
 80038e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ea:	2303      	movs	r3, #3
 80038ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038ee:	230c      	movs	r3, #12
 80038f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038f2:	1d3b      	adds	r3, r7, #4
 80038f4:	4619      	mov	r1, r3
 80038f6:	4811      	ldr	r0, [pc, #68]	; (800393c <HAL_FMC_MspInit+0x11c>)
 80038f8:	f000 fc6e 	bl	80041d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80038fc:	2360      	movs	r3, #96	; 0x60
 80038fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003900:	2302      	movs	r3, #2
 8003902:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003908:	2303      	movs	r3, #3
 800390a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800390c:	230c      	movs	r3, #12
 800390e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003910:	1d3b      	adds	r3, r7, #4
 8003912:	4619      	mov	r1, r3
 8003914:	480a      	ldr	r0, [pc, #40]	; (8003940 <HAL_FMC_MspInit+0x120>)
 8003916:	f000 fc5f 	bl	80041d8 <HAL_GPIO_Init>
 800391a:	e000      	b.n	800391e <HAL_FMC_MspInit+0xfe>
    return;
 800391c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	200000a0 	.word	0x200000a0
 8003928:	40023800 	.word	0x40023800
 800392c:	40021400 	.word	0x40021400
 8003930:	40020800 	.word	0x40020800
 8003934:	40021800 	.word	0x40021800
 8003938:	40021000 	.word	0x40021000
 800393c:	40020c00 	.word	0x40020c00
 8003940:	40020400 	.word	0x40020400

08003944 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800394c:	f7ff ff68 	bl	8003820 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003950:	bf00      	nop
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08c      	sub	sp, #48	; 0x30
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003960:	2300      	movs	r3, #0
 8003962:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003968:	2200      	movs	r2, #0
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	2036      	movs	r0, #54	; 0x36
 800396e:	f000 fa01 	bl	8003d74 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003972:	2036      	movs	r0, #54	; 0x36
 8003974:	f000 fa1a 	bl	8003dac <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	4b1f      	ldr	r3, [pc, #124]	; (80039fc <HAL_InitTick+0xa4>)
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	4a1e      	ldr	r2, [pc, #120]	; (80039fc <HAL_InitTick+0xa4>)
 8003982:	f043 0310 	orr.w	r3, r3, #16
 8003986:	6413      	str	r3, [r2, #64]	; 0x40
 8003988:	4b1c      	ldr	r3, [pc, #112]	; (80039fc <HAL_InitTick+0xa4>)
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	f003 0310 	and.w	r3, r3, #16
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003994:	f107 0210 	add.w	r2, r7, #16
 8003998:	f107 0314 	add.w	r3, r7, #20
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f003 fae4 	bl	8006f6c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80039a4:	f003 faba 	bl	8006f1c <HAL_RCC_GetPCLK1Freq>
 80039a8:	4603      	mov	r3, r0
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80039ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b0:	4a13      	ldr	r2, [pc, #76]	; (8003a00 <HAL_InitTick+0xa8>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	0c9b      	lsrs	r3, r3, #18
 80039b8:	3b01      	subs	r3, #1
 80039ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80039bc:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <HAL_InitTick+0xac>)
 80039be:	4a12      	ldr	r2, [pc, #72]	; (8003a08 <HAL_InitTick+0xb0>)
 80039c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80039c2:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <HAL_InitTick+0xac>)
 80039c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80039c8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80039ca:	4a0e      	ldr	r2, [pc, #56]	; (8003a04 <HAL_InitTick+0xac>)
 80039cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ce:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80039d0:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <HAL_InitTick+0xac>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039d6:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <HAL_InitTick+0xac>)
 80039d8:	2200      	movs	r2, #0
 80039da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80039dc:	4809      	ldr	r0, [pc, #36]	; (8003a04 <HAL_InitTick+0xac>)
 80039de:	f004 f905 	bl	8007bec <HAL_TIM_Base_Init>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d104      	bne.n	80039f2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80039e8:	4806      	ldr	r0, [pc, #24]	; (8003a04 <HAL_InitTick+0xac>)
 80039ea:	f004 f92a 	bl	8007c42 <HAL_TIM_Base_Start_IT>
 80039ee:	4603      	mov	r3, r0
 80039f0:	e000      	b.n	80039f4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3730      	adds	r7, #48	; 0x30
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40023800 	.word	0x40023800
 8003a00:	431bde83 	.word	0x431bde83
 8003a04:	20027a7c 	.word	0x20027a7c
 8003a08:	40001000 	.word	0x40001000

08003a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a1e:	e7fe      	b.n	8003a1e <HardFault_Handler+0x4>

08003a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a24:	e7fe      	b.n	8003a24 <MemManage_Handler+0x4>

08003a26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a26:	b480      	push	{r7}
 8003a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a2a:	e7fe      	b.n	8003a2a <BusFault_Handler+0x4>

08003a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a30:	e7fe      	b.n	8003a30 <UsageFault_Handler+0x4>

08003a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a32:	b480      	push	{r7}
 8003a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a36:	bf00      	nop
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a44:	bf00      	nop
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a60:	bf00      	nop
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003a70:	4802      	ldr	r0, [pc, #8]	; (8003a7c <TIM6_DAC_IRQHandler+0x10>)
 8003a72:	f004 f90a 	bl	8007c8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20027a7c 	.word	0x20027a7c

08003a80 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8003a84:	4802      	ldr	r0, [pc, #8]	; (8003a90 <OTG_HS_IRQHandler+0x10>)
 8003a86:	f000 feee 	bl	8004866 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20027700 	.word	0x20027700

08003a94 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003a98:	4802      	ldr	r0, [pc, #8]	; (8003aa4 <LTDC_IRQHandler+0x10>)
 8003a9a:	f002 fb77 	bl	800618c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20013d98 	.word	0x20013d98

08003aa8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003aac:	4802      	ldr	r0, [pc, #8]	; (8003ab8 <DMA2D_IRQHandler+0x10>)
 8003aae:	f000 f9f0 	bl	8003e92 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20027a08 	.word	0x20027a08

08003abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ac0:	4b08      	ldr	r3, [pc, #32]	; (8003ae4 <SystemInit+0x28>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac6:	4a07      	ldr	r2, [pc, #28]	; (8003ae4 <SystemInit+0x28>)
 8003ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ad0:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <SystemInit+0x28>)
 8003ad2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ad6:	609a      	str	r2, [r3, #8]
#endif
}
 8003ad8:	bf00      	nop
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	e000ed00 	.word	0xe000ed00

08003ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b20 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003aec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003aee:	e003      	b.n	8003af8 <LoopCopyDataInit>

08003af0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003af0:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003af2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003af4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003af6:	3104      	adds	r1, #4

08003af8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003af8:	480b      	ldr	r0, [pc, #44]	; (8003b28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003afa:	4b0c      	ldr	r3, [pc, #48]	; (8003b2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003afc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003afe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b00:	d3f6      	bcc.n	8003af0 <CopyDataInit>
  ldr  r2, =_sbss
 8003b02:	4a0b      	ldr	r2, [pc, #44]	; (8003b30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003b04:	e002      	b.n	8003b0c <LoopFillZerobss>

08003b06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003b06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003b08:	f842 3b04 	str.w	r3, [r2], #4

08003b0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003b0c:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003b0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003b10:	d3f9      	bcc.n	8003b06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b12:	f7ff ffd3 	bl	8003abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b16:	f005 fcc7 	bl	80094a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b1a:	f7fe fd29 	bl	8002570 <main>
  bx  lr    
 8003b1e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003b20:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003b24:	0800aba0 	.word	0x0800aba0
  ldr  r0, =_sdata
 8003b28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b2c:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8003b30:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 8003b34:	20027ac0 	.word	0x20027ac0

08003b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b38:	e7fe      	b.n	8003b38 <ADC_IRQHandler>
	...

08003b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b40:	4b0e      	ldr	r3, [pc, #56]	; (8003b7c <HAL_Init+0x40>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a0d      	ldr	r2, [pc, #52]	; (8003b7c <HAL_Init+0x40>)
 8003b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_Init+0x40>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <HAL_Init+0x40>)
 8003b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b58:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <HAL_Init+0x40>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a07      	ldr	r2, [pc, #28]	; (8003b7c <HAL_Init+0x40>)
 8003b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b64:	2003      	movs	r0, #3
 8003b66:	f000 f8fa 	bl	8003d5e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f7ff fef4 	bl	8003958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b70:	f7ff fb32 	bl	80031d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40023c00 	.word	0x40023c00

08003b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b84:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <HAL_IncTick+0x20>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_IncTick+0x24>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4413      	add	r3, r2
 8003b90:	4a04      	ldr	r2, [pc, #16]	; (8003ba4 <HAL_IncTick+0x24>)
 8003b92:	6013      	str	r3, [r2, #0]
}
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20000020 	.word	0x20000020
 8003ba4:	20027abc 	.word	0x20027abc

08003ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return uwTick;
 8003bac:	4b03      	ldr	r3, [pc, #12]	; (8003bbc <HAL_GetTick+0x14>)
 8003bae:	681b      	ldr	r3, [r3, #0]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	20027abc 	.word	0x20027abc

08003bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bc8:	f7ff ffee 	bl	8003ba8 <HAL_GetTick>
 8003bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d005      	beq.n	8003be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bda:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <HAL_Delay+0x40>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	461a      	mov	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4413      	add	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003be6:	bf00      	nop
 8003be8:	f7ff ffde 	bl	8003ba8 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d8f7      	bhi.n	8003be8 <HAL_Delay+0x28>
  {
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	20000020 	.word	0x20000020

08003c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <__NVIC_SetPriorityGrouping+0x44>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c20:	4013      	ands	r3, r2
 8003c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c36:	4a04      	ldr	r2, [pc, #16]	; (8003c48 <__NVIC_SetPriorityGrouping+0x44>)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	60d3      	str	r3, [r2, #12]
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c50:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <__NVIC_GetPriorityGrouping+0x18>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	f003 0307 	and.w	r3, r3, #7
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	db0b      	blt.n	8003c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	f003 021f 	and.w	r2, r3, #31
 8003c80:	4907      	ldr	r1, [pc, #28]	; (8003ca0 <__NVIC_EnableIRQ+0x38>)
 8003c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	2001      	movs	r0, #1
 8003c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	e000e100 	.word	0xe000e100

08003ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	6039      	str	r1, [r7, #0]
 8003cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	db0a      	blt.n	8003cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	490c      	ldr	r1, [pc, #48]	; (8003cf0 <__NVIC_SetPriority+0x4c>)
 8003cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc2:	0112      	lsls	r2, r2, #4
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ccc:	e00a      	b.n	8003ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	4908      	ldr	r1, [pc, #32]	; (8003cf4 <__NVIC_SetPriority+0x50>)
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	3b04      	subs	r3, #4
 8003cdc:	0112      	lsls	r2, r2, #4
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	761a      	strb	r2, [r3, #24]
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	e000e100 	.word	0xe000e100
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b089      	sub	sp, #36	; 0x24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f1c3 0307 	rsb	r3, r3, #7
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	bf28      	it	cs
 8003d16:	2304      	movcs	r3, #4
 8003d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	2b06      	cmp	r3, #6
 8003d20:	d902      	bls.n	8003d28 <NVIC_EncodePriority+0x30>
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3b03      	subs	r3, #3
 8003d26:	e000      	b.n	8003d2a <NVIC_EncodePriority+0x32>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43da      	mvns	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	401a      	ands	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d40:	f04f 31ff 	mov.w	r1, #4294967295
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4a:	43d9      	mvns	r1, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d50:	4313      	orrs	r3, r2
         );
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3724      	adds	r7, #36	; 0x24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7ff ff4c 	bl	8003c04 <__NVIC_SetPriorityGrouping>
}
 8003d6c:	bf00      	nop
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d86:	f7ff ff61 	bl	8003c4c <__NVIC_GetPriorityGrouping>
 8003d8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	68b9      	ldr	r1, [r7, #8]
 8003d90:	6978      	ldr	r0, [r7, #20]
 8003d92:	f7ff ffb1 	bl	8003cf8 <NVIC_EncodePriority>
 8003d96:	4602      	mov	r2, r0
 8003d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff ff80 	bl	8003ca4 <__NVIC_SetPriority>
}
 8003da4:	bf00      	nop
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff ff54 	bl	8003c68 <__NVIC_EnableIRQ>
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e00e      	b.n	8003df8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	795b      	ldrb	r3, [r3, #5]
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d105      	bne.n	8003df0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff fa20 	bl	8003230 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e03b      	b.n	8003e8a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff fa24 	bl	8003274 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e50:	f023 0107 	bic.w	r1, r3, #7
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003e6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68d1      	ldr	r1, [r2, #12]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6812      	ldr	r2, [r2, #0]
 8003e76:	430b      	orrs	r3, r1
 8003e78:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b084      	sub	sp, #16
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d026      	beq.n	8003f02 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d021      	beq.n	8003f02 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ecc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed2:	f043 0201 	orr.w	r2, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2204      	movs	r2, #4
 8003ee6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d026      	beq.n	8003f5a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d021      	beq.n	8003f5a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f24:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f32:	f043 0202 	orr.w	r2, r3, #2
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d026      	beq.n	8003fb2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d021      	beq.n	8003fb2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f7c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2208      	movs	r2, #8
 8003f84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8a:	f043 0204 	orr.w	r2, r3, #4
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2204      	movs	r2, #4
 8003f96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d013      	beq.n	8003fe4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00e      	beq.n	8003fe4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2204      	movs	r2, #4
 8003fdc:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f853 	bl	800408a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d024      	beq.n	8004038 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01f      	beq.n	8004038 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004006:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2202      	movs	r2, #2
 800400e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 0310 	and.w	r3, r3, #16
 800403e:	2b00      	cmp	r3, #0
 8004040:	d01f      	beq.n	8004082 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01a      	beq.n	8004082 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800405a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2210      	movs	r2, #16
 8004062:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f80e 	bl	800409e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004082:	bf00      	nop
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_DMA2D_ConfigLayer+0x20>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e079      	b.n	80041c8 <HAL_DMA2D_ConfigLayer+0x114>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	3318      	adds	r3, #24
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4413      	add	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	041b      	lsls	r3, r3, #16
 80040fa:	4313      	orrs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80040fe:	4b35      	ldr	r3, [pc, #212]	; (80041d4 <HAL_DMA2D_ConfigLayer+0x120>)
 8004100:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b0a      	cmp	r3, #10
 8004108:	d003      	beq.n	8004112 <HAL_DMA2D_ConfigLayer+0x5e>
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b09      	cmp	r3, #9
 8004110:	d107      	bne.n	8004122 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	e005      	b.n	800412e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	061b      	lsls	r3, r3, #24
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d120      	bne.n	8004176 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	43db      	mvns	r3, r3
 800413e:	ea02 0103 	and.w	r1, r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	430a      	orrs	r2, r1
 800414a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	6812      	ldr	r2, [r2, #0]
 8004154:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b0a      	cmp	r3, #10
 800415c:	d003      	beq.n	8004166 <HAL_DMA2D_ConfigLayer+0xb2>
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b09      	cmp	r3, #9
 8004164:	d127      	bne.n	80041b6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004172:	629a      	str	r2, [r3, #40]	; 0x28
 8004174:	e01f      	b.n	80041b6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69da      	ldr	r2, [r3, #28]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	43db      	mvns	r3, r3
 8004180:	ea02 0103 	and.w	r1, r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	430a      	orrs	r2, r1
 800418c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b0a      	cmp	r3, #10
 800419e:	d003      	beq.n	80041a8 <HAL_DMA2D_ConfigLayer+0xf4>
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2b09      	cmp	r3, #9
 80041a6:	d106      	bne.n	80041b6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80041b4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	ff03000f 	.word	0xff03000f

080041d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041d8:	b480      	push	{r7}
 80041da:	b089      	sub	sp, #36	; 0x24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	e177      	b.n	80044e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041f4:	2201      	movs	r2, #1
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4013      	ands	r3, r2
 8004206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	429a      	cmp	r2, r3
 800420e:	f040 8166 	bne.w	80044de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d00b      	beq.n	8004232 <HAL_GPIO_Init+0x5a>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d007      	beq.n	8004232 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004226:	2b11      	cmp	r3, #17
 8004228:	d003      	beq.n	8004232 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b12      	cmp	r3, #18
 8004230:	d130      	bne.n	8004294 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	2203      	movs	r2, #3
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	43db      	mvns	r3, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4013      	ands	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4313      	orrs	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004268:	2201      	movs	r2, #1
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	43db      	mvns	r3, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4013      	ands	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	f003 0201 	and.w	r2, r3, #1
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4313      	orrs	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	2203      	movs	r2, #3
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	43db      	mvns	r3, r3
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4013      	ands	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d003      	beq.n	80042d4 <HAL_GPIO_Init+0xfc>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b12      	cmp	r3, #18
 80042d2:	d123      	bne.n	800431c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	08da      	lsrs	r2, r3, #3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3208      	adds	r2, #8
 80042dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	220f      	movs	r2, #15
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	43db      	mvns	r3, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4013      	ands	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	4313      	orrs	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	08da      	lsrs	r2, r3, #3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3208      	adds	r2, #8
 8004316:	69b9      	ldr	r1, [r7, #24]
 8004318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	2203      	movs	r2, #3
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	43db      	mvns	r3, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4013      	ands	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 0203 	and.w	r2, r3, #3
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	4313      	orrs	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80c0 	beq.w	80044de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	4b65      	ldr	r3, [pc, #404]	; (80044f8 <HAL_GPIO_Init+0x320>)
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	4a64      	ldr	r2, [pc, #400]	; (80044f8 <HAL_GPIO_Init+0x320>)
 8004368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800436c:	6453      	str	r3, [r2, #68]	; 0x44
 800436e:	4b62      	ldr	r3, [pc, #392]	; (80044f8 <HAL_GPIO_Init+0x320>)
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800437a:	4a60      	ldr	r2, [pc, #384]	; (80044fc <HAL_GPIO_Init+0x324>)
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	089b      	lsrs	r3, r3, #2
 8004380:	3302      	adds	r3, #2
 8004382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	220f      	movs	r2, #15
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43db      	mvns	r3, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4013      	ands	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a57      	ldr	r2, [pc, #348]	; (8004500 <HAL_GPIO_Init+0x328>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d037      	beq.n	8004416 <HAL_GPIO_Init+0x23e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a56      	ldr	r2, [pc, #344]	; (8004504 <HAL_GPIO_Init+0x32c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d031      	beq.n	8004412 <HAL_GPIO_Init+0x23a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a55      	ldr	r2, [pc, #340]	; (8004508 <HAL_GPIO_Init+0x330>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d02b      	beq.n	800440e <HAL_GPIO_Init+0x236>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a54      	ldr	r2, [pc, #336]	; (800450c <HAL_GPIO_Init+0x334>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d025      	beq.n	800440a <HAL_GPIO_Init+0x232>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a53      	ldr	r2, [pc, #332]	; (8004510 <HAL_GPIO_Init+0x338>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01f      	beq.n	8004406 <HAL_GPIO_Init+0x22e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a52      	ldr	r2, [pc, #328]	; (8004514 <HAL_GPIO_Init+0x33c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d019      	beq.n	8004402 <HAL_GPIO_Init+0x22a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a51      	ldr	r2, [pc, #324]	; (8004518 <HAL_GPIO_Init+0x340>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d013      	beq.n	80043fe <HAL_GPIO_Init+0x226>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a50      	ldr	r2, [pc, #320]	; (800451c <HAL_GPIO_Init+0x344>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00d      	beq.n	80043fa <HAL_GPIO_Init+0x222>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a4f      	ldr	r2, [pc, #316]	; (8004520 <HAL_GPIO_Init+0x348>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d007      	beq.n	80043f6 <HAL_GPIO_Init+0x21e>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a4e      	ldr	r2, [pc, #312]	; (8004524 <HAL_GPIO_Init+0x34c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d101      	bne.n	80043f2 <HAL_GPIO_Init+0x21a>
 80043ee:	2309      	movs	r3, #9
 80043f0:	e012      	b.n	8004418 <HAL_GPIO_Init+0x240>
 80043f2:	230a      	movs	r3, #10
 80043f4:	e010      	b.n	8004418 <HAL_GPIO_Init+0x240>
 80043f6:	2308      	movs	r3, #8
 80043f8:	e00e      	b.n	8004418 <HAL_GPIO_Init+0x240>
 80043fa:	2307      	movs	r3, #7
 80043fc:	e00c      	b.n	8004418 <HAL_GPIO_Init+0x240>
 80043fe:	2306      	movs	r3, #6
 8004400:	e00a      	b.n	8004418 <HAL_GPIO_Init+0x240>
 8004402:	2305      	movs	r3, #5
 8004404:	e008      	b.n	8004418 <HAL_GPIO_Init+0x240>
 8004406:	2304      	movs	r3, #4
 8004408:	e006      	b.n	8004418 <HAL_GPIO_Init+0x240>
 800440a:	2303      	movs	r3, #3
 800440c:	e004      	b.n	8004418 <HAL_GPIO_Init+0x240>
 800440e:	2302      	movs	r3, #2
 8004410:	e002      	b.n	8004418 <HAL_GPIO_Init+0x240>
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <HAL_GPIO_Init+0x240>
 8004416:	2300      	movs	r3, #0
 8004418:	69fa      	ldr	r2, [r7, #28]
 800441a:	f002 0203 	and.w	r2, r2, #3
 800441e:	0092      	lsls	r2, r2, #2
 8004420:	4093      	lsls	r3, r2
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4313      	orrs	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004428:	4934      	ldr	r1, [pc, #208]	; (80044fc <HAL_GPIO_Init+0x324>)
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	089b      	lsrs	r3, r3, #2
 800442e:	3302      	adds	r3, #2
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004436:	4b3c      	ldr	r3, [pc, #240]	; (8004528 <HAL_GPIO_Init+0x350>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	43db      	mvns	r3, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4013      	ands	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	4313      	orrs	r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800445a:	4a33      	ldr	r2, [pc, #204]	; (8004528 <HAL_GPIO_Init+0x350>)
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004460:	4b31      	ldr	r3, [pc, #196]	; (8004528 <HAL_GPIO_Init+0x350>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	43db      	mvns	r3, r3
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	4013      	ands	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004484:	4a28      	ldr	r2, [pc, #160]	; (8004528 <HAL_GPIO_Init+0x350>)
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800448a:	4b27      	ldr	r3, [pc, #156]	; (8004528 <HAL_GPIO_Init+0x350>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	43db      	mvns	r3, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4013      	ands	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044ae:	4a1e      	ldr	r2, [pc, #120]	; (8004528 <HAL_GPIO_Init+0x350>)
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044b4:	4b1c      	ldr	r3, [pc, #112]	; (8004528 <HAL_GPIO_Init+0x350>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	43db      	mvns	r3, r3
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4013      	ands	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044d8:	4a13      	ldr	r2, [pc, #76]	; (8004528 <HAL_GPIO_Init+0x350>)
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	3301      	adds	r3, #1
 80044e2:	61fb      	str	r3, [r7, #28]
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	2b0f      	cmp	r3, #15
 80044e8:	f67f ae84 	bls.w	80041f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044ec:	bf00      	nop
 80044ee:	3724      	adds	r7, #36	; 0x24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	40023800 	.word	0x40023800
 80044fc:	40013800 	.word	0x40013800
 8004500:	40020000 	.word	0x40020000
 8004504:	40020400 	.word	0x40020400
 8004508:	40020800 	.word	0x40020800
 800450c:	40020c00 	.word	0x40020c00
 8004510:	40021000 	.word	0x40021000
 8004514:	40021400 	.word	0x40021400
 8004518:	40021800 	.word	0x40021800
 800451c:	40021c00 	.word	0x40021c00
 8004520:	40022000 	.word	0x40022000
 8004524:	40022400 	.word	0x40022400
 8004528:	40013c00 	.word	0x40013c00

0800452c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004536:	2300      	movs	r3, #0
 8004538:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800453e:	2300      	movs	r3, #0
 8004540:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	e0d9      	b.n	80046fc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004548:	2201      	movs	r2, #1
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4013      	ands	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	429a      	cmp	r2, r3
 8004560:	f040 80c9 	bne.w	80046f6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004564:	4a6a      	ldr	r2, [pc, #424]	; (8004710 <HAL_GPIO_DeInit+0x1e4>)
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	089b      	lsrs	r3, r3, #2
 800456a:	3302      	adds	r3, #2
 800456c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004570:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	220f      	movs	r2, #15
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	4013      	ands	r3, r2
 8004584:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a62      	ldr	r2, [pc, #392]	; (8004714 <HAL_GPIO_DeInit+0x1e8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d037      	beq.n	80045fe <HAL_GPIO_DeInit+0xd2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a61      	ldr	r2, [pc, #388]	; (8004718 <HAL_GPIO_DeInit+0x1ec>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d031      	beq.n	80045fa <HAL_GPIO_DeInit+0xce>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a60      	ldr	r2, [pc, #384]	; (800471c <HAL_GPIO_DeInit+0x1f0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d02b      	beq.n	80045f6 <HAL_GPIO_DeInit+0xca>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a5f      	ldr	r2, [pc, #380]	; (8004720 <HAL_GPIO_DeInit+0x1f4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d025      	beq.n	80045f2 <HAL_GPIO_DeInit+0xc6>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a5e      	ldr	r2, [pc, #376]	; (8004724 <HAL_GPIO_DeInit+0x1f8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d01f      	beq.n	80045ee <HAL_GPIO_DeInit+0xc2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a5d      	ldr	r2, [pc, #372]	; (8004728 <HAL_GPIO_DeInit+0x1fc>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d019      	beq.n	80045ea <HAL_GPIO_DeInit+0xbe>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a5c      	ldr	r2, [pc, #368]	; (800472c <HAL_GPIO_DeInit+0x200>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d013      	beq.n	80045e6 <HAL_GPIO_DeInit+0xba>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a5b      	ldr	r2, [pc, #364]	; (8004730 <HAL_GPIO_DeInit+0x204>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d00d      	beq.n	80045e2 <HAL_GPIO_DeInit+0xb6>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a5a      	ldr	r2, [pc, #360]	; (8004734 <HAL_GPIO_DeInit+0x208>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d007      	beq.n	80045de <HAL_GPIO_DeInit+0xb2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a59      	ldr	r2, [pc, #356]	; (8004738 <HAL_GPIO_DeInit+0x20c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d101      	bne.n	80045da <HAL_GPIO_DeInit+0xae>
 80045d6:	2309      	movs	r3, #9
 80045d8:	e012      	b.n	8004600 <HAL_GPIO_DeInit+0xd4>
 80045da:	230a      	movs	r3, #10
 80045dc:	e010      	b.n	8004600 <HAL_GPIO_DeInit+0xd4>
 80045de:	2308      	movs	r3, #8
 80045e0:	e00e      	b.n	8004600 <HAL_GPIO_DeInit+0xd4>
 80045e2:	2307      	movs	r3, #7
 80045e4:	e00c      	b.n	8004600 <HAL_GPIO_DeInit+0xd4>
 80045e6:	2306      	movs	r3, #6
 80045e8:	e00a      	b.n	8004600 <HAL_GPIO_DeInit+0xd4>
 80045ea:	2305      	movs	r3, #5
 80045ec:	e008      	b.n	8004600 <HAL_GPIO_DeInit+0xd4>
 80045ee:	2304      	movs	r3, #4
 80045f0:	e006      	b.n	8004600 <HAL_GPIO_DeInit+0xd4>
 80045f2:	2303      	movs	r3, #3
 80045f4:	e004      	b.n	8004600 <HAL_GPIO_DeInit+0xd4>
 80045f6:	2302      	movs	r3, #2
 80045f8:	e002      	b.n	8004600 <HAL_GPIO_DeInit+0xd4>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <HAL_GPIO_DeInit+0xd4>
 80045fe:	2300      	movs	r3, #0
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	f002 0203 	and.w	r2, r2, #3
 8004606:	0092      	lsls	r2, r2, #2
 8004608:	4093      	lsls	r3, r2
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	429a      	cmp	r2, r3
 800460e:	d132      	bne.n	8004676 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004610:	4b4a      	ldr	r3, [pc, #296]	; (800473c <HAL_GPIO_DeInit+0x210>)
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	43db      	mvns	r3, r3
 8004618:	4948      	ldr	r1, [pc, #288]	; (800473c <HAL_GPIO_DeInit+0x210>)
 800461a:	4013      	ands	r3, r2
 800461c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800461e:	4b47      	ldr	r3, [pc, #284]	; (800473c <HAL_GPIO_DeInit+0x210>)
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	43db      	mvns	r3, r3
 8004626:	4945      	ldr	r1, [pc, #276]	; (800473c <HAL_GPIO_DeInit+0x210>)
 8004628:	4013      	ands	r3, r2
 800462a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800462c:	4b43      	ldr	r3, [pc, #268]	; (800473c <HAL_GPIO_DeInit+0x210>)
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	43db      	mvns	r3, r3
 8004634:	4941      	ldr	r1, [pc, #260]	; (800473c <HAL_GPIO_DeInit+0x210>)
 8004636:	4013      	ands	r3, r2
 8004638:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800463a:	4b40      	ldr	r3, [pc, #256]	; (800473c <HAL_GPIO_DeInit+0x210>)
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	43db      	mvns	r3, r3
 8004642:	493e      	ldr	r1, [pc, #248]	; (800473c <HAL_GPIO_DeInit+0x210>)
 8004644:	4013      	ands	r3, r2
 8004646:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	220f      	movs	r2, #15
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004658:	4a2d      	ldr	r2, [pc, #180]	; (8004710 <HAL_GPIO_DeInit+0x1e4>)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	089b      	lsrs	r3, r3, #2
 800465e:	3302      	adds	r3, #2
 8004660:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	43da      	mvns	r2, r3
 8004668:	4829      	ldr	r0, [pc, #164]	; (8004710 <HAL_GPIO_DeInit+0x1e4>)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	089b      	lsrs	r3, r3, #2
 800466e:	400a      	ands	r2, r1
 8004670:	3302      	adds	r3, #2
 8004672:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	2103      	movs	r1, #3
 8004680:	fa01 f303 	lsl.w	r3, r1, r3
 8004684:	43db      	mvns	r3, r3
 8004686:	401a      	ands	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	08da      	lsrs	r2, r3, #3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3208      	adds	r2, #8
 8004694:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	220f      	movs	r2, #15
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43db      	mvns	r3, r3
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	08d2      	lsrs	r2, r2, #3
 80046ac:	4019      	ands	r1, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3208      	adds	r2, #8
 80046b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	2103      	movs	r1, #3
 80046c0:	fa01 f303 	lsl.w	r3, r1, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	401a      	ands	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	2101      	movs	r1, #1
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	fa01 f303 	lsl.w	r3, r1, r3
 80046d8:	43db      	mvns	r3, r3
 80046da:	401a      	ands	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	2103      	movs	r1, #3
 80046ea:	fa01 f303 	lsl.w	r3, r1, r3
 80046ee:	43db      	mvns	r3, r3
 80046f0:	401a      	ands	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	3301      	adds	r3, #1
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	2b0f      	cmp	r3, #15
 8004700:	f67f af22 	bls.w	8004548 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004704:	bf00      	nop
 8004706:	371c      	adds	r7, #28
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	40013800 	.word	0x40013800
 8004714:	40020000 	.word	0x40020000
 8004718:	40020400 	.word	0x40020400
 800471c:	40020800 	.word	0x40020800
 8004720:	40020c00 	.word	0x40020c00
 8004724:	40021000 	.word	0x40021000
 8004728:	40021400 	.word	0x40021400
 800472c:	40021800 	.word	0x40021800
 8004730:	40021c00 	.word	0x40021c00
 8004734:	40022000 	.word	0x40022000
 8004738:	40022400 	.word	0x40022400
 800473c:	40013c00 	.word	0x40013c00

08004740 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	460b      	mov	r3, r1
 800474a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	887b      	ldrh	r3, [r7, #2]
 8004752:	4013      	ands	r3, r2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004758:	2301      	movs	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
 800475c:	e001      	b.n	8004762 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800475e:	2300      	movs	r3, #0
 8004760:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004762:	7bfb      	ldrb	r3, [r7, #15]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	807b      	strh	r3, [r7, #2]
 800477c:	4613      	mov	r3, r2
 800477e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004780:	787b      	ldrb	r3, [r7, #1]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004786:	887a      	ldrh	r2, [r7, #2]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800478c:	e003      	b.n	8004796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800478e:	887b      	ldrh	r3, [r7, #2]
 8004790:	041a      	lsls	r2, r3, #16
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	619a      	str	r2, [r3, #24]
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80047a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047a4:	b08f      	sub	sp, #60	; 0x3c
 80047a6:	af0a      	add	r7, sp, #40	; 0x28
 80047a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e054      	b.n	800485e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fe ffc8 	bl	8003764 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2203      	movs	r2, #3
 80047d8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d102      	bne.n	80047ee <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f004 fb17 	bl	8008e26 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	603b      	str	r3, [r7, #0]
 80047fe:	687e      	ldr	r6, [r7, #4]
 8004800:	466d      	mov	r5, sp
 8004802:	f106 0410 	add.w	r4, r6, #16
 8004806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800480a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800480c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800480e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004812:	e885 0003 	stmia.w	r5, {r0, r1}
 8004816:	1d33      	adds	r3, r6, #4
 8004818:	cb0e      	ldmia	r3, {r1, r2, r3}
 800481a:	6838      	ldr	r0, [r7, #0]
 800481c:	f004 faa2 	bl	8008d64 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2101      	movs	r1, #1
 8004826:	4618      	mov	r0, r3
 8004828:	f004 fb0e 	bl	8008e48 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	603b      	str	r3, [r7, #0]
 8004832:	687e      	ldr	r6, [r7, #4]
 8004834:	466d      	mov	r5, sp
 8004836:	f106 0410 	add.w	r4, r6, #16
 800483a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800483c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800483e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004842:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004846:	e885 0003 	stmia.w	r5, {r0, r1}
 800484a:	1d33      	adds	r3, r6, #4
 800484c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800484e:	6838      	ldr	r0, [r7, #0]
 8004850:	f004 fbea 	bl	8009028 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004866 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b086      	sub	sp, #24
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f004 fb91 	bl	8008fa4 <USB_GetMode>
 8004882:	4603      	mov	r3, r0
 8004884:	2b01      	cmp	r3, #1
 8004886:	f040 80ef 	bne.w	8004a68 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f004 fb75 	bl	8008f7e <USB_ReadInterrupts>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 80e5 	beq.w	8004a66 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f004 fb6c 	bl	8008f7e <USB_ReadInterrupts>
 80048a6:	4603      	mov	r3, r0
 80048a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048b0:	d104      	bne.n	80048bc <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80048ba:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f004 fb5c 	bl	8008f7e <USB_ReadInterrupts>
 80048c6:	4603      	mov	r3, r0
 80048c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048d0:	d104      	bne.n	80048dc <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80048da:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f004 fb4c 	bl	8008f7e <USB_ReadInterrupts>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048f0:	d104      	bne.n	80048fc <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80048fa:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f004 fb3c 	bl	8008f7e <USB_ReadInterrupts>
 8004906:	4603      	mov	r3, r0
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b02      	cmp	r3, #2
 800490e:	d103      	bne.n	8004918 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2202      	movs	r2, #2
 8004916:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f004 fb2e 	bl	8008f7e <USB_ReadInterrupts>
 8004922:	4603      	mov	r3, r0
 8004924:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800492c:	d115      	bne.n	800495a <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004936:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b00      	cmp	r3, #0
 8004946:	d108      	bne.n	800495a <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f8a4 	bl	8004a96 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2101      	movs	r1, #1
 8004954:	4618      	mov	r0, r3
 8004956:	f004 fc23 	bl	80091a0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f004 fb0d 	bl	8008f7e <USB_ReadInterrupts>
 8004964:	4603      	mov	r3, r0
 8004966:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800496a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800496e:	d102      	bne.n	8004976 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f001 f913 	bl	8005b9c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f004 faff 	bl	8008f7e <USB_ReadInterrupts>
 8004980:	4603      	mov	r3, r0
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b08      	cmp	r3, #8
 8004988:	d106      	bne.n	8004998 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f86f 	bl	8004a6e <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2208      	movs	r2, #8
 8004996:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f004 faee 	bl	8008f7e <USB_ReadInterrupts>
 80049a2:	4603      	mov	r3, r0
 80049a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049ac:	d138      	bne.n	8004a20 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f004 fc67 	bl	8009286 <USB_HC_ReadInterrupt>
 80049b8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	e025      	b.n	8004a0c <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	fa22 f303 	lsr.w	r3, r2, r3
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d018      	beq.n	8004a06 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ea:	d106      	bne.n	80049fa <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	4619      	mov	r1, r3
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f87b 	bl	8004aee <HCD_HC_IN_IRQHandler>
 80049f8:	e005      	b.n	8004a06 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	4619      	mov	r1, r3
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fca9 	bl	8005358 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d3d4      	bcc.n	80049c0 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f004 faaa 	bl	8008f7e <USB_ReadInterrupts>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	2b10      	cmp	r3, #16
 8004a32:	d101      	bne.n	8004a38 <HAL_HCD_IRQHandler+0x1d2>
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <HAL_HCD_IRQHandler+0x1d4>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d014      	beq.n	8004a68 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	699a      	ldr	r2, [r3, #24]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0210 	bic.w	r2, r2, #16
 8004a4c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fff8 	bl	8005a44 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699a      	ldr	r2, [r3, #24]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0210 	orr.w	r2, r2, #16
 8004a62:	619a      	str	r2, [r3, #24]
 8004a64:	e000      	b.n	8004a68 <HAL_HCD_IRQHandler+0x202>
      return;
 8004a66:	bf00      	nop
    }
  }
}
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	460b      	mov	r3, r1
 8004adc:	70fb      	strb	r3, [r7, #3]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b086      	sub	sp, #24
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	460b      	mov	r3, r1
 8004af8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 0304 	and.w	r3, r3, #4
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d119      	bne.n	8004b52 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	0151      	lsls	r1, r2, #5
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	440a      	add	r2, r1
 8004b46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b4a:	f043 0302 	orr.w	r3, r3, #2
 8004b4e:	60d3      	str	r3, [r2, #12]
 8004b50:	e0ce      	b.n	8004cf0 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b68:	d12c      	bne.n	8004bc4 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b76:	461a      	mov	r2, r3
 8004b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	440b      	add	r3, r1
 8004b8c:	335d      	adds	r3, #93	; 0x5d
 8004b8e:	2207      	movs	r2, #7
 8004b90:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	0151      	lsls	r1, r2, #5
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	440a      	add	r2, r1
 8004ba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bac:	f043 0302 	orr.w	r3, r3, #2
 8004bb0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	4611      	mov	r1, r2
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f004 fb73 	bl	80092a8 <USB_HC_Halt>
 8004bc2:	e095      	b.n	8004cf0 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	d109      	bne.n	8004bee <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004be6:	461a      	mov	r2, r3
 8004be8:	2320      	movs	r3, #32
 8004bea:	6093      	str	r3, [r2, #8]
 8004bec:	e080      	b.n	8004cf0 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d134      	bne.n	8004c6e <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	0151      	lsls	r1, r2, #5
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	440a      	add	r2, r1
 8004c1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c1e:	f043 0302 	orr.w	r3, r3, #2
 8004c22:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	440b      	add	r3, r1
 8004c32:	335d      	adds	r3, #93	; 0x5d
 8004c34:	2205      	movs	r2, #5
 8004c36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c44:	461a      	mov	r2, r3
 8004c46:	2310      	movs	r3, #16
 8004c48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c56:	461a      	mov	r2, r3
 8004c58:	2308      	movs	r3, #8
 8004c5a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	4611      	mov	r1, r2
 8004c66:	4618      	mov	r0, r3
 8004c68:	f004 fb1e 	bl	80092a8 <USB_HC_Halt>
 8004c6c:	e040      	b.n	8004cf0 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c84:	d134      	bne.n	8004cf0 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	0151      	lsls	r1, r2, #5
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	440a      	add	r2, r1
 8004c9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ca0:	f043 0302 	orr.w	r3, r3, #2
 8004ca4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	4611      	mov	r1, r2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f004 faf9 	bl	80092a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	2310      	movs	r3, #16
 8004cc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	440b      	add	r3, r1
 8004cd6:	335d      	adds	r3, #93	; 0x5d
 8004cd8:	2208      	movs	r2, #8
 8004cda:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce8:	461a      	mov	r2, r3
 8004cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cee:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d06:	d122      	bne.n	8004d4e <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	0151      	lsls	r1, r2, #5
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	440a      	add	r2, r1
 8004d1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d22:	f043 0302 	orr.w	r3, r3, #2
 8004d26:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f004 fab8 	bl	80092a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d44:	461a      	mov	r2, r3
 8004d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d4a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004d4c:	e300      	b.n	8005350 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	f040 80fd 	bne.w	8004f60 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d01b      	beq.n	8004da6 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	440b      	add	r3, r1
 8004d7c:	3348      	adds	r3, #72	; 0x48
 8004d7e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	0159      	lsls	r1, r3, #5
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	440b      	add	r3, r1
 8004d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004d92:	1ad1      	subs	r1, r2, r3
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	4403      	add	r3, r0
 8004da2:	334c      	adds	r3, #76	; 0x4c
 8004da4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4613      	mov	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	440b      	add	r3, r1
 8004db4:	335d      	adds	r3, #93	; 0x5d
 8004db6:	2201      	movs	r2, #1
 8004db8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	440b      	add	r3, r1
 8004dc8:	3358      	adds	r3, #88	; 0x58
 8004dca:	2200      	movs	r2, #0
 8004dcc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dda:	461a      	mov	r2, r3
 8004ddc:	2301      	movs	r3, #1
 8004dde:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	4613      	mov	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	440b      	add	r3, r1
 8004dee:	333f      	adds	r3, #63	; 0x3f
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	440b      	add	r3, r1
 8004e04:	333f      	adds	r3, #63	; 0x3f
 8004e06:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d121      	bne.n	8004e50 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	0151      	lsls	r1, r2, #5
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	440a      	add	r2, r1
 8004e22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e26:	f043 0302 	orr.w	r3, r3, #2
 8004e2a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	4611      	mov	r1, r2
 8004e36:	4618      	mov	r0, r3
 8004e38:	f004 fa36 	bl	80092a8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e48:	461a      	mov	r2, r3
 8004e4a:	2310      	movs	r3, #16
 8004e4c:	6093      	str	r3, [r2, #8]
 8004e4e:	e070      	b.n	8004f32 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	440b      	add	r3, r1
 8004e5e:	333f      	adds	r3, #63	; 0x3f
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d12a      	bne.n	8004ebc <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	0151      	lsls	r1, r2, #5
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	440a      	add	r2, r1
 8004e7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e84:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	440b      	add	r3, r1
 8004e94:	335c      	adds	r3, #92	; 0x5c
 8004e96:	2201      	movs	r2, #1
 8004e98:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	b2d8      	uxtb	r0, r3
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	440b      	add	r3, r1
 8004eac:	335c      	adds	r3, #92	; 0x5c
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4601      	mov	r1, r0
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff fe0c 	bl	8004ad2 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004eba:	e03a      	b.n	8004f32 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	00db      	lsls	r3, r3, #3
 8004ec8:	440b      	add	r3, r1
 8004eca:	333f      	adds	r3, #63	; 0x3f
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d12f      	bne.n	8004f32 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	440b      	add	r3, r1
 8004ee0:	335c      	adds	r3, #92	; 0x5c
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	4613      	mov	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	440b      	add	r3, r1
 8004ef4:	3350      	adds	r3, #80	; 0x50
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	f083 0301 	eor.w	r3, r3, #1
 8004efc:	b2d8      	uxtb	r0, r3
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4613      	mov	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	440b      	add	r3, r1
 8004f0c:	3350      	adds	r3, #80	; 0x50
 8004f0e:	4602      	mov	r2, r0
 8004f10:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	b2d8      	uxtb	r0, r3
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	440b      	add	r3, r1
 8004f24:	335c      	adds	r3, #92	; 0x5c
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	4601      	mov	r1, r0
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff fdd0 	bl	8004ad2 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4613      	mov	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	440b      	add	r3, r1
 8004f40:	3350      	adds	r3, #80	; 0x50
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	f083 0301 	eor.w	r3, r3, #1
 8004f48:	b2d8      	uxtb	r0, r3
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	440b      	add	r3, r1
 8004f58:	3350      	adds	r3, #80	; 0x50
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	701a      	strb	r2, [r3, #0]
}
 8004f5e:	e1f7      	b.n	8005350 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	f040 811a 	bne.w	80051ac <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	0151      	lsls	r1, r2, #5
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	440a      	add	r2, r1
 8004f8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f92:	f023 0302 	bic.w	r3, r3, #2
 8004f96:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	440b      	add	r3, r1
 8004fa6:	335d      	adds	r3, #93	; 0x5d
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d10a      	bne.n	8004fc4 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	440b      	add	r3, r1
 8004fbc:	335c      	adds	r3, #92	; 0x5c
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	701a      	strb	r2, [r3, #0]
 8004fc2:	e0d9      	b.n	8005178 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	440b      	add	r3, r1
 8004fd2:	335d      	adds	r3, #93	; 0x5d
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b05      	cmp	r3, #5
 8004fd8:	d10a      	bne.n	8004ff0 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	440b      	add	r3, r1
 8004fe8:	335c      	adds	r3, #92	; 0x5c
 8004fea:	2205      	movs	r2, #5
 8004fec:	701a      	strb	r2, [r3, #0]
 8004fee:	e0c3      	b.n	8005178 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	440b      	add	r3, r1
 8004ffe:	335d      	adds	r3, #93	; 0x5d
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b06      	cmp	r3, #6
 8005004:	d00a      	beq.n	800501c <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4613      	mov	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	440b      	add	r3, r1
 8005014:	335d      	adds	r3, #93	; 0x5d
 8005016:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005018:	2b08      	cmp	r3, #8
 800501a:	d156      	bne.n	80050ca <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	440b      	add	r3, r1
 800502a:	3358      	adds	r3, #88	; 0x58
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	1c59      	adds	r1, r3, #1
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	4403      	add	r3, r0
 800503e:	3358      	adds	r3, #88	; 0x58
 8005040:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4613      	mov	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	440b      	add	r3, r1
 8005050:	3358      	adds	r3, #88	; 0x58
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b03      	cmp	r3, #3
 8005056:	d914      	bls.n	8005082 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4613      	mov	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	440b      	add	r3, r1
 8005066:	3358      	adds	r3, #88	; 0x58
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4613      	mov	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	440b      	add	r3, r1
 800507a:	335c      	adds	r3, #92	; 0x5c
 800507c:	2204      	movs	r2, #4
 800507e:	701a      	strb	r2, [r3, #0]
 8005080:	e009      	b.n	8005096 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4613      	mov	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	440b      	add	r3, r1
 8005090:	335c      	adds	r3, #92	; 0x5c
 8005092:	2202      	movs	r2, #2
 8005094:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	4413      	add	r3, r2
 800509e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050ac:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050b4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c2:	461a      	mov	r2, r3
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	e056      	b.n	8005178 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4613      	mov	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	440b      	add	r3, r1
 80050d8:	335d      	adds	r3, #93	; 0x5d
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b03      	cmp	r3, #3
 80050de:	d123      	bne.n	8005128 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	440b      	add	r3, r1
 80050ee:	335c      	adds	r3, #92	; 0x5c
 80050f0:	2202      	movs	r2, #2
 80050f2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800510a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005112:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	4413      	add	r3, r2
 800511c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005120:	461a      	mov	r2, r3
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	e027      	b.n	8005178 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	440b      	add	r3, r1
 8005136:	335d      	adds	r3, #93	; 0x5d
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b07      	cmp	r3, #7
 800513c:	d11c      	bne.n	8005178 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	440b      	add	r3, r1
 800514c:	3358      	adds	r3, #88	; 0x58
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	1c59      	adds	r1, r3, #1
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	4403      	add	r3, r0
 8005160:	3358      	adds	r3, #88	; 0x58
 8005162:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005164:	6879      	ldr	r1, [r7, #4]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4613      	mov	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	440b      	add	r3, r1
 8005172:	335c      	adds	r3, #92	; 0x5c
 8005174:	2204      	movs	r2, #4
 8005176:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	4413      	add	r3, r2
 8005180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005184:	461a      	mov	r2, r3
 8005186:	2302      	movs	r3, #2
 8005188:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	b2d8      	uxtb	r0, r3
 800518e:	6879      	ldr	r1, [r7, #4]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4613      	mov	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	440b      	add	r3, r1
 800519c:	335c      	adds	r3, #92	; 0x5c
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	461a      	mov	r2, r3
 80051a2:	4601      	mov	r1, r0
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7ff fc94 	bl	8004ad2 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80051aa:	e0d1      	b.n	8005350 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051be:	2b80      	cmp	r3, #128	; 0x80
 80051c0:	d13e      	bne.n	8005240 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051dc:	f043 0302 	orr.w	r3, r3, #2
 80051e0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80051e2:	6879      	ldr	r1, [r7, #4]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4613      	mov	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	440b      	add	r3, r1
 80051f0:	3358      	adds	r3, #88	; 0x58
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	1c59      	adds	r1, r3, #1
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4613      	mov	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	4403      	add	r3, r0
 8005204:	3358      	adds	r3, #88	; 0x58
 8005206:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005208:	6879      	ldr	r1, [r7, #4]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	4613      	mov	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	440b      	add	r3, r1
 8005216:	335d      	adds	r3, #93	; 0x5d
 8005218:	2206      	movs	r2, #6
 800521a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	4611      	mov	r1, r2
 8005226:	4618      	mov	r0, r3
 8005228:	f004 f83e 	bl	80092a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	4413      	add	r3, r2
 8005234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005238:	461a      	mov	r2, r3
 800523a:	2380      	movs	r3, #128	; 0x80
 800523c:	6093      	str	r3, [r2, #8]
}
 800523e:	e087      	b.n	8005350 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	4413      	add	r3, r2
 8005248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 0310 	and.w	r3, r3, #16
 8005252:	2b10      	cmp	r3, #16
 8005254:	d17c      	bne.n	8005350 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4613      	mov	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	440b      	add	r3, r1
 8005264:	333f      	adds	r3, #63	; 0x3f
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b03      	cmp	r3, #3
 800526a:	d122      	bne.n	80052b2 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800526c:	6879      	ldr	r1, [r7, #4]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	440b      	add	r3, r1
 800527a:	3358      	adds	r3, #88	; 0x58
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	4413      	add	r3, r2
 8005288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	0151      	lsls	r1, r2, #5
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	440a      	add	r2, r1
 8005296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800529a:	f043 0302 	orr.w	r3, r3, #2
 800529e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	4611      	mov	r1, r2
 80052aa:	4618      	mov	r0, r3
 80052ac:	f003 fffc 	bl	80092a8 <USB_HC_Halt>
 80052b0:	e045      	b.n	800533e <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	440b      	add	r3, r1
 80052c0:	333f      	adds	r3, #63	; 0x3f
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80052c8:	6879      	ldr	r1, [r7, #4]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	440b      	add	r3, r1
 80052d6:	333f      	adds	r3, #63	; 0x3f
 80052d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d12f      	bne.n	800533e <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4613      	mov	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	440b      	add	r3, r1
 80052ec:	3358      	adds	r3, #88	; 0x58
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d121      	bne.n	800533e <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80052fa:	6879      	ldr	r1, [r7, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4613      	mov	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	00db      	lsls	r3, r3, #3
 8005306:	440b      	add	r3, r1
 8005308:	335d      	adds	r3, #93	; 0x5d
 800530a:	2203      	movs	r2, #3
 800530c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	4413      	add	r3, r2
 8005316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	0151      	lsls	r1, r2, #5
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	440a      	add	r2, r1
 8005324:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005328:	f043 0302 	orr.w	r3, r3, #2
 800532c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	b2d2      	uxtb	r2, r2
 8005336:	4611      	mov	r1, r2
 8005338:	4618      	mov	r0, r3
 800533a:	f003 ffb5 	bl	80092a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	4413      	add	r3, r2
 8005346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534a:	461a      	mov	r2, r3
 800534c:	2310      	movs	r3, #16
 800534e:	6093      	str	r3, [r2, #8]
}
 8005350:	bf00      	nop
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800536e:	78fb      	ldrb	r3, [r7, #3]
 8005370:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	4413      	add	r3, r2
 800537a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b04      	cmp	r3, #4
 8005386:	d119      	bne.n	80053bc <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	4413      	add	r3, r2
 8005390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005394:	461a      	mov	r2, r3
 8005396:	2304      	movs	r3, #4
 8005398:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	0151      	lsls	r1, r2, #5
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	440a      	add	r2, r1
 80053b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053b4:	f043 0302 	orr.w	r3, r3, #2
 80053b8:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80053ba:	e33e      	b.n	8005a3a <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b20      	cmp	r3, #32
 80053d0:	d141      	bne.n	8005456 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053de:	461a      	mov	r2, r3
 80053e0:	2320      	movs	r3, #32
 80053e2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80053e4:	6879      	ldr	r1, [r7, #4]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	4613      	mov	r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4413      	add	r3, r2
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	440b      	add	r3, r1
 80053f2:	333d      	adds	r3, #61	; 0x3d
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	f040 831f 	bne.w	8005a3a <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80053fc:	6879      	ldr	r1, [r7, #4]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	440b      	add	r3, r1
 800540a:	333d      	adds	r3, #61	; 0x3d
 800540c:	2200      	movs	r2, #0
 800540e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	440b      	add	r3, r1
 800541e:	335c      	adds	r3, #92	; 0x5c
 8005420:	2202      	movs	r2, #2
 8005422:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	4413      	add	r3, r2
 800542c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	0151      	lsls	r1, r2, #5
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	440a      	add	r2, r1
 800543a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800543e:	f043 0302 	orr.w	r3, r3, #2
 8005442:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	4611      	mov	r1, r2
 800544e:	4618      	mov	r0, r3
 8005450:	f003 ff2a 	bl	80092a8 <USB_HC_Halt>
}
 8005454:	e2f1      	b.n	8005a3a <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	4413      	add	r3, r2
 800545e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d13f      	bne.n	80054ec <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	4613      	mov	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	440b      	add	r3, r1
 800547a:	335d      	adds	r3, #93	; 0x5d
 800547c:	2204      	movs	r2, #4
 800547e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005480:	6879      	ldr	r1, [r7, #4]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	4613      	mov	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	440b      	add	r3, r1
 800548e:	333d      	adds	r3, #61	; 0x3d
 8005490:	2201      	movs	r2, #1
 8005492:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005494:	6879      	ldr	r1, [r7, #4]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	440b      	add	r3, r1
 80054a2:	3358      	adds	r3, #88	; 0x58
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	0151      	lsls	r1, r2, #5
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	440a      	add	r2, r1
 80054be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054c2:	f043 0302 	orr.w	r3, r3, #2
 80054c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	4611      	mov	r1, r2
 80054d2:	4618      	mov	r0, r3
 80054d4:	f003 fee8 	bl	80092a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e4:	461a      	mov	r2, r3
 80054e6:	2340      	movs	r3, #64	; 0x40
 80054e8:	6093      	str	r3, [r2, #8]
}
 80054ea:	e2a6      	b.n	8005a3a <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005502:	d122      	bne.n	800554a <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	4413      	add	r3, r2
 800550c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	440a      	add	r2, r1
 800551a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800551e:	f043 0302 	orr.w	r3, r3, #2
 8005522:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	b2d2      	uxtb	r2, r2
 800552c:	4611      	mov	r1, r2
 800552e:	4618      	mov	r0, r3
 8005530:	f003 feba 	bl	80092a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	4413      	add	r3, r2
 800553c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005540:	461a      	mov	r2, r3
 8005542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005546:	6093      	str	r3, [r2, #8]
}
 8005548:	e277      	b.n	8005a3a <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	4413      	add	r3, r2
 8005552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b01      	cmp	r3, #1
 800555e:	d135      	bne.n	80055cc <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	4613      	mov	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	440b      	add	r3, r1
 800556e:	3358      	adds	r3, #88	; 0x58
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	4413      	add	r3, r2
 800557c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	0151      	lsls	r1, r2, #5
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	440a      	add	r2, r1
 800558a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800558e:	f043 0302 	orr.w	r3, r3, #2
 8005592:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	4611      	mov	r1, r2
 800559e:	4618      	mov	r0, r3
 80055a0:	f003 fe82 	bl	80092a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b0:	461a      	mov	r2, r3
 80055b2:	2301      	movs	r3, #1
 80055b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	440b      	add	r3, r1
 80055c4:	335d      	adds	r3, #93	; 0x5d
 80055c6:	2201      	movs	r2, #1
 80055c8:	701a      	strb	r2, [r3, #0]
}
 80055ca:	e236      	b.n	8005a3a <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b08      	cmp	r3, #8
 80055e0:	d12b      	bne.n	800563a <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ee:	461a      	mov	r2, r3
 80055f0:	2308      	movs	r3, #8
 80055f2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	0151      	lsls	r1, r2, #5
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	440a      	add	r2, r1
 800560a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800560e:	f043 0302 	orr.w	r3, r3, #2
 8005612:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	4611      	mov	r1, r2
 800561e:	4618      	mov	r0, r3
 8005620:	f003 fe42 	bl	80092a8 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4613      	mov	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	440b      	add	r3, r1
 8005632:	335d      	adds	r3, #93	; 0x5d
 8005634:	2205      	movs	r2, #5
 8005636:	701a      	strb	r2, [r3, #0]
}
 8005638:	e1ff      	b.n	8005a3a <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	4413      	add	r3, r2
 8005642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 0310 	and.w	r3, r3, #16
 800564c:	2b10      	cmp	r3, #16
 800564e:	d155      	bne.n	80056fc <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4613      	mov	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	440b      	add	r3, r1
 800565e:	3358      	adds	r3, #88	; 0x58
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	4613      	mov	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	440b      	add	r3, r1
 8005672:	335d      	adds	r3, #93	; 0x5d
 8005674:	2203      	movs	r2, #3
 8005676:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4613      	mov	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	440b      	add	r3, r1
 8005686:	333d      	adds	r3, #61	; 0x3d
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d114      	bne.n	80056b8 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4613      	mov	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	440b      	add	r3, r1
 800569c:	333c      	adds	r3, #60	; 0x3c
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d109      	bne.n	80056b8 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	440b      	add	r3, r1
 80056b2:	333d      	adds	r3, #61	; 0x3d
 80056b4:	2201      	movs	r2, #1
 80056b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	0151      	lsls	r1, r2, #5
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	440a      	add	r2, r1
 80056ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056d2:	f043 0302 	orr.w	r3, r3, #2
 80056d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	4611      	mov	r1, r2
 80056e2:	4618      	mov	r0, r3
 80056e4:	f003 fde0 	bl	80092a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f4:	461a      	mov	r2, r3
 80056f6:	2310      	movs	r3, #16
 80056f8:	6093      	str	r3, [r2, #8]
}
 80056fa:	e19e      	b.n	8005a3a <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	4413      	add	r3, r2
 8005704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570e:	2b80      	cmp	r3, #128	; 0x80
 8005710:	d12b      	bne.n	800576a <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	4413      	add	r3, r2
 800571a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	0151      	lsls	r1, r2, #5
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	440a      	add	r2, r1
 8005728:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800572c:	f043 0302 	orr.w	r3, r3, #2
 8005730:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	4611      	mov	r1, r2
 800573c:	4618      	mov	r0, r3
 800573e:	f003 fdb3 	bl	80092a8 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4613      	mov	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4413      	add	r3, r2
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	440b      	add	r3, r1
 8005750:	335d      	adds	r3, #93	; 0x5d
 8005752:	2206      	movs	r2, #6
 8005754:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	4413      	add	r3, r2
 800575e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005762:	461a      	mov	r2, r3
 8005764:	2380      	movs	r3, #128	; 0x80
 8005766:	6093      	str	r3, [r2, #8]
}
 8005768:	e167      	b.n	8005a3a <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	4413      	add	r3, r2
 8005772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800577c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005780:	d135      	bne.n	80057ee <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	4413      	add	r3, r2
 800578a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	0151      	lsls	r1, r2, #5
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	440a      	add	r2, r1
 8005798:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800579c:	f043 0302 	orr.w	r3, r3, #2
 80057a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	b2d2      	uxtb	r2, r2
 80057aa:	4611      	mov	r1, r2
 80057ac:	4618      	mov	r0, r3
 80057ae:	f003 fd7b 	bl	80092a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057be:	461a      	mov	r2, r3
 80057c0:	2310      	movs	r3, #16
 80057c2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d0:	461a      	mov	r2, r3
 80057d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4613      	mov	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	440b      	add	r3, r1
 80057e6:	335d      	adds	r3, #93	; 0x5d
 80057e8:	2208      	movs	r2, #8
 80057ea:	701a      	strb	r2, [r3, #0]
}
 80057ec:	e125      	b.n	8005a3a <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b02      	cmp	r3, #2
 8005802:	f040 811a 	bne.w	8005a3a <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	4413      	add	r3, r2
 800580e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	0151      	lsls	r1, r2, #5
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	440a      	add	r2, r1
 800581c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005820:	f023 0302 	bic.w	r3, r3, #2
 8005824:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005826:	6879      	ldr	r1, [r7, #4]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4613      	mov	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	440b      	add	r3, r1
 8005834:	335d      	adds	r3, #93	; 0x5d
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d137      	bne.n	80058ac <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4613      	mov	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	440b      	add	r3, r1
 800584a:	335c      	adds	r3, #92	; 0x5c
 800584c:	2201      	movs	r2, #1
 800584e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005850:	6879      	ldr	r1, [r7, #4]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	440b      	add	r3, r1
 800585e:	333f      	adds	r3, #63	; 0x3f
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b02      	cmp	r3, #2
 8005864:	d00b      	beq.n	800587e <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005866:	6879      	ldr	r1, [r7, #4]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4613      	mov	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	440b      	add	r3, r1
 8005874:	333f      	adds	r3, #63	; 0x3f
 8005876:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005878:	2b03      	cmp	r3, #3
 800587a:	f040 80c5 	bne.w	8005a08 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	440b      	add	r3, r1
 800588c:	3351      	adds	r3, #81	; 0x51
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	f083 0301 	eor.w	r3, r3, #1
 8005894:	b2d8      	uxtb	r0, r3
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4613      	mov	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	440b      	add	r3, r1
 80058a4:	3351      	adds	r3, #81	; 0x51
 80058a6:	4602      	mov	r2, r0
 80058a8:	701a      	strb	r2, [r3, #0]
 80058aa:	e0ad      	b.n	8005a08 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80058ac:	6879      	ldr	r1, [r7, #4]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4613      	mov	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	440b      	add	r3, r1
 80058ba:	335d      	adds	r3, #93	; 0x5d
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b03      	cmp	r3, #3
 80058c0:	d10a      	bne.n	80058d8 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80058c2:	6879      	ldr	r1, [r7, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	440b      	add	r3, r1
 80058d0:	335c      	adds	r3, #92	; 0x5c
 80058d2:	2202      	movs	r2, #2
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	e097      	b.n	8005a08 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4613      	mov	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	440b      	add	r3, r1
 80058e6:	335d      	adds	r3, #93	; 0x5d
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d10a      	bne.n	8005904 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4613      	mov	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	440b      	add	r3, r1
 80058fc:	335c      	adds	r3, #92	; 0x5c
 80058fe:	2202      	movs	r2, #2
 8005900:	701a      	strb	r2, [r3, #0]
 8005902:	e081      	b.n	8005a08 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	4613      	mov	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	440b      	add	r3, r1
 8005912:	335d      	adds	r3, #93	; 0x5d
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b05      	cmp	r3, #5
 8005918:	d10a      	bne.n	8005930 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	440b      	add	r3, r1
 8005928:	335c      	adds	r3, #92	; 0x5c
 800592a:	2205      	movs	r2, #5
 800592c:	701a      	strb	r2, [r3, #0]
 800592e:	e06b      	b.n	8005a08 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005930:	6879      	ldr	r1, [r7, #4]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4613      	mov	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	440b      	add	r3, r1
 800593e:	335d      	adds	r3, #93	; 0x5d
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b06      	cmp	r3, #6
 8005944:	d00a      	beq.n	800595c <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4613      	mov	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	440b      	add	r3, r1
 8005954:	335d      	adds	r3, #93	; 0x5d
 8005956:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005958:	2b08      	cmp	r3, #8
 800595a:	d155      	bne.n	8005a08 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4613      	mov	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	440b      	add	r3, r1
 800596a:	3358      	adds	r3, #88	; 0x58
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	1c59      	adds	r1, r3, #1
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	4403      	add	r3, r0
 800597e:	3358      	adds	r3, #88	; 0x58
 8005980:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4613      	mov	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	440b      	add	r3, r1
 8005990:	3358      	adds	r3, #88	; 0x58
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b03      	cmp	r3, #3
 8005996:	d914      	bls.n	80059c2 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	440b      	add	r3, r1
 80059a6:	3358      	adds	r3, #88	; 0x58
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	440b      	add	r3, r1
 80059ba:	335c      	adds	r3, #92	; 0x5c
 80059bc:	2204      	movs	r2, #4
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	e009      	b.n	80059d6 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	440b      	add	r3, r1
 80059d0:	335c      	adds	r3, #92	; 0x5c
 80059d2:	2202      	movs	r2, #2
 80059d4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059ec:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059f4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a02:	461a      	mov	r2, r3
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a14:	461a      	mov	r2, r3
 8005a16:	2302      	movs	r3, #2
 8005a18:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	b2d8      	uxtb	r0, r3
 8005a1e:	6879      	ldr	r1, [r7, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	440b      	add	r3, r1
 8005a2c:	335c      	adds	r3, #92	; 0x5c
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	461a      	mov	r2, r3
 8005a32:	4601      	mov	r1, r0
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7ff f84c 	bl	8004ad2 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005a3a:	bf00      	nop
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
	...

08005a44 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08a      	sub	sp, #40	; 0x28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	f003 030f 	and.w	r3, r3, #15
 8005a64:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	0c5b      	lsrs	r3, r3, #17
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	091b      	lsrs	r3, r3, #4
 8005a74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a78:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d003      	beq.n	8005a88 <HCD_RXQLVL_IRQHandler+0x44>
 8005a80:	2b05      	cmp	r3, #5
 8005a82:	f000 8082 	beq.w	8005b8a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005a86:	e083      	b.n	8005b90 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d07f      	beq.n	8005b8e <HCD_RXQLVL_IRQHandler+0x14a>
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	4613      	mov	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	440b      	add	r3, r1
 8005a9c:	3344      	adds	r3, #68	; 0x44
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d074      	beq.n	8005b8e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6818      	ldr	r0, [r3, #0]
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	4613      	mov	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	440b      	add	r3, r1
 8005ab6:	3344      	adds	r3, #68	; 0x44
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	b292      	uxth	r2, r2
 8005abe:	4619      	mov	r1, r3
 8005ac0:	f003 fa34 	bl	8008f2c <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005ac4:	6879      	ldr	r1, [r7, #4]
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	440b      	add	r3, r1
 8005ad2:	3344      	adds	r3, #68	; 0x44
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	18d1      	adds	r1, r2, r3
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	4403      	add	r3, r0
 8005ae8:	3344      	adds	r3, #68	; 0x44
 8005aea:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005aec:	6879      	ldr	r1, [r7, #4]
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	4613      	mov	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	440b      	add	r3, r1
 8005afa:	334c      	adds	r3, #76	; 0x4c
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	18d1      	adds	r1, r2, r3
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	4613      	mov	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	4403      	add	r3, r0
 8005b10:	334c      	adds	r3, #76	; 0x4c
 8005b12:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b20:	691a      	ldr	r2, [r3, #16]
 8005b22:	4b1d      	ldr	r3, [pc, #116]	; (8005b98 <HCD_RXQLVL_IRQHandler+0x154>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d031      	beq.n	8005b8e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b40:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b48:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b56:	461a      	mov	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005b5c:	6879      	ldr	r1, [r7, #4]
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	440b      	add	r3, r1
 8005b6a:	3350      	adds	r3, #80	; 0x50
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	f083 0301 	eor.w	r3, r3, #1
 8005b72:	b2d8      	uxtb	r0, r3
 8005b74:	6879      	ldr	r1, [r7, #4]
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	440b      	add	r3, r1
 8005b82:	3350      	adds	r3, #80	; 0x50
 8005b84:	4602      	mov	r2, r0
 8005b86:	701a      	strb	r2, [r3, #0]
      break;
 8005b88:	e001      	b.n	8005b8e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8005b8a:	bf00      	nop
 8005b8c:	e000      	b.n	8005b90 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8005b8e:	bf00      	nop
  }
}
 8005b90:	bf00      	nop
 8005b92:	3728      	adds	r7, #40	; 0x28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	1ff80000 	.word	0x1ff80000

08005b9c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005bc8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d10b      	bne.n	8005bec <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d102      	bne.n	8005be4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7fe ff4f 	bl	8004a82 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f043 0302 	orr.w	r3, r3, #2
 8005bea:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f003 0308 	and.w	r3, r3, #8
 8005bf2:	2b08      	cmp	r3, #8
 8005bf4:	d132      	bne.n	8005c5c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f043 0308 	orr.w	r3, r3, #8
 8005bfc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d126      	bne.n	8005c56 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d113      	bne.n	8005c38 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005c16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c1a:	d106      	bne.n	8005c2a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2102      	movs	r1, #2
 8005c22:	4618      	mov	r0, r3
 8005c24:	f003 fabc 	bl	80091a0 <USB_InitFSLSPClkSel>
 8005c28:	e011      	b.n	8005c4e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2101      	movs	r1, #1
 8005c30:	4618      	mov	r0, r3
 8005c32:	f003 fab5 	bl	80091a0 <USB_InitFSLSPClkSel>
 8005c36:	e00a      	b.n	8005c4e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d106      	bne.n	8005c4e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c46:	461a      	mov	r2, r3
 8005c48:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005c4c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fe ff2b 	bl	8004aaa <HAL_HCD_PortEnabled_Callback>
 8005c54:	e002      	b.n	8005c5c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7fe ff31 	bl	8004abe <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b20      	cmp	r3, #32
 8005c64:	d103      	bne.n	8005c6e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	f043 0320 	orr.w	r3, r3, #32
 8005c6c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c74:	461a      	mov	r2, r3
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	6013      	str	r3, [r2, #0]
}
 8005c7a:	bf00      	nop
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
	...

08005c84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e11f      	b.n	8005ed6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d106      	bne.n	8005cb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fd fb0a 	bl	80032c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2224      	movs	r2, #36	; 0x24
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0201 	bic.w	r2, r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ce6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ce8:	f001 f918 	bl	8006f1c <HAL_RCC_GetPCLK1Freq>
 8005cec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	4a7b      	ldr	r2, [pc, #492]	; (8005ee0 <HAL_I2C_Init+0x25c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d807      	bhi.n	8005d08 <HAL_I2C_Init+0x84>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4a7a      	ldr	r2, [pc, #488]	; (8005ee4 <HAL_I2C_Init+0x260>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	bf94      	ite	ls
 8005d00:	2301      	movls	r3, #1
 8005d02:	2300      	movhi	r3, #0
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	e006      	b.n	8005d16 <HAL_I2C_Init+0x92>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4a77      	ldr	r2, [pc, #476]	; (8005ee8 <HAL_I2C_Init+0x264>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	bf94      	ite	ls
 8005d10:	2301      	movls	r3, #1
 8005d12:	2300      	movhi	r3, #0
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e0db      	b.n	8005ed6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4a72      	ldr	r2, [pc, #456]	; (8005eec <HAL_I2C_Init+0x268>)
 8005d22:	fba2 2303 	umull	r2, r3, r2, r3
 8005d26:	0c9b      	lsrs	r3, r3, #18
 8005d28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	4a64      	ldr	r2, [pc, #400]	; (8005ee0 <HAL_I2C_Init+0x25c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d802      	bhi.n	8005d58 <HAL_I2C_Init+0xd4>
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	3301      	adds	r3, #1
 8005d56:	e009      	b.n	8005d6c <HAL_I2C_Init+0xe8>
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005d5e:	fb02 f303 	mul.w	r3, r2, r3
 8005d62:	4a63      	ldr	r2, [pc, #396]	; (8005ef0 <HAL_I2C_Init+0x26c>)
 8005d64:	fba2 2303 	umull	r2, r3, r2, r3
 8005d68:	099b      	lsrs	r3, r3, #6
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6812      	ldr	r2, [r2, #0]
 8005d70:	430b      	orrs	r3, r1
 8005d72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005d7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	4956      	ldr	r1, [pc, #344]	; (8005ee0 <HAL_I2C_Init+0x25c>)
 8005d88:	428b      	cmp	r3, r1
 8005d8a:	d80d      	bhi.n	8005da8 <HAL_I2C_Init+0x124>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	1e59      	subs	r1, r3, #1
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005da0:	2b04      	cmp	r3, #4
 8005da2:	bf38      	it	cc
 8005da4:	2304      	movcc	r3, #4
 8005da6:	e04f      	b.n	8005e48 <HAL_I2C_Init+0x1c4>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d111      	bne.n	8005dd4 <HAL_I2C_Init+0x150>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	1e58      	subs	r0, r3, #1
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6859      	ldr	r1, [r3, #4]
 8005db8:	460b      	mov	r3, r1
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	440b      	add	r3, r1
 8005dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	bf0c      	ite	eq
 8005dcc:	2301      	moveq	r3, #1
 8005dce:	2300      	movne	r3, #0
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	e012      	b.n	8005dfa <HAL_I2C_Init+0x176>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	1e58      	subs	r0, r3, #1
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6859      	ldr	r1, [r3, #4]
 8005ddc:	460b      	mov	r3, r1
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	440b      	add	r3, r1
 8005de2:	0099      	lsls	r1, r3, #2
 8005de4:	440b      	add	r3, r1
 8005de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dea:	3301      	adds	r3, #1
 8005dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	bf0c      	ite	eq
 8005df4:	2301      	moveq	r3, #1
 8005df6:	2300      	movne	r3, #0
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <HAL_I2C_Init+0x17e>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e022      	b.n	8005e48 <HAL_I2C_Init+0x1c4>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10e      	bne.n	8005e28 <HAL_I2C_Init+0x1a4>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	1e58      	subs	r0, r3, #1
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6859      	ldr	r1, [r3, #4]
 8005e12:	460b      	mov	r3, r1
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	440b      	add	r3, r1
 8005e18:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e26:	e00f      	b.n	8005e48 <HAL_I2C_Init+0x1c4>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	1e58      	subs	r0, r3, #1
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6859      	ldr	r1, [r3, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	440b      	add	r3, r1
 8005e36:	0099      	lsls	r1, r3, #2
 8005e38:	440b      	add	r3, r1
 8005e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e3e:	3301      	adds	r3, #1
 8005e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e48:	6879      	ldr	r1, [r7, #4]
 8005e4a:	6809      	ldr	r1, [r1, #0]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69da      	ldr	r2, [r3, #28]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005e76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6911      	ldr	r1, [r2, #16]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	68d2      	ldr	r2, [r2, #12]
 8005e82:	4311      	orrs	r1, r2
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	6812      	ldr	r2, [r2, #0]
 8005e88:	430b      	orrs	r3, r1
 8005e8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	695a      	ldr	r2, [r3, #20]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f042 0201 	orr.w	r2, r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	000186a0 	.word	0x000186a0
 8005ee4:	001e847f 	.word	0x001e847f
 8005ee8:	003d08ff 	.word	0x003d08ff
 8005eec:	431bde83 	.word	0x431bde83
 8005ef0:	10624dd3 	.word	0x10624dd3

08005ef4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	d129      	bne.n	8005f5e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2224      	movs	r2, #36	; 0x24
 8005f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0201 	bic.w	r2, r2, #1
 8005f20:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0210 	bic.w	r2, r2, #16
 8005f30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0201 	orr.w	r2, r2, #1
 8005f50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e000      	b.n	8005f60 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005f5e:	2302      	movs	r3, #2
  }
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005f76:	2300      	movs	r3, #0
 8005f78:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b20      	cmp	r3, #32
 8005f84:	d12a      	bne.n	8005fdc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2224      	movs	r2, #36	; 0x24
 8005f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0201 	bic.w	r2, r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005fa6:	89fb      	ldrh	r3, [r7, #14]
 8005fa8:	f023 030f 	bic.w	r3, r3, #15
 8005fac:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	89fb      	ldrh	r3, [r7, #14]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	89fa      	ldrh	r2, [r7, #14]
 8005fbe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0201 	orr.w	r2, r2, #1
 8005fce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	e000      	b.n	8005fde <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005fdc:	2302      	movs	r3, #2
  }
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
	...

08005fec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e0bf      	b.n	800617e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d106      	bne.n	8006018 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7fd f9c0 	bl	8003398 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699a      	ldr	r2, [r3, #24]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800602e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6999      	ldr	r1, [r3, #24]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006044:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6899      	ldr	r1, [r3, #8]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	4b4a      	ldr	r3, [pc, #296]	; (8006188 <HAL_LTDC_Init+0x19c>)
 8006060:	400b      	ands	r3, r1
 8006062:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	041b      	lsls	r3, r3, #16
 800606a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6899      	ldr	r1, [r3, #8]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	699a      	ldr	r2, [r3, #24]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	431a      	orrs	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68d9      	ldr	r1, [r3, #12]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	4b3e      	ldr	r3, [pc, #248]	; (8006188 <HAL_LTDC_Init+0x19c>)
 800608e:	400b      	ands	r3, r1
 8006090:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	041b      	lsls	r3, r3, #16
 8006098:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68d9      	ldr	r1, [r3, #12]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a1a      	ldr	r2, [r3, #32]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	431a      	orrs	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6919      	ldr	r1, [r3, #16]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	4b33      	ldr	r3, [pc, #204]	; (8006188 <HAL_LTDC_Init+0x19c>)
 80060bc:	400b      	ands	r3, r1
 80060be:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c4:	041b      	lsls	r3, r3, #16
 80060c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6919      	ldr	r1, [r3, #16]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6959      	ldr	r1, [r3, #20]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	4b27      	ldr	r3, [pc, #156]	; (8006188 <HAL_LTDC_Init+0x19c>)
 80060ea:	400b      	ands	r3, r1
 80060ec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f2:	041b      	lsls	r3, r3, #16
 80060f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6959      	ldr	r1, [r3, #20]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006112:	021b      	lsls	r3, r3, #8
 8006114:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800611c:	041b      	lsls	r3, r3, #16
 800611e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800612e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0206 	orr.w	r2, r2, #6
 800615a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699a      	ldr	r2, [r3, #24]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0201 	orr.w	r2, r2, #1
 800616a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	f000f800 	.word	0xf000f800

0800618c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f003 0304 	and.w	r3, r3, #4
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d023      	beq.n	80061f6 <HAL_LTDC_IRQHandler+0x6a>
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d01e      	beq.n	80061f6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0204 	bic.w	r2, r2, #4
 80061c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2204      	movs	r2, #4
 80061ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80061d6:	f043 0201 	orr.w	r2, r3, #1
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2204      	movs	r2, #4
 80061e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f86f 	bl	80062d4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d023      	beq.n	8006248 <HAL_LTDC_IRQHandler+0xbc>
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d01e      	beq.n	8006248 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f022 0202 	bic.w	r2, r2, #2
 8006218:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2202      	movs	r2, #2
 8006220:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006228:	f043 0202 	orr.w	r2, r3, #2
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2204      	movs	r2, #4
 8006236:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f846 	bl	80062d4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d01b      	beq.n	800628a <HAL_LTDC_IRQHandler+0xfe>
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	d016      	beq.n	800628a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0201 	bic.w	r2, r2, #1
 800626a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2201      	movs	r2, #1
 8006272:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f82f 	bl	80062e8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f003 0308 	and.w	r3, r3, #8
 8006290:	2b00      	cmp	r3, #0
 8006292:	d01b      	beq.n	80062cc <HAL_LTDC_IRQHandler+0x140>
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f003 0308 	and.w	r3, r3, #8
 800629a:	2b00      	cmp	r3, #0
 800629c:	d016      	beq.n	80062cc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0208 	bic.w	r2, r2, #8
 80062ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2208      	movs	r2, #8
 80062b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7fc fdf6 	bl	8002eb8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80062cc:	bf00      	nop
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80062fc:	b5b0      	push	{r4, r5, r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800630e:	2b01      	cmp	r3, #1
 8006310:	d101      	bne.n	8006316 <HAL_LTDC_ConfigLayer+0x1a>
 8006312:	2302      	movs	r3, #2
 8006314:	e02c      	b.n	8006370 <HAL_LTDC_ConfigLayer+0x74>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2202      	movs	r2, #2
 8006322:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2134      	movs	r1, #52	; 0x34
 800632c:	fb01 f303 	mul.w	r3, r1, r3
 8006330:	4413      	add	r3, r2
 8006332:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	4614      	mov	r4, r2
 800633a:	461d      	mov	r5, r3
 800633c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800633e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006348:	682b      	ldr	r3, [r5, #0]
 800634a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	68b9      	ldr	r1, [r7, #8]
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 f811 	bl	8006378 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2201      	movs	r2, #1
 800635c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bdb0      	pop	{r4, r5, r7, pc}

08006378 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006378:	b480      	push	{r7}
 800637a:	b089      	sub	sp, #36	; 0x24
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	0c1b      	lsrs	r3, r3, #16
 8006390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006394:	4413      	add	r3, r2
 8006396:	041b      	lsls	r3, r3, #16
 8006398:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	01db      	lsls	r3, r3, #7
 80063a4:	4413      	add	r3, r2
 80063a6:	3384      	adds	r3, #132	; 0x84
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	6812      	ldr	r2, [r2, #0]
 80063ae:	4611      	mov	r1, r2
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	01d2      	lsls	r2, r2, #7
 80063b4:	440a      	add	r2, r1
 80063b6:	3284      	adds	r2, #132	; 0x84
 80063b8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80063bc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	0c1b      	lsrs	r3, r3, #16
 80063ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063ce:	4413      	add	r3, r2
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4619      	mov	r1, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	01db      	lsls	r3, r3, #7
 80063dc:	440b      	add	r3, r1
 80063de:	3384      	adds	r3, #132	; 0x84
 80063e0:	4619      	mov	r1, r3
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	68da      	ldr	r2, [r3, #12]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063f6:	4413      	add	r3, r2
 80063f8:	041b      	lsls	r3, r3, #16
 80063fa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	461a      	mov	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	01db      	lsls	r3, r3, #7
 8006406:	4413      	add	r3, r2
 8006408:	3384      	adds	r3, #132	; 0x84
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	6812      	ldr	r2, [r2, #0]
 8006410:	4611      	mov	r1, r2
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	01d2      	lsls	r2, r2, #7
 8006416:	440a      	add	r2, r1
 8006418:	3284      	adds	r2, #132	; 0x84
 800641a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800641e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800642e:	4413      	add	r3, r2
 8006430:	1c5a      	adds	r2, r3, #1
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4619      	mov	r1, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	01db      	lsls	r3, r3, #7
 800643c:	440b      	add	r3, r1
 800643e:	3384      	adds	r3, #132	; 0x84
 8006440:	4619      	mov	r1, r3
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	4313      	orrs	r3, r2
 8006446:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	461a      	mov	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	01db      	lsls	r3, r3, #7
 8006452:	4413      	add	r3, r2
 8006454:	3384      	adds	r3, #132	; 0x84
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	6812      	ldr	r2, [r2, #0]
 800645c:	4611      	mov	r1, r2
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	01d2      	lsls	r2, r2, #7
 8006462:	440a      	add	r2, r1
 8006464:	3284      	adds	r2, #132	; 0x84
 8006466:	f023 0307 	bic.w	r3, r3, #7
 800646a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	461a      	mov	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	01db      	lsls	r3, r3, #7
 8006476:	4413      	add	r3, r2
 8006478:	3384      	adds	r3, #132	; 0x84
 800647a:	461a      	mov	r2, r3
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006488:	021b      	lsls	r3, r3, #8
 800648a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006492:	041b      	lsls	r3, r3, #16
 8006494:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	061b      	lsls	r3, r3, #24
 800649c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	01db      	lsls	r3, r3, #7
 80064a8:	4413      	add	r3, r2
 80064aa:	3384      	adds	r3, #132	; 0x84
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	01db      	lsls	r3, r3, #7
 80064b8:	4413      	add	r3, r2
 80064ba:	3384      	adds	r3, #132	; 0x84
 80064bc:	461a      	mov	r2, r3
 80064be:	2300      	movs	r3, #0
 80064c0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064c8:	461a      	mov	r2, r3
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	431a      	orrs	r2, r3
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	431a      	orrs	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4619      	mov	r1, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	01db      	lsls	r3, r3, #7
 80064dc:	440b      	add	r3, r1
 80064de:	3384      	adds	r3, #132	; 0x84
 80064e0:	4619      	mov	r1, r3
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	461a      	mov	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	01db      	lsls	r3, r3, #7
 80064f2:	4413      	add	r3, r2
 80064f4:	3384      	adds	r3, #132	; 0x84
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	6812      	ldr	r2, [r2, #0]
 80064fc:	4611      	mov	r1, r2
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	01d2      	lsls	r2, r2, #7
 8006502:	440a      	add	r2, r1
 8006504:	3284      	adds	r2, #132	; 0x84
 8006506:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800650a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	461a      	mov	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	01db      	lsls	r3, r3, #7
 8006516:	4413      	add	r3, r2
 8006518:	3384      	adds	r3, #132	; 0x84
 800651a:	461a      	mov	r2, r3
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	01db      	lsls	r3, r3, #7
 800652c:	4413      	add	r3, r2
 800652e:	3384      	adds	r3, #132	; 0x84
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	6812      	ldr	r2, [r2, #0]
 8006536:	4611      	mov	r1, r2
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	01d2      	lsls	r2, r2, #7
 800653c:	440a      	add	r2, r1
 800653e:	3284      	adds	r2, #132	; 0x84
 8006540:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006544:	f023 0307 	bic.w	r3, r3, #7
 8006548:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	69da      	ldr	r2, [r3, #28]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	68f9      	ldr	r1, [r7, #12]
 8006554:	6809      	ldr	r1, [r1, #0]
 8006556:	4608      	mov	r0, r1
 8006558:	6879      	ldr	r1, [r7, #4]
 800655a:	01c9      	lsls	r1, r1, #7
 800655c:	4401      	add	r1, r0
 800655e:	3184      	adds	r1, #132	; 0x84
 8006560:	4313      	orrs	r3, r2
 8006562:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	01db      	lsls	r3, r3, #7
 800656e:	4413      	add	r3, r2
 8006570:	3384      	adds	r3, #132	; 0x84
 8006572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	461a      	mov	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	01db      	lsls	r3, r3, #7
 800657e:	4413      	add	r3, r2
 8006580:	3384      	adds	r3, #132	; 0x84
 8006582:	461a      	mov	r2, r3
 8006584:	2300      	movs	r3, #0
 8006586:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	461a      	mov	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	01db      	lsls	r3, r3, #7
 8006592:	4413      	add	r3, r2
 8006594:	3384      	adds	r3, #132	; 0x84
 8006596:	461a      	mov	r2, r3
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d102      	bne.n	80065ac <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80065a6:	2304      	movs	r3, #4
 80065a8:	61fb      	str	r3, [r7, #28]
 80065aa:	e01b      	b.n	80065e4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d102      	bne.n	80065ba <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80065b4:	2303      	movs	r3, #3
 80065b6:	61fb      	str	r3, [r7, #28]
 80065b8:	e014      	b.n	80065e4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d00b      	beq.n	80065da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d007      	beq.n	80065da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d003      	beq.n	80065da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80065d6:	2b07      	cmp	r3, #7
 80065d8:	d102      	bne.n	80065e0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80065da:	2302      	movs	r3, #2
 80065dc:	61fb      	str	r3, [r7, #28]
 80065de:	e001      	b.n	80065e4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80065e0:	2301      	movs	r3, #1
 80065e2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	461a      	mov	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	01db      	lsls	r3, r3, #7
 80065ee:	4413      	add	r3, r2
 80065f0:	3384      	adds	r3, #132	; 0x84
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	6812      	ldr	r2, [r2, #0]
 80065f8:	4611      	mov	r1, r2
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	01d2      	lsls	r2, r2, #7
 80065fe:	440a      	add	r2, r1
 8006600:	3284      	adds	r2, #132	; 0x84
 8006602:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006606:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660c:	69fa      	ldr	r2, [r7, #28]
 800660e:	fb02 f303 	mul.w	r3, r2, r3
 8006612:	041a      	lsls	r2, r3, #16
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	6859      	ldr	r1, [r3, #4]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	1acb      	subs	r3, r1, r3
 800661e:	69f9      	ldr	r1, [r7, #28]
 8006620:	fb01 f303 	mul.w	r3, r1, r3
 8006624:	3303      	adds	r3, #3
 8006626:	68f9      	ldr	r1, [r7, #12]
 8006628:	6809      	ldr	r1, [r1, #0]
 800662a:	4608      	mov	r0, r1
 800662c:	6879      	ldr	r1, [r7, #4]
 800662e:	01c9      	lsls	r1, r1, #7
 8006630:	4401      	add	r1, r0
 8006632:	3184      	adds	r1, #132	; 0x84
 8006634:	4313      	orrs	r3, r2
 8006636:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	461a      	mov	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	01db      	lsls	r3, r3, #7
 8006642:	4413      	add	r3, r2
 8006644:	3384      	adds	r3, #132	; 0x84
 8006646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	6812      	ldr	r2, [r2, #0]
 800664c:	4611      	mov	r1, r2
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	01d2      	lsls	r2, r2, #7
 8006652:	440a      	add	r2, r1
 8006654:	3284      	adds	r2, #132	; 0x84
 8006656:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800665a:	f023 0307 	bic.w	r3, r3, #7
 800665e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	461a      	mov	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	01db      	lsls	r3, r3, #7
 800666a:	4413      	add	r3, r2
 800666c:	3384      	adds	r3, #132	; 0x84
 800666e:	461a      	mov	r2, r3
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006674:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	01db      	lsls	r3, r3, #7
 8006680:	4413      	add	r3, r2
 8006682:	3384      	adds	r3, #132	; 0x84
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	6812      	ldr	r2, [r2, #0]
 800668a:	4611      	mov	r1, r2
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	01d2      	lsls	r2, r2, #7
 8006690:	440a      	add	r2, r1
 8006692:	3284      	adds	r2, #132	; 0x84
 8006694:	f043 0301 	orr.w	r3, r3, #1
 8006698:	6013      	str	r3, [r2, #0]
}
 800669a:	bf00      	nop
 800669c:	3724      	adds	r7, #36	; 0x24
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
	...

080066a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e25b      	b.n	8006b72 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d075      	beq.n	80067b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066c6:	4ba3      	ldr	r3, [pc, #652]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f003 030c 	and.w	r3, r3, #12
 80066ce:	2b04      	cmp	r3, #4
 80066d0:	d00c      	beq.n	80066ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066d2:	4ba0      	ldr	r3, [pc, #640]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066da:	2b08      	cmp	r3, #8
 80066dc:	d112      	bne.n	8006704 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066de:	4b9d      	ldr	r3, [pc, #628]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066ea:	d10b      	bne.n	8006704 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066ec:	4b99      	ldr	r3, [pc, #612]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d05b      	beq.n	80067b0 <HAL_RCC_OscConfig+0x108>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d157      	bne.n	80067b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e236      	b.n	8006b72 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800670c:	d106      	bne.n	800671c <HAL_RCC_OscConfig+0x74>
 800670e:	4b91      	ldr	r3, [pc, #580]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a90      	ldr	r2, [pc, #576]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 8006714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	e01d      	b.n	8006758 <HAL_RCC_OscConfig+0xb0>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006724:	d10c      	bne.n	8006740 <HAL_RCC_OscConfig+0x98>
 8006726:	4b8b      	ldr	r3, [pc, #556]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a8a      	ldr	r2, [pc, #552]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 800672c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	4b88      	ldr	r3, [pc, #544]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a87      	ldr	r2, [pc, #540]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 8006738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	e00b      	b.n	8006758 <HAL_RCC_OscConfig+0xb0>
 8006740:	4b84      	ldr	r3, [pc, #528]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a83      	ldr	r2, [pc, #524]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 8006746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800674a:	6013      	str	r3, [r2, #0]
 800674c:	4b81      	ldr	r3, [pc, #516]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a80      	ldr	r2, [pc, #512]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 8006752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d013      	beq.n	8006788 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006760:	f7fd fa22 	bl	8003ba8 <HAL_GetTick>
 8006764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006766:	e008      	b.n	800677a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006768:	f7fd fa1e 	bl	8003ba8 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b64      	cmp	r3, #100	; 0x64
 8006774:	d901      	bls.n	800677a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e1fb      	b.n	8006b72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800677a:	4b76      	ldr	r3, [pc, #472]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d0f0      	beq.n	8006768 <HAL_RCC_OscConfig+0xc0>
 8006786:	e014      	b.n	80067b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006788:	f7fd fa0e 	bl	8003ba8 <HAL_GetTick>
 800678c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800678e:	e008      	b.n	80067a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006790:	f7fd fa0a 	bl	8003ba8 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b64      	cmp	r3, #100	; 0x64
 800679c:	d901      	bls.n	80067a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e1e7      	b.n	8006b72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067a2:	4b6c      	ldr	r3, [pc, #432]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1f0      	bne.n	8006790 <HAL_RCC_OscConfig+0xe8>
 80067ae:	e000      	b.n	80067b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d063      	beq.n	8006886 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067be:	4b65      	ldr	r3, [pc, #404]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f003 030c 	and.w	r3, r3, #12
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00b      	beq.n	80067e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067ca:	4b62      	ldr	r3, [pc, #392]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067d2:	2b08      	cmp	r3, #8
 80067d4:	d11c      	bne.n	8006810 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067d6:	4b5f      	ldr	r3, [pc, #380]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d116      	bne.n	8006810 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067e2:	4b5c      	ldr	r3, [pc, #368]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d005      	beq.n	80067fa <HAL_RCC_OscConfig+0x152>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d001      	beq.n	80067fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e1bb      	b.n	8006b72 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067fa:	4b56      	ldr	r3, [pc, #344]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	4952      	ldr	r1, [pc, #328]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 800680a:	4313      	orrs	r3, r2
 800680c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800680e:	e03a      	b.n	8006886 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d020      	beq.n	800685a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006818:	4b4f      	ldr	r3, [pc, #316]	; (8006958 <HAL_RCC_OscConfig+0x2b0>)
 800681a:	2201      	movs	r2, #1
 800681c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800681e:	f7fd f9c3 	bl	8003ba8 <HAL_GetTick>
 8006822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006824:	e008      	b.n	8006838 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006826:	f7fd f9bf 	bl	8003ba8 <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	2b02      	cmp	r3, #2
 8006832:	d901      	bls.n	8006838 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e19c      	b.n	8006b72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006838:	4b46      	ldr	r3, [pc, #280]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0f0      	beq.n	8006826 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006844:	4b43      	ldr	r3, [pc, #268]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	00db      	lsls	r3, r3, #3
 8006852:	4940      	ldr	r1, [pc, #256]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 8006854:	4313      	orrs	r3, r2
 8006856:	600b      	str	r3, [r1, #0]
 8006858:	e015      	b.n	8006886 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800685a:	4b3f      	ldr	r3, [pc, #252]	; (8006958 <HAL_RCC_OscConfig+0x2b0>)
 800685c:	2200      	movs	r2, #0
 800685e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006860:	f7fd f9a2 	bl	8003ba8 <HAL_GetTick>
 8006864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006866:	e008      	b.n	800687a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006868:	f7fd f99e 	bl	8003ba8 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b02      	cmp	r3, #2
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e17b      	b.n	8006b72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800687a:	4b36      	ldr	r3, [pc, #216]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1f0      	bne.n	8006868 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0308 	and.w	r3, r3, #8
 800688e:	2b00      	cmp	r3, #0
 8006890:	d030      	beq.n	80068f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d016      	beq.n	80068c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800689a:	4b30      	ldr	r3, [pc, #192]	; (800695c <HAL_RCC_OscConfig+0x2b4>)
 800689c:	2201      	movs	r2, #1
 800689e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068a0:	f7fd f982 	bl	8003ba8 <HAL_GetTick>
 80068a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068a6:	e008      	b.n	80068ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068a8:	f7fd f97e 	bl	8003ba8 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e15b      	b.n	8006b72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068ba:	4b26      	ldr	r3, [pc, #152]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 80068bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d0f0      	beq.n	80068a8 <HAL_RCC_OscConfig+0x200>
 80068c6:	e015      	b.n	80068f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068c8:	4b24      	ldr	r3, [pc, #144]	; (800695c <HAL_RCC_OscConfig+0x2b4>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068ce:	f7fd f96b 	bl	8003ba8 <HAL_GetTick>
 80068d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068d4:	e008      	b.n	80068e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068d6:	f7fd f967 	bl	8003ba8 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d901      	bls.n	80068e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e144      	b.n	8006b72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068e8:	4b1a      	ldr	r3, [pc, #104]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 80068ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1f0      	bne.n	80068d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0304 	and.w	r3, r3, #4
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 80a0 	beq.w	8006a42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006902:	2300      	movs	r3, #0
 8006904:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006906:	4b13      	ldr	r3, [pc, #76]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10f      	bne.n	8006932 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006912:	2300      	movs	r3, #0
 8006914:	60bb      	str	r3, [r7, #8]
 8006916:	4b0f      	ldr	r3, [pc, #60]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 8006918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691a:	4a0e      	ldr	r2, [pc, #56]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 800691c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006920:	6413      	str	r3, [r2, #64]	; 0x40
 8006922:	4b0c      	ldr	r3, [pc, #48]	; (8006954 <HAL_RCC_OscConfig+0x2ac>)
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800692a:	60bb      	str	r3, [r7, #8]
 800692c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800692e:	2301      	movs	r3, #1
 8006930:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006932:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <HAL_RCC_OscConfig+0x2b8>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693a:	2b00      	cmp	r3, #0
 800693c:	d121      	bne.n	8006982 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800693e:	4b08      	ldr	r3, [pc, #32]	; (8006960 <HAL_RCC_OscConfig+0x2b8>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a07      	ldr	r2, [pc, #28]	; (8006960 <HAL_RCC_OscConfig+0x2b8>)
 8006944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800694a:	f7fd f92d 	bl	8003ba8 <HAL_GetTick>
 800694e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006950:	e011      	b.n	8006976 <HAL_RCC_OscConfig+0x2ce>
 8006952:	bf00      	nop
 8006954:	40023800 	.word	0x40023800
 8006958:	42470000 	.word	0x42470000
 800695c:	42470e80 	.word	0x42470e80
 8006960:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006964:	f7fd f920 	bl	8003ba8 <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	2b02      	cmp	r3, #2
 8006970:	d901      	bls.n	8006976 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e0fd      	b.n	8006b72 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006976:	4b81      	ldr	r3, [pc, #516]	; (8006b7c <HAL_RCC_OscConfig+0x4d4>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697e:	2b00      	cmp	r3, #0
 8006980:	d0f0      	beq.n	8006964 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d106      	bne.n	8006998 <HAL_RCC_OscConfig+0x2f0>
 800698a:	4b7d      	ldr	r3, [pc, #500]	; (8006b80 <HAL_RCC_OscConfig+0x4d8>)
 800698c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698e:	4a7c      	ldr	r2, [pc, #496]	; (8006b80 <HAL_RCC_OscConfig+0x4d8>)
 8006990:	f043 0301 	orr.w	r3, r3, #1
 8006994:	6713      	str	r3, [r2, #112]	; 0x70
 8006996:	e01c      	b.n	80069d2 <HAL_RCC_OscConfig+0x32a>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	2b05      	cmp	r3, #5
 800699e:	d10c      	bne.n	80069ba <HAL_RCC_OscConfig+0x312>
 80069a0:	4b77      	ldr	r3, [pc, #476]	; (8006b80 <HAL_RCC_OscConfig+0x4d8>)
 80069a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a4:	4a76      	ldr	r2, [pc, #472]	; (8006b80 <HAL_RCC_OscConfig+0x4d8>)
 80069a6:	f043 0304 	orr.w	r3, r3, #4
 80069aa:	6713      	str	r3, [r2, #112]	; 0x70
 80069ac:	4b74      	ldr	r3, [pc, #464]	; (8006b80 <HAL_RCC_OscConfig+0x4d8>)
 80069ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b0:	4a73      	ldr	r2, [pc, #460]	; (8006b80 <HAL_RCC_OscConfig+0x4d8>)
 80069b2:	f043 0301 	orr.w	r3, r3, #1
 80069b6:	6713      	str	r3, [r2, #112]	; 0x70
 80069b8:	e00b      	b.n	80069d2 <HAL_RCC_OscConfig+0x32a>
 80069ba:	4b71      	ldr	r3, [pc, #452]	; (8006b80 <HAL_RCC_OscConfig+0x4d8>)
 80069bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069be:	4a70      	ldr	r2, [pc, #448]	; (8006b80 <HAL_RCC_OscConfig+0x4d8>)
 80069c0:	f023 0301 	bic.w	r3, r3, #1
 80069c4:	6713      	str	r3, [r2, #112]	; 0x70
 80069c6:	4b6e      	ldr	r3, [pc, #440]	; (8006b80 <HAL_RCC_OscConfig+0x4d8>)
 80069c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ca:	4a6d      	ldr	r2, [pc, #436]	; (8006b80 <HAL_RCC_OscConfig+0x4d8>)
 80069cc:	f023 0304 	bic.w	r3, r3, #4
 80069d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d015      	beq.n	8006a06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069da:	f7fd f8e5 	bl	8003ba8 <HAL_GetTick>
 80069de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069e0:	e00a      	b.n	80069f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069e2:	f7fd f8e1 	bl	8003ba8 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d901      	bls.n	80069f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e0bc      	b.n	8006b72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069f8:	4b61      	ldr	r3, [pc, #388]	; (8006b80 <HAL_RCC_OscConfig+0x4d8>)
 80069fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0ee      	beq.n	80069e2 <HAL_RCC_OscConfig+0x33a>
 8006a04:	e014      	b.n	8006a30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a06:	f7fd f8cf 	bl	8003ba8 <HAL_GetTick>
 8006a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a0c:	e00a      	b.n	8006a24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a0e:	f7fd f8cb 	bl	8003ba8 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d901      	bls.n	8006a24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e0a6      	b.n	8006b72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a24:	4b56      	ldr	r3, [pc, #344]	; (8006b80 <HAL_RCC_OscConfig+0x4d8>)
 8006a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1ee      	bne.n	8006a0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a30:	7dfb      	ldrb	r3, [r7, #23]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d105      	bne.n	8006a42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a36:	4b52      	ldr	r3, [pc, #328]	; (8006b80 <HAL_RCC_OscConfig+0x4d8>)
 8006a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3a:	4a51      	ldr	r2, [pc, #324]	; (8006b80 <HAL_RCC_OscConfig+0x4d8>)
 8006a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 8092 	beq.w	8006b70 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a4c:	4b4c      	ldr	r3, [pc, #304]	; (8006b80 <HAL_RCC_OscConfig+0x4d8>)
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f003 030c 	and.w	r3, r3, #12
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	d05c      	beq.n	8006b12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d141      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a60:	4b48      	ldr	r3, [pc, #288]	; (8006b84 <HAL_RCC_OscConfig+0x4dc>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a66:	f7fd f89f 	bl	8003ba8 <HAL_GetTick>
 8006a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a6c:	e008      	b.n	8006a80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a6e:	f7fd f89b 	bl	8003ba8 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d901      	bls.n	8006a80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e078      	b.n	8006b72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a80:	4b3f      	ldr	r3, [pc, #252]	; (8006b80 <HAL_RCC_OscConfig+0x4d8>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1f0      	bne.n	8006a6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	69da      	ldr	r2, [r3, #28]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	431a      	orrs	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	019b      	lsls	r3, r3, #6
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa2:	085b      	lsrs	r3, r3, #1
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	041b      	lsls	r3, r3, #16
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aae:	061b      	lsls	r3, r3, #24
 8006ab0:	4933      	ldr	r1, [pc, #204]	; (8006b80 <HAL_RCC_OscConfig+0x4d8>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ab6:	4b33      	ldr	r3, [pc, #204]	; (8006b84 <HAL_RCC_OscConfig+0x4dc>)
 8006ab8:	2201      	movs	r2, #1
 8006aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006abc:	f7fd f874 	bl	8003ba8 <HAL_GetTick>
 8006ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ac2:	e008      	b.n	8006ad6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ac4:	f7fd f870 	bl	8003ba8 <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d901      	bls.n	8006ad6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e04d      	b.n	8006b72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ad6:	4b2a      	ldr	r3, [pc, #168]	; (8006b80 <HAL_RCC_OscConfig+0x4d8>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0f0      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x41c>
 8006ae2:	e045      	b.n	8006b70 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ae4:	4b27      	ldr	r3, [pc, #156]	; (8006b84 <HAL_RCC_OscConfig+0x4dc>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aea:	f7fd f85d 	bl	8003ba8 <HAL_GetTick>
 8006aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006af0:	e008      	b.n	8006b04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006af2:	f7fd f859 	bl	8003ba8 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d901      	bls.n	8006b04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e036      	b.n	8006b72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b04:	4b1e      	ldr	r3, [pc, #120]	; (8006b80 <HAL_RCC_OscConfig+0x4d8>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1f0      	bne.n	8006af2 <HAL_RCC_OscConfig+0x44a>
 8006b10:	e02e      	b.n	8006b70 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d101      	bne.n	8006b1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e029      	b.n	8006b72 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b1e:	4b18      	ldr	r3, [pc, #96]	; (8006b80 <HAL_RCC_OscConfig+0x4d8>)
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d11c      	bne.n	8006b6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d115      	bne.n	8006b6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b46:	4013      	ands	r3, r2
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d10d      	bne.n	8006b6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d106      	bne.n	8006b6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d001      	beq.n	8006b70 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e000      	b.n	8006b72 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	40007000 	.word	0x40007000
 8006b80:	40023800 	.word	0x40023800
 8006b84:	42470060 	.word	0x42470060

08006b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e0cc      	b.n	8006d36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b9c:	4b68      	ldr	r3, [pc, #416]	; (8006d40 <HAL_RCC_ClockConfig+0x1b8>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 030f 	and.w	r3, r3, #15
 8006ba4:	683a      	ldr	r2, [r7, #0]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d90c      	bls.n	8006bc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006baa:	4b65      	ldr	r3, [pc, #404]	; (8006d40 <HAL_RCC_ClockConfig+0x1b8>)
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	b2d2      	uxtb	r2, r2
 8006bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bb2:	4b63      	ldr	r3, [pc, #396]	; (8006d40 <HAL_RCC_ClockConfig+0x1b8>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 030f 	and.w	r3, r3, #15
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d001      	beq.n	8006bc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e0b8      	b.n	8006d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0302 	and.w	r3, r3, #2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d020      	beq.n	8006c12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0304 	and.w	r3, r3, #4
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d005      	beq.n	8006be8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bdc:	4b59      	ldr	r3, [pc, #356]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	4a58      	ldr	r2, [pc, #352]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006be2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006be6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0308 	and.w	r3, r3, #8
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d005      	beq.n	8006c00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bf4:	4b53      	ldr	r3, [pc, #332]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	4a52      	ldr	r2, [pc, #328]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006bfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c00:	4b50      	ldr	r3, [pc, #320]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	494d      	ldr	r1, [pc, #308]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d044      	beq.n	8006ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d107      	bne.n	8006c36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c26:	4b47      	ldr	r3, [pc, #284]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d119      	bne.n	8006c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e07f      	b.n	8006d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d003      	beq.n	8006c46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	d107      	bne.n	8006c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c46:	4b3f      	ldr	r3, [pc, #252]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d109      	bne.n	8006c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e06f      	b.n	8006d36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c56:	4b3b      	ldr	r3, [pc, #236]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d101      	bne.n	8006c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e067      	b.n	8006d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c66:	4b37      	ldr	r3, [pc, #220]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f023 0203 	bic.w	r2, r3, #3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	4934      	ldr	r1, [pc, #208]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c78:	f7fc ff96 	bl	8003ba8 <HAL_GetTick>
 8006c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c7e:	e00a      	b.n	8006c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c80:	f7fc ff92 	bl	8003ba8 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d901      	bls.n	8006c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e04f      	b.n	8006d36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c96:	4b2b      	ldr	r3, [pc, #172]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f003 020c 	and.w	r2, r3, #12
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d1eb      	bne.n	8006c80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ca8:	4b25      	ldr	r3, [pc, #148]	; (8006d40 <HAL_RCC_ClockConfig+0x1b8>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 030f 	and.w	r3, r3, #15
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d20c      	bcs.n	8006cd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cb6:	4b22      	ldr	r3, [pc, #136]	; (8006d40 <HAL_RCC_ClockConfig+0x1b8>)
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	b2d2      	uxtb	r2, r2
 8006cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cbe:	4b20      	ldr	r3, [pc, #128]	; (8006d40 <HAL_RCC_ClockConfig+0x1b8>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 030f 	and.w	r3, r3, #15
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d001      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e032      	b.n	8006d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d008      	beq.n	8006cee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cdc:	4b19      	ldr	r3, [pc, #100]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	4916      	ldr	r1, [pc, #88]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0308 	and.w	r3, r3, #8
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d009      	beq.n	8006d0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cfa:	4b12      	ldr	r3, [pc, #72]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	490e      	ldr	r1, [pc, #56]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d0e:	f000 f821 	bl	8006d54 <HAL_RCC_GetSysClockFreq>
 8006d12:	4601      	mov	r1, r0
 8006d14:	4b0b      	ldr	r3, [pc, #44]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	091b      	lsrs	r3, r3, #4
 8006d1a:	f003 030f 	and.w	r3, r3, #15
 8006d1e:	4a0a      	ldr	r2, [pc, #40]	; (8006d48 <HAL_RCC_ClockConfig+0x1c0>)
 8006d20:	5cd3      	ldrb	r3, [r2, r3]
 8006d22:	fa21 f303 	lsr.w	r3, r1, r3
 8006d26:	4a09      	ldr	r2, [pc, #36]	; (8006d4c <HAL_RCC_ClockConfig+0x1c4>)
 8006d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d2a:	4b09      	ldr	r3, [pc, #36]	; (8006d50 <HAL_RCC_ClockConfig+0x1c8>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fc fe12 	bl	8003958 <HAL_InitTick>

  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	40023c00 	.word	0x40023c00
 8006d44:	40023800 	.word	0x40023800
 8006d48:	0800a9a0 	.word	0x0800a9a0
 8006d4c:	20000018 	.word	0x20000018
 8006d50:	2000001c 	.word	0x2000001c

08006d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	607b      	str	r3, [r7, #4]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	60fb      	str	r3, [r7, #12]
 8006d62:	2300      	movs	r3, #0
 8006d64:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d6a:	4b63      	ldr	r3, [pc, #396]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f003 030c 	and.w	r3, r3, #12
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	d007      	beq.n	8006d86 <HAL_RCC_GetSysClockFreq+0x32>
 8006d76:	2b08      	cmp	r3, #8
 8006d78:	d008      	beq.n	8006d8c <HAL_RCC_GetSysClockFreq+0x38>
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f040 80b4 	bne.w	8006ee8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d80:	4b5e      	ldr	r3, [pc, #376]	; (8006efc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006d82:	60bb      	str	r3, [r7, #8]
       break;
 8006d84:	e0b3      	b.n	8006eee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d86:	4b5e      	ldr	r3, [pc, #376]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006d88:	60bb      	str	r3, [r7, #8]
      break;
 8006d8a:	e0b0      	b.n	8006eee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d8c:	4b5a      	ldr	r3, [pc, #360]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d96:	4b58      	ldr	r3, [pc, #352]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d04a      	beq.n	8006e38 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006da2:	4b55      	ldr	r3, [pc, #340]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	099b      	lsrs	r3, r3, #6
 8006da8:	f04f 0400 	mov.w	r4, #0
 8006dac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006db0:	f04f 0200 	mov.w	r2, #0
 8006db4:	ea03 0501 	and.w	r5, r3, r1
 8006db8:	ea04 0602 	and.w	r6, r4, r2
 8006dbc:	4629      	mov	r1, r5
 8006dbe:	4632      	mov	r2, r6
 8006dc0:	f04f 0300 	mov.w	r3, #0
 8006dc4:	f04f 0400 	mov.w	r4, #0
 8006dc8:	0154      	lsls	r4, r2, #5
 8006dca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006dce:	014b      	lsls	r3, r1, #5
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	4622      	mov	r2, r4
 8006dd4:	1b49      	subs	r1, r1, r5
 8006dd6:	eb62 0206 	sbc.w	r2, r2, r6
 8006dda:	f04f 0300 	mov.w	r3, #0
 8006dde:	f04f 0400 	mov.w	r4, #0
 8006de2:	0194      	lsls	r4, r2, #6
 8006de4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006de8:	018b      	lsls	r3, r1, #6
 8006dea:	1a5b      	subs	r3, r3, r1
 8006dec:	eb64 0402 	sbc.w	r4, r4, r2
 8006df0:	f04f 0100 	mov.w	r1, #0
 8006df4:	f04f 0200 	mov.w	r2, #0
 8006df8:	00e2      	lsls	r2, r4, #3
 8006dfa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006dfe:	00d9      	lsls	r1, r3, #3
 8006e00:	460b      	mov	r3, r1
 8006e02:	4614      	mov	r4, r2
 8006e04:	195b      	adds	r3, r3, r5
 8006e06:	eb44 0406 	adc.w	r4, r4, r6
 8006e0a:	f04f 0100 	mov.w	r1, #0
 8006e0e:	f04f 0200 	mov.w	r2, #0
 8006e12:	0262      	lsls	r2, r4, #9
 8006e14:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006e18:	0259      	lsls	r1, r3, #9
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4614      	mov	r4, r2
 8006e1e:	4618      	mov	r0, r3
 8006e20:	4621      	mov	r1, r4
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f04f 0400 	mov.w	r4, #0
 8006e28:	461a      	mov	r2, r3
 8006e2a:	4623      	mov	r3, r4
 8006e2c:	f7f9 feae 	bl	8000b8c <__aeabi_uldivmod>
 8006e30:	4603      	mov	r3, r0
 8006e32:	460c      	mov	r4, r1
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	e049      	b.n	8006ecc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e38:	4b2f      	ldr	r3, [pc, #188]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	099b      	lsrs	r3, r3, #6
 8006e3e:	f04f 0400 	mov.w	r4, #0
 8006e42:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e46:	f04f 0200 	mov.w	r2, #0
 8006e4a:	ea03 0501 	and.w	r5, r3, r1
 8006e4e:	ea04 0602 	and.w	r6, r4, r2
 8006e52:	4629      	mov	r1, r5
 8006e54:	4632      	mov	r2, r6
 8006e56:	f04f 0300 	mov.w	r3, #0
 8006e5a:	f04f 0400 	mov.w	r4, #0
 8006e5e:	0154      	lsls	r4, r2, #5
 8006e60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e64:	014b      	lsls	r3, r1, #5
 8006e66:	4619      	mov	r1, r3
 8006e68:	4622      	mov	r2, r4
 8006e6a:	1b49      	subs	r1, r1, r5
 8006e6c:	eb62 0206 	sbc.w	r2, r2, r6
 8006e70:	f04f 0300 	mov.w	r3, #0
 8006e74:	f04f 0400 	mov.w	r4, #0
 8006e78:	0194      	lsls	r4, r2, #6
 8006e7a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006e7e:	018b      	lsls	r3, r1, #6
 8006e80:	1a5b      	subs	r3, r3, r1
 8006e82:	eb64 0402 	sbc.w	r4, r4, r2
 8006e86:	f04f 0100 	mov.w	r1, #0
 8006e8a:	f04f 0200 	mov.w	r2, #0
 8006e8e:	00e2      	lsls	r2, r4, #3
 8006e90:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006e94:	00d9      	lsls	r1, r3, #3
 8006e96:	460b      	mov	r3, r1
 8006e98:	4614      	mov	r4, r2
 8006e9a:	195b      	adds	r3, r3, r5
 8006e9c:	eb44 0406 	adc.w	r4, r4, r6
 8006ea0:	f04f 0100 	mov.w	r1, #0
 8006ea4:	f04f 0200 	mov.w	r2, #0
 8006ea8:	02a2      	lsls	r2, r4, #10
 8006eaa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006eae:	0299      	lsls	r1, r3, #10
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4614      	mov	r4, r2
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f04f 0400 	mov.w	r4, #0
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	4623      	mov	r3, r4
 8006ec2:	f7f9 fe63 	bl	8000b8c <__aeabi_uldivmod>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	460c      	mov	r4, r1
 8006eca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ecc:	4b0a      	ldr	r3, [pc, #40]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	0c1b      	lsrs	r3, r3, #16
 8006ed2:	f003 0303 	and.w	r3, r3, #3
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee4:	60bb      	str	r3, [r7, #8]
      break;
 8006ee6:	e002      	b.n	8006eee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ee8:	4b04      	ldr	r3, [pc, #16]	; (8006efc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006eea:	60bb      	str	r3, [r7, #8]
      break;
 8006eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006eee:	68bb      	ldr	r3, [r7, #8]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3714      	adds	r7, #20
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ef8:	40023800 	.word	0x40023800
 8006efc:	00f42400 	.word	0x00f42400
 8006f00:	007a1200 	.word	0x007a1200

08006f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f04:	b480      	push	{r7}
 8006f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f08:	4b03      	ldr	r3, [pc, #12]	; (8006f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	20000018 	.word	0x20000018

08006f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f20:	f7ff fff0 	bl	8006f04 <HAL_RCC_GetHCLKFreq>
 8006f24:	4601      	mov	r1, r0
 8006f26:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	0a9b      	lsrs	r3, r3, #10
 8006f2c:	f003 0307 	and.w	r3, r3, #7
 8006f30:	4a03      	ldr	r2, [pc, #12]	; (8006f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f32:	5cd3      	ldrb	r3, [r2, r3]
 8006f34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	40023800 	.word	0x40023800
 8006f40:	0800a9b0 	.word	0x0800a9b0

08006f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f48:	f7ff ffdc 	bl	8006f04 <HAL_RCC_GetHCLKFreq>
 8006f4c:	4601      	mov	r1, r0
 8006f4e:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	0b5b      	lsrs	r3, r3, #13
 8006f54:	f003 0307 	and.w	r3, r3, #7
 8006f58:	4a03      	ldr	r2, [pc, #12]	; (8006f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f5a:	5cd3      	ldrb	r3, [r2, r3]
 8006f5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	40023800 	.word	0x40023800
 8006f68:	0800a9b0 	.word	0x0800a9b0

08006f6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	220f      	movs	r2, #15
 8006f7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f7c:	4b12      	ldr	r3, [pc, #72]	; (8006fc8 <HAL_RCC_GetClockConfig+0x5c>)
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f003 0203 	and.w	r2, r3, #3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f88:	4b0f      	ldr	r3, [pc, #60]	; (8006fc8 <HAL_RCC_GetClockConfig+0x5c>)
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f94:	4b0c      	ldr	r3, [pc, #48]	; (8006fc8 <HAL_RCC_GetClockConfig+0x5c>)
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006fa0:	4b09      	ldr	r3, [pc, #36]	; (8006fc8 <HAL_RCC_GetClockConfig+0x5c>)
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	08db      	lsrs	r3, r3, #3
 8006fa6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006fae:	4b07      	ldr	r3, [pc, #28]	; (8006fcc <HAL_RCC_GetClockConfig+0x60>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 020f 	and.w	r2, r3, #15
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	601a      	str	r2, [r3, #0]
}
 8006fba:	bf00      	nop
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	40023800 	.word	0x40023800
 8006fcc:	40023c00 	.word	0x40023c00

08006fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10b      	bne.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d105      	bne.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007000:	2b00      	cmp	r3, #0
 8007002:	d075      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007004:	4bad      	ldr	r3, [pc, #692]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007006:	2200      	movs	r2, #0
 8007008:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800700a:	f7fc fdcd 	bl	8003ba8 <HAL_GetTick>
 800700e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007010:	e008      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007012:	f7fc fdc9 	bl	8003ba8 <HAL_GetTick>
 8007016:	4602      	mov	r2, r0
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	2b02      	cmp	r3, #2
 800701e:	d901      	bls.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e18b      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007024:	4ba6      	ldr	r3, [pc, #664]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1f0      	bne.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b00      	cmp	r3, #0
 800703a:	d009      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	019a      	lsls	r2, r3, #6
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	071b      	lsls	r3, r3, #28
 8007048:	499d      	ldr	r1, [pc, #628]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800704a:	4313      	orrs	r3, r2
 800704c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b00      	cmp	r3, #0
 800705a:	d01f      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800705c:	4b98      	ldr	r3, [pc, #608]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800705e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007062:	0f1b      	lsrs	r3, r3, #28
 8007064:	f003 0307 	and.w	r3, r3, #7
 8007068:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	019a      	lsls	r2, r3, #6
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	061b      	lsls	r3, r3, #24
 8007076:	431a      	orrs	r2, r3
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	071b      	lsls	r3, r3, #28
 800707c:	4990      	ldr	r1, [pc, #576]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800707e:	4313      	orrs	r3, r2
 8007080:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007084:	4b8e      	ldr	r3, [pc, #568]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800708a:	f023 021f 	bic.w	r2, r3, #31
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	3b01      	subs	r3, #1
 8007094:	498a      	ldr	r1, [pc, #552]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007096:	4313      	orrs	r3, r2
 8007098:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00d      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	019a      	lsls	r2, r3, #6
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	061b      	lsls	r3, r3, #24
 80070b4:	431a      	orrs	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	071b      	lsls	r3, r3, #28
 80070bc:	4980      	ldr	r1, [pc, #512]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80070c4:	4b7d      	ldr	r3, [pc, #500]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80070c6:	2201      	movs	r2, #1
 80070c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070ca:	f7fc fd6d 	bl	8003ba8 <HAL_GetTick>
 80070ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070d0:	e008      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80070d2:	f7fc fd69 	bl	8003ba8 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d901      	bls.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e12b      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070e4:	4b76      	ldr	r3, [pc, #472]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d0f0      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0304 	and.w	r3, r3, #4
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d105      	bne.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007104:	2b00      	cmp	r3, #0
 8007106:	d079      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007108:	4b6e      	ldr	r3, [pc, #440]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800710a:	2200      	movs	r2, #0
 800710c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800710e:	f7fc fd4b 	bl	8003ba8 <HAL_GetTick>
 8007112:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007114:	e008      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007116:	f7fc fd47 	bl	8003ba8 <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	2b02      	cmp	r3, #2
 8007122:	d901      	bls.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e109      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007128:	4b65      	ldr	r3, [pc, #404]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007134:	d0ef      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0304 	and.w	r3, r3, #4
 800713e:	2b00      	cmp	r3, #0
 8007140:	d020      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007142:	4b5f      	ldr	r3, [pc, #380]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007148:	0f1b      	lsrs	r3, r3, #28
 800714a:	f003 0307 	and.w	r3, r3, #7
 800714e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	019a      	lsls	r2, r3, #6
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	061b      	lsls	r3, r3, #24
 800715c:	431a      	orrs	r2, r3
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	071b      	lsls	r3, r3, #28
 8007162:	4957      	ldr	r1, [pc, #348]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007164:	4313      	orrs	r3, r2
 8007166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800716a:	4b55      	ldr	r3, [pc, #340]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800716c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007170:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	3b01      	subs	r3, #1
 800717a:	021b      	lsls	r3, r3, #8
 800717c:	4950      	ldr	r1, [pc, #320]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800717e:	4313      	orrs	r3, r2
 8007180:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0308 	and.w	r3, r3, #8
 800718c:	2b00      	cmp	r3, #0
 800718e:	d01e      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007190:	4b4b      	ldr	r3, [pc, #300]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007196:	0e1b      	lsrs	r3, r3, #24
 8007198:	f003 030f 	and.w	r3, r3, #15
 800719c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	019a      	lsls	r2, r3, #6
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	061b      	lsls	r3, r3, #24
 80071a8:	431a      	orrs	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	071b      	lsls	r3, r3, #28
 80071b0:	4943      	ldr	r1, [pc, #268]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80071b8:	4b41      	ldr	r3, [pc, #260]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	493e      	ldr	r1, [pc, #248]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80071ce:	4b3d      	ldr	r3, [pc, #244]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071d0:	2201      	movs	r2, #1
 80071d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071d4:	f7fc fce8 	bl	8003ba8 <HAL_GetTick>
 80071d8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80071da:	e008      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80071dc:	f7fc fce4 	bl	8003ba8 <HAL_GetTick>
 80071e0:	4602      	mov	r2, r0
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d901      	bls.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e0a6      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80071ee:	4b34      	ldr	r3, [pc, #208]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071fa:	d1ef      	bne.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0320 	and.w	r3, r3, #32
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 808d 	beq.w	8007324 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800720a:	2300      	movs	r3, #0
 800720c:	60fb      	str	r3, [r7, #12]
 800720e:	4b2c      	ldr	r3, [pc, #176]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	4a2b      	ldr	r2, [pc, #172]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007218:	6413      	str	r3, [r2, #64]	; 0x40
 800721a:	4b29      	ldr	r3, [pc, #164]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007226:	4b28      	ldr	r3, [pc, #160]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a27      	ldr	r2, [pc, #156]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800722c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007230:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007232:	f7fc fcb9 	bl	8003ba8 <HAL_GetTick>
 8007236:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007238:	e008      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800723a:	f7fc fcb5 	bl	8003ba8 <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	2b02      	cmp	r3, #2
 8007246:	d901      	bls.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e077      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800724c:	4b1e      	ldr	r3, [pc, #120]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007254:	2b00      	cmp	r3, #0
 8007256:	d0f0      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007258:	4b19      	ldr	r3, [pc, #100]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800725a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007260:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d039      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	429a      	cmp	r2, r3
 8007274:	d032      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007276:	4b12      	ldr	r3, [pc, #72]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800727e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007280:	4b12      	ldr	r3, [pc, #72]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007282:	2201      	movs	r2, #1
 8007284:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007286:	4b11      	ldr	r3, [pc, #68]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800728c:	4a0c      	ldr	r2, [pc, #48]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007292:	4b0b      	ldr	r3, [pc, #44]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	2b01      	cmp	r3, #1
 800729c:	d11e      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800729e:	f7fc fc83 	bl	8003ba8 <HAL_GetTick>
 80072a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072a4:	e014      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072a6:	f7fc fc7f 	bl	8003ba8 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d90b      	bls.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e03f      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80072bc:	42470068 	.word	0x42470068
 80072c0:	40023800 	.word	0x40023800
 80072c4:	42470070 	.word	0x42470070
 80072c8:	40007000 	.word	0x40007000
 80072cc:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072d0:	4b1c      	ldr	r3, [pc, #112]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d0e4      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072e8:	d10d      	bne.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80072ea:	4b16      	ldr	r3, [pc, #88]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80072fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072fe:	4911      	ldr	r1, [pc, #68]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007300:	4313      	orrs	r3, r2
 8007302:	608b      	str	r3, [r1, #8]
 8007304:	e005      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007306:	4b0f      	ldr	r3, [pc, #60]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	4a0e      	ldr	r2, [pc, #56]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800730c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007310:	6093      	str	r3, [r2, #8]
 8007312:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007314:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800731e:	4909      	ldr	r1, [pc, #36]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007320:	4313      	orrs	r3, r2
 8007322:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0310 	and.w	r3, r3, #16
 800732c:	2b00      	cmp	r3, #0
 800732e:	d004      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007336:	4b04      	ldr	r3, [pc, #16]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007338:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3718      	adds	r7, #24
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	40023800 	.word	0x40023800
 8007348:	424711e0 	.word	0x424711e0

0800734c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d101      	bne.n	8007360 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e025      	b.n	80073ac <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	d106      	bne.n	800737a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7fc fae5 	bl	8003944 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2202      	movs	r2, #2
 800737e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	3304      	adds	r3, #4
 800738a:	4619      	mov	r1, r3
 800738c:	4610      	mov	r0, r2
 800738e:	f001 fbf7 	bl	8008b80 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6818      	ldr	r0, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	461a      	mov	r2, r3
 800739c:	6839      	ldr	r1, [r7, #0]
 800739e:	f001 fc62 	bl	8008c66 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e056      	b.n	8007474 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d106      	bne.n	80073e6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7fc f8ef 	bl	80035c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2202      	movs	r2, #2
 80073ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	431a      	orrs	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	431a      	orrs	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	431a      	orrs	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	431a      	orrs	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007422:	431a      	orrs	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	431a      	orrs	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	ea42 0103 	orr.w	r1, r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	0c1b      	lsrs	r3, r3, #16
 8007444:	f003 0104 	and.w	r1, r3, #4
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	430a      	orrs	r2, r1
 8007452:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	69da      	ldr	r2, [r3, #28]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007462:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e01a      	b.n	80074c4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2202      	movs	r2, #2
 8007492:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074a4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7fc f8d4 	bl	8003654 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b088      	sub	sp, #32
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	603b      	str	r3, [r7, #0]
 80074d8:	4613      	mov	r3, r2
 80074da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074dc:	2300      	movs	r3, #0
 80074de:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d101      	bne.n	80074ee <HAL_SPI_Transmit+0x22>
 80074ea:	2302      	movs	r3, #2
 80074ec:	e11e      	b.n	800772c <HAL_SPI_Transmit+0x260>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074f6:	f7fc fb57 	bl	8003ba8 <HAL_GetTick>
 80074fa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80074fc:	88fb      	ldrh	r3, [r7, #6]
 80074fe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b01      	cmp	r3, #1
 800750a:	d002      	beq.n	8007512 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800750c:	2302      	movs	r3, #2
 800750e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007510:	e103      	b.n	800771a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d002      	beq.n	800751e <HAL_SPI_Transmit+0x52>
 8007518:	88fb      	ldrh	r3, [r7, #6]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d102      	bne.n	8007524 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007522:	e0fa      	b.n	800771a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2203      	movs	r2, #3
 8007528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	88fa      	ldrh	r2, [r7, #6]
 800753c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	88fa      	ldrh	r2, [r7, #6]
 8007542:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800756a:	d107      	bne.n	800757c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800757a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007586:	2b40      	cmp	r3, #64	; 0x40
 8007588:	d007      	beq.n	800759a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007598:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075a2:	d14b      	bne.n	800763c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <HAL_SPI_Transmit+0xe6>
 80075ac:	8afb      	ldrh	r3, [r7, #22]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d13e      	bne.n	8007630 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b6:	881a      	ldrh	r2, [r3, #0]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c2:	1c9a      	adds	r2, r3, #2
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	3b01      	subs	r3, #1
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80075d6:	e02b      	b.n	8007630 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d112      	bne.n	800760c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ea:	881a      	ldrh	r2, [r3, #0]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f6:	1c9a      	adds	r2, r3, #2
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007600:	b29b      	uxth	r3, r3
 8007602:	3b01      	subs	r3, #1
 8007604:	b29a      	uxth	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	86da      	strh	r2, [r3, #54]	; 0x36
 800760a:	e011      	b.n	8007630 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800760c:	f7fc facc 	bl	8003ba8 <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	429a      	cmp	r2, r3
 800761a:	d803      	bhi.n	8007624 <HAL_SPI_Transmit+0x158>
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007622:	d102      	bne.n	800762a <HAL_SPI_Transmit+0x15e>
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d102      	bne.n	8007630 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800762e:	e074      	b.n	800771a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007634:	b29b      	uxth	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1ce      	bne.n	80075d8 <HAL_SPI_Transmit+0x10c>
 800763a:	e04c      	b.n	80076d6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <HAL_SPI_Transmit+0x17e>
 8007644:	8afb      	ldrh	r3, [r7, #22]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d140      	bne.n	80076cc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	330c      	adds	r3, #12
 8007654:	7812      	ldrb	r2, [r2, #0]
 8007656:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007666:	b29b      	uxth	r3, r3
 8007668:	3b01      	subs	r3, #1
 800766a:	b29a      	uxth	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007670:	e02c      	b.n	80076cc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b02      	cmp	r3, #2
 800767e:	d113      	bne.n	80076a8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	330c      	adds	r3, #12
 800768a:	7812      	ldrb	r2, [r2, #0]
 800768c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007692:	1c5a      	adds	r2, r3, #1
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800769c:	b29b      	uxth	r3, r3
 800769e:	3b01      	subs	r3, #1
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80076a6:	e011      	b.n	80076cc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076a8:	f7fc fa7e 	bl	8003ba8 <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d803      	bhi.n	80076c0 <HAL_SPI_Transmit+0x1f4>
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076be:	d102      	bne.n	80076c6 <HAL_SPI_Transmit+0x1fa>
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d102      	bne.n	80076cc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076ca:	e026      	b.n	800771a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1cd      	bne.n	8007672 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 fa44 	bl	8007b68 <SPI_EndRxTxTransaction>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d002      	beq.n	80076ec <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2220      	movs	r2, #32
 80076ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10a      	bne.n	800770a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076f4:	2300      	movs	r3, #0
 80076f6:	613b      	str	r3, [r7, #16]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	613b      	str	r3, [r7, #16]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	613b      	str	r3, [r7, #16]
 8007708:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770e:	2b00      	cmp	r3, #0
 8007710:	d002      	beq.n	8007718 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	77fb      	strb	r3, [r7, #31]
 8007716:	e000      	b.n	800771a <HAL_SPI_Transmit+0x24e>
  }

error:
 8007718:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800772a:	7ffb      	ldrb	r3, [r7, #31]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3720      	adds	r7, #32
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b08c      	sub	sp, #48	; 0x30
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
 8007740:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007742:	2301      	movs	r3, #1
 8007744:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007746:	2300      	movs	r3, #0
 8007748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007752:	2b01      	cmp	r3, #1
 8007754:	d101      	bne.n	800775a <HAL_SPI_TransmitReceive+0x26>
 8007756:	2302      	movs	r3, #2
 8007758:	e18a      	b.n	8007a70 <HAL_SPI_TransmitReceive+0x33c>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007762:	f7fc fa21 	bl	8003ba8 <HAL_GetTick>
 8007766:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800776e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007778:	887b      	ldrh	r3, [r7, #2]
 800777a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800777c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007780:	2b01      	cmp	r3, #1
 8007782:	d00f      	beq.n	80077a4 <HAL_SPI_TransmitReceive+0x70>
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800778a:	d107      	bne.n	800779c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d103      	bne.n	800779c <HAL_SPI_TransmitReceive+0x68>
 8007794:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007798:	2b04      	cmp	r3, #4
 800779a:	d003      	beq.n	80077a4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800779c:	2302      	movs	r3, #2
 800779e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80077a2:	e15b      	b.n	8007a5c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d005      	beq.n	80077b6 <HAL_SPI_TransmitReceive+0x82>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <HAL_SPI_TransmitReceive+0x82>
 80077b0:	887b      	ldrh	r3, [r7, #2]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d103      	bne.n	80077be <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80077bc:	e14e      	b.n	8007a5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b04      	cmp	r3, #4
 80077c8:	d003      	beq.n	80077d2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2205      	movs	r2, #5
 80077ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	887a      	ldrh	r2, [r7, #2]
 80077e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	887a      	ldrh	r2, [r7, #2]
 80077e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	887a      	ldrh	r2, [r7, #2]
 80077f4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	887a      	ldrh	r2, [r7, #2]
 80077fa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007812:	2b40      	cmp	r3, #64	; 0x40
 8007814:	d007      	beq.n	8007826 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007824:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800782e:	d178      	bne.n	8007922 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <HAL_SPI_TransmitReceive+0x10a>
 8007838:	8b7b      	ldrh	r3, [r7, #26]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d166      	bne.n	800790c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007842:	881a      	ldrh	r2, [r3, #0]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784e:	1c9a      	adds	r2, r3, #2
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007858:	b29b      	uxth	r3, r3
 800785a:	3b01      	subs	r3, #1
 800785c:	b29a      	uxth	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007862:	e053      	b.n	800790c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b02      	cmp	r3, #2
 8007870:	d11b      	bne.n	80078aa <HAL_SPI_TransmitReceive+0x176>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007876:	b29b      	uxth	r3, r3
 8007878:	2b00      	cmp	r3, #0
 800787a:	d016      	beq.n	80078aa <HAL_SPI_TransmitReceive+0x176>
 800787c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787e:	2b01      	cmp	r3, #1
 8007880:	d113      	bne.n	80078aa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007886:	881a      	ldrh	r2, [r3, #0]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007892:	1c9a      	adds	r2, r3, #2
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800789c:	b29b      	uxth	r3, r3
 800789e:	3b01      	subs	r3, #1
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d119      	bne.n	80078ec <HAL_SPI_TransmitReceive+0x1b8>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078bc:	b29b      	uxth	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d014      	beq.n	80078ec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68da      	ldr	r2, [r3, #12]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078cc:	b292      	uxth	r2, r2
 80078ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d4:	1c9a      	adds	r2, r3, #2
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078de:	b29b      	uxth	r3, r3
 80078e0:	3b01      	subs	r3, #1
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078e8:	2301      	movs	r3, #1
 80078ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80078ec:	f7fc f95c 	bl	8003ba8 <HAL_GetTick>
 80078f0:	4602      	mov	r2, r0
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d807      	bhi.n	800790c <HAL_SPI_TransmitReceive+0x1d8>
 80078fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007902:	d003      	beq.n	800790c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800790a:	e0a7      	b.n	8007a5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007910:	b29b      	uxth	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1a6      	bne.n	8007864 <HAL_SPI_TransmitReceive+0x130>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800791a:	b29b      	uxth	r3, r3
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1a1      	bne.n	8007864 <HAL_SPI_TransmitReceive+0x130>
 8007920:	e07c      	b.n	8007a1c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d002      	beq.n	8007930 <HAL_SPI_TransmitReceive+0x1fc>
 800792a:	8b7b      	ldrh	r3, [r7, #26]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d16b      	bne.n	8007a08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	330c      	adds	r3, #12
 800793a:	7812      	ldrb	r2, [r2, #0]
 800793c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007942:	1c5a      	adds	r2, r3, #1
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800794c:	b29b      	uxth	r3, r3
 800794e:	3b01      	subs	r3, #1
 8007950:	b29a      	uxth	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007956:	e057      	b.n	8007a08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f003 0302 	and.w	r3, r3, #2
 8007962:	2b02      	cmp	r3, #2
 8007964:	d11c      	bne.n	80079a0 <HAL_SPI_TransmitReceive+0x26c>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800796a:	b29b      	uxth	r3, r3
 800796c:	2b00      	cmp	r3, #0
 800796e:	d017      	beq.n	80079a0 <HAL_SPI_TransmitReceive+0x26c>
 8007970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007972:	2b01      	cmp	r3, #1
 8007974:	d114      	bne.n	80079a0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	330c      	adds	r3, #12
 8007980:	7812      	ldrb	r2, [r2, #0]
 8007982:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007992:	b29b      	uxth	r3, r3
 8007994:	3b01      	subs	r3, #1
 8007996:	b29a      	uxth	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800799c:	2300      	movs	r3, #0
 800799e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d119      	bne.n	80079e2 <HAL_SPI_TransmitReceive+0x2ae>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d014      	beq.n	80079e2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68da      	ldr	r2, [r3, #12]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ca:	1c5a      	adds	r2, r3, #1
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	3b01      	subs	r3, #1
 80079d8:	b29a      	uxth	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079de:	2301      	movs	r3, #1
 80079e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80079e2:	f7fc f8e1 	bl	8003ba8 <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d803      	bhi.n	80079fa <HAL_SPI_TransmitReceive+0x2c6>
 80079f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f8:	d102      	bne.n	8007a00 <HAL_SPI_TransmitReceive+0x2cc>
 80079fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d103      	bne.n	8007a08 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a06:	e029      	b.n	8007a5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1a2      	bne.n	8007958 <HAL_SPI_TransmitReceive+0x224>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d19d      	bne.n	8007958 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 f8a1 	bl	8007b68 <SPI_EndRxTxTransaction>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d006      	beq.n	8007a3a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2220      	movs	r2, #32
 8007a36:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007a38:	e010      	b.n	8007a5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10b      	bne.n	8007a5a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a42:	2300      	movs	r3, #0
 8007a44:	617b      	str	r3, [r7, #20]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	617b      	str	r3, [r7, #20]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	617b      	str	r3, [r7, #20]
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	e000      	b.n	8007a5c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007a5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3730      	adds	r7, #48	; 0x30
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a86:	b2db      	uxtb	r3, r3
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	603b      	str	r3, [r7, #0]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007aa4:	e04c      	b.n	8007b40 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aac:	d048      	beq.n	8007b40 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007aae:	f7fc f87b 	bl	8003ba8 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	683a      	ldr	r2, [r7, #0]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d902      	bls.n	8007ac4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d13d      	bne.n	8007b40 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ad2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007adc:	d111      	bne.n	8007b02 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ae6:	d004      	beq.n	8007af2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007af0:	d107      	bne.n	8007b02 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b00:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b0a:	d10f      	bne.n	8007b2c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b1a:	601a      	str	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e00f      	b.n	8007b60 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	689a      	ldr	r2, [r3, #8]
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	4013      	ands	r3, r2
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	bf0c      	ite	eq
 8007b50:	2301      	moveq	r3, #1
 8007b52:	2300      	movne	r3, #0
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	461a      	mov	r2, r3
 8007b58:	79fb      	ldrb	r3, [r7, #7]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d1a3      	bne.n	8007aa6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b088      	sub	sp, #32
 8007b6c:	af02      	add	r7, sp, #8
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007b74:	4b1b      	ldr	r3, [pc, #108]	; (8007be4 <SPI_EndRxTxTransaction+0x7c>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a1b      	ldr	r2, [pc, #108]	; (8007be8 <SPI_EndRxTxTransaction+0x80>)
 8007b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b7e:	0d5b      	lsrs	r3, r3, #21
 8007b80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b84:	fb02 f303 	mul.w	r3, r2, r3
 8007b88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b92:	d112      	bne.n	8007bba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	2180      	movs	r1, #128	; 0x80
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f7ff ff78 	bl	8007a94 <SPI_WaitFlagStateUntilTimeout>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d016      	beq.n	8007bd8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bae:	f043 0220 	orr.w	r2, r3, #32
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e00f      	b.n	8007bda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00a      	beq.n	8007bd6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd0:	2b80      	cmp	r3, #128	; 0x80
 8007bd2:	d0f2      	beq.n	8007bba <SPI_EndRxTxTransaction+0x52>
 8007bd4:	e000      	b.n	8007bd8 <SPI_EndRxTxTransaction+0x70>
        break;
 8007bd6:	bf00      	nop
  }

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	20000018 	.word	0x20000018
 8007be8:	165e9f81 	.word	0x165e9f81

08007bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e01d      	b.n	8007c3a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d106      	bne.n	8007c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7fb fd3c 	bl	8003690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	3304      	adds	r3, #4
 8007c28:	4619      	mov	r1, r3
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	f000 fa14 	bl	8008058 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c42:	b480      	push	{r7}
 8007c44:	b085      	sub	sp, #20
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68da      	ldr	r2, [r3, #12]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f042 0201 	orr.w	r2, r2, #1
 8007c58:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f003 0307 	and.w	r3, r3, #7
 8007c64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2b06      	cmp	r3, #6
 8007c6a:	d007      	beq.n	8007c7c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f042 0201 	orr.w	r2, r2, #1
 8007c7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b082      	sub	sp, #8
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d122      	bne.n	8007ce6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	f003 0302 	and.w	r3, r3, #2
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d11b      	bne.n	8007ce6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f06f 0202 	mvn.w	r2, #2
 8007cb6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	f003 0303 	and.w	r3, r3, #3
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d003      	beq.n	8007cd4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f9a5 	bl	800801c <HAL_TIM_IC_CaptureCallback>
 8007cd2:	e005      	b.n	8007ce0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f997 	bl	8008008 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f9a8 	bl	8008030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	f003 0304 	and.w	r3, r3, #4
 8007cf0:	2b04      	cmp	r3, #4
 8007cf2:	d122      	bne.n	8007d3a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	f003 0304 	and.w	r3, r3, #4
 8007cfe:	2b04      	cmp	r3, #4
 8007d00:	d11b      	bne.n	8007d3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f06f 0204 	mvn.w	r2, #4
 8007d0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d003      	beq.n	8007d28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f97b 	bl	800801c <HAL_TIM_IC_CaptureCallback>
 8007d26:	e005      	b.n	8007d34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f96d 	bl	8008008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f97e 	bl	8008030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	f003 0308 	and.w	r3, r3, #8
 8007d44:	2b08      	cmp	r3, #8
 8007d46:	d122      	bne.n	8007d8e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	f003 0308 	and.w	r3, r3, #8
 8007d52:	2b08      	cmp	r3, #8
 8007d54:	d11b      	bne.n	8007d8e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f06f 0208 	mvn.w	r2, #8
 8007d5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2204      	movs	r2, #4
 8007d64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	69db      	ldr	r3, [r3, #28]
 8007d6c:	f003 0303 	and.w	r3, r3, #3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d003      	beq.n	8007d7c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f951 	bl	800801c <HAL_TIM_IC_CaptureCallback>
 8007d7a:	e005      	b.n	8007d88 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f943 	bl	8008008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f954 	bl	8008030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	f003 0310 	and.w	r3, r3, #16
 8007d98:	2b10      	cmp	r3, #16
 8007d9a:	d122      	bne.n	8007de2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	f003 0310 	and.w	r3, r3, #16
 8007da6:	2b10      	cmp	r3, #16
 8007da8:	d11b      	bne.n	8007de2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f06f 0210 	mvn.w	r2, #16
 8007db2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2208      	movs	r2, #8
 8007db8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	69db      	ldr	r3, [r3, #28]
 8007dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d003      	beq.n	8007dd0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f927 	bl	800801c <HAL_TIM_IC_CaptureCallback>
 8007dce:	e005      	b.n	8007ddc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f919 	bl	8008008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f92a 	bl	8008030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d10e      	bne.n	8007e0e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d107      	bne.n	8007e0e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f06f 0201 	mvn.w	r2, #1
 8007e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7fb f865 	bl	8002ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e18:	2b80      	cmp	r3, #128	; 0x80
 8007e1a:	d10e      	bne.n	8007e3a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e26:	2b80      	cmp	r3, #128	; 0x80
 8007e28:	d107      	bne.n	8007e3a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 facf 	bl	80083d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e44:	2b40      	cmp	r3, #64	; 0x40
 8007e46:	d10e      	bne.n	8007e66 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e52:	2b40      	cmp	r3, #64	; 0x40
 8007e54:	d107      	bne.n	8007e66 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f8ef 	bl	8008044 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	f003 0320 	and.w	r3, r3, #32
 8007e70:	2b20      	cmp	r3, #32
 8007e72:	d10e      	bne.n	8007e92 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	f003 0320 	and.w	r3, r3, #32
 8007e7e:	2b20      	cmp	r3, #32
 8007e80:	d107      	bne.n	8007e92 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f06f 0220 	mvn.w	r2, #32
 8007e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fa99 	bl	80083c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e92:	bf00      	nop
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b084      	sub	sp, #16
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d101      	bne.n	8007eb2 <HAL_TIM_ConfigClockSource+0x18>
 8007eae:	2302      	movs	r3, #2
 8007eb0:	e0a6      	b.n	8008000 <HAL_TIM_ConfigClockSource+0x166>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2202      	movs	r2, #2
 8007ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007ed0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ed8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2b40      	cmp	r3, #64	; 0x40
 8007ee8:	d067      	beq.n	8007fba <HAL_TIM_ConfigClockSource+0x120>
 8007eea:	2b40      	cmp	r3, #64	; 0x40
 8007eec:	d80b      	bhi.n	8007f06 <HAL_TIM_ConfigClockSource+0x6c>
 8007eee:	2b10      	cmp	r3, #16
 8007ef0:	d073      	beq.n	8007fda <HAL_TIM_ConfigClockSource+0x140>
 8007ef2:	2b10      	cmp	r3, #16
 8007ef4:	d802      	bhi.n	8007efc <HAL_TIM_ConfigClockSource+0x62>
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d06f      	beq.n	8007fda <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007efa:	e078      	b.n	8007fee <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007efc:	2b20      	cmp	r3, #32
 8007efe:	d06c      	beq.n	8007fda <HAL_TIM_ConfigClockSource+0x140>
 8007f00:	2b30      	cmp	r3, #48	; 0x30
 8007f02:	d06a      	beq.n	8007fda <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007f04:	e073      	b.n	8007fee <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007f06:	2b70      	cmp	r3, #112	; 0x70
 8007f08:	d00d      	beq.n	8007f26 <HAL_TIM_ConfigClockSource+0x8c>
 8007f0a:	2b70      	cmp	r3, #112	; 0x70
 8007f0c:	d804      	bhi.n	8007f18 <HAL_TIM_ConfigClockSource+0x7e>
 8007f0e:	2b50      	cmp	r3, #80	; 0x50
 8007f10:	d033      	beq.n	8007f7a <HAL_TIM_ConfigClockSource+0xe0>
 8007f12:	2b60      	cmp	r3, #96	; 0x60
 8007f14:	d041      	beq.n	8007f9a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007f16:	e06a      	b.n	8007fee <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f1c:	d066      	beq.n	8007fec <HAL_TIM_ConfigClockSource+0x152>
 8007f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f22:	d017      	beq.n	8007f54 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007f24:	e063      	b.n	8007fee <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6818      	ldr	r0, [r3, #0]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	6899      	ldr	r1, [r3, #8]
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	f000 f9a9 	bl	800828c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f48:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	609a      	str	r2, [r3, #8]
      break;
 8007f52:	e04c      	b.n	8007fee <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6818      	ldr	r0, [r3, #0]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	6899      	ldr	r1, [r3, #8]
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	685a      	ldr	r2, [r3, #4]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	f000 f992 	bl	800828c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	689a      	ldr	r2, [r3, #8]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f76:	609a      	str	r2, [r3, #8]
      break;
 8007f78:	e039      	b.n	8007fee <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6818      	ldr	r0, [r3, #0]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	6859      	ldr	r1, [r3, #4]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	461a      	mov	r2, r3
 8007f88:	f000 f906 	bl	8008198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2150      	movs	r1, #80	; 0x50
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 f95f 	bl	8008256 <TIM_ITRx_SetConfig>
      break;
 8007f98:	e029      	b.n	8007fee <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6818      	ldr	r0, [r3, #0]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	6859      	ldr	r1, [r3, #4]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	f000 f925 	bl	80081f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2160      	movs	r1, #96	; 0x60
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 f94f 	bl	8008256 <TIM_ITRx_SetConfig>
      break;
 8007fb8:	e019      	b.n	8007fee <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6818      	ldr	r0, [r3, #0]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	6859      	ldr	r1, [r3, #4]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	f000 f8e6 	bl	8008198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2140      	movs	r1, #64	; 0x40
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 f93f 	bl	8008256 <TIM_ITRx_SetConfig>
      break;
 8007fd8:	e009      	b.n	8007fee <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	4610      	mov	r0, r2
 8007fe6:	f000 f936 	bl	8008256 <TIM_ITRx_SetConfig>
      break;
 8007fea:	e000      	b.n	8007fee <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007fec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a40      	ldr	r2, [pc, #256]	; (800816c <TIM_Base_SetConfig+0x114>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d013      	beq.n	8008098 <TIM_Base_SetConfig+0x40>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008076:	d00f      	beq.n	8008098 <TIM_Base_SetConfig+0x40>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a3d      	ldr	r2, [pc, #244]	; (8008170 <TIM_Base_SetConfig+0x118>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d00b      	beq.n	8008098 <TIM_Base_SetConfig+0x40>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a3c      	ldr	r2, [pc, #240]	; (8008174 <TIM_Base_SetConfig+0x11c>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d007      	beq.n	8008098 <TIM_Base_SetConfig+0x40>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a3b      	ldr	r2, [pc, #236]	; (8008178 <TIM_Base_SetConfig+0x120>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d003      	beq.n	8008098 <TIM_Base_SetConfig+0x40>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a3a      	ldr	r2, [pc, #232]	; (800817c <TIM_Base_SetConfig+0x124>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d108      	bne.n	80080aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800809e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a2f      	ldr	r2, [pc, #188]	; (800816c <TIM_Base_SetConfig+0x114>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d02b      	beq.n	800810a <TIM_Base_SetConfig+0xb2>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080b8:	d027      	beq.n	800810a <TIM_Base_SetConfig+0xb2>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a2c      	ldr	r2, [pc, #176]	; (8008170 <TIM_Base_SetConfig+0x118>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d023      	beq.n	800810a <TIM_Base_SetConfig+0xb2>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a2b      	ldr	r2, [pc, #172]	; (8008174 <TIM_Base_SetConfig+0x11c>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d01f      	beq.n	800810a <TIM_Base_SetConfig+0xb2>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a2a      	ldr	r2, [pc, #168]	; (8008178 <TIM_Base_SetConfig+0x120>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d01b      	beq.n	800810a <TIM_Base_SetConfig+0xb2>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a29      	ldr	r2, [pc, #164]	; (800817c <TIM_Base_SetConfig+0x124>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d017      	beq.n	800810a <TIM_Base_SetConfig+0xb2>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a28      	ldr	r2, [pc, #160]	; (8008180 <TIM_Base_SetConfig+0x128>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d013      	beq.n	800810a <TIM_Base_SetConfig+0xb2>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a27      	ldr	r2, [pc, #156]	; (8008184 <TIM_Base_SetConfig+0x12c>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d00f      	beq.n	800810a <TIM_Base_SetConfig+0xb2>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a26      	ldr	r2, [pc, #152]	; (8008188 <TIM_Base_SetConfig+0x130>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d00b      	beq.n	800810a <TIM_Base_SetConfig+0xb2>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a25      	ldr	r2, [pc, #148]	; (800818c <TIM_Base_SetConfig+0x134>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d007      	beq.n	800810a <TIM_Base_SetConfig+0xb2>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a24      	ldr	r2, [pc, #144]	; (8008190 <TIM_Base_SetConfig+0x138>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d003      	beq.n	800810a <TIM_Base_SetConfig+0xb2>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a23      	ldr	r2, [pc, #140]	; (8008194 <TIM_Base_SetConfig+0x13c>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d108      	bne.n	800811c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	4313      	orrs	r3, r2
 800811a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	4313      	orrs	r3, r2
 8008128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	689a      	ldr	r2, [r3, #8]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a0a      	ldr	r2, [pc, #40]	; (800816c <TIM_Base_SetConfig+0x114>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d003      	beq.n	8008150 <TIM_Base_SetConfig+0xf8>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a0c      	ldr	r2, [pc, #48]	; (800817c <TIM_Base_SetConfig+0x124>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d103      	bne.n	8008158 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	691a      	ldr	r2, [r3, #16]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	615a      	str	r2, [r3, #20]
}
 800815e:	bf00      	nop
 8008160:	3714      	adds	r7, #20
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	40010000 	.word	0x40010000
 8008170:	40000400 	.word	0x40000400
 8008174:	40000800 	.word	0x40000800
 8008178:	40000c00 	.word	0x40000c00
 800817c:	40010400 	.word	0x40010400
 8008180:	40014000 	.word	0x40014000
 8008184:	40014400 	.word	0x40014400
 8008188:	40014800 	.word	0x40014800
 800818c:	40001800 	.word	0x40001800
 8008190:	40001c00 	.word	0x40001c00
 8008194:	40002000 	.word	0x40002000

08008198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008198:	b480      	push	{r7}
 800819a:	b087      	sub	sp, #28
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6a1b      	ldr	r3, [r3, #32]
 80081a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	f023 0201 	bic.w	r2, r3, #1
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	011b      	lsls	r3, r3, #4
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	f023 030a 	bic.w	r3, r3, #10
 80081d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	4313      	orrs	r3, r2
 80081dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	621a      	str	r2, [r3, #32]
}
 80081ea:	bf00      	nop
 80081ec:	371c      	adds	r7, #28
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081f6:	b480      	push	{r7}
 80081f8:	b087      	sub	sp, #28
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	60f8      	str	r0, [r7, #12]
 80081fe:	60b9      	str	r1, [r7, #8]
 8008200:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	f023 0210 	bic.w	r2, r3, #16
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6a1b      	ldr	r3, [r3, #32]
 8008218:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008220:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	031b      	lsls	r3, r3, #12
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	4313      	orrs	r3, r2
 800822a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008232:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	011b      	lsls	r3, r3, #4
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	4313      	orrs	r3, r2
 800823c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	697a      	ldr	r2, [r7, #20]
 8008242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	621a      	str	r2, [r3, #32]
}
 800824a:	bf00      	nop
 800824c:	371c      	adds	r7, #28
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008256:	b480      	push	{r7}
 8008258:	b085      	sub	sp, #20
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	4313      	orrs	r3, r2
 8008274:	f043 0307 	orr.w	r3, r3, #7
 8008278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	609a      	str	r2, [r3, #8]
}
 8008280:	bf00      	nop
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
 8008298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	021a      	lsls	r2, r3, #8
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	431a      	orrs	r2, r3
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	609a      	str	r2, [r3, #8]
}
 80082c0:	bf00      	nop
 80082c2:	371c      	adds	r7, #28
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d101      	bne.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082e0:	2302      	movs	r3, #2
 80082e2:	e05a      	b.n	800839a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2202      	movs	r2, #2
 80082f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800830a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	4313      	orrs	r3, r2
 8008314:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a21      	ldr	r2, [pc, #132]	; (80083a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d022      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008330:	d01d      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a1d      	ldr	r2, [pc, #116]	; (80083ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d018      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a1b      	ldr	r2, [pc, #108]	; (80083b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d013      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a1a      	ldr	r2, [pc, #104]	; (80083b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d00e      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a18      	ldr	r2, [pc, #96]	; (80083b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d009      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a17      	ldr	r2, [pc, #92]	; (80083bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d004      	beq.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a15      	ldr	r2, [pc, #84]	; (80083c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d10c      	bne.n	8008388 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008374:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	4313      	orrs	r3, r2
 800837e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3714      	adds	r7, #20
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	40010000 	.word	0x40010000
 80083ac:	40000400 	.word	0x40000400
 80083b0:	40000800 	.word	0x40000800
 80083b4:	40000c00 	.word	0x40000c00
 80083b8:	40010400 	.word	0x40010400
 80083bc:	40014000 	.word	0x40014000
 80083c0:	40001800 	.word	0x40001800

080083c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e03f      	b.n	800847e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b00      	cmp	r3, #0
 8008408:	d106      	bne.n	8008418 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7fb f95e 	bl	80036d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2224      	movs	r2, #36	; 0x24
 800841c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68da      	ldr	r2, [r3, #12]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800842e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f829 	bl	8008488 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	691a      	ldr	r2, [r3, #16]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008444:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	695a      	ldr	r2, [r3, #20]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008454:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68da      	ldr	r2, [r3, #12]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008464:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2220      	movs	r2, #32
 8008470:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2220      	movs	r2, #32
 8008478:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
	...

08008488 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848c:	b085      	sub	sp, #20
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68da      	ldr	r2, [r3, #12]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	430a      	orrs	r2, r1
 80084a6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	431a      	orrs	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	431a      	orrs	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	69db      	ldr	r3, [r3, #28]
 80084bc:	4313      	orrs	r3, r2
 80084be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80084ca:	f023 030c 	bic.w	r3, r3, #12
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	6812      	ldr	r2, [r2, #0]
 80084d2:	68f9      	ldr	r1, [r7, #12]
 80084d4:	430b      	orrs	r3, r1
 80084d6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	699a      	ldr	r2, [r3, #24]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	69db      	ldr	r3, [r3, #28]
 80084f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084f6:	f040 818b 	bne.w	8008810 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4ac1      	ldr	r2, [pc, #772]	; (8008804 <UART_SetConfig+0x37c>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d005      	beq.n	8008510 <UART_SetConfig+0x88>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4abf      	ldr	r2, [pc, #764]	; (8008808 <UART_SetConfig+0x380>)
 800850a:	4293      	cmp	r3, r2
 800850c:	f040 80bd 	bne.w	800868a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008510:	f7fe fd18 	bl	8006f44 <HAL_RCC_GetPCLK2Freq>
 8008514:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	461d      	mov	r5, r3
 800851a:	f04f 0600 	mov.w	r6, #0
 800851e:	46a8      	mov	r8, r5
 8008520:	46b1      	mov	r9, r6
 8008522:	eb18 0308 	adds.w	r3, r8, r8
 8008526:	eb49 0409 	adc.w	r4, r9, r9
 800852a:	4698      	mov	r8, r3
 800852c:	46a1      	mov	r9, r4
 800852e:	eb18 0805 	adds.w	r8, r8, r5
 8008532:	eb49 0906 	adc.w	r9, r9, r6
 8008536:	f04f 0100 	mov.w	r1, #0
 800853a:	f04f 0200 	mov.w	r2, #0
 800853e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008542:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008546:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800854a:	4688      	mov	r8, r1
 800854c:	4691      	mov	r9, r2
 800854e:	eb18 0005 	adds.w	r0, r8, r5
 8008552:	eb49 0106 	adc.w	r1, r9, r6
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	461d      	mov	r5, r3
 800855c:	f04f 0600 	mov.w	r6, #0
 8008560:	196b      	adds	r3, r5, r5
 8008562:	eb46 0406 	adc.w	r4, r6, r6
 8008566:	461a      	mov	r2, r3
 8008568:	4623      	mov	r3, r4
 800856a:	f7f8 fb0f 	bl	8000b8c <__aeabi_uldivmod>
 800856e:	4603      	mov	r3, r0
 8008570:	460c      	mov	r4, r1
 8008572:	461a      	mov	r2, r3
 8008574:	4ba5      	ldr	r3, [pc, #660]	; (800880c <UART_SetConfig+0x384>)
 8008576:	fba3 2302 	umull	r2, r3, r3, r2
 800857a:	095b      	lsrs	r3, r3, #5
 800857c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	461d      	mov	r5, r3
 8008584:	f04f 0600 	mov.w	r6, #0
 8008588:	46a9      	mov	r9, r5
 800858a:	46b2      	mov	sl, r6
 800858c:	eb19 0309 	adds.w	r3, r9, r9
 8008590:	eb4a 040a 	adc.w	r4, sl, sl
 8008594:	4699      	mov	r9, r3
 8008596:	46a2      	mov	sl, r4
 8008598:	eb19 0905 	adds.w	r9, r9, r5
 800859c:	eb4a 0a06 	adc.w	sl, sl, r6
 80085a0:	f04f 0100 	mov.w	r1, #0
 80085a4:	f04f 0200 	mov.w	r2, #0
 80085a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80085b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80085b4:	4689      	mov	r9, r1
 80085b6:	4692      	mov	sl, r2
 80085b8:	eb19 0005 	adds.w	r0, r9, r5
 80085bc:	eb4a 0106 	adc.w	r1, sl, r6
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	461d      	mov	r5, r3
 80085c6:	f04f 0600 	mov.w	r6, #0
 80085ca:	196b      	adds	r3, r5, r5
 80085cc:	eb46 0406 	adc.w	r4, r6, r6
 80085d0:	461a      	mov	r2, r3
 80085d2:	4623      	mov	r3, r4
 80085d4:	f7f8 fada 	bl	8000b8c <__aeabi_uldivmod>
 80085d8:	4603      	mov	r3, r0
 80085da:	460c      	mov	r4, r1
 80085dc:	461a      	mov	r2, r3
 80085de:	4b8b      	ldr	r3, [pc, #556]	; (800880c <UART_SetConfig+0x384>)
 80085e0:	fba3 1302 	umull	r1, r3, r3, r2
 80085e4:	095b      	lsrs	r3, r3, #5
 80085e6:	2164      	movs	r1, #100	; 0x64
 80085e8:	fb01 f303 	mul.w	r3, r1, r3
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	00db      	lsls	r3, r3, #3
 80085f0:	3332      	adds	r3, #50	; 0x32
 80085f2:	4a86      	ldr	r2, [pc, #536]	; (800880c <UART_SetConfig+0x384>)
 80085f4:	fba2 2303 	umull	r2, r3, r2, r3
 80085f8:	095b      	lsrs	r3, r3, #5
 80085fa:	005b      	lsls	r3, r3, #1
 80085fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008600:	4498      	add	r8, r3
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	461d      	mov	r5, r3
 8008606:	f04f 0600 	mov.w	r6, #0
 800860a:	46a9      	mov	r9, r5
 800860c:	46b2      	mov	sl, r6
 800860e:	eb19 0309 	adds.w	r3, r9, r9
 8008612:	eb4a 040a 	adc.w	r4, sl, sl
 8008616:	4699      	mov	r9, r3
 8008618:	46a2      	mov	sl, r4
 800861a:	eb19 0905 	adds.w	r9, r9, r5
 800861e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008622:	f04f 0100 	mov.w	r1, #0
 8008626:	f04f 0200 	mov.w	r2, #0
 800862a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800862e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008632:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008636:	4689      	mov	r9, r1
 8008638:	4692      	mov	sl, r2
 800863a:	eb19 0005 	adds.w	r0, r9, r5
 800863e:	eb4a 0106 	adc.w	r1, sl, r6
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	461d      	mov	r5, r3
 8008648:	f04f 0600 	mov.w	r6, #0
 800864c:	196b      	adds	r3, r5, r5
 800864e:	eb46 0406 	adc.w	r4, r6, r6
 8008652:	461a      	mov	r2, r3
 8008654:	4623      	mov	r3, r4
 8008656:	f7f8 fa99 	bl	8000b8c <__aeabi_uldivmod>
 800865a:	4603      	mov	r3, r0
 800865c:	460c      	mov	r4, r1
 800865e:	461a      	mov	r2, r3
 8008660:	4b6a      	ldr	r3, [pc, #424]	; (800880c <UART_SetConfig+0x384>)
 8008662:	fba3 1302 	umull	r1, r3, r3, r2
 8008666:	095b      	lsrs	r3, r3, #5
 8008668:	2164      	movs	r1, #100	; 0x64
 800866a:	fb01 f303 	mul.w	r3, r1, r3
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	00db      	lsls	r3, r3, #3
 8008672:	3332      	adds	r3, #50	; 0x32
 8008674:	4a65      	ldr	r2, [pc, #404]	; (800880c <UART_SetConfig+0x384>)
 8008676:	fba2 2303 	umull	r2, r3, r2, r3
 800867a:	095b      	lsrs	r3, r3, #5
 800867c:	f003 0207 	and.w	r2, r3, #7
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4442      	add	r2, r8
 8008686:	609a      	str	r2, [r3, #8]
 8008688:	e26f      	b.n	8008b6a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800868a:	f7fe fc47 	bl	8006f1c <HAL_RCC_GetPCLK1Freq>
 800868e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	461d      	mov	r5, r3
 8008694:	f04f 0600 	mov.w	r6, #0
 8008698:	46a8      	mov	r8, r5
 800869a:	46b1      	mov	r9, r6
 800869c:	eb18 0308 	adds.w	r3, r8, r8
 80086a0:	eb49 0409 	adc.w	r4, r9, r9
 80086a4:	4698      	mov	r8, r3
 80086a6:	46a1      	mov	r9, r4
 80086a8:	eb18 0805 	adds.w	r8, r8, r5
 80086ac:	eb49 0906 	adc.w	r9, r9, r6
 80086b0:	f04f 0100 	mov.w	r1, #0
 80086b4:	f04f 0200 	mov.w	r2, #0
 80086b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80086bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80086c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80086c4:	4688      	mov	r8, r1
 80086c6:	4691      	mov	r9, r2
 80086c8:	eb18 0005 	adds.w	r0, r8, r5
 80086cc:	eb49 0106 	adc.w	r1, r9, r6
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	461d      	mov	r5, r3
 80086d6:	f04f 0600 	mov.w	r6, #0
 80086da:	196b      	adds	r3, r5, r5
 80086dc:	eb46 0406 	adc.w	r4, r6, r6
 80086e0:	461a      	mov	r2, r3
 80086e2:	4623      	mov	r3, r4
 80086e4:	f7f8 fa52 	bl	8000b8c <__aeabi_uldivmod>
 80086e8:	4603      	mov	r3, r0
 80086ea:	460c      	mov	r4, r1
 80086ec:	461a      	mov	r2, r3
 80086ee:	4b47      	ldr	r3, [pc, #284]	; (800880c <UART_SetConfig+0x384>)
 80086f0:	fba3 2302 	umull	r2, r3, r3, r2
 80086f4:	095b      	lsrs	r3, r3, #5
 80086f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	461d      	mov	r5, r3
 80086fe:	f04f 0600 	mov.w	r6, #0
 8008702:	46a9      	mov	r9, r5
 8008704:	46b2      	mov	sl, r6
 8008706:	eb19 0309 	adds.w	r3, r9, r9
 800870a:	eb4a 040a 	adc.w	r4, sl, sl
 800870e:	4699      	mov	r9, r3
 8008710:	46a2      	mov	sl, r4
 8008712:	eb19 0905 	adds.w	r9, r9, r5
 8008716:	eb4a 0a06 	adc.w	sl, sl, r6
 800871a:	f04f 0100 	mov.w	r1, #0
 800871e:	f04f 0200 	mov.w	r2, #0
 8008722:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008726:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800872a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800872e:	4689      	mov	r9, r1
 8008730:	4692      	mov	sl, r2
 8008732:	eb19 0005 	adds.w	r0, r9, r5
 8008736:	eb4a 0106 	adc.w	r1, sl, r6
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	461d      	mov	r5, r3
 8008740:	f04f 0600 	mov.w	r6, #0
 8008744:	196b      	adds	r3, r5, r5
 8008746:	eb46 0406 	adc.w	r4, r6, r6
 800874a:	461a      	mov	r2, r3
 800874c:	4623      	mov	r3, r4
 800874e:	f7f8 fa1d 	bl	8000b8c <__aeabi_uldivmod>
 8008752:	4603      	mov	r3, r0
 8008754:	460c      	mov	r4, r1
 8008756:	461a      	mov	r2, r3
 8008758:	4b2c      	ldr	r3, [pc, #176]	; (800880c <UART_SetConfig+0x384>)
 800875a:	fba3 1302 	umull	r1, r3, r3, r2
 800875e:	095b      	lsrs	r3, r3, #5
 8008760:	2164      	movs	r1, #100	; 0x64
 8008762:	fb01 f303 	mul.w	r3, r1, r3
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	00db      	lsls	r3, r3, #3
 800876a:	3332      	adds	r3, #50	; 0x32
 800876c:	4a27      	ldr	r2, [pc, #156]	; (800880c <UART_SetConfig+0x384>)
 800876e:	fba2 2303 	umull	r2, r3, r2, r3
 8008772:	095b      	lsrs	r3, r3, #5
 8008774:	005b      	lsls	r3, r3, #1
 8008776:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800877a:	4498      	add	r8, r3
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	461d      	mov	r5, r3
 8008780:	f04f 0600 	mov.w	r6, #0
 8008784:	46a9      	mov	r9, r5
 8008786:	46b2      	mov	sl, r6
 8008788:	eb19 0309 	adds.w	r3, r9, r9
 800878c:	eb4a 040a 	adc.w	r4, sl, sl
 8008790:	4699      	mov	r9, r3
 8008792:	46a2      	mov	sl, r4
 8008794:	eb19 0905 	adds.w	r9, r9, r5
 8008798:	eb4a 0a06 	adc.w	sl, sl, r6
 800879c:	f04f 0100 	mov.w	r1, #0
 80087a0:	f04f 0200 	mov.w	r2, #0
 80087a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80087ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80087b0:	4689      	mov	r9, r1
 80087b2:	4692      	mov	sl, r2
 80087b4:	eb19 0005 	adds.w	r0, r9, r5
 80087b8:	eb4a 0106 	adc.w	r1, sl, r6
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	461d      	mov	r5, r3
 80087c2:	f04f 0600 	mov.w	r6, #0
 80087c6:	196b      	adds	r3, r5, r5
 80087c8:	eb46 0406 	adc.w	r4, r6, r6
 80087cc:	461a      	mov	r2, r3
 80087ce:	4623      	mov	r3, r4
 80087d0:	f7f8 f9dc 	bl	8000b8c <__aeabi_uldivmod>
 80087d4:	4603      	mov	r3, r0
 80087d6:	460c      	mov	r4, r1
 80087d8:	461a      	mov	r2, r3
 80087da:	4b0c      	ldr	r3, [pc, #48]	; (800880c <UART_SetConfig+0x384>)
 80087dc:	fba3 1302 	umull	r1, r3, r3, r2
 80087e0:	095b      	lsrs	r3, r3, #5
 80087e2:	2164      	movs	r1, #100	; 0x64
 80087e4:	fb01 f303 	mul.w	r3, r1, r3
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	00db      	lsls	r3, r3, #3
 80087ec:	3332      	adds	r3, #50	; 0x32
 80087ee:	4a07      	ldr	r2, [pc, #28]	; (800880c <UART_SetConfig+0x384>)
 80087f0:	fba2 2303 	umull	r2, r3, r2, r3
 80087f4:	095b      	lsrs	r3, r3, #5
 80087f6:	f003 0207 	and.w	r2, r3, #7
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4442      	add	r2, r8
 8008800:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008802:	e1b2      	b.n	8008b6a <UART_SetConfig+0x6e2>
 8008804:	40011000 	.word	0x40011000
 8008808:	40011400 	.word	0x40011400
 800880c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4ad7      	ldr	r2, [pc, #860]	; (8008b74 <UART_SetConfig+0x6ec>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d005      	beq.n	8008826 <UART_SetConfig+0x39e>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4ad6      	ldr	r2, [pc, #856]	; (8008b78 <UART_SetConfig+0x6f0>)
 8008820:	4293      	cmp	r3, r2
 8008822:	f040 80d1 	bne.w	80089c8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008826:	f7fe fb8d 	bl	8006f44 <HAL_RCC_GetPCLK2Freq>
 800882a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	469a      	mov	sl, r3
 8008830:	f04f 0b00 	mov.w	fp, #0
 8008834:	46d0      	mov	r8, sl
 8008836:	46d9      	mov	r9, fp
 8008838:	eb18 0308 	adds.w	r3, r8, r8
 800883c:	eb49 0409 	adc.w	r4, r9, r9
 8008840:	4698      	mov	r8, r3
 8008842:	46a1      	mov	r9, r4
 8008844:	eb18 080a 	adds.w	r8, r8, sl
 8008848:	eb49 090b 	adc.w	r9, r9, fp
 800884c:	f04f 0100 	mov.w	r1, #0
 8008850:	f04f 0200 	mov.w	r2, #0
 8008854:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008858:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800885c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008860:	4688      	mov	r8, r1
 8008862:	4691      	mov	r9, r2
 8008864:	eb1a 0508 	adds.w	r5, sl, r8
 8008868:	eb4b 0609 	adc.w	r6, fp, r9
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	4619      	mov	r1, r3
 8008872:	f04f 0200 	mov.w	r2, #0
 8008876:	f04f 0300 	mov.w	r3, #0
 800887a:	f04f 0400 	mov.w	r4, #0
 800887e:	0094      	lsls	r4, r2, #2
 8008880:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008884:	008b      	lsls	r3, r1, #2
 8008886:	461a      	mov	r2, r3
 8008888:	4623      	mov	r3, r4
 800888a:	4628      	mov	r0, r5
 800888c:	4631      	mov	r1, r6
 800888e:	f7f8 f97d 	bl	8000b8c <__aeabi_uldivmod>
 8008892:	4603      	mov	r3, r0
 8008894:	460c      	mov	r4, r1
 8008896:	461a      	mov	r2, r3
 8008898:	4bb8      	ldr	r3, [pc, #736]	; (8008b7c <UART_SetConfig+0x6f4>)
 800889a:	fba3 2302 	umull	r2, r3, r3, r2
 800889e:	095b      	lsrs	r3, r3, #5
 80088a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	469b      	mov	fp, r3
 80088a8:	f04f 0c00 	mov.w	ip, #0
 80088ac:	46d9      	mov	r9, fp
 80088ae:	46e2      	mov	sl, ip
 80088b0:	eb19 0309 	adds.w	r3, r9, r9
 80088b4:	eb4a 040a 	adc.w	r4, sl, sl
 80088b8:	4699      	mov	r9, r3
 80088ba:	46a2      	mov	sl, r4
 80088bc:	eb19 090b 	adds.w	r9, r9, fp
 80088c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80088c4:	f04f 0100 	mov.w	r1, #0
 80088c8:	f04f 0200 	mov.w	r2, #0
 80088cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80088d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80088d8:	4689      	mov	r9, r1
 80088da:	4692      	mov	sl, r2
 80088dc:	eb1b 0509 	adds.w	r5, fp, r9
 80088e0:	eb4c 060a 	adc.w	r6, ip, sl
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	4619      	mov	r1, r3
 80088ea:	f04f 0200 	mov.w	r2, #0
 80088ee:	f04f 0300 	mov.w	r3, #0
 80088f2:	f04f 0400 	mov.w	r4, #0
 80088f6:	0094      	lsls	r4, r2, #2
 80088f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80088fc:	008b      	lsls	r3, r1, #2
 80088fe:	461a      	mov	r2, r3
 8008900:	4623      	mov	r3, r4
 8008902:	4628      	mov	r0, r5
 8008904:	4631      	mov	r1, r6
 8008906:	f7f8 f941 	bl	8000b8c <__aeabi_uldivmod>
 800890a:	4603      	mov	r3, r0
 800890c:	460c      	mov	r4, r1
 800890e:	461a      	mov	r2, r3
 8008910:	4b9a      	ldr	r3, [pc, #616]	; (8008b7c <UART_SetConfig+0x6f4>)
 8008912:	fba3 1302 	umull	r1, r3, r3, r2
 8008916:	095b      	lsrs	r3, r3, #5
 8008918:	2164      	movs	r1, #100	; 0x64
 800891a:	fb01 f303 	mul.w	r3, r1, r3
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	011b      	lsls	r3, r3, #4
 8008922:	3332      	adds	r3, #50	; 0x32
 8008924:	4a95      	ldr	r2, [pc, #596]	; (8008b7c <UART_SetConfig+0x6f4>)
 8008926:	fba2 2303 	umull	r2, r3, r2, r3
 800892a:	095b      	lsrs	r3, r3, #5
 800892c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008930:	4498      	add	r8, r3
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	469b      	mov	fp, r3
 8008936:	f04f 0c00 	mov.w	ip, #0
 800893a:	46d9      	mov	r9, fp
 800893c:	46e2      	mov	sl, ip
 800893e:	eb19 0309 	adds.w	r3, r9, r9
 8008942:	eb4a 040a 	adc.w	r4, sl, sl
 8008946:	4699      	mov	r9, r3
 8008948:	46a2      	mov	sl, r4
 800894a:	eb19 090b 	adds.w	r9, r9, fp
 800894e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008952:	f04f 0100 	mov.w	r1, #0
 8008956:	f04f 0200 	mov.w	r2, #0
 800895a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800895e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008962:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008966:	4689      	mov	r9, r1
 8008968:	4692      	mov	sl, r2
 800896a:	eb1b 0509 	adds.w	r5, fp, r9
 800896e:	eb4c 060a 	adc.w	r6, ip, sl
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	4619      	mov	r1, r3
 8008978:	f04f 0200 	mov.w	r2, #0
 800897c:	f04f 0300 	mov.w	r3, #0
 8008980:	f04f 0400 	mov.w	r4, #0
 8008984:	0094      	lsls	r4, r2, #2
 8008986:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800898a:	008b      	lsls	r3, r1, #2
 800898c:	461a      	mov	r2, r3
 800898e:	4623      	mov	r3, r4
 8008990:	4628      	mov	r0, r5
 8008992:	4631      	mov	r1, r6
 8008994:	f7f8 f8fa 	bl	8000b8c <__aeabi_uldivmod>
 8008998:	4603      	mov	r3, r0
 800899a:	460c      	mov	r4, r1
 800899c:	461a      	mov	r2, r3
 800899e:	4b77      	ldr	r3, [pc, #476]	; (8008b7c <UART_SetConfig+0x6f4>)
 80089a0:	fba3 1302 	umull	r1, r3, r3, r2
 80089a4:	095b      	lsrs	r3, r3, #5
 80089a6:	2164      	movs	r1, #100	; 0x64
 80089a8:	fb01 f303 	mul.w	r3, r1, r3
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	011b      	lsls	r3, r3, #4
 80089b0:	3332      	adds	r3, #50	; 0x32
 80089b2:	4a72      	ldr	r2, [pc, #456]	; (8008b7c <UART_SetConfig+0x6f4>)
 80089b4:	fba2 2303 	umull	r2, r3, r2, r3
 80089b8:	095b      	lsrs	r3, r3, #5
 80089ba:	f003 020f 	and.w	r2, r3, #15
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4442      	add	r2, r8
 80089c4:	609a      	str	r2, [r3, #8]
 80089c6:	e0d0      	b.n	8008b6a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80089c8:	f7fe faa8 	bl	8006f1c <HAL_RCC_GetPCLK1Freq>
 80089cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	469a      	mov	sl, r3
 80089d2:	f04f 0b00 	mov.w	fp, #0
 80089d6:	46d0      	mov	r8, sl
 80089d8:	46d9      	mov	r9, fp
 80089da:	eb18 0308 	adds.w	r3, r8, r8
 80089de:	eb49 0409 	adc.w	r4, r9, r9
 80089e2:	4698      	mov	r8, r3
 80089e4:	46a1      	mov	r9, r4
 80089e6:	eb18 080a 	adds.w	r8, r8, sl
 80089ea:	eb49 090b 	adc.w	r9, r9, fp
 80089ee:	f04f 0100 	mov.w	r1, #0
 80089f2:	f04f 0200 	mov.w	r2, #0
 80089f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80089fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80089fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008a02:	4688      	mov	r8, r1
 8008a04:	4691      	mov	r9, r2
 8008a06:	eb1a 0508 	adds.w	r5, sl, r8
 8008a0a:	eb4b 0609 	adc.w	r6, fp, r9
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	4619      	mov	r1, r3
 8008a14:	f04f 0200 	mov.w	r2, #0
 8008a18:	f04f 0300 	mov.w	r3, #0
 8008a1c:	f04f 0400 	mov.w	r4, #0
 8008a20:	0094      	lsls	r4, r2, #2
 8008a22:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008a26:	008b      	lsls	r3, r1, #2
 8008a28:	461a      	mov	r2, r3
 8008a2a:	4623      	mov	r3, r4
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	4631      	mov	r1, r6
 8008a30:	f7f8 f8ac 	bl	8000b8c <__aeabi_uldivmod>
 8008a34:	4603      	mov	r3, r0
 8008a36:	460c      	mov	r4, r1
 8008a38:	461a      	mov	r2, r3
 8008a3a:	4b50      	ldr	r3, [pc, #320]	; (8008b7c <UART_SetConfig+0x6f4>)
 8008a3c:	fba3 2302 	umull	r2, r3, r3, r2
 8008a40:	095b      	lsrs	r3, r3, #5
 8008a42:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	469b      	mov	fp, r3
 8008a4a:	f04f 0c00 	mov.w	ip, #0
 8008a4e:	46d9      	mov	r9, fp
 8008a50:	46e2      	mov	sl, ip
 8008a52:	eb19 0309 	adds.w	r3, r9, r9
 8008a56:	eb4a 040a 	adc.w	r4, sl, sl
 8008a5a:	4699      	mov	r9, r3
 8008a5c:	46a2      	mov	sl, r4
 8008a5e:	eb19 090b 	adds.w	r9, r9, fp
 8008a62:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008a66:	f04f 0100 	mov.w	r1, #0
 8008a6a:	f04f 0200 	mov.w	r2, #0
 8008a6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a7a:	4689      	mov	r9, r1
 8008a7c:	4692      	mov	sl, r2
 8008a7e:	eb1b 0509 	adds.w	r5, fp, r9
 8008a82:	eb4c 060a 	adc.w	r6, ip, sl
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	f04f 0200 	mov.w	r2, #0
 8008a90:	f04f 0300 	mov.w	r3, #0
 8008a94:	f04f 0400 	mov.w	r4, #0
 8008a98:	0094      	lsls	r4, r2, #2
 8008a9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008a9e:	008b      	lsls	r3, r1, #2
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	4623      	mov	r3, r4
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	4631      	mov	r1, r6
 8008aa8:	f7f8 f870 	bl	8000b8c <__aeabi_uldivmod>
 8008aac:	4603      	mov	r3, r0
 8008aae:	460c      	mov	r4, r1
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	4b32      	ldr	r3, [pc, #200]	; (8008b7c <UART_SetConfig+0x6f4>)
 8008ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ab8:	095b      	lsrs	r3, r3, #5
 8008aba:	2164      	movs	r1, #100	; 0x64
 8008abc:	fb01 f303 	mul.w	r3, r1, r3
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	011b      	lsls	r3, r3, #4
 8008ac4:	3332      	adds	r3, #50	; 0x32
 8008ac6:	4a2d      	ldr	r2, [pc, #180]	; (8008b7c <UART_SetConfig+0x6f4>)
 8008ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8008acc:	095b      	lsrs	r3, r3, #5
 8008ace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ad2:	4498      	add	r8, r3
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	469b      	mov	fp, r3
 8008ad8:	f04f 0c00 	mov.w	ip, #0
 8008adc:	46d9      	mov	r9, fp
 8008ade:	46e2      	mov	sl, ip
 8008ae0:	eb19 0309 	adds.w	r3, r9, r9
 8008ae4:	eb4a 040a 	adc.w	r4, sl, sl
 8008ae8:	4699      	mov	r9, r3
 8008aea:	46a2      	mov	sl, r4
 8008aec:	eb19 090b 	adds.w	r9, r9, fp
 8008af0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008af4:	f04f 0100 	mov.w	r1, #0
 8008af8:	f04f 0200 	mov.w	r2, #0
 8008afc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b08:	4689      	mov	r9, r1
 8008b0a:	4692      	mov	sl, r2
 8008b0c:	eb1b 0509 	adds.w	r5, fp, r9
 8008b10:	eb4c 060a 	adc.w	r6, ip, sl
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	4619      	mov	r1, r3
 8008b1a:	f04f 0200 	mov.w	r2, #0
 8008b1e:	f04f 0300 	mov.w	r3, #0
 8008b22:	f04f 0400 	mov.w	r4, #0
 8008b26:	0094      	lsls	r4, r2, #2
 8008b28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008b2c:	008b      	lsls	r3, r1, #2
 8008b2e:	461a      	mov	r2, r3
 8008b30:	4623      	mov	r3, r4
 8008b32:	4628      	mov	r0, r5
 8008b34:	4631      	mov	r1, r6
 8008b36:	f7f8 f829 	bl	8000b8c <__aeabi_uldivmod>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	460c      	mov	r4, r1
 8008b3e:	461a      	mov	r2, r3
 8008b40:	4b0e      	ldr	r3, [pc, #56]	; (8008b7c <UART_SetConfig+0x6f4>)
 8008b42:	fba3 1302 	umull	r1, r3, r3, r2
 8008b46:	095b      	lsrs	r3, r3, #5
 8008b48:	2164      	movs	r1, #100	; 0x64
 8008b4a:	fb01 f303 	mul.w	r3, r1, r3
 8008b4e:	1ad3      	subs	r3, r2, r3
 8008b50:	011b      	lsls	r3, r3, #4
 8008b52:	3332      	adds	r3, #50	; 0x32
 8008b54:	4a09      	ldr	r2, [pc, #36]	; (8008b7c <UART_SetConfig+0x6f4>)
 8008b56:	fba2 2303 	umull	r2, r3, r2, r3
 8008b5a:	095b      	lsrs	r3, r3, #5
 8008b5c:	f003 020f 	and.w	r2, r3, #15
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4442      	add	r2, r8
 8008b66:	609a      	str	r2, [r3, #8]
}
 8008b68:	e7ff      	b.n	8008b6a <UART_SetConfig+0x6e2>
 8008b6a:	bf00      	nop
 8008b6c:	3714      	adds	r7, #20
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b74:	40011000 	.word	0x40011000
 8008b78:	40011400 	.word	0x40011400
 8008b7c:	51eb851f 	.word	0x51eb851f

08008b80 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d029      	beq.n	8008bee <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008ba6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008baa:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008bb4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8008bba:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008bc0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8008bc6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008bcc:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8008bd2:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008bd8:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8008bde:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	601a      	str	r2, [r3, #0]
 8008bec:	e034      	b.n	8008c58 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008bfa:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008c04:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008c0a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008c1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c22:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008c2c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008c32:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008c38:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008c3e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008c44:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008c46:	68ba      	ldr	r2, [r7, #8]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b087      	sub	sp, #28
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	60f8      	str	r0, [r7, #12]
 8008c6e:	60b9      	str	r1, [r7, #8]
 8008c70:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008c72:	2300      	movs	r3, #0
 8008c74:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008c76:	2300      	movs	r3, #0
 8008c78:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d02e      	beq.n	8008cde <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008c8c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008c9c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008ca6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	3b01      	subs	r3, #1
 8008cae:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008cb0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008cba:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008cc4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	697a      	ldr	r2, [r7, #20]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	697a      	ldr	r2, [r7, #20]
 8008cda:	609a      	str	r2, [r3, #8]
 8008cdc:	e03b      	b.n	8008d56 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008cea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008cee:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008d00:	4313      	orrs	r3, r2
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008d14:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	3b01      	subs	r3, #1
 8008d22:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008d24:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008d2e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	3b01      	subs	r3, #1
 8008d36:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008d38:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008d42:	4313      	orrs	r3, r2
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	371c      	adds	r7, #28
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d64:	b084      	sub	sp, #16
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	f107 001c 	add.w	r0, r7, #28
 8008d72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d122      	bne.n	8008dc2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d105      	bne.n	8008db6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f902 	bl	8008fc0 <USB_CoreReset>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	73fb      	strb	r3, [r7, #15]
 8008dc0:	e01a      	b.n	8008df8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f8f6 	bl	8008fc0 <USB_CoreReset>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d106      	bne.n	8008dec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	639a      	str	r2, [r3, #56]	; 0x38
 8008dea:	e005      	b.n	8008df8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d10b      	bne.n	8008e16 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	f043 0206 	orr.w	r2, r3, #6
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f043 0220 	orr.w	r2, r3, #32
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e22:	b004      	add	sp, #16
 8008e24:	4770      	bx	lr

08008e26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e26:	b480      	push	{r7}
 8008e28:	b083      	sub	sp, #12
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	f023 0201 	bic.w	r2, r3, #1
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	460b      	mov	r3, r1
 8008e52:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008e60:	78fb      	ldrb	r3, [r7, #3]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d106      	bne.n	8008e74 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	60da      	str	r2, [r3, #12]
 8008e72:	e00b      	b.n	8008e8c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008e74:	78fb      	ldrb	r3, [r7, #3]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d106      	bne.n	8008e88 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	60da      	str	r2, [r3, #12]
 8008e86:	e001      	b.n	8008e8c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e003      	b.n	8008e94 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008e8c:	2032      	movs	r0, #50	; 0x32
 8008e8e:	f7fa fe97 	bl	8003bc0 <HAL_Delay>

  return HAL_OK;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	019b      	lsls	r3, r3, #6
 8008eae:	f043 0220 	orr.w	r2, r3, #32
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	60fb      	str	r3, [r7, #12]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	4a09      	ldr	r2, [pc, #36]	; (8008ee4 <USB_FlushTxFifo+0x48>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d901      	bls.n	8008ec8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e006      	b.n	8008ed6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	f003 0320 	and.w	r3, r3, #32
 8008ed0:	2b20      	cmp	r3, #32
 8008ed2:	d0f0      	beq.n	8008eb6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	00030d40 	.word	0x00030d40

08008ee8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2210      	movs	r2, #16
 8008ef8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	3301      	adds	r3, #1
 8008efe:	60fb      	str	r3, [r7, #12]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	4a09      	ldr	r2, [pc, #36]	; (8008f28 <USB_FlushRxFifo+0x40>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d901      	bls.n	8008f0c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e006      	b.n	8008f1a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	f003 0310 	and.w	r3, r3, #16
 8008f14:	2b10      	cmp	r3, #16
 8008f16:	d0f0      	beq.n	8008efa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3714      	adds	r7, #20
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	00030d40 	.word	0x00030d40

08008f2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b089      	sub	sp, #36	; 0x24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	4613      	mov	r3, r2
 8008f38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008f42:	88fb      	ldrh	r3, [r7, #6]
 8008f44:	3303      	adds	r3, #3
 8008f46:	089b      	lsrs	r3, r3, #2
 8008f48:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	61bb      	str	r3, [r7, #24]
 8008f4e:	e00b      	b.n	8008f68 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	3304      	adds	r3, #4
 8008f60:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	3301      	adds	r3, #1
 8008f66:	61bb      	str	r3, [r7, #24]
 8008f68:	69ba      	ldr	r2, [r7, #24]
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d3ef      	bcc.n	8008f50 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008f70:	69fb      	ldr	r3, [r7, #28]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3724      	adds	r7, #36	; 0x24
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b085      	sub	sp, #20
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	4013      	ands	r3, r2
 8008f94:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008f96:	68fb      	ldr	r3, [r7, #12]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3714      	adds	r7, #20
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	695b      	ldr	r3, [r3, #20]
 8008fb0:	f003 0301 	and.w	r3, r3, #1
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	60fb      	str	r3, [r7, #12]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	4a13      	ldr	r2, [pc, #76]	; (8009024 <USB_CoreReset+0x64>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d901      	bls.n	8008fde <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e01b      	b.n	8009016 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	daf2      	bge.n	8008fcc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	f043 0201 	orr.w	r2, r3, #1
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	60fb      	str	r3, [r7, #12]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	4a09      	ldr	r2, [pc, #36]	; (8009024 <USB_CoreReset+0x64>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d901      	bls.n	8009008 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009004:	2303      	movs	r3, #3
 8009006:	e006      	b.n	8009016 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	f003 0301 	and.w	r3, r3, #1
 8009010:	2b01      	cmp	r3, #1
 8009012:	d0f0      	beq.n	8008ff6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	00030d40 	.word	0x00030d40

08009028 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009028:	b084      	sub	sp, #16
 800902a:	b580      	push	{r7, lr}
 800902c:	b084      	sub	sp, #16
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	f107 001c 	add.w	r0, r7, #28
 8009036:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009044:	461a      	mov	r2, r3
 8009046:	2300      	movs	r3, #0
 8009048:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009066:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009076:	2b00      	cmp	r3, #0
 8009078:	d018      	beq.n	80090ac <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	2b01      	cmp	r3, #1
 800907e:	d10a      	bne.n	8009096 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800908e:	f043 0304 	orr.w	r3, r3, #4
 8009092:	6013      	str	r3, [r2, #0]
 8009094:	e014      	b.n	80090c0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090a4:	f023 0304 	bic.w	r3, r3, #4
 80090a8:	6013      	str	r3, [r2, #0]
 80090aa:	e009      	b.n	80090c0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090ba:	f023 0304 	bic.w	r3, r3, #4
 80090be:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80090c0:	2110      	movs	r1, #16
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f7ff feea 	bl	8008e9c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7ff ff0d 	bl	8008ee8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80090ce:	2300      	movs	r3, #0
 80090d0:	60fb      	str	r3, [r7, #12]
 80090d2:	e015      	b.n	8009100 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	015a      	lsls	r2, r3, #5
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090e0:	461a      	mov	r2, r3
 80090e2:	f04f 33ff 	mov.w	r3, #4294967295
 80090e6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	015a      	lsls	r2, r3, #5
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	4413      	add	r3, r2
 80090f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090f4:	461a      	mov	r2, r3
 80090f6:	2300      	movs	r3, #0
 80090f8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	3301      	adds	r3, #1
 80090fe:	60fb      	str	r3, [r7, #12]
 8009100:	6a3b      	ldr	r3, [r7, #32]
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	429a      	cmp	r2, r3
 8009106:	d3e5      	bcc.n	80090d4 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8009108:	2101      	movs	r1, #1
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f882 	bl	8009214 <USB_DriveVbus>

  HAL_Delay(200U);
 8009110:	20c8      	movs	r0, #200	; 0xc8
 8009112:	f7fa fd55 	bl	8003bc0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f04f 32ff 	mov.w	r2, #4294967295
 8009122:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00b      	beq.n	8009148 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009136:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a14      	ldr	r2, [pc, #80]	; (800918c <USB_HostInit+0x164>)
 800913c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a13      	ldr	r2, [pc, #76]	; (8009190 <USB_HostInit+0x168>)
 8009142:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009146:	e009      	b.n	800915c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2280      	movs	r2, #128	; 0x80
 800914c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a10      	ldr	r2, [pc, #64]	; (8009194 <USB_HostInit+0x16c>)
 8009152:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a10      	ldr	r2, [pc, #64]	; (8009198 <USB_HostInit+0x170>)
 8009158:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800915c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915e:	2b00      	cmp	r3, #0
 8009160:	d105      	bne.n	800916e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	699b      	ldr	r3, [r3, #24]
 8009166:	f043 0210 	orr.w	r2, r3, #16
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	699a      	ldr	r2, [r3, #24]
 8009172:	4b0a      	ldr	r3, [pc, #40]	; (800919c <USB_HostInit+0x174>)
 8009174:	4313      	orrs	r3, r2
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009186:	b004      	add	sp, #16
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	01000200 	.word	0x01000200
 8009190:	00e00300 	.word	0x00e00300
 8009194:	00600080 	.word	0x00600080
 8009198:	004000e0 	.word	0x004000e0
 800919c:	a3200008 	.word	0xa3200008

080091a0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091be:	f023 0303 	bic.w	r3, r3, #3
 80091c2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	78fb      	ldrb	r3, [r7, #3]
 80091ce:	f003 0303 	and.w	r3, r3, #3
 80091d2:	68f9      	ldr	r1, [r7, #12]
 80091d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80091d8:	4313      	orrs	r3, r2
 80091da:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80091dc:	78fb      	ldrb	r3, [r7, #3]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d107      	bne.n	80091f2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091e8:	461a      	mov	r2, r3
 80091ea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80091ee:	6053      	str	r3, [r2, #4]
 80091f0:	e009      	b.n	8009206 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80091f2:	78fb      	ldrb	r3, [r7, #3]
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d106      	bne.n	8009206 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091fe:	461a      	mov	r2, r3
 8009200:	f241 7370 	movw	r3, #6000	; 0x1770
 8009204:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3714      	adds	r7, #20
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009214:	b480      	push	{r7}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	460b      	mov	r3, r1
 800921e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009224:	2300      	movs	r3, #0
 8009226:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009238:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d109      	bne.n	8009258 <USB_DriveVbus+0x44>
 8009244:	78fb      	ldrb	r3, [r7, #3]
 8009246:	2b01      	cmp	r3, #1
 8009248:	d106      	bne.n	8009258 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009252:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009256:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800925e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009262:	d109      	bne.n	8009278 <USB_DriveVbus+0x64>
 8009264:	78fb      	ldrb	r3, [r7, #3]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d106      	bne.n	8009278 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009272:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009276:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3714      	adds	r7, #20
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr

08009286 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009286:	b480      	push	{r7}
 8009288:	b085      	sub	sp, #20
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	b29b      	uxth	r3, r3
}
 800929c:	4618      	mov	r0, r3
 800929e:	3714      	adds	r7, #20
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b087      	sub	sp, #28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	460b      	mov	r3, r1
 80092b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80092b8:	78fb      	ldrb	r3, [r7, #3]
 80092ba:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80092bc:	2300      	movs	r3, #0
 80092be:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	015a      	lsls	r2, r3, #5
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	4413      	add	r3, r2
 80092c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	0c9b      	lsrs	r3, r3, #18
 80092d0:	f003 0303 	and.w	r3, r3, #3
 80092d4:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d002      	beq.n	80092e2 <USB_HC_Halt+0x3a>
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d16c      	bne.n	80093bc <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	015a      	lsls	r2, r3, #5
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	4413      	add	r3, r2
 80092ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	0151      	lsls	r1, r2, #5
 80092f4:	693a      	ldr	r2, [r7, #16]
 80092f6:	440a      	add	r2, r1
 80092f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009300:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009306:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800930a:	2b00      	cmp	r3, #0
 800930c:	d143      	bne.n	8009396 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	015a      	lsls	r2, r3, #5
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	4413      	add	r3, r2
 8009316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	0151      	lsls	r1, r2, #5
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	440a      	add	r2, r1
 8009324:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009328:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800932c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	015a      	lsls	r2, r3, #5
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	4413      	add	r3, r2
 8009336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	0151      	lsls	r1, r2, #5
 8009340:	693a      	ldr	r2, [r7, #16]
 8009342:	440a      	add	r2, r1
 8009344:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009348:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800934c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	015a      	lsls	r2, r3, #5
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	4413      	add	r3, r2
 8009356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	0151      	lsls	r1, r2, #5
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	440a      	add	r2, r1
 8009364:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009368:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800936c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	3301      	adds	r3, #1
 8009372:	617b      	str	r3, [r7, #20]
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800937a:	d81d      	bhi.n	80093b8 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	015a      	lsls	r2, r3, #5
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	4413      	add	r3, r2
 8009384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800938e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009392:	d0ec      	beq.n	800936e <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009394:	e080      	b.n	8009498 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	015a      	lsls	r2, r3, #5
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	4413      	add	r3, r2
 800939e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	0151      	lsls	r1, r2, #5
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	440a      	add	r2, r1
 80093ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093b4:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80093b6:	e06f      	b.n	8009498 <USB_HC_Halt+0x1f0>
          break;
 80093b8:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80093ba:	e06d      	b.n	8009498 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	0151      	lsls	r1, r2, #5
 80093ce:	693a      	ldr	r2, [r7, #16]
 80093d0:	440a      	add	r2, r1
 80093d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093da:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d143      	bne.n	8009474 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	015a      	lsls	r2, r3, #5
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	4413      	add	r3, r2
 80093f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	0151      	lsls	r1, r2, #5
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	440a      	add	r2, r1
 8009402:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009406:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800940a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	015a      	lsls	r2, r3, #5
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	4413      	add	r3, r2
 8009414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	0151      	lsls	r1, r2, #5
 800941e:	693a      	ldr	r2, [r7, #16]
 8009420:	440a      	add	r2, r1
 8009422:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009426:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800942a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	015a      	lsls	r2, r3, #5
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	4413      	add	r3, r2
 8009434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	0151      	lsls	r1, r2, #5
 800943e:	693a      	ldr	r2, [r7, #16]
 8009440:	440a      	add	r2, r1
 8009442:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009446:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800944a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	3301      	adds	r3, #1
 8009450:	617b      	str	r3, [r7, #20]
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009458:	d81d      	bhi.n	8009496 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	4413      	add	r3, r2
 8009462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800946c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009470:	d0ec      	beq.n	800944c <USB_HC_Halt+0x1a4>
 8009472:	e011      	b.n	8009498 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	015a      	lsls	r2, r3, #5
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	4413      	add	r3, r2
 800947c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	0151      	lsls	r1, r2, #5
 8009486:	693a      	ldr	r2, [r7, #16]
 8009488:	440a      	add	r2, r1
 800948a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800948e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009492:	6013      	str	r3, [r2, #0]
 8009494:	e000      	b.n	8009498 <USB_HC_Halt+0x1f0>
          break;
 8009496:	bf00      	nop
    }
  }

  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	371c      	adds	r7, #28
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr
	...

080094a8 <__libc_init_array>:
 80094a8:	b570      	push	{r4, r5, r6, lr}
 80094aa:	4e0d      	ldr	r6, [pc, #52]	; (80094e0 <__libc_init_array+0x38>)
 80094ac:	4c0d      	ldr	r4, [pc, #52]	; (80094e4 <__libc_init_array+0x3c>)
 80094ae:	1ba4      	subs	r4, r4, r6
 80094b0:	10a4      	asrs	r4, r4, #2
 80094b2:	2500      	movs	r5, #0
 80094b4:	42a5      	cmp	r5, r4
 80094b6:	d109      	bne.n	80094cc <__libc_init_array+0x24>
 80094b8:	4e0b      	ldr	r6, [pc, #44]	; (80094e8 <__libc_init_array+0x40>)
 80094ba:	4c0c      	ldr	r4, [pc, #48]	; (80094ec <__libc_init_array+0x44>)
 80094bc:	f001 f882 	bl	800a5c4 <_init>
 80094c0:	1ba4      	subs	r4, r4, r6
 80094c2:	10a4      	asrs	r4, r4, #2
 80094c4:	2500      	movs	r5, #0
 80094c6:	42a5      	cmp	r5, r4
 80094c8:	d105      	bne.n	80094d6 <__libc_init_array+0x2e>
 80094ca:	bd70      	pop	{r4, r5, r6, pc}
 80094cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094d0:	4798      	blx	r3
 80094d2:	3501      	adds	r5, #1
 80094d4:	e7ee      	b.n	80094b4 <__libc_init_array+0xc>
 80094d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094da:	4798      	blx	r3
 80094dc:	3501      	adds	r5, #1
 80094de:	e7f2      	b.n	80094c6 <__libc_init_array+0x1e>
 80094e0:	0800ab98 	.word	0x0800ab98
 80094e4:	0800ab98 	.word	0x0800ab98
 80094e8:	0800ab98 	.word	0x0800ab98
 80094ec:	0800ab9c 	.word	0x0800ab9c

080094f0 <memcpy>:
 80094f0:	b510      	push	{r4, lr}
 80094f2:	1e43      	subs	r3, r0, #1
 80094f4:	440a      	add	r2, r1
 80094f6:	4291      	cmp	r1, r2
 80094f8:	d100      	bne.n	80094fc <memcpy+0xc>
 80094fa:	bd10      	pop	{r4, pc}
 80094fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009500:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009504:	e7f7      	b.n	80094f6 <memcpy+0x6>

08009506 <memset>:
 8009506:	4402      	add	r2, r0
 8009508:	4603      	mov	r3, r0
 800950a:	4293      	cmp	r3, r2
 800950c:	d100      	bne.n	8009510 <memset+0xa>
 800950e:	4770      	bx	lr
 8009510:	f803 1b01 	strb.w	r1, [r3], #1
 8009514:	e7f9      	b.n	800950a <memset+0x4>
	...

08009518 <cos>:
 8009518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800951a:	ec51 0b10 	vmov	r0, r1, d0
 800951e:	4a1e      	ldr	r2, [pc, #120]	; (8009598 <cos+0x80>)
 8009520:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009524:	4293      	cmp	r3, r2
 8009526:	dc06      	bgt.n	8009536 <cos+0x1e>
 8009528:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8009590 <cos+0x78>
 800952c:	f000 fa74 	bl	8009a18 <__kernel_cos>
 8009530:	ec51 0b10 	vmov	r0, r1, d0
 8009534:	e007      	b.n	8009546 <cos+0x2e>
 8009536:	4a19      	ldr	r2, [pc, #100]	; (800959c <cos+0x84>)
 8009538:	4293      	cmp	r3, r2
 800953a:	dd09      	ble.n	8009550 <cos+0x38>
 800953c:	ee10 2a10 	vmov	r2, s0
 8009540:	460b      	mov	r3, r1
 8009542:	f7f6 fe59 	bl	80001f8 <__aeabi_dsub>
 8009546:	ec41 0b10 	vmov	d0, r0, r1
 800954a:	b005      	add	sp, #20
 800954c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009550:	4668      	mov	r0, sp
 8009552:	f000 f86d 	bl	8009630 <__ieee754_rem_pio2>
 8009556:	f000 0003 	and.w	r0, r0, #3
 800955a:	2801      	cmp	r0, #1
 800955c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009560:	ed9d 0b00 	vldr	d0, [sp]
 8009564:	d007      	beq.n	8009576 <cos+0x5e>
 8009566:	2802      	cmp	r0, #2
 8009568:	d00e      	beq.n	8009588 <cos+0x70>
 800956a:	2800      	cmp	r0, #0
 800956c:	d0de      	beq.n	800952c <cos+0x14>
 800956e:	2001      	movs	r0, #1
 8009570:	f000 fe5a 	bl	800a228 <__kernel_sin>
 8009574:	e7dc      	b.n	8009530 <cos+0x18>
 8009576:	f000 fe57 	bl	800a228 <__kernel_sin>
 800957a:	ec53 2b10 	vmov	r2, r3, d0
 800957e:	ee10 0a10 	vmov	r0, s0
 8009582:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009586:	e7de      	b.n	8009546 <cos+0x2e>
 8009588:	f000 fa46 	bl	8009a18 <__kernel_cos>
 800958c:	e7f5      	b.n	800957a <cos+0x62>
 800958e:	bf00      	nop
	...
 8009598:	3fe921fb 	.word	0x3fe921fb
 800959c:	7fefffff 	.word	0x7fefffff

080095a0 <sin>:
 80095a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095a2:	ec51 0b10 	vmov	r0, r1, d0
 80095a6:	4a20      	ldr	r2, [pc, #128]	; (8009628 <sin+0x88>)
 80095a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80095ac:	4293      	cmp	r3, r2
 80095ae:	dc07      	bgt.n	80095c0 <sin+0x20>
 80095b0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8009620 <sin+0x80>
 80095b4:	2000      	movs	r0, #0
 80095b6:	f000 fe37 	bl	800a228 <__kernel_sin>
 80095ba:	ec51 0b10 	vmov	r0, r1, d0
 80095be:	e007      	b.n	80095d0 <sin+0x30>
 80095c0:	4a1a      	ldr	r2, [pc, #104]	; (800962c <sin+0x8c>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	dd09      	ble.n	80095da <sin+0x3a>
 80095c6:	ee10 2a10 	vmov	r2, s0
 80095ca:	460b      	mov	r3, r1
 80095cc:	f7f6 fe14 	bl	80001f8 <__aeabi_dsub>
 80095d0:	ec41 0b10 	vmov	d0, r0, r1
 80095d4:	b005      	add	sp, #20
 80095d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80095da:	4668      	mov	r0, sp
 80095dc:	f000 f828 	bl	8009630 <__ieee754_rem_pio2>
 80095e0:	f000 0003 	and.w	r0, r0, #3
 80095e4:	2801      	cmp	r0, #1
 80095e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80095ea:	ed9d 0b00 	vldr	d0, [sp]
 80095ee:	d004      	beq.n	80095fa <sin+0x5a>
 80095f0:	2802      	cmp	r0, #2
 80095f2:	d005      	beq.n	8009600 <sin+0x60>
 80095f4:	b970      	cbnz	r0, 8009614 <sin+0x74>
 80095f6:	2001      	movs	r0, #1
 80095f8:	e7dd      	b.n	80095b6 <sin+0x16>
 80095fa:	f000 fa0d 	bl	8009a18 <__kernel_cos>
 80095fe:	e7dc      	b.n	80095ba <sin+0x1a>
 8009600:	2001      	movs	r0, #1
 8009602:	f000 fe11 	bl	800a228 <__kernel_sin>
 8009606:	ec53 2b10 	vmov	r2, r3, d0
 800960a:	ee10 0a10 	vmov	r0, s0
 800960e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009612:	e7dd      	b.n	80095d0 <sin+0x30>
 8009614:	f000 fa00 	bl	8009a18 <__kernel_cos>
 8009618:	e7f5      	b.n	8009606 <sin+0x66>
 800961a:	bf00      	nop
 800961c:	f3af 8000 	nop.w
	...
 8009628:	3fe921fb 	.word	0x3fe921fb
 800962c:	7fefffff 	.word	0x7fefffff

08009630 <__ieee754_rem_pio2>:
 8009630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	ec57 6b10 	vmov	r6, r7, d0
 8009638:	4bc3      	ldr	r3, [pc, #780]	; (8009948 <__ieee754_rem_pio2+0x318>)
 800963a:	b08d      	sub	sp, #52	; 0x34
 800963c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009640:	4598      	cmp	r8, r3
 8009642:	4604      	mov	r4, r0
 8009644:	9704      	str	r7, [sp, #16]
 8009646:	dc07      	bgt.n	8009658 <__ieee754_rem_pio2+0x28>
 8009648:	2200      	movs	r2, #0
 800964a:	2300      	movs	r3, #0
 800964c:	ed84 0b00 	vstr	d0, [r4]
 8009650:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009654:	2500      	movs	r5, #0
 8009656:	e027      	b.n	80096a8 <__ieee754_rem_pio2+0x78>
 8009658:	4bbc      	ldr	r3, [pc, #752]	; (800994c <__ieee754_rem_pio2+0x31c>)
 800965a:	4598      	cmp	r8, r3
 800965c:	dc75      	bgt.n	800974a <__ieee754_rem_pio2+0x11a>
 800965e:	9b04      	ldr	r3, [sp, #16]
 8009660:	4dbb      	ldr	r5, [pc, #748]	; (8009950 <__ieee754_rem_pio2+0x320>)
 8009662:	2b00      	cmp	r3, #0
 8009664:	ee10 0a10 	vmov	r0, s0
 8009668:	a3a9      	add	r3, pc, #676	; (adr r3, 8009910 <__ieee754_rem_pio2+0x2e0>)
 800966a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966e:	4639      	mov	r1, r7
 8009670:	dd36      	ble.n	80096e0 <__ieee754_rem_pio2+0xb0>
 8009672:	f7f6 fdc1 	bl	80001f8 <__aeabi_dsub>
 8009676:	45a8      	cmp	r8, r5
 8009678:	4606      	mov	r6, r0
 800967a:	460f      	mov	r7, r1
 800967c:	d018      	beq.n	80096b0 <__ieee754_rem_pio2+0x80>
 800967e:	a3a6      	add	r3, pc, #664	; (adr r3, 8009918 <__ieee754_rem_pio2+0x2e8>)
 8009680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009684:	f7f6 fdb8 	bl	80001f8 <__aeabi_dsub>
 8009688:	4602      	mov	r2, r0
 800968a:	460b      	mov	r3, r1
 800968c:	e9c4 2300 	strd	r2, r3, [r4]
 8009690:	4630      	mov	r0, r6
 8009692:	4639      	mov	r1, r7
 8009694:	f7f6 fdb0 	bl	80001f8 <__aeabi_dsub>
 8009698:	a39f      	add	r3, pc, #636	; (adr r3, 8009918 <__ieee754_rem_pio2+0x2e8>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	f7f6 fdab 	bl	80001f8 <__aeabi_dsub>
 80096a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80096a6:	2501      	movs	r5, #1
 80096a8:	4628      	mov	r0, r5
 80096aa:	b00d      	add	sp, #52	; 0x34
 80096ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b0:	a39b      	add	r3, pc, #620	; (adr r3, 8009920 <__ieee754_rem_pio2+0x2f0>)
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	f7f6 fd9f 	bl	80001f8 <__aeabi_dsub>
 80096ba:	a39b      	add	r3, pc, #620	; (adr r3, 8009928 <__ieee754_rem_pio2+0x2f8>)
 80096bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c0:	4606      	mov	r6, r0
 80096c2:	460f      	mov	r7, r1
 80096c4:	f7f6 fd98 	bl	80001f8 <__aeabi_dsub>
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	e9c4 2300 	strd	r2, r3, [r4]
 80096d0:	4630      	mov	r0, r6
 80096d2:	4639      	mov	r1, r7
 80096d4:	f7f6 fd90 	bl	80001f8 <__aeabi_dsub>
 80096d8:	a393      	add	r3, pc, #588	; (adr r3, 8009928 <__ieee754_rem_pio2+0x2f8>)
 80096da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096de:	e7de      	b.n	800969e <__ieee754_rem_pio2+0x6e>
 80096e0:	f7f6 fd8c 	bl	80001fc <__adddf3>
 80096e4:	45a8      	cmp	r8, r5
 80096e6:	4606      	mov	r6, r0
 80096e8:	460f      	mov	r7, r1
 80096ea:	d016      	beq.n	800971a <__ieee754_rem_pio2+0xea>
 80096ec:	a38a      	add	r3, pc, #552	; (adr r3, 8009918 <__ieee754_rem_pio2+0x2e8>)
 80096ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f2:	f7f6 fd83 	bl	80001fc <__adddf3>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	e9c4 2300 	strd	r2, r3, [r4]
 80096fe:	4630      	mov	r0, r6
 8009700:	4639      	mov	r1, r7
 8009702:	f7f6 fd79 	bl	80001f8 <__aeabi_dsub>
 8009706:	a384      	add	r3, pc, #528	; (adr r3, 8009918 <__ieee754_rem_pio2+0x2e8>)
 8009708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970c:	f7f6 fd76 	bl	80001fc <__adddf3>
 8009710:	f04f 35ff 	mov.w	r5, #4294967295
 8009714:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009718:	e7c6      	b.n	80096a8 <__ieee754_rem_pio2+0x78>
 800971a:	a381      	add	r3, pc, #516	; (adr r3, 8009920 <__ieee754_rem_pio2+0x2f0>)
 800971c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009720:	f7f6 fd6c 	bl	80001fc <__adddf3>
 8009724:	a380      	add	r3, pc, #512	; (adr r3, 8009928 <__ieee754_rem_pio2+0x2f8>)
 8009726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972a:	4606      	mov	r6, r0
 800972c:	460f      	mov	r7, r1
 800972e:	f7f6 fd65 	bl	80001fc <__adddf3>
 8009732:	4602      	mov	r2, r0
 8009734:	460b      	mov	r3, r1
 8009736:	e9c4 2300 	strd	r2, r3, [r4]
 800973a:	4630      	mov	r0, r6
 800973c:	4639      	mov	r1, r7
 800973e:	f7f6 fd5b 	bl	80001f8 <__aeabi_dsub>
 8009742:	a379      	add	r3, pc, #484	; (adr r3, 8009928 <__ieee754_rem_pio2+0x2f8>)
 8009744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009748:	e7e0      	b.n	800970c <__ieee754_rem_pio2+0xdc>
 800974a:	4b82      	ldr	r3, [pc, #520]	; (8009954 <__ieee754_rem_pio2+0x324>)
 800974c:	4598      	cmp	r8, r3
 800974e:	f300 80d0 	bgt.w	80098f2 <__ieee754_rem_pio2+0x2c2>
 8009752:	f000 fe23 	bl	800a39c <fabs>
 8009756:	ec57 6b10 	vmov	r6, r7, d0
 800975a:	ee10 0a10 	vmov	r0, s0
 800975e:	a374      	add	r3, pc, #464	; (adr r3, 8009930 <__ieee754_rem_pio2+0x300>)
 8009760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009764:	4639      	mov	r1, r7
 8009766:	f7f6 feff 	bl	8000568 <__aeabi_dmul>
 800976a:	2200      	movs	r2, #0
 800976c:	4b7a      	ldr	r3, [pc, #488]	; (8009958 <__ieee754_rem_pio2+0x328>)
 800976e:	f7f6 fd45 	bl	80001fc <__adddf3>
 8009772:	f7f7 f993 	bl	8000a9c <__aeabi_d2iz>
 8009776:	4605      	mov	r5, r0
 8009778:	f7f6 fe8c 	bl	8000494 <__aeabi_i2d>
 800977c:	a364      	add	r3, pc, #400	; (adr r3, 8009910 <__ieee754_rem_pio2+0x2e0>)
 800977e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009782:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009786:	f7f6 feef 	bl	8000568 <__aeabi_dmul>
 800978a:	4602      	mov	r2, r0
 800978c:	460b      	mov	r3, r1
 800978e:	4630      	mov	r0, r6
 8009790:	4639      	mov	r1, r7
 8009792:	f7f6 fd31 	bl	80001f8 <__aeabi_dsub>
 8009796:	a360      	add	r3, pc, #384	; (adr r3, 8009918 <__ieee754_rem_pio2+0x2e8>)
 8009798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979c:	4682      	mov	sl, r0
 800979e:	468b      	mov	fp, r1
 80097a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097a4:	f7f6 fee0 	bl	8000568 <__aeabi_dmul>
 80097a8:	2d1f      	cmp	r5, #31
 80097aa:	4606      	mov	r6, r0
 80097ac:	460f      	mov	r7, r1
 80097ae:	dc0c      	bgt.n	80097ca <__ieee754_rem_pio2+0x19a>
 80097b0:	1e6a      	subs	r2, r5, #1
 80097b2:	4b6a      	ldr	r3, [pc, #424]	; (800995c <__ieee754_rem_pio2+0x32c>)
 80097b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097b8:	4543      	cmp	r3, r8
 80097ba:	d006      	beq.n	80097ca <__ieee754_rem_pio2+0x19a>
 80097bc:	4632      	mov	r2, r6
 80097be:	463b      	mov	r3, r7
 80097c0:	4650      	mov	r0, sl
 80097c2:	4659      	mov	r1, fp
 80097c4:	f7f6 fd18 	bl	80001f8 <__aeabi_dsub>
 80097c8:	e00e      	b.n	80097e8 <__ieee754_rem_pio2+0x1b8>
 80097ca:	4632      	mov	r2, r6
 80097cc:	463b      	mov	r3, r7
 80097ce:	4650      	mov	r0, sl
 80097d0:	4659      	mov	r1, fp
 80097d2:	f7f6 fd11 	bl	80001f8 <__aeabi_dsub>
 80097d6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80097da:	9305      	str	r3, [sp, #20]
 80097dc:	9a05      	ldr	r2, [sp, #20]
 80097de:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80097e2:	1ad3      	subs	r3, r2, r3
 80097e4:	2b10      	cmp	r3, #16
 80097e6:	dc02      	bgt.n	80097ee <__ieee754_rem_pio2+0x1be>
 80097e8:	e9c4 0100 	strd	r0, r1, [r4]
 80097ec:	e039      	b.n	8009862 <__ieee754_rem_pio2+0x232>
 80097ee:	a34c      	add	r3, pc, #304	; (adr r3, 8009920 <__ieee754_rem_pio2+0x2f0>)
 80097f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097f8:	f7f6 feb6 	bl	8000568 <__aeabi_dmul>
 80097fc:	4606      	mov	r6, r0
 80097fe:	460f      	mov	r7, r1
 8009800:	4602      	mov	r2, r0
 8009802:	460b      	mov	r3, r1
 8009804:	4650      	mov	r0, sl
 8009806:	4659      	mov	r1, fp
 8009808:	f7f6 fcf6 	bl	80001f8 <__aeabi_dsub>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4680      	mov	r8, r0
 8009812:	4689      	mov	r9, r1
 8009814:	4650      	mov	r0, sl
 8009816:	4659      	mov	r1, fp
 8009818:	f7f6 fcee 	bl	80001f8 <__aeabi_dsub>
 800981c:	4632      	mov	r2, r6
 800981e:	463b      	mov	r3, r7
 8009820:	f7f6 fcea 	bl	80001f8 <__aeabi_dsub>
 8009824:	a340      	add	r3, pc, #256	; (adr r3, 8009928 <__ieee754_rem_pio2+0x2f8>)
 8009826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982a:	4606      	mov	r6, r0
 800982c:	460f      	mov	r7, r1
 800982e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009832:	f7f6 fe99 	bl	8000568 <__aeabi_dmul>
 8009836:	4632      	mov	r2, r6
 8009838:	463b      	mov	r3, r7
 800983a:	f7f6 fcdd 	bl	80001f8 <__aeabi_dsub>
 800983e:	4602      	mov	r2, r0
 8009840:	460b      	mov	r3, r1
 8009842:	4606      	mov	r6, r0
 8009844:	460f      	mov	r7, r1
 8009846:	4640      	mov	r0, r8
 8009848:	4649      	mov	r1, r9
 800984a:	f7f6 fcd5 	bl	80001f8 <__aeabi_dsub>
 800984e:	9a05      	ldr	r2, [sp, #20]
 8009850:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009854:	1ad3      	subs	r3, r2, r3
 8009856:	2b31      	cmp	r3, #49	; 0x31
 8009858:	dc20      	bgt.n	800989c <__ieee754_rem_pio2+0x26c>
 800985a:	e9c4 0100 	strd	r0, r1, [r4]
 800985e:	46c2      	mov	sl, r8
 8009860:	46cb      	mov	fp, r9
 8009862:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009866:	4650      	mov	r0, sl
 8009868:	4642      	mov	r2, r8
 800986a:	464b      	mov	r3, r9
 800986c:	4659      	mov	r1, fp
 800986e:	f7f6 fcc3 	bl	80001f8 <__aeabi_dsub>
 8009872:	463b      	mov	r3, r7
 8009874:	4632      	mov	r2, r6
 8009876:	f7f6 fcbf 	bl	80001f8 <__aeabi_dsub>
 800987a:	9b04      	ldr	r3, [sp, #16]
 800987c:	2b00      	cmp	r3, #0
 800987e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009882:	f6bf af11 	bge.w	80096a8 <__ieee754_rem_pio2+0x78>
 8009886:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800988a:	6063      	str	r3, [r4, #4]
 800988c:	f8c4 8000 	str.w	r8, [r4]
 8009890:	60a0      	str	r0, [r4, #8]
 8009892:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009896:	60e3      	str	r3, [r4, #12]
 8009898:	426d      	negs	r5, r5
 800989a:	e705      	b.n	80096a8 <__ieee754_rem_pio2+0x78>
 800989c:	a326      	add	r3, pc, #152	; (adr r3, 8009938 <__ieee754_rem_pio2+0x308>)
 800989e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098a6:	f7f6 fe5f 	bl	8000568 <__aeabi_dmul>
 80098aa:	4606      	mov	r6, r0
 80098ac:	460f      	mov	r7, r1
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	4640      	mov	r0, r8
 80098b4:	4649      	mov	r1, r9
 80098b6:	f7f6 fc9f 	bl	80001f8 <__aeabi_dsub>
 80098ba:	4602      	mov	r2, r0
 80098bc:	460b      	mov	r3, r1
 80098be:	4682      	mov	sl, r0
 80098c0:	468b      	mov	fp, r1
 80098c2:	4640      	mov	r0, r8
 80098c4:	4649      	mov	r1, r9
 80098c6:	f7f6 fc97 	bl	80001f8 <__aeabi_dsub>
 80098ca:	4632      	mov	r2, r6
 80098cc:	463b      	mov	r3, r7
 80098ce:	f7f6 fc93 	bl	80001f8 <__aeabi_dsub>
 80098d2:	a31b      	add	r3, pc, #108	; (adr r3, 8009940 <__ieee754_rem_pio2+0x310>)
 80098d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d8:	4606      	mov	r6, r0
 80098da:	460f      	mov	r7, r1
 80098dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098e0:	f7f6 fe42 	bl	8000568 <__aeabi_dmul>
 80098e4:	4632      	mov	r2, r6
 80098e6:	463b      	mov	r3, r7
 80098e8:	f7f6 fc86 	bl	80001f8 <__aeabi_dsub>
 80098ec:	4606      	mov	r6, r0
 80098ee:	460f      	mov	r7, r1
 80098f0:	e764      	b.n	80097bc <__ieee754_rem_pio2+0x18c>
 80098f2:	4b1b      	ldr	r3, [pc, #108]	; (8009960 <__ieee754_rem_pio2+0x330>)
 80098f4:	4598      	cmp	r8, r3
 80098f6:	dd35      	ble.n	8009964 <__ieee754_rem_pio2+0x334>
 80098f8:	ee10 2a10 	vmov	r2, s0
 80098fc:	463b      	mov	r3, r7
 80098fe:	4630      	mov	r0, r6
 8009900:	4639      	mov	r1, r7
 8009902:	f7f6 fc79 	bl	80001f8 <__aeabi_dsub>
 8009906:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800990a:	e9c4 0100 	strd	r0, r1, [r4]
 800990e:	e6a1      	b.n	8009654 <__ieee754_rem_pio2+0x24>
 8009910:	54400000 	.word	0x54400000
 8009914:	3ff921fb 	.word	0x3ff921fb
 8009918:	1a626331 	.word	0x1a626331
 800991c:	3dd0b461 	.word	0x3dd0b461
 8009920:	1a600000 	.word	0x1a600000
 8009924:	3dd0b461 	.word	0x3dd0b461
 8009928:	2e037073 	.word	0x2e037073
 800992c:	3ba3198a 	.word	0x3ba3198a
 8009930:	6dc9c883 	.word	0x6dc9c883
 8009934:	3fe45f30 	.word	0x3fe45f30
 8009938:	2e000000 	.word	0x2e000000
 800993c:	3ba3198a 	.word	0x3ba3198a
 8009940:	252049c1 	.word	0x252049c1
 8009944:	397b839a 	.word	0x397b839a
 8009948:	3fe921fb 	.word	0x3fe921fb
 800994c:	4002d97b 	.word	0x4002d97b
 8009950:	3ff921fb 	.word	0x3ff921fb
 8009954:	413921fb 	.word	0x413921fb
 8009958:	3fe00000 	.word	0x3fe00000
 800995c:	0800a9b8 	.word	0x0800a9b8
 8009960:	7fefffff 	.word	0x7fefffff
 8009964:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009968:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800996c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009970:	4630      	mov	r0, r6
 8009972:	460f      	mov	r7, r1
 8009974:	f7f7 f892 	bl	8000a9c <__aeabi_d2iz>
 8009978:	f7f6 fd8c 	bl	8000494 <__aeabi_i2d>
 800997c:	4602      	mov	r2, r0
 800997e:	460b      	mov	r3, r1
 8009980:	4630      	mov	r0, r6
 8009982:	4639      	mov	r1, r7
 8009984:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009988:	f7f6 fc36 	bl	80001f8 <__aeabi_dsub>
 800998c:	2200      	movs	r2, #0
 800998e:	4b1f      	ldr	r3, [pc, #124]	; (8009a0c <__ieee754_rem_pio2+0x3dc>)
 8009990:	f7f6 fdea 	bl	8000568 <__aeabi_dmul>
 8009994:	460f      	mov	r7, r1
 8009996:	4606      	mov	r6, r0
 8009998:	f7f7 f880 	bl	8000a9c <__aeabi_d2iz>
 800999c:	f7f6 fd7a 	bl	8000494 <__aeabi_i2d>
 80099a0:	4602      	mov	r2, r0
 80099a2:	460b      	mov	r3, r1
 80099a4:	4630      	mov	r0, r6
 80099a6:	4639      	mov	r1, r7
 80099a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80099ac:	f7f6 fc24 	bl	80001f8 <__aeabi_dsub>
 80099b0:	2200      	movs	r2, #0
 80099b2:	4b16      	ldr	r3, [pc, #88]	; (8009a0c <__ieee754_rem_pio2+0x3dc>)
 80099b4:	f7f6 fdd8 	bl	8000568 <__aeabi_dmul>
 80099b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80099bc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80099c0:	f04f 0803 	mov.w	r8, #3
 80099c4:	2600      	movs	r6, #0
 80099c6:	2700      	movs	r7, #0
 80099c8:	4632      	mov	r2, r6
 80099ca:	463b      	mov	r3, r7
 80099cc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80099d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80099d4:	f7f7 f830 	bl	8000a38 <__aeabi_dcmpeq>
 80099d8:	b9b0      	cbnz	r0, 8009a08 <__ieee754_rem_pio2+0x3d8>
 80099da:	4b0d      	ldr	r3, [pc, #52]	; (8009a10 <__ieee754_rem_pio2+0x3e0>)
 80099dc:	9301      	str	r3, [sp, #4]
 80099de:	2302      	movs	r3, #2
 80099e0:	9300      	str	r3, [sp, #0]
 80099e2:	462a      	mov	r2, r5
 80099e4:	4643      	mov	r3, r8
 80099e6:	4621      	mov	r1, r4
 80099e8:	a806      	add	r0, sp, #24
 80099ea:	f000 f8dd 	bl	8009ba8 <__kernel_rem_pio2>
 80099ee:	9b04      	ldr	r3, [sp, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	4605      	mov	r5, r0
 80099f4:	f6bf ae58 	bge.w	80096a8 <__ieee754_rem_pio2+0x78>
 80099f8:	6863      	ldr	r3, [r4, #4]
 80099fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80099fe:	6063      	str	r3, [r4, #4]
 8009a00:	68e3      	ldr	r3, [r4, #12]
 8009a02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009a06:	e746      	b.n	8009896 <__ieee754_rem_pio2+0x266>
 8009a08:	46d0      	mov	r8, sl
 8009a0a:	e7dd      	b.n	80099c8 <__ieee754_rem_pio2+0x398>
 8009a0c:	41700000 	.word	0x41700000
 8009a10:	0800aa38 	.word	0x0800aa38
 8009a14:	00000000 	.word	0x00000000

08009a18 <__kernel_cos>:
 8009a18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1c:	ec59 8b10 	vmov	r8, r9, d0
 8009a20:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8009a24:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009a28:	ed2d 8b02 	vpush	{d8}
 8009a2c:	eeb0 8a41 	vmov.f32	s16, s2
 8009a30:	eef0 8a61 	vmov.f32	s17, s3
 8009a34:	da07      	bge.n	8009a46 <__kernel_cos+0x2e>
 8009a36:	ee10 0a10 	vmov	r0, s0
 8009a3a:	4649      	mov	r1, r9
 8009a3c:	f7f7 f82e 	bl	8000a9c <__aeabi_d2iz>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	f000 8089 	beq.w	8009b58 <__kernel_cos+0x140>
 8009a46:	4642      	mov	r2, r8
 8009a48:	464b      	mov	r3, r9
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	4649      	mov	r1, r9
 8009a4e:	f7f6 fd8b 	bl	8000568 <__aeabi_dmul>
 8009a52:	2200      	movs	r2, #0
 8009a54:	4b4e      	ldr	r3, [pc, #312]	; (8009b90 <__kernel_cos+0x178>)
 8009a56:	4604      	mov	r4, r0
 8009a58:	460d      	mov	r5, r1
 8009a5a:	f7f6 fd85 	bl	8000568 <__aeabi_dmul>
 8009a5e:	a340      	add	r3, pc, #256	; (adr r3, 8009b60 <__kernel_cos+0x148>)
 8009a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a64:	4682      	mov	sl, r0
 8009a66:	468b      	mov	fp, r1
 8009a68:	4620      	mov	r0, r4
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	f7f6 fd7c 	bl	8000568 <__aeabi_dmul>
 8009a70:	a33d      	add	r3, pc, #244	; (adr r3, 8009b68 <__kernel_cos+0x150>)
 8009a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a76:	f7f6 fbc1 	bl	80001fc <__adddf3>
 8009a7a:	4622      	mov	r2, r4
 8009a7c:	462b      	mov	r3, r5
 8009a7e:	f7f6 fd73 	bl	8000568 <__aeabi_dmul>
 8009a82:	a33b      	add	r3, pc, #236	; (adr r3, 8009b70 <__kernel_cos+0x158>)
 8009a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a88:	f7f6 fbb6 	bl	80001f8 <__aeabi_dsub>
 8009a8c:	4622      	mov	r2, r4
 8009a8e:	462b      	mov	r3, r5
 8009a90:	f7f6 fd6a 	bl	8000568 <__aeabi_dmul>
 8009a94:	a338      	add	r3, pc, #224	; (adr r3, 8009b78 <__kernel_cos+0x160>)
 8009a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9a:	f7f6 fbaf 	bl	80001fc <__adddf3>
 8009a9e:	4622      	mov	r2, r4
 8009aa0:	462b      	mov	r3, r5
 8009aa2:	f7f6 fd61 	bl	8000568 <__aeabi_dmul>
 8009aa6:	a336      	add	r3, pc, #216	; (adr r3, 8009b80 <__kernel_cos+0x168>)
 8009aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aac:	f7f6 fba4 	bl	80001f8 <__aeabi_dsub>
 8009ab0:	4622      	mov	r2, r4
 8009ab2:	462b      	mov	r3, r5
 8009ab4:	f7f6 fd58 	bl	8000568 <__aeabi_dmul>
 8009ab8:	a333      	add	r3, pc, #204	; (adr r3, 8009b88 <__kernel_cos+0x170>)
 8009aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abe:	f7f6 fb9d 	bl	80001fc <__adddf3>
 8009ac2:	4622      	mov	r2, r4
 8009ac4:	462b      	mov	r3, r5
 8009ac6:	f7f6 fd4f 	bl	8000568 <__aeabi_dmul>
 8009aca:	4622      	mov	r2, r4
 8009acc:	462b      	mov	r3, r5
 8009ace:	f7f6 fd4b 	bl	8000568 <__aeabi_dmul>
 8009ad2:	ec53 2b18 	vmov	r2, r3, d8
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	460d      	mov	r5, r1
 8009ada:	4640      	mov	r0, r8
 8009adc:	4649      	mov	r1, r9
 8009ade:	f7f6 fd43 	bl	8000568 <__aeabi_dmul>
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f7f6 fb85 	bl	80001f8 <__aeabi_dsub>
 8009aee:	4b29      	ldr	r3, [pc, #164]	; (8009b94 <__kernel_cos+0x17c>)
 8009af0:	429e      	cmp	r6, r3
 8009af2:	4680      	mov	r8, r0
 8009af4:	4689      	mov	r9, r1
 8009af6:	dc11      	bgt.n	8009b1c <__kernel_cos+0x104>
 8009af8:	4602      	mov	r2, r0
 8009afa:	460b      	mov	r3, r1
 8009afc:	4650      	mov	r0, sl
 8009afe:	4659      	mov	r1, fp
 8009b00:	f7f6 fb7a 	bl	80001f8 <__aeabi_dsub>
 8009b04:	460b      	mov	r3, r1
 8009b06:	4924      	ldr	r1, [pc, #144]	; (8009b98 <__kernel_cos+0x180>)
 8009b08:	4602      	mov	r2, r0
 8009b0a:	2000      	movs	r0, #0
 8009b0c:	f7f6 fb74 	bl	80001f8 <__aeabi_dsub>
 8009b10:	ecbd 8b02 	vpop	{d8}
 8009b14:	ec41 0b10 	vmov	d0, r0, r1
 8009b18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1c:	4b1f      	ldr	r3, [pc, #124]	; (8009b9c <__kernel_cos+0x184>)
 8009b1e:	491e      	ldr	r1, [pc, #120]	; (8009b98 <__kernel_cos+0x180>)
 8009b20:	429e      	cmp	r6, r3
 8009b22:	bfcc      	ite	gt
 8009b24:	4d1e      	ldrgt	r5, [pc, #120]	; (8009ba0 <__kernel_cos+0x188>)
 8009b26:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009b2a:	2400      	movs	r4, #0
 8009b2c:	4622      	mov	r2, r4
 8009b2e:	462b      	mov	r3, r5
 8009b30:	2000      	movs	r0, #0
 8009b32:	f7f6 fb61 	bl	80001f8 <__aeabi_dsub>
 8009b36:	4622      	mov	r2, r4
 8009b38:	4606      	mov	r6, r0
 8009b3a:	460f      	mov	r7, r1
 8009b3c:	462b      	mov	r3, r5
 8009b3e:	4650      	mov	r0, sl
 8009b40:	4659      	mov	r1, fp
 8009b42:	f7f6 fb59 	bl	80001f8 <__aeabi_dsub>
 8009b46:	4642      	mov	r2, r8
 8009b48:	464b      	mov	r3, r9
 8009b4a:	f7f6 fb55 	bl	80001f8 <__aeabi_dsub>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	460b      	mov	r3, r1
 8009b52:	4630      	mov	r0, r6
 8009b54:	4639      	mov	r1, r7
 8009b56:	e7d9      	b.n	8009b0c <__kernel_cos+0xf4>
 8009b58:	2000      	movs	r0, #0
 8009b5a:	490f      	ldr	r1, [pc, #60]	; (8009b98 <__kernel_cos+0x180>)
 8009b5c:	e7d8      	b.n	8009b10 <__kernel_cos+0xf8>
 8009b5e:	bf00      	nop
 8009b60:	be8838d4 	.word	0xbe8838d4
 8009b64:	bda8fae9 	.word	0xbda8fae9
 8009b68:	bdb4b1c4 	.word	0xbdb4b1c4
 8009b6c:	3e21ee9e 	.word	0x3e21ee9e
 8009b70:	809c52ad 	.word	0x809c52ad
 8009b74:	3e927e4f 	.word	0x3e927e4f
 8009b78:	19cb1590 	.word	0x19cb1590
 8009b7c:	3efa01a0 	.word	0x3efa01a0
 8009b80:	16c15177 	.word	0x16c15177
 8009b84:	3f56c16c 	.word	0x3f56c16c
 8009b88:	5555554c 	.word	0x5555554c
 8009b8c:	3fa55555 	.word	0x3fa55555
 8009b90:	3fe00000 	.word	0x3fe00000
 8009b94:	3fd33332 	.word	0x3fd33332
 8009b98:	3ff00000 	.word	0x3ff00000
 8009b9c:	3fe90000 	.word	0x3fe90000
 8009ba0:	3fd20000 	.word	0x3fd20000
 8009ba4:	00000000 	.word	0x00000000

08009ba8 <__kernel_rem_pio2>:
 8009ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bac:	ed2d 8b02 	vpush	{d8}
 8009bb0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8009bb4:	1ed4      	subs	r4, r2, #3
 8009bb6:	9308      	str	r3, [sp, #32]
 8009bb8:	9101      	str	r1, [sp, #4]
 8009bba:	4bc5      	ldr	r3, [pc, #788]	; (8009ed0 <__kernel_rem_pio2+0x328>)
 8009bbc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009bbe:	9009      	str	r0, [sp, #36]	; 0x24
 8009bc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009bc4:	9304      	str	r3, [sp, #16]
 8009bc6:	9b08      	ldr	r3, [sp, #32]
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	9307      	str	r3, [sp, #28]
 8009bcc:	2318      	movs	r3, #24
 8009bce:	fb94 f4f3 	sdiv	r4, r4, r3
 8009bd2:	f06f 0317 	mvn.w	r3, #23
 8009bd6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8009bda:	fb04 3303 	mla	r3, r4, r3, r3
 8009bde:	eb03 0a02 	add.w	sl, r3, r2
 8009be2:	9b04      	ldr	r3, [sp, #16]
 8009be4:	9a07      	ldr	r2, [sp, #28]
 8009be6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009ec0 <__kernel_rem_pio2+0x318>
 8009bea:	eb03 0802 	add.w	r8, r3, r2
 8009bee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009bf0:	1aa7      	subs	r7, r4, r2
 8009bf2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009bf6:	ae22      	add	r6, sp, #136	; 0x88
 8009bf8:	2500      	movs	r5, #0
 8009bfa:	4545      	cmp	r5, r8
 8009bfc:	dd13      	ble.n	8009c26 <__kernel_rem_pio2+0x7e>
 8009bfe:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8009ec0 <__kernel_rem_pio2+0x318>
 8009c02:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009c06:	2600      	movs	r6, #0
 8009c08:	9b04      	ldr	r3, [sp, #16]
 8009c0a:	429e      	cmp	r6, r3
 8009c0c:	dc32      	bgt.n	8009c74 <__kernel_rem_pio2+0xcc>
 8009c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c10:	9302      	str	r3, [sp, #8]
 8009c12:	9b08      	ldr	r3, [sp, #32]
 8009c14:	199d      	adds	r5, r3, r6
 8009c16:	ab22      	add	r3, sp, #136	; 0x88
 8009c18:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009c1c:	9306      	str	r3, [sp, #24]
 8009c1e:	ec59 8b18 	vmov	r8, r9, d8
 8009c22:	2700      	movs	r7, #0
 8009c24:	e01f      	b.n	8009c66 <__kernel_rem_pio2+0xbe>
 8009c26:	42ef      	cmn	r7, r5
 8009c28:	d407      	bmi.n	8009c3a <__kernel_rem_pio2+0x92>
 8009c2a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009c2e:	f7f6 fc31 	bl	8000494 <__aeabi_i2d>
 8009c32:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009c36:	3501      	adds	r5, #1
 8009c38:	e7df      	b.n	8009bfa <__kernel_rem_pio2+0x52>
 8009c3a:	ec51 0b18 	vmov	r0, r1, d8
 8009c3e:	e7f8      	b.n	8009c32 <__kernel_rem_pio2+0x8a>
 8009c40:	9906      	ldr	r1, [sp, #24]
 8009c42:	9d02      	ldr	r5, [sp, #8]
 8009c44:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8009c48:	9106      	str	r1, [sp, #24]
 8009c4a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8009c4e:	9502      	str	r5, [sp, #8]
 8009c50:	f7f6 fc8a 	bl	8000568 <__aeabi_dmul>
 8009c54:	4602      	mov	r2, r0
 8009c56:	460b      	mov	r3, r1
 8009c58:	4640      	mov	r0, r8
 8009c5a:	4649      	mov	r1, r9
 8009c5c:	f7f6 face 	bl	80001fc <__adddf3>
 8009c60:	3701      	adds	r7, #1
 8009c62:	4680      	mov	r8, r0
 8009c64:	4689      	mov	r9, r1
 8009c66:	9b07      	ldr	r3, [sp, #28]
 8009c68:	429f      	cmp	r7, r3
 8009c6a:	dde9      	ble.n	8009c40 <__kernel_rem_pio2+0x98>
 8009c6c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8009c70:	3601      	adds	r6, #1
 8009c72:	e7c9      	b.n	8009c08 <__kernel_rem_pio2+0x60>
 8009c74:	9b04      	ldr	r3, [sp, #16]
 8009c76:	aa0e      	add	r2, sp, #56	; 0x38
 8009c78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c7c:	930c      	str	r3, [sp, #48]	; 0x30
 8009c7e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009c80:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009c84:	9c04      	ldr	r4, [sp, #16]
 8009c86:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c88:	ab9a      	add	r3, sp, #616	; 0x268
 8009c8a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8009c8e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c92:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009c96:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8009c9a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8009c9e:	ab9a      	add	r3, sp, #616	; 0x268
 8009ca0:	445b      	add	r3, fp
 8009ca2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8009ca6:	2500      	movs	r5, #0
 8009ca8:	1b63      	subs	r3, r4, r5
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	dc78      	bgt.n	8009da0 <__kernel_rem_pio2+0x1f8>
 8009cae:	4650      	mov	r0, sl
 8009cb0:	ec49 8b10 	vmov	d0, r8, r9
 8009cb4:	f000 fc00 	bl	800a4b8 <scalbn>
 8009cb8:	ec57 6b10 	vmov	r6, r7, d0
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009cc2:	ee10 0a10 	vmov	r0, s0
 8009cc6:	4639      	mov	r1, r7
 8009cc8:	f7f6 fc4e 	bl	8000568 <__aeabi_dmul>
 8009ccc:	ec41 0b10 	vmov	d0, r0, r1
 8009cd0:	f000 fb6e 	bl	800a3b0 <floor>
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	ec51 0b10 	vmov	r0, r1, d0
 8009cda:	4b7e      	ldr	r3, [pc, #504]	; (8009ed4 <__kernel_rem_pio2+0x32c>)
 8009cdc:	f7f6 fc44 	bl	8000568 <__aeabi_dmul>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	4639      	mov	r1, r7
 8009ce8:	f7f6 fa86 	bl	80001f8 <__aeabi_dsub>
 8009cec:	460f      	mov	r7, r1
 8009cee:	4606      	mov	r6, r0
 8009cf0:	f7f6 fed4 	bl	8000a9c <__aeabi_d2iz>
 8009cf4:	9006      	str	r0, [sp, #24]
 8009cf6:	f7f6 fbcd 	bl	8000494 <__aeabi_i2d>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	4630      	mov	r0, r6
 8009d00:	4639      	mov	r1, r7
 8009d02:	f7f6 fa79 	bl	80001f8 <__aeabi_dsub>
 8009d06:	f1ba 0f00 	cmp.w	sl, #0
 8009d0a:	4606      	mov	r6, r0
 8009d0c:	460f      	mov	r7, r1
 8009d0e:	dd6c      	ble.n	8009dea <__kernel_rem_pio2+0x242>
 8009d10:	1e62      	subs	r2, r4, #1
 8009d12:	ab0e      	add	r3, sp, #56	; 0x38
 8009d14:	f1ca 0118 	rsb	r1, sl, #24
 8009d18:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009d1c:	9d06      	ldr	r5, [sp, #24]
 8009d1e:	fa40 f301 	asr.w	r3, r0, r1
 8009d22:	441d      	add	r5, r3
 8009d24:	408b      	lsls	r3, r1
 8009d26:	1ac0      	subs	r0, r0, r3
 8009d28:	ab0e      	add	r3, sp, #56	; 0x38
 8009d2a:	9506      	str	r5, [sp, #24]
 8009d2c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009d30:	f1ca 0317 	rsb	r3, sl, #23
 8009d34:	fa40 f303 	asr.w	r3, r0, r3
 8009d38:	9302      	str	r3, [sp, #8]
 8009d3a:	9b02      	ldr	r3, [sp, #8]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	dd62      	ble.n	8009e06 <__kernel_rem_pio2+0x25e>
 8009d40:	9b06      	ldr	r3, [sp, #24]
 8009d42:	2200      	movs	r2, #0
 8009d44:	3301      	adds	r3, #1
 8009d46:	9306      	str	r3, [sp, #24]
 8009d48:	4615      	mov	r5, r2
 8009d4a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009d4e:	4294      	cmp	r4, r2
 8009d50:	f300 8095 	bgt.w	8009e7e <__kernel_rem_pio2+0x2d6>
 8009d54:	f1ba 0f00 	cmp.w	sl, #0
 8009d58:	dd07      	ble.n	8009d6a <__kernel_rem_pio2+0x1c2>
 8009d5a:	f1ba 0f01 	cmp.w	sl, #1
 8009d5e:	f000 80a2 	beq.w	8009ea6 <__kernel_rem_pio2+0x2fe>
 8009d62:	f1ba 0f02 	cmp.w	sl, #2
 8009d66:	f000 80c1 	beq.w	8009eec <__kernel_rem_pio2+0x344>
 8009d6a:	9b02      	ldr	r3, [sp, #8]
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	d14a      	bne.n	8009e06 <__kernel_rem_pio2+0x25e>
 8009d70:	4632      	mov	r2, r6
 8009d72:	463b      	mov	r3, r7
 8009d74:	2000      	movs	r0, #0
 8009d76:	4958      	ldr	r1, [pc, #352]	; (8009ed8 <__kernel_rem_pio2+0x330>)
 8009d78:	f7f6 fa3e 	bl	80001f8 <__aeabi_dsub>
 8009d7c:	4606      	mov	r6, r0
 8009d7e:	460f      	mov	r7, r1
 8009d80:	2d00      	cmp	r5, #0
 8009d82:	d040      	beq.n	8009e06 <__kernel_rem_pio2+0x25e>
 8009d84:	4650      	mov	r0, sl
 8009d86:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009ec8 <__kernel_rem_pio2+0x320>
 8009d8a:	f000 fb95 	bl	800a4b8 <scalbn>
 8009d8e:	4630      	mov	r0, r6
 8009d90:	4639      	mov	r1, r7
 8009d92:	ec53 2b10 	vmov	r2, r3, d0
 8009d96:	f7f6 fa2f 	bl	80001f8 <__aeabi_dsub>
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	460f      	mov	r7, r1
 8009d9e:	e032      	b.n	8009e06 <__kernel_rem_pio2+0x25e>
 8009da0:	2200      	movs	r2, #0
 8009da2:	4b4e      	ldr	r3, [pc, #312]	; (8009edc <__kernel_rem_pio2+0x334>)
 8009da4:	4640      	mov	r0, r8
 8009da6:	4649      	mov	r1, r9
 8009da8:	f7f6 fbde 	bl	8000568 <__aeabi_dmul>
 8009dac:	f7f6 fe76 	bl	8000a9c <__aeabi_d2iz>
 8009db0:	f7f6 fb70 	bl	8000494 <__aeabi_i2d>
 8009db4:	2200      	movs	r2, #0
 8009db6:	4b4a      	ldr	r3, [pc, #296]	; (8009ee0 <__kernel_rem_pio2+0x338>)
 8009db8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dbc:	f7f6 fbd4 	bl	8000568 <__aeabi_dmul>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	4640      	mov	r0, r8
 8009dc6:	4649      	mov	r1, r9
 8009dc8:	f7f6 fa16 	bl	80001f8 <__aeabi_dsub>
 8009dcc:	f7f6 fe66 	bl	8000a9c <__aeabi_d2iz>
 8009dd0:	ab0e      	add	r3, sp, #56	; 0x38
 8009dd2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8009dd6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8009dda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dde:	f7f6 fa0d 	bl	80001fc <__adddf3>
 8009de2:	3501      	adds	r5, #1
 8009de4:	4680      	mov	r8, r0
 8009de6:	4689      	mov	r9, r1
 8009de8:	e75e      	b.n	8009ca8 <__kernel_rem_pio2+0x100>
 8009dea:	d105      	bne.n	8009df8 <__kernel_rem_pio2+0x250>
 8009dec:	1e63      	subs	r3, r4, #1
 8009dee:	aa0e      	add	r2, sp, #56	; 0x38
 8009df0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009df4:	15c3      	asrs	r3, r0, #23
 8009df6:	e79f      	b.n	8009d38 <__kernel_rem_pio2+0x190>
 8009df8:	2200      	movs	r2, #0
 8009dfa:	4b3a      	ldr	r3, [pc, #232]	; (8009ee4 <__kernel_rem_pio2+0x33c>)
 8009dfc:	f7f6 fe3a 	bl	8000a74 <__aeabi_dcmpge>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	d139      	bne.n	8009e78 <__kernel_rem_pio2+0x2d0>
 8009e04:	9002      	str	r0, [sp, #8]
 8009e06:	2200      	movs	r2, #0
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	4639      	mov	r1, r7
 8009e0e:	f7f6 fe13 	bl	8000a38 <__aeabi_dcmpeq>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	f000 80c7 	beq.w	8009fa6 <__kernel_rem_pio2+0x3fe>
 8009e18:	1e65      	subs	r5, r4, #1
 8009e1a:	462b      	mov	r3, r5
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	9904      	ldr	r1, [sp, #16]
 8009e20:	428b      	cmp	r3, r1
 8009e22:	da6a      	bge.n	8009efa <__kernel_rem_pio2+0x352>
 8009e24:	2a00      	cmp	r2, #0
 8009e26:	f000 8088 	beq.w	8009f3a <__kernel_rem_pio2+0x392>
 8009e2a:	ab0e      	add	r3, sp, #56	; 0x38
 8009e2c:	f1aa 0a18 	sub.w	sl, sl, #24
 8009e30:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f000 80b4 	beq.w	8009fa2 <__kernel_rem_pio2+0x3fa>
 8009e3a:	4650      	mov	r0, sl
 8009e3c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8009ec8 <__kernel_rem_pio2+0x320>
 8009e40:	f000 fb3a 	bl	800a4b8 <scalbn>
 8009e44:	00ec      	lsls	r4, r5, #3
 8009e46:	ab72      	add	r3, sp, #456	; 0x1c8
 8009e48:	191e      	adds	r6, r3, r4
 8009e4a:	ec59 8b10 	vmov	r8, r9, d0
 8009e4e:	f106 0a08 	add.w	sl, r6, #8
 8009e52:	462f      	mov	r7, r5
 8009e54:	2f00      	cmp	r7, #0
 8009e56:	f280 80df 	bge.w	800a018 <__kernel_rem_pio2+0x470>
 8009e5a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8009ec0 <__kernel_rem_pio2+0x318>
 8009e5e:	f04f 0a00 	mov.w	sl, #0
 8009e62:	eba5 030a 	sub.w	r3, r5, sl
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f2c0 810a 	blt.w	800a080 <__kernel_rem_pio2+0x4d8>
 8009e6c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8009ee8 <__kernel_rem_pio2+0x340>
 8009e70:	ec59 8b18 	vmov	r8, r9, d8
 8009e74:	2700      	movs	r7, #0
 8009e76:	e0f5      	b.n	800a064 <__kernel_rem_pio2+0x4bc>
 8009e78:	2302      	movs	r3, #2
 8009e7a:	9302      	str	r3, [sp, #8]
 8009e7c:	e760      	b.n	8009d40 <__kernel_rem_pio2+0x198>
 8009e7e:	ab0e      	add	r3, sp, #56	; 0x38
 8009e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e84:	b94d      	cbnz	r5, 8009e9a <__kernel_rem_pio2+0x2f2>
 8009e86:	b12b      	cbz	r3, 8009e94 <__kernel_rem_pio2+0x2ec>
 8009e88:	a80e      	add	r0, sp, #56	; 0x38
 8009e8a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009e8e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009e92:	2301      	movs	r3, #1
 8009e94:	3201      	adds	r2, #1
 8009e96:	461d      	mov	r5, r3
 8009e98:	e759      	b.n	8009d4e <__kernel_rem_pio2+0x1a6>
 8009e9a:	a80e      	add	r0, sp, #56	; 0x38
 8009e9c:	1acb      	subs	r3, r1, r3
 8009e9e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009ea2:	462b      	mov	r3, r5
 8009ea4:	e7f6      	b.n	8009e94 <__kernel_rem_pio2+0x2ec>
 8009ea6:	1e62      	subs	r2, r4, #1
 8009ea8:	ab0e      	add	r3, sp, #56	; 0x38
 8009eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009eb2:	a90e      	add	r1, sp, #56	; 0x38
 8009eb4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009eb8:	e757      	b.n	8009d6a <__kernel_rem_pio2+0x1c2>
 8009eba:	bf00      	nop
 8009ebc:	f3af 8000 	nop.w
	...
 8009ecc:	3ff00000 	.word	0x3ff00000
 8009ed0:	0800ab80 	.word	0x0800ab80
 8009ed4:	40200000 	.word	0x40200000
 8009ed8:	3ff00000 	.word	0x3ff00000
 8009edc:	3e700000 	.word	0x3e700000
 8009ee0:	41700000 	.word	0x41700000
 8009ee4:	3fe00000 	.word	0x3fe00000
 8009ee8:	0800ab40 	.word	0x0800ab40
 8009eec:	1e62      	subs	r2, r4, #1
 8009eee:	ab0e      	add	r3, sp, #56	; 0x38
 8009ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ef4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009ef8:	e7db      	b.n	8009eb2 <__kernel_rem_pio2+0x30a>
 8009efa:	a90e      	add	r1, sp, #56	; 0x38
 8009efc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009f00:	3b01      	subs	r3, #1
 8009f02:	430a      	orrs	r2, r1
 8009f04:	e78b      	b.n	8009e1e <__kernel_rem_pio2+0x276>
 8009f06:	3301      	adds	r3, #1
 8009f08:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009f0c:	2900      	cmp	r1, #0
 8009f0e:	d0fa      	beq.n	8009f06 <__kernel_rem_pio2+0x35e>
 8009f10:	9a08      	ldr	r2, [sp, #32]
 8009f12:	4422      	add	r2, r4
 8009f14:	00d2      	lsls	r2, r2, #3
 8009f16:	a922      	add	r1, sp, #136	; 0x88
 8009f18:	18e3      	adds	r3, r4, r3
 8009f1a:	9206      	str	r2, [sp, #24]
 8009f1c:	440a      	add	r2, r1
 8009f1e:	9302      	str	r3, [sp, #8]
 8009f20:	f10b 0108 	add.w	r1, fp, #8
 8009f24:	f102 0308 	add.w	r3, r2, #8
 8009f28:	1c66      	adds	r6, r4, #1
 8009f2a:	910a      	str	r1, [sp, #40]	; 0x28
 8009f2c:	2500      	movs	r5, #0
 8009f2e:	930d      	str	r3, [sp, #52]	; 0x34
 8009f30:	9b02      	ldr	r3, [sp, #8]
 8009f32:	42b3      	cmp	r3, r6
 8009f34:	da04      	bge.n	8009f40 <__kernel_rem_pio2+0x398>
 8009f36:	461c      	mov	r4, r3
 8009f38:	e6a6      	b.n	8009c88 <__kernel_rem_pio2+0xe0>
 8009f3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e7e3      	b.n	8009f08 <__kernel_rem_pio2+0x360>
 8009f40:	9b06      	ldr	r3, [sp, #24]
 8009f42:	18ef      	adds	r7, r5, r3
 8009f44:	ab22      	add	r3, sp, #136	; 0x88
 8009f46:	441f      	add	r7, r3
 8009f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f4a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009f4e:	f7f6 faa1 	bl	8000494 <__aeabi_i2d>
 8009f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f54:	461c      	mov	r4, r3
 8009f56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f58:	e9c7 0100 	strd	r0, r1, [r7]
 8009f5c:	eb03 0b05 	add.w	fp, r3, r5
 8009f60:	2700      	movs	r7, #0
 8009f62:	f04f 0800 	mov.w	r8, #0
 8009f66:	f04f 0900 	mov.w	r9, #0
 8009f6a:	9b07      	ldr	r3, [sp, #28]
 8009f6c:	429f      	cmp	r7, r3
 8009f6e:	dd08      	ble.n	8009f82 <__kernel_rem_pio2+0x3da>
 8009f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f72:	aa72      	add	r2, sp, #456	; 0x1c8
 8009f74:	18eb      	adds	r3, r5, r3
 8009f76:	4413      	add	r3, r2
 8009f78:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8009f7c:	3601      	adds	r6, #1
 8009f7e:	3508      	adds	r5, #8
 8009f80:	e7d6      	b.n	8009f30 <__kernel_rem_pio2+0x388>
 8009f82:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009f86:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009f8a:	f7f6 faed 	bl	8000568 <__aeabi_dmul>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	460b      	mov	r3, r1
 8009f92:	4640      	mov	r0, r8
 8009f94:	4649      	mov	r1, r9
 8009f96:	f7f6 f931 	bl	80001fc <__adddf3>
 8009f9a:	3701      	adds	r7, #1
 8009f9c:	4680      	mov	r8, r0
 8009f9e:	4689      	mov	r9, r1
 8009fa0:	e7e3      	b.n	8009f6a <__kernel_rem_pio2+0x3c2>
 8009fa2:	3d01      	subs	r5, #1
 8009fa4:	e741      	b.n	8009e2a <__kernel_rem_pio2+0x282>
 8009fa6:	f1ca 0000 	rsb	r0, sl, #0
 8009faa:	ec47 6b10 	vmov	d0, r6, r7
 8009fae:	f000 fa83 	bl	800a4b8 <scalbn>
 8009fb2:	ec57 6b10 	vmov	r6, r7, d0
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	4b99      	ldr	r3, [pc, #612]	; (800a220 <__kernel_rem_pio2+0x678>)
 8009fba:	ee10 0a10 	vmov	r0, s0
 8009fbe:	4639      	mov	r1, r7
 8009fc0:	f7f6 fd58 	bl	8000a74 <__aeabi_dcmpge>
 8009fc4:	b1f8      	cbz	r0, 800a006 <__kernel_rem_pio2+0x45e>
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	4b96      	ldr	r3, [pc, #600]	; (800a224 <__kernel_rem_pio2+0x67c>)
 8009fca:	4630      	mov	r0, r6
 8009fcc:	4639      	mov	r1, r7
 8009fce:	f7f6 facb 	bl	8000568 <__aeabi_dmul>
 8009fd2:	f7f6 fd63 	bl	8000a9c <__aeabi_d2iz>
 8009fd6:	4680      	mov	r8, r0
 8009fd8:	f7f6 fa5c 	bl	8000494 <__aeabi_i2d>
 8009fdc:	2200      	movs	r2, #0
 8009fde:	4b90      	ldr	r3, [pc, #576]	; (800a220 <__kernel_rem_pio2+0x678>)
 8009fe0:	f7f6 fac2 	bl	8000568 <__aeabi_dmul>
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	4639      	mov	r1, r7
 8009fea:	4630      	mov	r0, r6
 8009fec:	f7f6 f904 	bl	80001f8 <__aeabi_dsub>
 8009ff0:	f7f6 fd54 	bl	8000a9c <__aeabi_d2iz>
 8009ff4:	1c65      	adds	r5, r4, #1
 8009ff6:	ab0e      	add	r3, sp, #56	; 0x38
 8009ff8:	f10a 0a18 	add.w	sl, sl, #24
 8009ffc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a000:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a004:	e719      	b.n	8009e3a <__kernel_rem_pio2+0x292>
 800a006:	4630      	mov	r0, r6
 800a008:	4639      	mov	r1, r7
 800a00a:	f7f6 fd47 	bl	8000a9c <__aeabi_d2iz>
 800a00e:	ab0e      	add	r3, sp, #56	; 0x38
 800a010:	4625      	mov	r5, r4
 800a012:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a016:	e710      	b.n	8009e3a <__kernel_rem_pio2+0x292>
 800a018:	ab0e      	add	r3, sp, #56	; 0x38
 800a01a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a01e:	f7f6 fa39 	bl	8000494 <__aeabi_i2d>
 800a022:	4642      	mov	r2, r8
 800a024:	464b      	mov	r3, r9
 800a026:	f7f6 fa9f 	bl	8000568 <__aeabi_dmul>
 800a02a:	2200      	movs	r2, #0
 800a02c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800a030:	4b7c      	ldr	r3, [pc, #496]	; (800a224 <__kernel_rem_pio2+0x67c>)
 800a032:	4640      	mov	r0, r8
 800a034:	4649      	mov	r1, r9
 800a036:	f7f6 fa97 	bl	8000568 <__aeabi_dmul>
 800a03a:	3f01      	subs	r7, #1
 800a03c:	4680      	mov	r8, r0
 800a03e:	4689      	mov	r9, r1
 800a040:	e708      	b.n	8009e54 <__kernel_rem_pio2+0x2ac>
 800a042:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800a046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800a04e:	f7f6 fa8b 	bl	8000568 <__aeabi_dmul>
 800a052:	4602      	mov	r2, r0
 800a054:	460b      	mov	r3, r1
 800a056:	4640      	mov	r0, r8
 800a058:	4649      	mov	r1, r9
 800a05a:	f7f6 f8cf 	bl	80001fc <__adddf3>
 800a05e:	3701      	adds	r7, #1
 800a060:	4680      	mov	r8, r0
 800a062:	4689      	mov	r9, r1
 800a064:	9b04      	ldr	r3, [sp, #16]
 800a066:	429f      	cmp	r7, r3
 800a068:	dc01      	bgt.n	800a06e <__kernel_rem_pio2+0x4c6>
 800a06a:	45ba      	cmp	sl, r7
 800a06c:	dae9      	bge.n	800a042 <__kernel_rem_pio2+0x49a>
 800a06e:	ab4a      	add	r3, sp, #296	; 0x128
 800a070:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a074:	e9c3 8900 	strd	r8, r9, [r3]
 800a078:	f10a 0a01 	add.w	sl, sl, #1
 800a07c:	3e08      	subs	r6, #8
 800a07e:	e6f0      	b.n	8009e62 <__kernel_rem_pio2+0x2ba>
 800a080:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a082:	2b03      	cmp	r3, #3
 800a084:	d85b      	bhi.n	800a13e <__kernel_rem_pio2+0x596>
 800a086:	e8df f003 	tbb	[pc, r3]
 800a08a:	264a      	.short	0x264a
 800a08c:	0226      	.short	0x0226
 800a08e:	ab9a      	add	r3, sp, #616	; 0x268
 800a090:	441c      	add	r4, r3
 800a092:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a096:	46a2      	mov	sl, r4
 800a098:	46ab      	mov	fp, r5
 800a09a:	f1bb 0f00 	cmp.w	fp, #0
 800a09e:	dc6c      	bgt.n	800a17a <__kernel_rem_pio2+0x5d2>
 800a0a0:	46a2      	mov	sl, r4
 800a0a2:	46ab      	mov	fp, r5
 800a0a4:	f1bb 0f01 	cmp.w	fp, #1
 800a0a8:	f300 8086 	bgt.w	800a1b8 <__kernel_rem_pio2+0x610>
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	2d01      	cmp	r5, #1
 800a0b2:	f300 80a0 	bgt.w	800a1f6 <__kernel_rem_pio2+0x64e>
 800a0b6:	9b02      	ldr	r3, [sp, #8]
 800a0b8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800a0bc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f040 809e 	bne.w	800a202 <__kernel_rem_pio2+0x65a>
 800a0c6:	9b01      	ldr	r3, [sp, #4]
 800a0c8:	e9c3 7800 	strd	r7, r8, [r3]
 800a0cc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a0d0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a0d4:	e033      	b.n	800a13e <__kernel_rem_pio2+0x596>
 800a0d6:	3408      	adds	r4, #8
 800a0d8:	ab4a      	add	r3, sp, #296	; 0x128
 800a0da:	441c      	add	r4, r3
 800a0dc:	462e      	mov	r6, r5
 800a0de:	2000      	movs	r0, #0
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	2e00      	cmp	r6, #0
 800a0e4:	da3a      	bge.n	800a15c <__kernel_rem_pio2+0x5b4>
 800a0e6:	9b02      	ldr	r3, [sp, #8]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d03d      	beq.n	800a168 <__kernel_rem_pio2+0x5c0>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0f2:	9c01      	ldr	r4, [sp, #4]
 800a0f4:	e9c4 2300 	strd	r2, r3, [r4]
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a100:	f7f6 f87a 	bl	80001f8 <__aeabi_dsub>
 800a104:	ae4c      	add	r6, sp, #304	; 0x130
 800a106:	2401      	movs	r4, #1
 800a108:	42a5      	cmp	r5, r4
 800a10a:	da30      	bge.n	800a16e <__kernel_rem_pio2+0x5c6>
 800a10c:	9b02      	ldr	r3, [sp, #8]
 800a10e:	b113      	cbz	r3, 800a116 <__kernel_rem_pio2+0x56e>
 800a110:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a114:	4619      	mov	r1, r3
 800a116:	9b01      	ldr	r3, [sp, #4]
 800a118:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a11c:	e00f      	b.n	800a13e <__kernel_rem_pio2+0x596>
 800a11e:	ab9a      	add	r3, sp, #616	; 0x268
 800a120:	441c      	add	r4, r3
 800a122:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a126:	2000      	movs	r0, #0
 800a128:	2100      	movs	r1, #0
 800a12a:	2d00      	cmp	r5, #0
 800a12c:	da10      	bge.n	800a150 <__kernel_rem_pio2+0x5a8>
 800a12e:	9b02      	ldr	r3, [sp, #8]
 800a130:	b113      	cbz	r3, 800a138 <__kernel_rem_pio2+0x590>
 800a132:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a136:	4619      	mov	r1, r3
 800a138:	9b01      	ldr	r3, [sp, #4]
 800a13a:	e9c3 0100 	strd	r0, r1, [r3]
 800a13e:	9b06      	ldr	r3, [sp, #24]
 800a140:	f003 0007 	and.w	r0, r3, #7
 800a144:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a148:	ecbd 8b02 	vpop	{d8}
 800a14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a150:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a154:	f7f6 f852 	bl	80001fc <__adddf3>
 800a158:	3d01      	subs	r5, #1
 800a15a:	e7e6      	b.n	800a12a <__kernel_rem_pio2+0x582>
 800a15c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a160:	f7f6 f84c 	bl	80001fc <__adddf3>
 800a164:	3e01      	subs	r6, #1
 800a166:	e7bc      	b.n	800a0e2 <__kernel_rem_pio2+0x53a>
 800a168:	4602      	mov	r2, r0
 800a16a:	460b      	mov	r3, r1
 800a16c:	e7c1      	b.n	800a0f2 <__kernel_rem_pio2+0x54a>
 800a16e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a172:	f7f6 f843 	bl	80001fc <__adddf3>
 800a176:	3401      	adds	r4, #1
 800a178:	e7c6      	b.n	800a108 <__kernel_rem_pio2+0x560>
 800a17a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800a17e:	ed3a 7b02 	vldmdb	sl!, {d7}
 800a182:	4640      	mov	r0, r8
 800a184:	ec53 2b17 	vmov	r2, r3, d7
 800a188:	4649      	mov	r1, r9
 800a18a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a18e:	f7f6 f835 	bl	80001fc <__adddf3>
 800a192:	4602      	mov	r2, r0
 800a194:	460b      	mov	r3, r1
 800a196:	4606      	mov	r6, r0
 800a198:	460f      	mov	r7, r1
 800a19a:	4640      	mov	r0, r8
 800a19c:	4649      	mov	r1, r9
 800a19e:	f7f6 f82b 	bl	80001f8 <__aeabi_dsub>
 800a1a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1a6:	f7f6 f829 	bl	80001fc <__adddf3>
 800a1aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1ae:	e9ca 0100 	strd	r0, r1, [sl]
 800a1b2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800a1b6:	e770      	b.n	800a09a <__kernel_rem_pio2+0x4f2>
 800a1b8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800a1bc:	ed3a 7b02 	vldmdb	sl!, {d7}
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	ec53 2b17 	vmov	r2, r3, d7
 800a1c6:	4639      	mov	r1, r7
 800a1c8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a1cc:	f7f6 f816 	bl	80001fc <__adddf3>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	4680      	mov	r8, r0
 800a1d6:	4689      	mov	r9, r1
 800a1d8:	4630      	mov	r0, r6
 800a1da:	4639      	mov	r1, r7
 800a1dc:	f7f6 f80c 	bl	80001f8 <__aeabi_dsub>
 800a1e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1e4:	f7f6 f80a 	bl	80001fc <__adddf3>
 800a1e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1ec:	e9ca 0100 	strd	r0, r1, [sl]
 800a1f0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800a1f4:	e756      	b.n	800a0a4 <__kernel_rem_pio2+0x4fc>
 800a1f6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a1fa:	f7f5 ffff 	bl	80001fc <__adddf3>
 800a1fe:	3d01      	subs	r5, #1
 800a200:	e756      	b.n	800a0b0 <__kernel_rem_pio2+0x508>
 800a202:	9b01      	ldr	r3, [sp, #4]
 800a204:	9a01      	ldr	r2, [sp, #4]
 800a206:	601f      	str	r7, [r3, #0]
 800a208:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800a20c:	605c      	str	r4, [r3, #4]
 800a20e:	609d      	str	r5, [r3, #8]
 800a210:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a214:	60d3      	str	r3, [r2, #12]
 800a216:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a21a:	6110      	str	r0, [r2, #16]
 800a21c:	6153      	str	r3, [r2, #20]
 800a21e:	e78e      	b.n	800a13e <__kernel_rem_pio2+0x596>
 800a220:	41700000 	.word	0x41700000
 800a224:	3e700000 	.word	0x3e700000

0800a228 <__kernel_sin>:
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	ec55 4b10 	vmov	r4, r5, d0
 800a230:	b085      	sub	sp, #20
 800a232:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a236:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a23a:	ed8d 1b00 	vstr	d1, [sp]
 800a23e:	9002      	str	r0, [sp, #8]
 800a240:	da06      	bge.n	800a250 <__kernel_sin+0x28>
 800a242:	ee10 0a10 	vmov	r0, s0
 800a246:	4629      	mov	r1, r5
 800a248:	f7f6 fc28 	bl	8000a9c <__aeabi_d2iz>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	d051      	beq.n	800a2f4 <__kernel_sin+0xcc>
 800a250:	4622      	mov	r2, r4
 800a252:	462b      	mov	r3, r5
 800a254:	4620      	mov	r0, r4
 800a256:	4629      	mov	r1, r5
 800a258:	f7f6 f986 	bl	8000568 <__aeabi_dmul>
 800a25c:	4682      	mov	sl, r0
 800a25e:	468b      	mov	fp, r1
 800a260:	4602      	mov	r2, r0
 800a262:	460b      	mov	r3, r1
 800a264:	4620      	mov	r0, r4
 800a266:	4629      	mov	r1, r5
 800a268:	f7f6 f97e 	bl	8000568 <__aeabi_dmul>
 800a26c:	a341      	add	r3, pc, #260	; (adr r3, 800a374 <__kernel_sin+0x14c>)
 800a26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a272:	4680      	mov	r8, r0
 800a274:	4689      	mov	r9, r1
 800a276:	4650      	mov	r0, sl
 800a278:	4659      	mov	r1, fp
 800a27a:	f7f6 f975 	bl	8000568 <__aeabi_dmul>
 800a27e:	a33f      	add	r3, pc, #252	; (adr r3, 800a37c <__kernel_sin+0x154>)
 800a280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a284:	f7f5 ffb8 	bl	80001f8 <__aeabi_dsub>
 800a288:	4652      	mov	r2, sl
 800a28a:	465b      	mov	r3, fp
 800a28c:	f7f6 f96c 	bl	8000568 <__aeabi_dmul>
 800a290:	a33c      	add	r3, pc, #240	; (adr r3, 800a384 <__kernel_sin+0x15c>)
 800a292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a296:	f7f5 ffb1 	bl	80001fc <__adddf3>
 800a29a:	4652      	mov	r2, sl
 800a29c:	465b      	mov	r3, fp
 800a29e:	f7f6 f963 	bl	8000568 <__aeabi_dmul>
 800a2a2:	a33a      	add	r3, pc, #232	; (adr r3, 800a38c <__kernel_sin+0x164>)
 800a2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a8:	f7f5 ffa6 	bl	80001f8 <__aeabi_dsub>
 800a2ac:	4652      	mov	r2, sl
 800a2ae:	465b      	mov	r3, fp
 800a2b0:	f7f6 f95a 	bl	8000568 <__aeabi_dmul>
 800a2b4:	a337      	add	r3, pc, #220	; (adr r3, 800a394 <__kernel_sin+0x16c>)
 800a2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ba:	f7f5 ff9f 	bl	80001fc <__adddf3>
 800a2be:	9b02      	ldr	r3, [sp, #8]
 800a2c0:	4606      	mov	r6, r0
 800a2c2:	460f      	mov	r7, r1
 800a2c4:	b9db      	cbnz	r3, 800a2fe <__kernel_sin+0xd6>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	4650      	mov	r0, sl
 800a2cc:	4659      	mov	r1, fp
 800a2ce:	f7f6 f94b 	bl	8000568 <__aeabi_dmul>
 800a2d2:	a325      	add	r3, pc, #148	; (adr r3, 800a368 <__kernel_sin+0x140>)
 800a2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d8:	f7f5 ff8e 	bl	80001f8 <__aeabi_dsub>
 800a2dc:	4642      	mov	r2, r8
 800a2de:	464b      	mov	r3, r9
 800a2e0:	f7f6 f942 	bl	8000568 <__aeabi_dmul>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	4629      	mov	r1, r5
 800a2ec:	f7f5 ff86 	bl	80001fc <__adddf3>
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	460d      	mov	r5, r1
 800a2f4:	ec45 4b10 	vmov	d0, r4, r5
 800a2f8:	b005      	add	sp, #20
 800a2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2fe:	2200      	movs	r2, #0
 800a300:	4b1b      	ldr	r3, [pc, #108]	; (800a370 <__kernel_sin+0x148>)
 800a302:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a306:	f7f6 f92f 	bl	8000568 <__aeabi_dmul>
 800a30a:	4632      	mov	r2, r6
 800a30c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a310:	463b      	mov	r3, r7
 800a312:	4640      	mov	r0, r8
 800a314:	4649      	mov	r1, r9
 800a316:	f7f6 f927 	bl	8000568 <__aeabi_dmul>
 800a31a:	4602      	mov	r2, r0
 800a31c:	460b      	mov	r3, r1
 800a31e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a322:	f7f5 ff69 	bl	80001f8 <__aeabi_dsub>
 800a326:	4652      	mov	r2, sl
 800a328:	465b      	mov	r3, fp
 800a32a:	f7f6 f91d 	bl	8000568 <__aeabi_dmul>
 800a32e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a332:	f7f5 ff61 	bl	80001f8 <__aeabi_dsub>
 800a336:	a30c      	add	r3, pc, #48	; (adr r3, 800a368 <__kernel_sin+0x140>)
 800a338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33c:	4606      	mov	r6, r0
 800a33e:	460f      	mov	r7, r1
 800a340:	4640      	mov	r0, r8
 800a342:	4649      	mov	r1, r9
 800a344:	f7f6 f910 	bl	8000568 <__aeabi_dmul>
 800a348:	4602      	mov	r2, r0
 800a34a:	460b      	mov	r3, r1
 800a34c:	4630      	mov	r0, r6
 800a34e:	4639      	mov	r1, r7
 800a350:	f7f5 ff54 	bl	80001fc <__adddf3>
 800a354:	4602      	mov	r2, r0
 800a356:	460b      	mov	r3, r1
 800a358:	4620      	mov	r0, r4
 800a35a:	4629      	mov	r1, r5
 800a35c:	f7f5 ff4c 	bl	80001f8 <__aeabi_dsub>
 800a360:	e7c6      	b.n	800a2f0 <__kernel_sin+0xc8>
 800a362:	bf00      	nop
 800a364:	f3af 8000 	nop.w
 800a368:	55555549 	.word	0x55555549
 800a36c:	3fc55555 	.word	0x3fc55555
 800a370:	3fe00000 	.word	0x3fe00000
 800a374:	5acfd57c 	.word	0x5acfd57c
 800a378:	3de5d93a 	.word	0x3de5d93a
 800a37c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a380:	3e5ae5e6 	.word	0x3e5ae5e6
 800a384:	57b1fe7d 	.word	0x57b1fe7d
 800a388:	3ec71de3 	.word	0x3ec71de3
 800a38c:	19c161d5 	.word	0x19c161d5
 800a390:	3f2a01a0 	.word	0x3f2a01a0
 800a394:	1110f8a6 	.word	0x1110f8a6
 800a398:	3f811111 	.word	0x3f811111

0800a39c <fabs>:
 800a39c:	ec51 0b10 	vmov	r0, r1, d0
 800a3a0:	ee10 2a10 	vmov	r2, s0
 800a3a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a3a8:	ec43 2b10 	vmov	d0, r2, r3
 800a3ac:	4770      	bx	lr
	...

0800a3b0 <floor>:
 800a3b0:	ec51 0b10 	vmov	r0, r1, d0
 800a3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3b8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a3bc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a3c0:	2e13      	cmp	r6, #19
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	ee10 5a10 	vmov	r5, s0
 800a3c8:	4680      	mov	r8, r0
 800a3ca:	dc34      	bgt.n	800a436 <floor+0x86>
 800a3cc:	2e00      	cmp	r6, #0
 800a3ce:	da16      	bge.n	800a3fe <floor+0x4e>
 800a3d0:	a335      	add	r3, pc, #212	; (adr r3, 800a4a8 <floor+0xf8>)
 800a3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d6:	f7f5 ff11 	bl	80001fc <__adddf3>
 800a3da:	2200      	movs	r2, #0
 800a3dc:	2300      	movs	r3, #0
 800a3de:	f7f6 fb53 	bl	8000a88 <__aeabi_dcmpgt>
 800a3e2:	b148      	cbz	r0, 800a3f8 <floor+0x48>
 800a3e4:	2c00      	cmp	r4, #0
 800a3e6:	da59      	bge.n	800a49c <floor+0xec>
 800a3e8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a3ec:	4a30      	ldr	r2, [pc, #192]	; (800a4b0 <floor+0x100>)
 800a3ee:	432b      	orrs	r3, r5
 800a3f0:	2500      	movs	r5, #0
 800a3f2:	42ab      	cmp	r3, r5
 800a3f4:	bf18      	it	ne
 800a3f6:	4614      	movne	r4, r2
 800a3f8:	4621      	mov	r1, r4
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	e025      	b.n	800a44a <floor+0x9a>
 800a3fe:	4f2d      	ldr	r7, [pc, #180]	; (800a4b4 <floor+0x104>)
 800a400:	4137      	asrs	r7, r6
 800a402:	ea01 0307 	and.w	r3, r1, r7
 800a406:	4303      	orrs	r3, r0
 800a408:	d01f      	beq.n	800a44a <floor+0x9a>
 800a40a:	a327      	add	r3, pc, #156	; (adr r3, 800a4a8 <floor+0xf8>)
 800a40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a410:	f7f5 fef4 	bl	80001fc <__adddf3>
 800a414:	2200      	movs	r2, #0
 800a416:	2300      	movs	r3, #0
 800a418:	f7f6 fb36 	bl	8000a88 <__aeabi_dcmpgt>
 800a41c:	2800      	cmp	r0, #0
 800a41e:	d0eb      	beq.n	800a3f8 <floor+0x48>
 800a420:	2c00      	cmp	r4, #0
 800a422:	bfbe      	ittt	lt
 800a424:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a428:	fa43 f606 	asrlt.w	r6, r3, r6
 800a42c:	19a4      	addlt	r4, r4, r6
 800a42e:	ea24 0407 	bic.w	r4, r4, r7
 800a432:	2500      	movs	r5, #0
 800a434:	e7e0      	b.n	800a3f8 <floor+0x48>
 800a436:	2e33      	cmp	r6, #51	; 0x33
 800a438:	dd0b      	ble.n	800a452 <floor+0xa2>
 800a43a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a43e:	d104      	bne.n	800a44a <floor+0x9a>
 800a440:	ee10 2a10 	vmov	r2, s0
 800a444:	460b      	mov	r3, r1
 800a446:	f7f5 fed9 	bl	80001fc <__adddf3>
 800a44a:	ec41 0b10 	vmov	d0, r0, r1
 800a44e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a452:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a456:	f04f 33ff 	mov.w	r3, #4294967295
 800a45a:	fa23 f707 	lsr.w	r7, r3, r7
 800a45e:	4207      	tst	r7, r0
 800a460:	d0f3      	beq.n	800a44a <floor+0x9a>
 800a462:	a311      	add	r3, pc, #68	; (adr r3, 800a4a8 <floor+0xf8>)
 800a464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a468:	f7f5 fec8 	bl	80001fc <__adddf3>
 800a46c:	2200      	movs	r2, #0
 800a46e:	2300      	movs	r3, #0
 800a470:	f7f6 fb0a 	bl	8000a88 <__aeabi_dcmpgt>
 800a474:	2800      	cmp	r0, #0
 800a476:	d0bf      	beq.n	800a3f8 <floor+0x48>
 800a478:	2c00      	cmp	r4, #0
 800a47a:	da02      	bge.n	800a482 <floor+0xd2>
 800a47c:	2e14      	cmp	r6, #20
 800a47e:	d103      	bne.n	800a488 <floor+0xd8>
 800a480:	3401      	adds	r4, #1
 800a482:	ea25 0507 	bic.w	r5, r5, r7
 800a486:	e7b7      	b.n	800a3f8 <floor+0x48>
 800a488:	2301      	movs	r3, #1
 800a48a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a48e:	fa03 f606 	lsl.w	r6, r3, r6
 800a492:	4435      	add	r5, r6
 800a494:	4545      	cmp	r5, r8
 800a496:	bf38      	it	cc
 800a498:	18e4      	addcc	r4, r4, r3
 800a49a:	e7f2      	b.n	800a482 <floor+0xd2>
 800a49c:	2500      	movs	r5, #0
 800a49e:	462c      	mov	r4, r5
 800a4a0:	e7aa      	b.n	800a3f8 <floor+0x48>
 800a4a2:	bf00      	nop
 800a4a4:	f3af 8000 	nop.w
 800a4a8:	8800759c 	.word	0x8800759c
 800a4ac:	7e37e43c 	.word	0x7e37e43c
 800a4b0:	bff00000 	.word	0xbff00000
 800a4b4:	000fffff 	.word	0x000fffff

0800a4b8 <scalbn>:
 800a4b8:	b570      	push	{r4, r5, r6, lr}
 800a4ba:	ec55 4b10 	vmov	r4, r5, d0
 800a4be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a4c2:	4606      	mov	r6, r0
 800a4c4:	462b      	mov	r3, r5
 800a4c6:	b9aa      	cbnz	r2, 800a4f4 <scalbn+0x3c>
 800a4c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a4cc:	4323      	orrs	r3, r4
 800a4ce:	d03b      	beq.n	800a548 <scalbn+0x90>
 800a4d0:	4b31      	ldr	r3, [pc, #196]	; (800a598 <scalbn+0xe0>)
 800a4d2:	4629      	mov	r1, r5
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	ee10 0a10 	vmov	r0, s0
 800a4da:	f7f6 f845 	bl	8000568 <__aeabi_dmul>
 800a4de:	4b2f      	ldr	r3, [pc, #188]	; (800a59c <scalbn+0xe4>)
 800a4e0:	429e      	cmp	r6, r3
 800a4e2:	4604      	mov	r4, r0
 800a4e4:	460d      	mov	r5, r1
 800a4e6:	da12      	bge.n	800a50e <scalbn+0x56>
 800a4e8:	a327      	add	r3, pc, #156	; (adr r3, 800a588 <scalbn+0xd0>)
 800a4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ee:	f7f6 f83b 	bl	8000568 <__aeabi_dmul>
 800a4f2:	e009      	b.n	800a508 <scalbn+0x50>
 800a4f4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a4f8:	428a      	cmp	r2, r1
 800a4fa:	d10c      	bne.n	800a516 <scalbn+0x5e>
 800a4fc:	ee10 2a10 	vmov	r2, s0
 800a500:	4620      	mov	r0, r4
 800a502:	4629      	mov	r1, r5
 800a504:	f7f5 fe7a 	bl	80001fc <__adddf3>
 800a508:	4604      	mov	r4, r0
 800a50a:	460d      	mov	r5, r1
 800a50c:	e01c      	b.n	800a548 <scalbn+0x90>
 800a50e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a512:	460b      	mov	r3, r1
 800a514:	3a36      	subs	r2, #54	; 0x36
 800a516:	4432      	add	r2, r6
 800a518:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a51c:	428a      	cmp	r2, r1
 800a51e:	dd0b      	ble.n	800a538 <scalbn+0x80>
 800a520:	ec45 4b11 	vmov	d1, r4, r5
 800a524:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a590 <scalbn+0xd8>
 800a528:	f000 f83c 	bl	800a5a4 <copysign>
 800a52c:	a318      	add	r3, pc, #96	; (adr r3, 800a590 <scalbn+0xd8>)
 800a52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a532:	ec51 0b10 	vmov	r0, r1, d0
 800a536:	e7da      	b.n	800a4ee <scalbn+0x36>
 800a538:	2a00      	cmp	r2, #0
 800a53a:	dd08      	ble.n	800a54e <scalbn+0x96>
 800a53c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a540:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a544:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a548:	ec45 4b10 	vmov	d0, r4, r5
 800a54c:	bd70      	pop	{r4, r5, r6, pc}
 800a54e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a552:	da0d      	bge.n	800a570 <scalbn+0xb8>
 800a554:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a558:	429e      	cmp	r6, r3
 800a55a:	ec45 4b11 	vmov	d1, r4, r5
 800a55e:	dce1      	bgt.n	800a524 <scalbn+0x6c>
 800a560:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a588 <scalbn+0xd0>
 800a564:	f000 f81e 	bl	800a5a4 <copysign>
 800a568:	a307      	add	r3, pc, #28	; (adr r3, 800a588 <scalbn+0xd0>)
 800a56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56e:	e7e0      	b.n	800a532 <scalbn+0x7a>
 800a570:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a574:	3236      	adds	r2, #54	; 0x36
 800a576:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a57a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a57e:	4620      	mov	r0, r4
 800a580:	4629      	mov	r1, r5
 800a582:	2200      	movs	r2, #0
 800a584:	4b06      	ldr	r3, [pc, #24]	; (800a5a0 <scalbn+0xe8>)
 800a586:	e7b2      	b.n	800a4ee <scalbn+0x36>
 800a588:	c2f8f359 	.word	0xc2f8f359
 800a58c:	01a56e1f 	.word	0x01a56e1f
 800a590:	8800759c 	.word	0x8800759c
 800a594:	7e37e43c 	.word	0x7e37e43c
 800a598:	43500000 	.word	0x43500000
 800a59c:	ffff3cb0 	.word	0xffff3cb0
 800a5a0:	3c900000 	.word	0x3c900000

0800a5a4 <copysign>:
 800a5a4:	ec51 0b10 	vmov	r0, r1, d0
 800a5a8:	ee11 0a90 	vmov	r0, s3
 800a5ac:	ee10 2a10 	vmov	r2, s0
 800a5b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a5b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a5b8:	ea41 0300 	orr.w	r3, r1, r0
 800a5bc:	ec43 2b10 	vmov	d0, r2, r3
 800a5c0:	4770      	bx	lr
	...

0800a5c4 <_init>:
 800a5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c6:	bf00      	nop
 800a5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ca:	bc08      	pop	{r3}
 800a5cc:	469e      	mov	lr, r3
 800a5ce:	4770      	bx	lr

0800a5d0 <_fini>:
 800a5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d2:	bf00      	nop
 800a5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5d6:	bc08      	pop	{r3}
 800a5d8:	469e      	mov	lr, r3
 800a5da:	4770      	bx	lr
