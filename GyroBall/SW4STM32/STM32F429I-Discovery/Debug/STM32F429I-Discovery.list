
STM32F429I-Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ecc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001910  08002078  08002078  00012078  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003988  08003988  00013988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003990  08003990  00013990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003994  08003994  00013994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  20000000  08003998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
  8 .bss          00000194  20000028  20000028  00020028  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200001bc  200001bc  00020028  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000dbb2  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000231f  00000000  00000000  0002dc0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00005c0f  00000000  00000000  0002ff29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  00035b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  00036388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022abc  00000000  00000000  00037000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de94  00000000  00000000  00059abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1cc6  00000000  00000000  00067950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139616  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016bc  00000000  00000000  00139668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002060 	.word	0x08002060

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	08002060 	.word	0x08002060

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80004f0:	b508      	push	{r3, lr}
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80004f2:	f000 f9f5 	bl	80008e0 <LCD_IO_Init>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
  LCD_IO_WriteReg(LCD_Reg);
 80004f6:	20ca      	movs	r0, #202	; 0xca
 80004f8:	f000 fa6c 	bl	80009d4 <LCD_IO_WriteReg>
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
  LCD_IO_WriteData(RegValue);
 80004fc:	20c3      	movs	r0, #195	; 0xc3
 80004fe:	f000 fa4d 	bl	800099c <LCD_IO_WriteData>
 8000502:	2008      	movs	r0, #8
 8000504:	f000 fa4a 	bl	800099c <LCD_IO_WriteData>
 8000508:	2050      	movs	r0, #80	; 0x50
 800050a:	f000 fa47 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800050e:	20cf      	movs	r0, #207	; 0xcf
 8000510:	f000 fa60 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fa41 	bl	800099c <LCD_IO_WriteData>
 800051a:	20c1      	movs	r0, #193	; 0xc1
 800051c:	f000 fa3e 	bl	800099c <LCD_IO_WriteData>
 8000520:	2030      	movs	r0, #48	; 0x30
 8000522:	f000 fa3b 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000526:	20ed      	movs	r0, #237	; 0xed
 8000528:	f000 fa54 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800052c:	2064      	movs	r0, #100	; 0x64
 800052e:	f000 fa35 	bl	800099c <LCD_IO_WriteData>
 8000532:	2003      	movs	r0, #3
 8000534:	f000 fa32 	bl	800099c <LCD_IO_WriteData>
 8000538:	2012      	movs	r0, #18
 800053a:	f000 fa2f 	bl	800099c <LCD_IO_WriteData>
 800053e:	2081      	movs	r0, #129	; 0x81
 8000540:	f000 fa2c 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000544:	20e8      	movs	r0, #232	; 0xe8
 8000546:	f000 fa45 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800054a:	2085      	movs	r0, #133	; 0x85
 800054c:	f000 fa26 	bl	800099c <LCD_IO_WriteData>
 8000550:	2000      	movs	r0, #0
 8000552:	f000 fa23 	bl	800099c <LCD_IO_WriteData>
 8000556:	2078      	movs	r0, #120	; 0x78
 8000558:	f000 fa20 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800055c:	20cb      	movs	r0, #203	; 0xcb
 800055e:	f000 fa39 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000562:	2039      	movs	r0, #57	; 0x39
 8000564:	f000 fa1a 	bl	800099c <LCD_IO_WriteData>
 8000568:	202c      	movs	r0, #44	; 0x2c
 800056a:	f000 fa17 	bl	800099c <LCD_IO_WriteData>
 800056e:	2000      	movs	r0, #0
 8000570:	f000 fa14 	bl	800099c <LCD_IO_WriteData>
 8000574:	2034      	movs	r0, #52	; 0x34
 8000576:	f000 fa11 	bl	800099c <LCD_IO_WriteData>
 800057a:	2002      	movs	r0, #2
 800057c:	f000 fa0e 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000580:	20f7      	movs	r0, #247	; 0xf7
 8000582:	f000 fa27 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000586:	2020      	movs	r0, #32
 8000588:	f000 fa08 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800058c:	20ea      	movs	r0, #234	; 0xea
 800058e:	f000 fa21 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000592:	2000      	movs	r0, #0
 8000594:	f000 fa02 	bl	800099c <LCD_IO_WriteData>
 8000598:	2000      	movs	r0, #0
 800059a:	f000 f9ff 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800059e:	20b1      	movs	r0, #177	; 0xb1
 80005a0:	f000 fa18 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005a4:	2000      	movs	r0, #0
 80005a6:	f000 f9f9 	bl	800099c <LCD_IO_WriteData>
 80005aa:	201b      	movs	r0, #27
 80005ac:	f000 f9f6 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005b0:	20b6      	movs	r0, #182	; 0xb6
 80005b2:	f000 fa0f 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005b6:	200a      	movs	r0, #10
 80005b8:	f000 f9f0 	bl	800099c <LCD_IO_WriteData>
 80005bc:	20a2      	movs	r0, #162	; 0xa2
 80005be:	f000 f9ed 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005c2:	20c0      	movs	r0, #192	; 0xc0
 80005c4:	f000 fa06 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005c8:	2010      	movs	r0, #16
 80005ca:	f000 f9e7 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005ce:	20c1      	movs	r0, #193	; 0xc1
 80005d0:	f000 fa00 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005d4:	2010      	movs	r0, #16
 80005d6:	f000 f9e1 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005da:	20c5      	movs	r0, #197	; 0xc5
 80005dc:	f000 f9fa 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005e0:	2045      	movs	r0, #69	; 0x45
 80005e2:	f000 f9db 	bl	800099c <LCD_IO_WriteData>
 80005e6:	2015      	movs	r0, #21
 80005e8:	f000 f9d8 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005ec:	20c7      	movs	r0, #199	; 0xc7
 80005ee:	f000 f9f1 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005f2:	2090      	movs	r0, #144	; 0x90
 80005f4:	f000 f9d2 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005f8:	2036      	movs	r0, #54	; 0x36
 80005fa:	f000 f9eb 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005fe:	20c8      	movs	r0, #200	; 0xc8
 8000600:	f000 f9cc 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000604:	20f2      	movs	r0, #242	; 0xf2
 8000606:	f000 f9e5 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800060a:	2000      	movs	r0, #0
 800060c:	f000 f9c6 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000610:	20b0      	movs	r0, #176	; 0xb0
 8000612:	f000 f9df 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000616:	20c2      	movs	r0, #194	; 0xc2
 8000618:	f000 f9c0 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800061c:	20b6      	movs	r0, #182	; 0xb6
 800061e:	f000 f9d9 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000622:	200a      	movs	r0, #10
 8000624:	f000 f9ba 	bl	800099c <LCD_IO_WriteData>
 8000628:	20a7      	movs	r0, #167	; 0xa7
 800062a:	f000 f9b7 	bl	800099c <LCD_IO_WriteData>
 800062e:	2027      	movs	r0, #39	; 0x27
 8000630:	f000 f9b4 	bl	800099c <LCD_IO_WriteData>
 8000634:	2004      	movs	r0, #4
 8000636:	f000 f9b1 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800063a:	202a      	movs	r0, #42	; 0x2a
 800063c:	f000 f9ca 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000640:	2000      	movs	r0, #0
 8000642:	f000 f9ab 	bl	800099c <LCD_IO_WriteData>
 8000646:	2000      	movs	r0, #0
 8000648:	f000 f9a8 	bl	800099c <LCD_IO_WriteData>
 800064c:	2000      	movs	r0, #0
 800064e:	f000 f9a5 	bl	800099c <LCD_IO_WriteData>
 8000652:	20ef      	movs	r0, #239	; 0xef
 8000654:	f000 f9a2 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000658:	202b      	movs	r0, #43	; 0x2b
 800065a:	f000 f9bb 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800065e:	2000      	movs	r0, #0
 8000660:	f000 f99c 	bl	800099c <LCD_IO_WriteData>
 8000664:	2000      	movs	r0, #0
 8000666:	f000 f999 	bl	800099c <LCD_IO_WriteData>
 800066a:	2001      	movs	r0, #1
 800066c:	f000 f996 	bl	800099c <LCD_IO_WriteData>
 8000670:	203f      	movs	r0, #63	; 0x3f
 8000672:	f000 f993 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000676:	20f6      	movs	r0, #246	; 0xf6
 8000678:	f000 f9ac 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800067c:	2001      	movs	r0, #1
 800067e:	f000 f98d 	bl	800099c <LCD_IO_WriteData>
 8000682:	2000      	movs	r0, #0
 8000684:	f000 f98a 	bl	800099c <LCD_IO_WriteData>
 8000688:	2006      	movs	r0, #6
 800068a:	f000 f987 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800068e:	202c      	movs	r0, #44	; 0x2c
 8000690:	f000 f9a0 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_Delay(200);
 8000694:	20c8      	movs	r0, #200	; 0xc8
 8000696:	f000 f9b9 	bl	8000a0c <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 800069a:	2026      	movs	r0, #38	; 0x26
 800069c:	f000 f99a 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006a0:	2001      	movs	r0, #1
 80006a2:	f000 f97b 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006a6:	20e0      	movs	r0, #224	; 0xe0
 80006a8:	f000 f994 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006ac:	200f      	movs	r0, #15
 80006ae:	f000 f975 	bl	800099c <LCD_IO_WriteData>
 80006b2:	2029      	movs	r0, #41	; 0x29
 80006b4:	f000 f972 	bl	800099c <LCD_IO_WriteData>
 80006b8:	2024      	movs	r0, #36	; 0x24
 80006ba:	f000 f96f 	bl	800099c <LCD_IO_WriteData>
 80006be:	200c      	movs	r0, #12
 80006c0:	f000 f96c 	bl	800099c <LCD_IO_WriteData>
 80006c4:	200e      	movs	r0, #14
 80006c6:	f000 f969 	bl	800099c <LCD_IO_WriteData>
 80006ca:	2009      	movs	r0, #9
 80006cc:	f000 f966 	bl	800099c <LCD_IO_WriteData>
 80006d0:	204e      	movs	r0, #78	; 0x4e
 80006d2:	f000 f963 	bl	800099c <LCD_IO_WriteData>
 80006d6:	2078      	movs	r0, #120	; 0x78
 80006d8:	f000 f960 	bl	800099c <LCD_IO_WriteData>
 80006dc:	203c      	movs	r0, #60	; 0x3c
 80006de:	f000 f95d 	bl	800099c <LCD_IO_WriteData>
 80006e2:	2009      	movs	r0, #9
 80006e4:	f000 f95a 	bl	800099c <LCD_IO_WriteData>
 80006e8:	2013      	movs	r0, #19
 80006ea:	f000 f957 	bl	800099c <LCD_IO_WriteData>
 80006ee:	2005      	movs	r0, #5
 80006f0:	f000 f954 	bl	800099c <LCD_IO_WriteData>
 80006f4:	2017      	movs	r0, #23
 80006f6:	f000 f951 	bl	800099c <LCD_IO_WriteData>
 80006fa:	2011      	movs	r0, #17
 80006fc:	f000 f94e 	bl	800099c <LCD_IO_WriteData>
 8000700:	2000      	movs	r0, #0
 8000702:	f000 f94b 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000706:	20e1      	movs	r0, #225	; 0xe1
 8000708:	f000 f964 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800070c:	2000      	movs	r0, #0
 800070e:	f000 f945 	bl	800099c <LCD_IO_WriteData>
 8000712:	2016      	movs	r0, #22
 8000714:	f000 f942 	bl	800099c <LCD_IO_WriteData>
 8000718:	201b      	movs	r0, #27
 800071a:	f000 f93f 	bl	800099c <LCD_IO_WriteData>
 800071e:	2004      	movs	r0, #4
 8000720:	f000 f93c 	bl	800099c <LCD_IO_WriteData>
 8000724:	2011      	movs	r0, #17
 8000726:	f000 f939 	bl	800099c <LCD_IO_WriteData>
 800072a:	2007      	movs	r0, #7
 800072c:	f000 f936 	bl	800099c <LCD_IO_WriteData>
 8000730:	2031      	movs	r0, #49	; 0x31
 8000732:	f000 f933 	bl	800099c <LCD_IO_WriteData>
 8000736:	2033      	movs	r0, #51	; 0x33
 8000738:	f000 f930 	bl	800099c <LCD_IO_WriteData>
 800073c:	2042      	movs	r0, #66	; 0x42
 800073e:	f000 f92d 	bl	800099c <LCD_IO_WriteData>
 8000742:	2005      	movs	r0, #5
 8000744:	f000 f92a 	bl	800099c <LCD_IO_WriteData>
 8000748:	200c      	movs	r0, #12
 800074a:	f000 f927 	bl	800099c <LCD_IO_WriteData>
 800074e:	200a      	movs	r0, #10
 8000750:	f000 f924 	bl	800099c <LCD_IO_WriteData>
 8000754:	2028      	movs	r0, #40	; 0x28
 8000756:	f000 f921 	bl	800099c <LCD_IO_WriteData>
 800075a:	202f      	movs	r0, #47	; 0x2f
 800075c:	f000 f91e 	bl	800099c <LCD_IO_WriteData>
 8000760:	200f      	movs	r0, #15
 8000762:	f000 f91b 	bl	800099c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000766:	2011      	movs	r0, #17
 8000768:	f000 f934 	bl	80009d4 <LCD_IO_WriteReg>
  LCD_Delay(200);
 800076c:	20c8      	movs	r0, #200	; 0xc8
 800076e:	f000 f94d 	bl	8000a0c <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8000772:	2029      	movs	r0, #41	; 0x29
 8000774:	f000 f92e 	bl	80009d4 <LCD_IO_WriteReg>
}
 8000778:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 800077c:	202c      	movs	r0, #44	; 0x2c
 800077e:	f000 b929 	b.w	80009d4 <LCD_IO_WriteReg>
	...

08000784 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8000784:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000786:	4c22      	ldr	r4, [pc, #136]	; (8000810 <SPIx_Init+0x8c>)
{
 8000788:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800078a:	4620      	mov	r0, r4
 800078c:	f001 fa81 	bl	8001c92 <HAL_SPI_GetState>
 8000790:	2800      	cmp	r0, #0
 8000792:	d13b      	bne.n	800080c <SPIx_Init+0x88>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <SPIx_Init+0x90>)
 8000796:	6023      	str	r3, [r4, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000798:	2318      	movs	r3, #24
 800079a:	61e3      	str	r3, [r4, #28]
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
 800079c:	2307      	movs	r3, #7
 800079e:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80007a0:	f44f 7300 	mov.w	r3, #512	; 0x200
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80007a4:	e9c4 0004 	strd	r0, r0, [r4, #16]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80007a8:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80007aa:	f44f 7382 	mov.w	r3, #260	; 0x104
 80007ae:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <SPIx_Init+0x94>)
 80007b2:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80007b4:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80007b6:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80007b8:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80007ba:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80007bc:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 80007be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80007c4:	645a      	str	r2, [r3, #68]	; 0x44
 80007c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007c8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80007cc:	9201      	str	r2, [sp, #4]
 80007ce:	9a01      	ldr	r2, [sp, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80007d0:	9002      	str	r0, [sp, #8]
 80007d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007d4:	f042 0220 	orr.w	r2, r2, #32
 80007d8:	631a      	str	r2, [r3, #48]	; 0x30
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	f003 0320 	and.w	r3, r3, #32
 80007e0:	9302      	str	r3, [sp, #8]
 80007e2:	9b02      	ldr	r3, [sp, #8]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80007e4:	f44f 7160 	mov.w	r1, #896	; 0x380
 80007e8:	2302      	movs	r3, #2
 80007ea:	e9cd 1303 	strd	r1, r3, [sp, #12]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80007ee:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80007f0:	2001      	movs	r0, #1
 80007f2:	2305      	movs	r3, #5
 80007f4:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80007f8:	a903      	add	r1, sp, #12
 80007fa:	4808      	ldr	r0, [pc, #32]	; (800081c <SPIx_Init+0x98>)
 80007fc:	f000 f9f8 	bl	8000bf0 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 8000800:	4620      	mov	r0, r4
}
 8000802:	b008      	add	sp, #32
 8000804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_SPI_Init(&SpiHandle);
 8000808:	f001 b905 	b.w	8001a16 <HAL_SPI_Init>
}
 800080c:	b008      	add	sp, #32
 800080e:	bd10      	pop	{r4, pc}
 8000810:	20000044 	.word	0x20000044
 8000814:	40015000 	.word	0x40015000
 8000818:	40023800 	.word	0x40023800
 800081c:	40021400 	.word	0x40021400

08000820 <SPIx_Write>:
{
 8000820:	b507      	push	{r0, r1, r2, lr}
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <SPIx_Write+0x28>)
{
 8000824:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4808      	ldr	r0, [pc, #32]	; (800084c <SPIx_Write+0x2c>)
 800082c:	2201      	movs	r2, #1
 800082e:	f10d 0106 	add.w	r1, sp, #6
 8000832:	f001 f968 	bl	8001b06 <HAL_SPI_Transmit>
  if(status != HAL_OK)
 8000836:	b120      	cbz	r0, 8000842 <SPIx_Write+0x22>
  HAL_SPI_DeInit(&SpiHandle);
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <SPIx_Write+0x2c>)
 800083a:	f001 f94e 	bl	8001ada <HAL_SPI_DeInit>
  SPIx_Init();
 800083e:	f7ff ffa1 	bl	8000784 <SPIx_Init>
}
 8000842:	b003      	add	sp, #12
 8000844:	f85d fb04 	ldr.w	pc, [sp], #4
 8000848:	20000000 	.word	0x20000000
 800084c:	20000044 	.word	0x20000044

08000850 <BSP_LED_Init>:
{
 8000850:	b530      	push	{r4, r5, lr}
 8000852:	b089      	sub	sp, #36	; 0x24
  LEDx_GPIO_CLK_ENABLE(Led);
 8000854:	bb08      	cbnz	r0, 800089a <BSP_LED_Init+0x4a>
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <BSP_LED_Init+0x68>)
 8000858:	9001      	str	r0, [sp, #4]
 800085a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800085c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000860:	631a      	str	r2, [r3, #48]	; 0x30
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000868:	9301      	str	r3, [sp, #4]
 800086a:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800086c:	4c13      	ldr	r4, [pc, #76]	; (80008bc <BSP_LED_Init+0x6c>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <BSP_LED_Init+0x70>)
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000870:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000874:	f833 5010 	ldrh.w	r5, [r3, r0, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000878:	6860      	ldr	r0, [r4, #4]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800087a:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800087e:	e9cd 3304 	strd	r3, r3, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000882:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000884:	2302      	movs	r3, #2
 8000886:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000888:	f000 f9b2 	bl	8000bf0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800088c:	6860      	ldr	r0, [r4, #4]
 800088e:	2200      	movs	r2, #0
 8000890:	4629      	mov	r1, r5
 8000892:	f000 fa93 	bl	8000dbc <HAL_GPIO_WritePin>
}
 8000896:	b009      	add	sp, #36	; 0x24
 8000898:	bd30      	pop	{r4, r5, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 800089a:	2801      	cmp	r0, #1
 800089c:	d1e6      	bne.n	800086c <BSP_LED_Init+0x1c>
 800089e:	2300      	movs	r3, #0
 80008a0:	9302      	str	r3, [sp, #8]
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <BSP_LED_Init+0x68>)
 80008a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008aa:	631a      	str	r2, [r3, #48]	; 0x30
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b2:	9302      	str	r3, [sp, #8]
 80008b4:	9b02      	ldr	r3, [sp, #8]
 80008b6:	e7d9      	b.n	800086c <BSP_LED_Init+0x1c>
 80008b8:	40023800 	.word	0x40023800
 80008bc:	20000000 	.word	0x20000000
 80008c0:	08002078 	.word	0x08002078

080008c4 <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <BSP_LED_On+0x14>)
 80008c6:	4905      	ldr	r1, [pc, #20]	; (80008dc <BSP_LED_On+0x18>)
 80008c8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80008cc:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 80008d0:	6858      	ldr	r0, [r3, #4]
 80008d2:	2201      	movs	r2, #1
 80008d4:	f000 ba72 	b.w	8000dbc <HAL_GPIO_WritePin>
 80008d8:	20000000 	.word	0x20000000
 80008dc:	08002078 	.word	0x08002078

080008e0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80008e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80008e2:	4b2a      	ldr	r3, [pc, #168]	; (800098c <LCD_IO_Init+0xac>)
 80008e4:	f893 50ac 	ldrb.w	r5, [r3, #172]	; 0xac
{
 80008e8:	b089      	sub	sp, #36	; 0x24
  if(Is_LCD_IO_Initialized == 0)
 80008ea:	2d00      	cmp	r5, #0
 80008ec:	d14b      	bne.n	8000986 <LCD_IO_Init+0xa6>
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80008ee:	4c28      	ldr	r4, [pc, #160]	; (8000990 <LCD_IO_Init+0xb0>)
 80008f0:	9500      	str	r5, [sp, #0]
    Is_LCD_IO_Initialized = 1; 
 80008f2:	2601      	movs	r6, #1
 80008f4:	f883 60ac 	strb.w	r6, [r3, #172]	; 0xac
    LCD_WRX_GPIO_CLK_ENABLE();
 80008f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80008fa:	4826      	ldr	r0, [pc, #152]	; (8000994 <LCD_IO_Init+0xb4>)
    LCD_WRX_GPIO_CLK_ENABLE();
 80008fc:	f043 0308 	orr.w	r3, r3, #8
 8000900:	6323      	str	r3, [r4, #48]	; 0x30
 8000902:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000904:	9505      	str	r5, [sp, #20]
    LCD_WRX_GPIO_CLK_ENABLE();
 8000906:	f003 0308 	and.w	r3, r3, #8
 800090a:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800090c:	2702      	movs	r7, #2
    LCD_WRX_GPIO_CLK_ENABLE();
 800090e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000910:	9706      	str	r7, [sp, #24]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000916:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000918:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800091c:	f000 f968 	bl	8000bf0 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8000920:	9501      	str	r5, [sp, #4]
 8000922:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000924:	481b      	ldr	r0, [pc, #108]	; (8000994 <LCD_IO_Init+0xb4>)
    LCD_RDX_GPIO_CLK_ENABLE();
 8000926:	f043 0308 	orr.w	r3, r3, #8
 800092a:	6323      	str	r3, [r4, #48]	; 0x30
 800092c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	9301      	str	r3, [sp, #4]
 8000934:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000936:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8000938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800093c:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000940:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000944:	f000 f954 	bl	8000bf0 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000948:	9502      	str	r5, [sp, #8]
 800094a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800094c:	4812      	ldr	r0, [pc, #72]	; (8000998 <LCD_IO_Init+0xb8>)
    LCD_NCS_GPIO_CLK_ENABLE();
 800094e:	f043 0304 	orr.w	r3, r3, #4
 8000952:	6323      	str	r3, [r4, #48]	; 0x30
 8000954:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000956:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800095a:	2404      	movs	r4, #4
    LCD_NCS_GPIO_CLK_ENABLE();
 800095c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800095e:	a903      	add	r1, sp, #12
    LCD_NCS_GPIO_CLK_ENABLE();
 8000960:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000962:	e9cd 4603 	strd	r4, r6, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000966:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800096a:	f000 f941 	bl	8000bf0 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800096e:	480a      	ldr	r0, [pc, #40]	; (8000998 <LCD_IO_Init+0xb8>)
 8000970:	462a      	mov	r2, r5
 8000972:	4621      	mov	r1, r4
 8000974:	f000 fa22 	bl	8000dbc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000978:	4807      	ldr	r0, [pc, #28]	; (8000998 <LCD_IO_Init+0xb8>)
 800097a:	4632      	mov	r2, r6
 800097c:	4621      	mov	r1, r4
 800097e:	f000 fa1d 	bl	8000dbc <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8000982:	f7ff feff 	bl	8000784 <SPIx_Init>
  }
}
 8000986:	b009      	add	sp, #36	; 0x24
 8000988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800098a:	bf00      	nop
 800098c:	20000044 	.word	0x20000044
 8000990:	40023800 	.word	0x40023800
 8000994:	40020c00 	.word	0x40020c00
 8000998:	40020800 	.word	0x40020800

0800099c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 800099c:	b538      	push	{r3, r4, r5, lr}
  /* Set WRX to send data */
  LCD_WRX_HIGH();
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800099e:	4d0b      	ldr	r5, [pc, #44]	; (80009cc <LCD_IO_WriteData+0x30>)
{
 80009a0:	4604      	mov	r4, r0
  LCD_WRX_HIGH();
 80009a2:	2201      	movs	r2, #1
 80009a4:	480a      	ldr	r0, [pc, #40]	; (80009d0 <LCD_IO_WriteData+0x34>)
 80009a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009aa:	f000 fa07 	bl	8000dbc <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 80009ae:	2200      	movs	r2, #0
 80009b0:	2104      	movs	r1, #4
 80009b2:	4628      	mov	r0, r5
 80009b4:	f000 fa02 	bl	8000dbc <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80009b8:	4620      	mov	r0, r4
 80009ba:	f7ff ff31 	bl	8000820 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80009be:	4628      	mov	r0, r5
 80009c0:	2201      	movs	r2, #1
}
 80009c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 80009c6:	2104      	movs	r1, #4
 80009c8:	f000 b9f8 	b.w	8000dbc <HAL_GPIO_WritePin>
 80009cc:	40020800 	.word	0x40020800
 80009d0:	40020c00 	.word	0x40020c00

080009d4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80009d4:	b538      	push	{r3, r4, r5, lr}
  /* Reset WRX to send command */
  LCD_WRX_LOW();
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80009d6:	4d0b      	ldr	r5, [pc, #44]	; (8000a04 <LCD_IO_WriteReg+0x30>)
{
 80009d8:	4604      	mov	r4, r0
  LCD_WRX_LOW();
 80009da:	2200      	movs	r2, #0
 80009dc:	480a      	ldr	r0, [pc, #40]	; (8000a08 <LCD_IO_WriteReg+0x34>)
 80009de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e2:	f000 f9eb 	bl	8000dbc <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 80009e6:	2200      	movs	r2, #0
 80009e8:	2104      	movs	r1, #4
 80009ea:	4628      	mov	r0, r5
 80009ec:	f000 f9e6 	bl	8000dbc <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80009f0:	4620      	mov	r0, r4
 80009f2:	f7ff ff15 	bl	8000820 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80009f6:	4628      	mov	r0, r5
 80009f8:	2201      	movs	r2, #1
}
 80009fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 80009fe:	2104      	movs	r1, #4
 8000a00:	f000 b9dc 	b.w	8000dbc <HAL_GPIO_WritePin>
 8000a04:	40020800 	.word	0x40020800
 8000a08:	40020c00 	.word	0x40020c00

08000a0c <LCD_Delay>:
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8000a0c:	f000 b876 	b.w	8000afc <HAL_Delay>

08000a10 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a10:	490f      	ldr	r1, [pc, #60]	; (8000a50 <SystemInit+0x40>)
 8000a12:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000a16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <SystemInit+0x44>)
 8000a20:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a22:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000a24:	f042 0201 	orr.w	r2, r2, #1
 8000a28:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000a2a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000a32:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a36:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <SystemInit+0x48>)
 8000a3a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a42:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a44:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a4a:	608b      	str	r3, [r1, #8]
#endif
}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00
 8000a54:	40023800 	.word	0x40023800
 8000a58:	24003010 	.word	0x24003010

08000a5c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000a5c:	4770      	bx	lr
	...

08000a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a62:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <HAL_InitTick+0x3c>)
 8000a64:	4e0e      	ldr	r6, [pc, #56]	; (8000aa0 <HAL_InitTick+0x40>)
{
 8000a66:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6c:	7830      	ldrb	r0, [r6, #0]
 8000a6e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a72:	6810      	ldr	r0, [r2, #0]
 8000a74:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a78:	f000 f8a6 	bl	8000bc8 <HAL_SYSTICK_Config>
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	b950      	cbnz	r0, 8000a96 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a80:	2d0f      	cmp	r5, #15
 8000a82:	d808      	bhi.n	8000a96 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a84:	4602      	mov	r2, r0
 8000a86:	4629      	mov	r1, r5
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f000 f85c 	bl	8000b48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a90:	6075      	str	r5, [r6, #4]
 8000a92:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000a94:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000a96:	2001      	movs	r0, #1
 8000a98:	e7fc      	b.n	8000a94 <HAL_InitTick+0x34>
 8000a9a:	bf00      	nop
 8000a9c:	20000014 	.word	0x20000014
 8000aa0:	20000018 	.word	0x20000018

08000aa4 <HAL_Init>:
{
 8000aa4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <HAL_Init+0x30>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000aae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ab6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000abe:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f000 f82f 	bl	8000b24 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f7ff ffca 	bl	8000a60 <HAL_InitTick>
  HAL_MspInit();
 8000acc:	f7ff ffc6 	bl	8000a5c <HAL_MspInit>
}
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	bd08      	pop	{r3, pc}
 8000ad4:	40023c00 	.word	0x40023c00

08000ad8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ad8:	4a03      	ldr	r2, [pc, #12]	; (8000ae8 <HAL_IncTick+0x10>)
 8000ada:	4b04      	ldr	r3, [pc, #16]	; (8000aec <HAL_IncTick+0x14>)
 8000adc:	6811      	ldr	r1, [r2, #0]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	440b      	add	r3, r1
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	200000f4 	.word	0x200000f4
 8000aec:	20000018 	.word	0x20000018

08000af0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000af0:	4b01      	ldr	r3, [pc, #4]	; (8000af8 <HAL_GetTick+0x8>)
 8000af2:	6818      	ldr	r0, [r3, #0]
}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	200000f4 	.word	0x200000f4

08000afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000afc:	b538      	push	{r3, r4, r5, lr}
 8000afe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b00:	f7ff fff6 	bl	8000af0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b04:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000b06:	bf1c      	itt	ne
 8000b08:	4b05      	ldrne	r3, [pc, #20]	; (8000b20 <HAL_Delay+0x24>)
 8000b0a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000b0c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000b0e:	bf18      	it	ne
 8000b10:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b12:	f7ff ffed 	bl	8000af0 <HAL_GetTick>
 8000b16:	1b43      	subs	r3, r0, r5
 8000b18:	42a3      	cmp	r3, r4
 8000b1a:	d3fa      	bcc.n	8000b12 <HAL_Delay+0x16>
  {
  }
}
 8000b1c:	bd38      	pop	{r3, r4, r5, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000018 	.word	0x20000018

08000b24 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b24:	4907      	ldr	r1, [pc, #28]	; (8000b44 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b26:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b2c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b34:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000b40:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b4a:	b530      	push	{r4, r5, lr}
 8000b4c:	68dc      	ldr	r4, [r3, #12]
 8000b4e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b52:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	2d04      	cmp	r5, #4
 8000b5a:	bf28      	it	cs
 8000b5c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5e:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b64:	bf8c      	ite	hi
 8000b66:	3c03      	subhi	r4, #3
 8000b68:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6a:	fa03 f505 	lsl.w	r5, r3, r5
 8000b6e:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b72:	40a3      	lsls	r3, r4
 8000b74:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8000b7a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	bfac      	ite	ge
 8000b82:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b86:	4a08      	ldrlt	r2, [pc, #32]	; (8000ba8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	bfb8      	it	lt
 8000b8e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	bfaa      	itet	ge
 8000b96:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ba0:	bd30      	pop	{r4, r5, pc}
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00
 8000ba8:	e000ed14 	.word	0xe000ed14

08000bac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000bac:	2800      	cmp	r0, #0
 8000bae:	db08      	blt.n	8000bc2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb0:	0942      	lsrs	r2, r0, #5
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	f000 001f 	and.w	r0, r0, #31
 8000bb8:	fa03 f000 	lsl.w	r0, r3, r0
 8000bbc:	4b01      	ldr	r3, [pc, #4]	; (8000bc4 <HAL_NVIC_EnableIRQ+0x18>)
 8000bbe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100

08000bc8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc8:	3801      	subs	r0, #1
 8000bca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bce:	d20b      	bcs.n	8000be8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	4a05      	ldr	r2, [pc, #20]	; (8000bec <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd6:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	21f0      	movs	r1, #240	; 0xf0
 8000bda:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bde:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000be8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf4:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8000db8 <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bf8:	4a6d      	ldr	r2, [pc, #436]	; (8000db0 <HAL_GPIO_Init+0x1c0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bfa:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bfc:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8000bfe:	2401      	movs	r4, #1
 8000c00:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c02:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8000c06:	43ac      	bics	r4, r5
 8000c08:	f040 80b9 	bne.w	8000d7e <HAL_GPIO_Init+0x18e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c0c:	684d      	ldr	r5, [r1, #4]
 8000c0e:	f005 0403 	and.w	r4, r5, #3
 8000c12:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c16:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c18:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c1a:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c1e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c20:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c24:	d834      	bhi.n	8000c90 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8000c26:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c28:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c2c:	68cf      	ldr	r7, [r1, #12]
 8000c2e:	fa07 f708 	lsl.w	r7, r7, r8
 8000c32:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000c36:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c38:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c3a:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c3e:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000c42:	409f      	lsls	r7, r3
 8000c44:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000c48:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000c4a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c4c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c50:	688f      	ldr	r7, [r1, #8]
 8000c52:	fa07 f708 	lsl.w	r7, r7, r8
 8000c56:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5a:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8000c5c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5e:	d119      	bne.n	8000c94 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8000c60:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000c64:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c68:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000c6c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c70:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000c74:	f04f 0e0f 	mov.w	lr, #15
 8000c78:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000c7c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c80:	690f      	ldr	r7, [r1, #16]
 8000c82:	fa07 f70b 	lsl.w	r7, r7, fp
 8000c86:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000c8a:	f8ca 7020 	str.w	r7, [sl, #32]
 8000c8e:	e001      	b.n	8000c94 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c90:	2c03      	cmp	r4, #3
 8000c92:	d1da      	bne.n	8000c4a <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8000c94:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c96:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c9a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c9c:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c9e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8000ca2:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ca4:	d06b      	beq.n	8000d7e <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	f04f 0a00 	mov.w	sl, #0
 8000caa:	f8cd a004 	str.w	sl, [sp, #4]
 8000cae:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cb2:	4c40      	ldr	r4, [pc, #256]	; (8000db4 <HAL_GPIO_Init+0x1c4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb4:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000cb8:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8000cbc:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8000cc0:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000cc4:	9601      	str	r6, [sp, #4]
 8000cc6:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000cc8:	f023 0603 	bic.w	r6, r3, #3
 8000ccc:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000cd0:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cd4:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000cd8:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cdc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000ce0:	270f      	movs	r7, #15
 8000ce2:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ce6:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ce8:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cec:	d04e      	beq.n	8000d8c <HAL_GPIO_Init+0x19c>
 8000cee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cf2:	42a0      	cmp	r0, r4
 8000cf4:	d04c      	beq.n	8000d90 <HAL_GPIO_Init+0x1a0>
 8000cf6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cfa:	42a0      	cmp	r0, r4
 8000cfc:	d04a      	beq.n	8000d94 <HAL_GPIO_Init+0x1a4>
 8000cfe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d02:	42a0      	cmp	r0, r4
 8000d04:	d048      	beq.n	8000d98 <HAL_GPIO_Init+0x1a8>
 8000d06:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d0a:	42a0      	cmp	r0, r4
 8000d0c:	d046      	beq.n	8000d9c <HAL_GPIO_Init+0x1ac>
 8000d0e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d12:	42a0      	cmp	r0, r4
 8000d14:	d044      	beq.n	8000da0 <HAL_GPIO_Init+0x1b0>
 8000d16:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d1a:	42a0      	cmp	r0, r4
 8000d1c:	d042      	beq.n	8000da4 <HAL_GPIO_Init+0x1b4>
 8000d1e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d22:	42a0      	cmp	r0, r4
 8000d24:	d040      	beq.n	8000da8 <HAL_GPIO_Init+0x1b8>
 8000d26:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d2a:	42a0      	cmp	r0, r4
 8000d2c:	d03e      	beq.n	8000dac <HAL_GPIO_Init+0x1bc>
 8000d2e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d32:	42a0      	cmp	r0, r4
 8000d34:	bf0c      	ite	eq
 8000d36:	2409      	moveq	r4, #9
 8000d38:	240a      	movne	r4, #10
 8000d3a:	fa04 f40e 	lsl.w	r4, r4, lr
 8000d3e:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d40:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8000d42:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d44:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d48:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8000d4a:	bf54      	ite	pl
 8000d4c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000d4e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8000d52:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8000d54:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d56:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8000d58:	bf54      	ite	pl
 8000d5a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000d5c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8000d60:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8000d62:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d64:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8000d66:	bf54      	ite	pl
 8000d68:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000d6a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8000d6e:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d70:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d72:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8000d74:	bf54      	ite	pl
 8000d76:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000d78:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8000d7c:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d7e:	3301      	adds	r3, #1
 8000d80:	2b10      	cmp	r3, #16
 8000d82:	f47f af3b 	bne.w	8000bfc <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000d86:	b003      	add	sp, #12
 8000d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d8c:	4654      	mov	r4, sl
 8000d8e:	e7d4      	b.n	8000d3a <HAL_GPIO_Init+0x14a>
 8000d90:	2401      	movs	r4, #1
 8000d92:	e7d2      	b.n	8000d3a <HAL_GPIO_Init+0x14a>
 8000d94:	2402      	movs	r4, #2
 8000d96:	e7d0      	b.n	8000d3a <HAL_GPIO_Init+0x14a>
 8000d98:	2403      	movs	r4, #3
 8000d9a:	e7ce      	b.n	8000d3a <HAL_GPIO_Init+0x14a>
 8000d9c:	2404      	movs	r4, #4
 8000d9e:	e7cc      	b.n	8000d3a <HAL_GPIO_Init+0x14a>
 8000da0:	2405      	movs	r4, #5
 8000da2:	e7ca      	b.n	8000d3a <HAL_GPIO_Init+0x14a>
 8000da4:	2406      	movs	r4, #6
 8000da6:	e7c8      	b.n	8000d3a <HAL_GPIO_Init+0x14a>
 8000da8:	2407      	movs	r4, #7
 8000daa:	e7c6      	b.n	8000d3a <HAL_GPIO_Init+0x14a>
 8000dac:	2408      	movs	r4, #8
 8000dae:	e7c4      	b.n	8000d3a <HAL_GPIO_Init+0x14a>
 8000db0:	40013c00 	.word	0x40013c00
 8000db4:	40020000 	.word	0x40020000
 8000db8:	40023800 	.word	0x40023800

08000dbc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dbc:	b10a      	cbz	r2, 8000dc2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000dbe:	6181      	str	r1, [r0, #24]
  }
}
 8000dc0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000dc2:	0409      	lsls	r1, r1, #16
 8000dc4:	e7fb      	b.n	8000dbe <HAL_GPIO_WritePin+0x2>

08000dc6 <LTDC_SetConfig>:
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000dc6:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8000dc8:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000dcc:	01d2      	lsls	r2, r2, #7
 8000dce:	3284      	adds	r2, #132	; 0x84
 8000dd0:	1883      	adds	r3, r0, r2
{
 8000dd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000dd6:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000dd8:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000dda:	684c      	ldr	r4, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8000ddc:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000de0:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8000de4:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000de6:	68c5      	ldr	r5, [r0, #12]
 8000de8:	f10c 0701 	add.w	r7, ip, #1
 8000dec:	f3c5 450b 	ubfx	r5, r5, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000df0:	f3c6 460b 	ubfx	r6, r6, #16, #12
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000df4:	443d      	add	r5, r7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000df6:	4426      	add	r6, r4
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000df8:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8000dfc:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8000dfe:	68c5      	ldr	r5, [r0, #12]
 8000e00:	68ce      	ldr	r6, [r1, #12]
 8000e02:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8000e06:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8000e08:	689d      	ldr	r5, [r3, #8]
 8000e0a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8000e0e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8000e10:	68c7      	ldr	r7, [r0, #12]
 8000e12:	688d      	ldr	r5, [r1, #8]
 8000e14:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8000e18:	3501      	adds	r5, #1
 8000e1a:	443d      	add	r5, r7
 8000e1c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8000e20:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8000e22:	691d      	ldr	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8000e24:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8000e26:	f025 0507 	bic.w	r5, r5, #7
 8000e2a:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8000e2c:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8000e30:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8000e32:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8000e34:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8000e38:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8000e3c:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8000e40:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8000e44:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8000e48:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8000e4c:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8000e50:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8000e52:	695d      	ldr	r5, [r3, #20]
 8000e54:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8000e58:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8000e5a:	694d      	ldr	r5, [r1, #20]
 8000e5c:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8000e5e:	69dd      	ldr	r5, [r3, #28]
 8000e60:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8000e64:	f025 0507 	bic.w	r5, r5, #7
 8000e68:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8000e6a:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8000e6e:	433d      	orrs	r5, r7
 8000e70:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8000e72:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8000e74:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8000e76:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8000e7a:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8000e7c:	b31e      	cbz	r6, 8000ec6 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8000e7e:	2e01      	cmp	r6, #1
 8000e80:	d023      	beq.n	8000eca <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8000e82:	1eb5      	subs	r5, r6, #2
 8000e84:	2d02      	cmp	r5, #2
 8000e86:	d922      	bls.n	8000ece <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8000e88:	2e07      	cmp	r6, #7
 8000e8a:	bf0c      	ite	eq
 8000e8c:	2502      	moveq	r5, #2
 8000e8e:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8000e90:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8000e92:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
 8000e96:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8000e98:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8000e9c:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8000e9e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8000ea0:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8000ea2:	436e      	muls	r6, r5
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8000ea4:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8000ea6:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000eaa:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8000eac:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8000eae:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8000eb2:	f024 0407 	bic.w	r4, r4, #7
 8000eb6:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8000eb8:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8000eba:	5883      	ldr	r3, [r0, r2]
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	5083      	str	r3, [r0, r2]
}
 8000ec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8000ec6:	2504      	movs	r5, #4
 8000ec8:	e7e2      	b.n	8000e90 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8000eca:	2503      	movs	r5, #3
 8000ecc:	e7e0      	b.n	8000e90 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8000ece:	2502      	movs	r5, #2
 8000ed0:	e7de      	b.n	8000e90 <LTDC_SetConfig+0xca>
	...

08000ed4 <HAL_LTDC_Init>:
{
 8000ed4:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	d063      	beq.n	8000fa4 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8000edc:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8000ee0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ee4:	b91b      	cbnz	r3, 8000eee <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8000ee6:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8000eea:	f000 ffe3 	bl	8001eb4 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8000ef4:	6823      	ldr	r3, [r4, #0]
 8000ef6:	699a      	ldr	r2, [r3, #24]
 8000ef8:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8000efc:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000efe:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8000f02:	4302      	orrs	r2, r0
 8000f04:	68e0      	ldr	r0, [r4, #12]
 8000f06:	6999      	ldr	r1, [r3, #24]
 8000f08:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8000f0a:	6920      	ldr	r0, [r4, #16]
 8000f0c:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	4924      	ldr	r1, [pc, #144]	; (8000fa8 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8000f16:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8000f18:	400a      	ands	r2, r1
 8000f1a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f22:	69a0      	ldr	r0, [r4, #24]
 8000f24:	4302      	orrs	r2, r0
 8000f26:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8000f28:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8000f2a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8000f2c:	400a      	ands	r2, r1
 8000f2e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f36:	6a20      	ldr	r0, [r4, #32]
 8000f38:	4302      	orrs	r2, r0
 8000f3a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8000f3c:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8000f3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8000f40:	400a      	ands	r2, r1
 8000f42:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8000f44:	691a      	ldr	r2, [r3, #16]
 8000f46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000f4c:	4302      	orrs	r2, r0
 8000f4e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8000f50:	695a      	ldr	r2, [r3, #20]
 8000f52:	4011      	ands	r1, r2
 8000f54:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8000f56:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8000f58:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8000f5a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f5e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000f60:	430a      	orrs	r2, r1
 8000f62:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000f64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8000f66:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8000f6a:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000f6e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8000f72:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8000f74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f76:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8000f80:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f84:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8000f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f88:	f042 0206 	orr.w	r2, r2, #6
 8000f8c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8000f8e:	699a      	ldr	r2, [r3, #24]
 8000f90:	f042 0201 	orr.w	r2, r2, #1
 8000f94:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8000f96:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8000f98:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8000f9a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8000f9e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8000fa2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	e7fc      	b.n	8000fa2 <HAL_LTDC_Init+0xce>
 8000fa8:	f000f800 	.word	0xf000f800

08000fac <HAL_LTDC_ErrorCallback>:
 8000fac:	4770      	bx	lr

08000fae <HAL_LTDC_LineEventCallback>:
 8000fae:	4770      	bx	lr

08000fb0 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8000fb0:	6803      	ldr	r3, [r0, #0]
{
 8000fb2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8000fb4:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8000fb6:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8000fb8:	0772      	lsls	r2, r6, #29
{
 8000fba:	4604      	mov	r4, r0
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8000fbc:	d514      	bpl.n	8000fe8 <HAL_LTDC_IRQHandler+0x38>
 8000fbe:	0769      	lsls	r1, r5, #29
 8000fc0:	d512      	bpl.n	8000fe8 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8000fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fc4:	f022 0204 	bic.w	r2, r2, #4
 8000fc8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8000fca:	2204      	movs	r2, #4
 8000fcc:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8000fce:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8000fda:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8000fdc:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8000fe0:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8000fe4:	f7ff ffe2 	bl	8000fac <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8000fe8:	07b2      	lsls	r2, r6, #30
 8000fea:	d516      	bpl.n	800101a <HAL_LTDC_IRQHandler+0x6a>
 8000fec:	07ab      	lsls	r3, r5, #30
 8000fee:	d514      	bpl.n	800101a <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8000ff0:	6823      	ldr	r3, [r4, #0]
 8000ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ff4:	f022 0202 	bic.w	r2, r2, #2
 8000ff8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8000ffe:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8001002:	4313      	orrs	r3, r2
 8001004:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001008:	2304      	movs	r3, #4
 800100a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800100e:	2300      	movs	r3, #0
 8001010:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8001014:	4620      	mov	r0, r4
 8001016:	f7ff ffc9 	bl	8000fac <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800101a:	07f0      	lsls	r0, r6, #31
 800101c:	d510      	bpl.n	8001040 <HAL_LTDC_IRQHandler+0x90>
 800101e:	07e9      	lsls	r1, r5, #31
 8001020:	d50e      	bpl.n	8001040 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001022:	6823      	ldr	r3, [r4, #0]
 8001024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001026:	f022 0201 	bic.w	r2, r2, #1
 800102a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800102c:	2201      	movs	r2, #1
 800102e:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8001030:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8001032:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001036:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800103a:	4620      	mov	r0, r4
 800103c:	f7ff ffb7 	bl	8000fae <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8001040:	0732      	lsls	r2, r6, #28
 8001042:	d511      	bpl.n	8001068 <HAL_LTDC_IRQHandler+0xb8>
 8001044:	072b      	lsls	r3, r5, #28
 8001046:	d50f      	bpl.n	8001068 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001048:	6823      	ldr	r3, [r4, #0]
 800104a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800104c:	f022 0208 	bic.w	r2, r2, #8
 8001050:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8001052:	2208      	movs	r2, #8
 8001054:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8001056:	2301      	movs	r3, #1
 8001058:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800105c:	2300      	movs	r3, #0
 800105e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8001062:	4620      	mov	r0, r4
 8001064:	f000 ff1e 	bl	8001ea4 <HAL_LTDC_ReloadEventCallback>
}
 8001068:	bd70      	pop	{r4, r5, r6, pc}

0800106a <HAL_LTDC_ConfigLayer>:
{
 800106a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800106e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001072:	2b01      	cmp	r3, #1
{
 8001074:	4606      	mov	r6, r0
 8001076:	460f      	mov	r7, r1
 8001078:	4694      	mov	ip, r2
 800107a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 800107e:	d01f      	beq.n	80010c0 <HAL_LTDC_ConfigLayer+0x56>
 8001080:	f04f 0801 	mov.w	r8, #1
 8001084:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001088:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800108c:	2434      	movs	r4, #52	; 0x34
 800108e:	460d      	mov	r5, r1
 8001090:	fb04 6402 	mla	r4, r4, r2, r6
 8001094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001096:	3438      	adds	r4, #56	; 0x38
 8001098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800109a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800109e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a2:	682b      	ldr	r3, [r5, #0]
 80010a4:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80010a6:	4630      	mov	r0, r6
 80010a8:	4662      	mov	r2, ip
 80010aa:	4639      	mov	r1, r7
 80010ac:	f7ff fe8b 	bl	8000dc6 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80010b0:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80010b2:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80010b4:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80010b8:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80010bc:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 80010c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080010c4 <HAL_LTDC_Reload>:
  __HAL_LOCK(hltdc);
 80010c4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	f04f 0302 	mov.w	r3, #2
 80010ce:	d00d      	beq.n	80010ec <HAL_LTDC_Reload+0x28>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80010d0:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 80010d4:	6803      	ldr	r3, [r0, #0]
 80010d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d8:	f042 0208 	orr.w	r2, r2, #8
 80010dc:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->Instance->SRCR = ReloadType;
 80010de:	6259      	str	r1, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80010e0:	2301      	movs	r3, #1
 80010e2:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80010e6:	2300      	movs	r3, #0
 80010e8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80010ec:	4618      	mov	r0, r3
}
 80010ee:	4770      	bx	lr

080010f0 <HAL_LTDC_SetWindowPosition_NoReload>:
{
 80010f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80010f4:	f890 50a0 	ldrb.w	r5, [r0, #160]	; 0xa0
 80010f8:	2d01      	cmp	r5, #1
{
 80010fa:	4604      	mov	r4, r0
 80010fc:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hltdc);
 8001100:	d01d      	beq.n	800113e <HAL_LTDC_SetWindowPosition_NoReload+0x4e>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001102:	f880 50a1 	strb.w	r5, [r0, #161]	; 0xa1
  pLayerCfg->WindowX0 = X0;
 8001106:	2534      	movs	r5, #52	; 0x34
 8001108:	435d      	muls	r5, r3
 800110a:	1946      	adds	r6, r0, r5
  __HAL_LOCK(hltdc);
 800110c:	f04f 0801 	mov.w	r8, #1
 8001110:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8001114:	6e37      	ldr	r7, [r6, #96]	; 0x60
  pLayerCfg->WindowX0 = X0;
 8001116:	63b1      	str	r1, [r6, #56]	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8001118:	4439      	add	r1, r7
  pLayerCfg->WindowY0 = Y0;
 800111a:	e9c6 120f 	strd	r1, r2, [r6, #60]	; 0x3c
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 800111e:	6e71      	ldr	r1, [r6, #100]	; 0x64
 8001120:	440a      	add	r2, r1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8001122:	f105 0138 	add.w	r1, r5, #56	; 0x38
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8001126:	6472      	str	r2, [r6, #68]	; 0x44
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001128:	4401      	add	r1, r0
 800112a:	461a      	mov	r2, r3
 800112c:	f7ff fe4b 	bl	8000dc6 <LTDC_SetConfig>
  __HAL_UNLOCK(hltdc);
 8001130:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8001132:	f884 80a1 	strb.w	r8, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001136:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 800113a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 800113e:	4628      	mov	r0, r5
 8001140:	e7fb      	b.n	800113a <HAL_LTDC_SetWindowPosition_NoReload+0x4a>
	...

08001144 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001144:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800114c:	4d18      	ldr	r5, [pc, #96]	; (80011b0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001150:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001154:	641a      	str	r2, [r3, #64]	; 0x40
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <HAL_PWREx_EnableOverDrive+0x70>)
 8001162:	2201      	movs	r2, #1
 8001164:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001166:	f7ff fcc3 	bl	8000af0 <HAL_GetTick>
 800116a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800116c:	686b      	ldr	r3, [r5, #4]
 800116e:	03da      	lsls	r2, r3, #15
 8001170:	d50b      	bpl.n	800118a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001174:	4d0e      	ldr	r5, [pc, #56]	; (80011b0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001176:	2201      	movs	r2, #1
 8001178:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 800117a:	f7ff fcb9 	bl	8000af0 <HAL_GetTick>
 800117e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001180:	686b      	ldr	r3, [r5, #4]
 8001182:	039b      	lsls	r3, r3, #14
 8001184:	d50a      	bpl.n	800119c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001186:	2000      	movs	r0, #0
 8001188:	e006      	b.n	8001198 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800118a:	f7ff fcb1 	bl	8000af0 <HAL_GetTick>
 800118e:	1b00      	subs	r0, r0, r4
 8001190:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001194:	d9ea      	bls.n	800116c <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8001196:	2003      	movs	r0, #3
}
 8001198:	b003      	add	sp, #12
 800119a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800119c:	f7ff fca8 	bl	8000af0 <HAL_GetTick>
 80011a0:	1b00      	subs	r0, r0, r4
 80011a2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80011a6:	d9eb      	bls.n	8001180 <HAL_PWREx_EnableOverDrive+0x3c>
 80011a8:	e7f5      	b.n	8001196 <HAL_PWREx_EnableOverDrive+0x52>
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40007000 	.word	0x40007000
 80011b4:	420e0000 	.word	0x420e0000

080011b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011bc:	4604      	mov	r4, r0
 80011be:	b340      	cbz	r0, 8001212 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c0:	6803      	ldr	r3, [r0, #0]
 80011c2:	07dd      	lsls	r5, r3, #31
 80011c4:	d410      	bmi.n	80011e8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c6:	6823      	ldr	r3, [r4, #0]
 80011c8:	0798      	lsls	r0, r3, #30
 80011ca:	d45e      	bmi.n	800128a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	071a      	lsls	r2, r3, #28
 80011d0:	f100 80a0 	bmi.w	8001314 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011d4:	6823      	ldr	r3, [r4, #0]
 80011d6:	075b      	lsls	r3, r3, #29
 80011d8:	f100 80c0 	bmi.w	800135c <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011dc:	69a0      	ldr	r0, [r4, #24]
 80011de:	2800      	cmp	r0, #0
 80011e0:	f040 8128 	bne.w	8001434 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80011e4:	2000      	movs	r0, #0
 80011e6:	e02b      	b.n	8001240 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011e8:	4b8f      	ldr	r3, [pc, #572]	; (8001428 <HAL_RCC_OscConfig+0x270>)
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	f002 020c 	and.w	r2, r2, #12
 80011f0:	2a04      	cmp	r2, #4
 80011f2:	d007      	beq.n	8001204 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011fa:	2a08      	cmp	r2, #8
 80011fc:	d10b      	bne.n	8001216 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	0251      	lsls	r1, r2, #9
 8001202:	d508      	bpl.n	8001216 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	4b88      	ldr	r3, [pc, #544]	; (8001428 <HAL_RCC_OscConfig+0x270>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	039a      	lsls	r2, r3, #14
 800120a:	d5dc      	bpl.n	80011c6 <HAL_RCC_OscConfig+0xe>
 800120c:	6863      	ldr	r3, [r4, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1d9      	bne.n	80011c6 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001212:	2001      	movs	r0, #1
 8001214:	e014      	b.n	8001240 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001216:	6862      	ldr	r2, [r4, #4]
 8001218:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800121c:	d113      	bne.n	8001246 <HAL_RCC_OscConfig+0x8e>
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001224:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001226:	f7ff fc63 	bl	8000af0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122a:	4e7f      	ldr	r6, [pc, #508]	; (8001428 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800122c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122e:	6833      	ldr	r3, [r6, #0]
 8001230:	039b      	lsls	r3, r3, #14
 8001232:	d4c8      	bmi.n	80011c6 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001234:	f7ff fc5c 	bl	8000af0 <HAL_GetTick>
 8001238:	1b40      	subs	r0, r0, r5
 800123a:	2864      	cmp	r0, #100	; 0x64
 800123c:	d9f7      	bls.n	800122e <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800123e:	2003      	movs	r0, #3
}
 8001240:	b002      	add	sp, #8
 8001242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001246:	4d78      	ldr	r5, [pc, #480]	; (8001428 <HAL_RCC_OscConfig+0x270>)
 8001248:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800124c:	682b      	ldr	r3, [r5, #0]
 800124e:	d107      	bne.n	8001260 <HAL_RCC_OscConfig+0xa8>
 8001250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001254:	602b      	str	r3, [r5, #0]
 8001256:	682b      	ldr	r3, [r5, #0]
 8001258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800125e:	e7e2      	b.n	8001226 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001264:	602b      	str	r3, [r5, #0]
 8001266:	682b      	ldr	r3, [r5, #0]
 8001268:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800126c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800126e:	2a00      	cmp	r2, #0
 8001270:	d1d9      	bne.n	8001226 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8001272:	f7ff fc3d 	bl	8000af0 <HAL_GetTick>
 8001276:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001278:	682b      	ldr	r3, [r5, #0]
 800127a:	039f      	lsls	r7, r3, #14
 800127c:	d5a3      	bpl.n	80011c6 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800127e:	f7ff fc37 	bl	8000af0 <HAL_GetTick>
 8001282:	1b80      	subs	r0, r0, r6
 8001284:	2864      	cmp	r0, #100	; 0x64
 8001286:	d9f7      	bls.n	8001278 <HAL_RCC_OscConfig+0xc0>
 8001288:	e7d9      	b.n	800123e <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800128a:	4b67      	ldr	r3, [pc, #412]	; (8001428 <HAL_RCC_OscConfig+0x270>)
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	f012 0f0c 	tst.w	r2, #12
 8001292:	d007      	beq.n	80012a4 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800129a:	2a08      	cmp	r2, #8
 800129c:	d111      	bne.n	80012c2 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	025e      	lsls	r6, r3, #9
 80012a2:	d40e      	bmi.n	80012c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a4:	4a60      	ldr	r2, [pc, #384]	; (8001428 <HAL_RCC_OscConfig+0x270>)
 80012a6:	6813      	ldr	r3, [r2, #0]
 80012a8:	079d      	lsls	r5, r3, #30
 80012aa:	d502      	bpl.n	80012b2 <HAL_RCC_OscConfig+0xfa>
 80012ac:	68e3      	ldr	r3, [r4, #12]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d1af      	bne.n	8001212 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b2:	6813      	ldr	r3, [r2, #0]
 80012b4:	6921      	ldr	r1, [r4, #16]
 80012b6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012be:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c0:	e784      	b.n	80011cc <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012c2:	68e2      	ldr	r2, [r4, #12]
 80012c4:	4b59      	ldr	r3, [pc, #356]	; (800142c <HAL_RCC_OscConfig+0x274>)
 80012c6:	b1b2      	cbz	r2, 80012f6 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 80012c8:	2201      	movs	r2, #1
 80012ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012cc:	f7ff fc10 	bl	8000af0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d0:	4d55      	ldr	r5, [pc, #340]	; (8001428 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80012d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d4:	682b      	ldr	r3, [r5, #0]
 80012d6:	0798      	lsls	r0, r3, #30
 80012d8:	d507      	bpl.n	80012ea <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012da:	682b      	ldr	r3, [r5, #0]
 80012dc:	6922      	ldr	r2, [r4, #16]
 80012de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012e2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012e6:	602b      	str	r3, [r5, #0]
 80012e8:	e770      	b.n	80011cc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ea:	f7ff fc01 	bl	8000af0 <HAL_GetTick>
 80012ee:	1b80      	subs	r0, r0, r6
 80012f0:	2802      	cmp	r0, #2
 80012f2:	d9ef      	bls.n	80012d4 <HAL_RCC_OscConfig+0x11c>
 80012f4:	e7a3      	b.n	800123e <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80012f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012f8:	f7ff fbfa 	bl	8000af0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fc:	4e4a      	ldr	r6, [pc, #296]	; (8001428 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80012fe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001300:	6833      	ldr	r3, [r6, #0]
 8001302:	0799      	lsls	r1, r3, #30
 8001304:	f57f af62 	bpl.w	80011cc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001308:	f7ff fbf2 	bl	8000af0 <HAL_GetTick>
 800130c:	1b40      	subs	r0, r0, r5
 800130e:	2802      	cmp	r0, #2
 8001310:	d9f6      	bls.n	8001300 <HAL_RCC_OscConfig+0x148>
 8001312:	e794      	b.n	800123e <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001314:	6962      	ldr	r2, [r4, #20]
 8001316:	4b45      	ldr	r3, [pc, #276]	; (800142c <HAL_RCC_OscConfig+0x274>)
 8001318:	b182      	cbz	r2, 800133c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 800131a:	2201      	movs	r2, #1
 800131c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001320:	f7ff fbe6 	bl	8000af0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001324:	4e40      	ldr	r6, [pc, #256]	; (8001428 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001326:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001328:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800132a:	079f      	lsls	r7, r3, #30
 800132c:	f53f af52 	bmi.w	80011d4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001330:	f7ff fbde 	bl	8000af0 <HAL_GetTick>
 8001334:	1b40      	subs	r0, r0, r5
 8001336:	2802      	cmp	r0, #2
 8001338:	d9f6      	bls.n	8001328 <HAL_RCC_OscConfig+0x170>
 800133a:	e780      	b.n	800123e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 800133c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001340:	f7ff fbd6 	bl	8000af0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001344:	4e38      	ldr	r6, [pc, #224]	; (8001428 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001346:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001348:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800134a:	0798      	lsls	r0, r3, #30
 800134c:	f57f af42 	bpl.w	80011d4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001350:	f7ff fbce 	bl	8000af0 <HAL_GetTick>
 8001354:	1b40      	subs	r0, r0, r5
 8001356:	2802      	cmp	r0, #2
 8001358:	d9f6      	bls.n	8001348 <HAL_RCC_OscConfig+0x190>
 800135a:	e770      	b.n	800123e <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800135c:	4b32      	ldr	r3, [pc, #200]	; (8001428 <HAL_RCC_OscConfig+0x270>)
 800135e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001360:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001364:	d128      	bne.n	80013b8 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	9201      	str	r2, [sp, #4]
 8001368:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800136a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800136e:	641a      	str	r2, [r3, #64]	; 0x40
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800137a:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137c:	4d2c      	ldr	r5, [pc, #176]	; (8001430 <HAL_RCC_OscConfig+0x278>)
 800137e:	682b      	ldr	r3, [r5, #0]
 8001380:	05d9      	lsls	r1, r3, #23
 8001382:	d51b      	bpl.n	80013bc <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001384:	68a3      	ldr	r3, [r4, #8]
 8001386:	4d28      	ldr	r5, [pc, #160]	; (8001428 <HAL_RCC_OscConfig+0x270>)
 8001388:	2b01      	cmp	r3, #1
 800138a:	d127      	bne.n	80013dc <HAL_RCC_OscConfig+0x224>
 800138c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001394:	f7ff fbac 	bl	8000af0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001398:	4e23      	ldr	r6, [pc, #140]	; (8001428 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 800139a:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800139c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80013a2:	079b      	lsls	r3, r3, #30
 80013a4:	d539      	bpl.n	800141a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80013a6:	2f00      	cmp	r7, #0
 80013a8:	f43f af18 	beq.w	80011dc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ac:	4a1e      	ldr	r2, [pc, #120]	; (8001428 <HAL_RCC_OscConfig+0x270>)
 80013ae:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013b4:	6413      	str	r3, [r2, #64]	; 0x40
 80013b6:	e711      	b.n	80011dc <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80013b8:	2700      	movs	r7, #0
 80013ba:	e7df      	b.n	800137c <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013bc:	682b      	ldr	r3, [r5, #0]
 80013be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80013c4:	f7ff fb94 	bl	8000af0 <HAL_GetTick>
 80013c8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ca:	682b      	ldr	r3, [r5, #0]
 80013cc:	05da      	lsls	r2, r3, #23
 80013ce:	d4d9      	bmi.n	8001384 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013d0:	f7ff fb8e 	bl	8000af0 <HAL_GetTick>
 80013d4:	1b80      	subs	r0, r0, r6
 80013d6:	2802      	cmp	r0, #2
 80013d8:	d9f7      	bls.n	80013ca <HAL_RCC_OscConfig+0x212>
 80013da:	e730      	b.n	800123e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013dc:	2b05      	cmp	r3, #5
 80013de:	d104      	bne.n	80013ea <HAL_RCC_OscConfig+0x232>
 80013e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	672b      	str	r3, [r5, #112]	; 0x70
 80013e8:	e7d0      	b.n	800138c <HAL_RCC_OscConfig+0x1d4>
 80013ea:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80013ec:	f022 0201 	bic.w	r2, r2, #1
 80013f0:	672a      	str	r2, [r5, #112]	; 0x70
 80013f2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80013f4:	f022 0204 	bic.w	r2, r2, #4
 80013f8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1ca      	bne.n	8001394 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 80013fe:	f7ff fb77 	bl	8000af0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001402:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001406:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001408:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800140a:	0798      	lsls	r0, r3, #30
 800140c:	d5cb      	bpl.n	80013a6 <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800140e:	f7ff fb6f 	bl	8000af0 <HAL_GetTick>
 8001412:	1b80      	subs	r0, r0, r6
 8001414:	4540      	cmp	r0, r8
 8001416:	d9f7      	bls.n	8001408 <HAL_RCC_OscConfig+0x250>
 8001418:	e711      	b.n	800123e <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800141a:	f7ff fb69 	bl	8000af0 <HAL_GetTick>
 800141e:	1b40      	subs	r0, r0, r5
 8001420:	4540      	cmp	r0, r8
 8001422:	d9bd      	bls.n	80013a0 <HAL_RCC_OscConfig+0x1e8>
 8001424:	e70b      	b.n	800123e <HAL_RCC_OscConfig+0x86>
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800
 800142c:	42470000 	.word	0x42470000
 8001430:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001434:	4d36      	ldr	r5, [pc, #216]	; (8001510 <HAL_RCC_OscConfig+0x358>)
 8001436:	68ab      	ldr	r3, [r5, #8]
 8001438:	f003 030c 	and.w	r3, r3, #12
 800143c:	2b08      	cmp	r3, #8
 800143e:	d03d      	beq.n	80014bc <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001440:	4b34      	ldr	r3, [pc, #208]	; (8001514 <HAL_RCC_OscConfig+0x35c>)
 8001442:	2200      	movs	r2, #0
 8001444:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001446:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001448:	d12b      	bne.n	80014a2 <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 800144a:	f7ff fb51 	bl	8000af0 <HAL_GetTick>
 800144e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001450:	682b      	ldr	r3, [r5, #0]
 8001452:	0199      	lsls	r1, r3, #6
 8001454:	d41f      	bmi.n	8001496 <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001456:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800145a:	4313      	orrs	r3, r2
 800145c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800145e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001462:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001464:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001468:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800146a:	0852      	lsrs	r2, r2, #1
 800146c:	3a01      	subs	r2, #1
 800146e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001472:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001474:	4b27      	ldr	r3, [pc, #156]	; (8001514 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001476:	4d26      	ldr	r5, [pc, #152]	; (8001510 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8001478:	2201      	movs	r2, #1
 800147a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800147c:	f7ff fb38 	bl	8000af0 <HAL_GetTick>
 8001480:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001482:	682b      	ldr	r3, [r5, #0]
 8001484:	019a      	lsls	r2, r3, #6
 8001486:	f53f aead 	bmi.w	80011e4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800148a:	f7ff fb31 	bl	8000af0 <HAL_GetTick>
 800148e:	1b00      	subs	r0, r0, r4
 8001490:	2802      	cmp	r0, #2
 8001492:	d9f6      	bls.n	8001482 <HAL_RCC_OscConfig+0x2ca>
 8001494:	e6d3      	b.n	800123e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001496:	f7ff fb2b 	bl	8000af0 <HAL_GetTick>
 800149a:	1b80      	subs	r0, r0, r6
 800149c:	2802      	cmp	r0, #2
 800149e:	d9d7      	bls.n	8001450 <HAL_RCC_OscConfig+0x298>
 80014a0:	e6cd      	b.n	800123e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80014a2:	f7ff fb25 	bl	8000af0 <HAL_GetTick>
 80014a6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a8:	682b      	ldr	r3, [r5, #0]
 80014aa:	019b      	lsls	r3, r3, #6
 80014ac:	f57f ae9a 	bpl.w	80011e4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b0:	f7ff fb1e 	bl	8000af0 <HAL_GetTick>
 80014b4:	1b00      	subs	r0, r0, r4
 80014b6:	2802      	cmp	r0, #2
 80014b8:	d9f6      	bls.n	80014a8 <HAL_RCC_OscConfig+0x2f0>
 80014ba:	e6c0      	b.n	800123e <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014bc:	2801      	cmp	r0, #1
 80014be:	f43f aebf 	beq.w	8001240 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 80014c2:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014c4:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c6:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ca:	4291      	cmp	r1, r2
 80014cc:	f47f aea1 	bne.w	8001212 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d0:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d6:	428a      	cmp	r2, r1
 80014d8:	f47f ae9b 	bne.w	8001212 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014de:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80014e2:	401a      	ands	r2, r3
 80014e4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80014e8:	f47f ae93 	bne.w	8001212 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014ee:	0852      	lsrs	r2, r2, #1
 80014f0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80014f4:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014f6:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80014fa:	f47f ae8a 	bne.w	8001212 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001500:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001504:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001508:	f43f ae6c 	beq.w	80011e4 <HAL_RCC_OscConfig+0x2c>
 800150c:	e681      	b.n	8001212 <HAL_RCC_OscConfig+0x5a>
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	42470000 	.word	0x42470000

08001518 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001518:	4913      	ldr	r1, [pc, #76]	; (8001568 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800151a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800151c:	688b      	ldr	r3, [r1, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b04      	cmp	r3, #4
 8001524:	d01c      	beq.n	8001560 <HAL_RCC_GetSysClockFreq+0x48>
 8001526:	2b08      	cmp	r3, #8
 8001528:	d11c      	bne.n	8001564 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800152a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800152c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800152e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001530:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001534:	bf14      	ite	ne
 8001536:	480d      	ldrne	r0, [pc, #52]	; (800156c <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001538:	480d      	ldreq	r0, [pc, #52]	; (8001570 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800153a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800153e:	bf18      	it	ne
 8001540:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001542:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001546:	fba1 0100 	umull	r0, r1, r1, r0
 800154a:	f7fe fe4f 	bl	80001ec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_RCC_GetSysClockFreq+0x50>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001556:	3301      	adds	r3, #1
 8001558:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800155a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800155e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <HAL_RCC_GetSysClockFreq+0x54>)
 8001562:	e7fc      	b.n	800155e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001566:	e7fa      	b.n	800155e <HAL_RCC_GetSysClockFreq+0x46>
 8001568:	40023800 	.word	0x40023800
 800156c:	007a1200 	.word	0x007a1200
 8001570:	00f42400 	.word	0x00f42400

08001574 <HAL_RCC_ClockConfig>:
{
 8001574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001578:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800157a:	4604      	mov	r4, r0
 800157c:	b910      	cbnz	r0, 8001584 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800157e:	2001      	movs	r0, #1
}
 8001580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001584:	4b44      	ldr	r3, [pc, #272]	; (8001698 <HAL_RCC_ClockConfig+0x124>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	f002 020f 	and.w	r2, r2, #15
 800158c:	428a      	cmp	r2, r1
 800158e:	d328      	bcc.n	80015e2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001590:	6822      	ldr	r2, [r4, #0]
 8001592:	0797      	lsls	r7, r2, #30
 8001594:	d42d      	bmi.n	80015f2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001596:	07d0      	lsls	r0, r2, #31
 8001598:	d441      	bmi.n	800161e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800159a:	4b3f      	ldr	r3, [pc, #252]	; (8001698 <HAL_RCC_ClockConfig+0x124>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	f002 020f 	and.w	r2, r2, #15
 80015a2:	42aa      	cmp	r2, r5
 80015a4:	d866      	bhi.n	8001674 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a6:	6822      	ldr	r2, [r4, #0]
 80015a8:	0751      	lsls	r1, r2, #29
 80015aa:	d46c      	bmi.n	8001686 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ac:	0713      	lsls	r3, r2, #28
 80015ae:	d507      	bpl.n	80015c0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015b0:	4a3a      	ldr	r2, [pc, #232]	; (800169c <HAL_RCC_ClockConfig+0x128>)
 80015b2:	6921      	ldr	r1, [r4, #16]
 80015b4:	6893      	ldr	r3, [r2, #8]
 80015b6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80015ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80015be:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015c0:	f7ff ffaa 	bl	8001518 <HAL_RCC_GetSysClockFreq>
 80015c4:	4b35      	ldr	r3, [pc, #212]	; (800169c <HAL_RCC_ClockConfig+0x128>)
 80015c6:	4a36      	ldr	r2, [pc, #216]	; (80016a0 <HAL_RCC_ClockConfig+0x12c>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015ce:	5cd3      	ldrb	r3, [r2, r3]
 80015d0:	40d8      	lsrs	r0, r3
 80015d2:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <HAL_RCC_ClockConfig+0x130>)
 80015d4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80015d6:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <HAL_RCC_ClockConfig+0x134>)
 80015d8:	6818      	ldr	r0, [r3, #0]
 80015da:	f7ff fa41 	bl	8000a60 <HAL_InitTick>
  return HAL_OK;
 80015de:	2000      	movs	r0, #0
 80015e0:	e7ce      	b.n	8001580 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e2:	b2ca      	uxtb	r2, r1
 80015e4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 030f 	and.w	r3, r3, #15
 80015ec:	428b      	cmp	r3, r1
 80015ee:	d1c6      	bne.n	800157e <HAL_RCC_ClockConfig+0xa>
 80015f0:	e7ce      	b.n	8001590 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f2:	4b2a      	ldr	r3, [pc, #168]	; (800169c <HAL_RCC_ClockConfig+0x128>)
 80015f4:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f8:	bf1e      	ittt	ne
 80015fa:	6899      	ldrne	r1, [r3, #8]
 80015fc:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8001600:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001602:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001604:	bf42      	ittt	mi
 8001606:	6899      	ldrmi	r1, [r3, #8]
 8001608:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 800160c:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800160e:	4923      	ldr	r1, [pc, #140]	; (800169c <HAL_RCC_ClockConfig+0x128>)
 8001610:	68a0      	ldr	r0, [r4, #8]
 8001612:	688b      	ldr	r3, [r1, #8]
 8001614:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001618:	4303      	orrs	r3, r0
 800161a:	608b      	str	r3, [r1, #8]
 800161c:	e7bb      	b.n	8001596 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161e:	6862      	ldr	r2, [r4, #4]
 8001620:	4b1e      	ldr	r3, [pc, #120]	; (800169c <HAL_RCC_ClockConfig+0x128>)
 8001622:	2a01      	cmp	r2, #1
 8001624:	d11c      	bne.n	8001660 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162c:	d0a7      	beq.n	800157e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800162e:	4e1b      	ldr	r6, [pc, #108]	; (800169c <HAL_RCC_ClockConfig+0x128>)
 8001630:	68b3      	ldr	r3, [r6, #8]
 8001632:	f023 0303 	bic.w	r3, r3, #3
 8001636:	4313      	orrs	r3, r2
 8001638:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800163a:	f7ff fa59 	bl	8000af0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800163e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001642:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001644:	68b3      	ldr	r3, [r6, #8]
 8001646:	6862      	ldr	r2, [r4, #4]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001650:	d0a3      	beq.n	800159a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001652:	f7ff fa4d 	bl	8000af0 <HAL_GetTick>
 8001656:	1bc0      	subs	r0, r0, r7
 8001658:	4540      	cmp	r0, r8
 800165a:	d9f3      	bls.n	8001644 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 800165c:	2003      	movs	r0, #3
 800165e:	e78f      	b.n	8001580 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001660:	1e91      	subs	r1, r2, #2
 8001662:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001664:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001666:	d802      	bhi.n	800166e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001668:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800166c:	e7de      	b.n	800162c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166e:	f013 0f02 	tst.w	r3, #2
 8001672:	e7db      	b.n	800162c <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001674:	b2ea      	uxtb	r2, r5
 8001676:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	42ab      	cmp	r3, r5
 8001680:	f47f af7d 	bne.w	800157e <HAL_RCC_ClockConfig+0xa>
 8001684:	e78f      	b.n	80015a6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001686:	4905      	ldr	r1, [pc, #20]	; (800169c <HAL_RCC_ClockConfig+0x128>)
 8001688:	68e0      	ldr	r0, [r4, #12]
 800168a:	688b      	ldr	r3, [r1, #8]
 800168c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001690:	4303      	orrs	r3, r0
 8001692:	608b      	str	r3, [r1, #8]
 8001694:	e78a      	b.n	80015ac <HAL_RCC_ClockConfig+0x38>
 8001696:	bf00      	nop
 8001698:	40023c00 	.word	0x40023c00
 800169c:	40023800 	.word	0x40023800
 80016a0:	08002080 	.word	0x08002080
 80016a4:	20000014 	.word	0x20000014
 80016a8:	2000001c 	.word	0x2000001c

080016ac <HAL_RCCEx_PeriphCLKConfig>:
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80016ac:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80016ae:	f013 0f43 	tst.w	r3, #67	; 0x43
{
 80016b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016b4:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80016b6:	f040 808c 	bne.w	80017d2 <HAL_RCCEx_PeriphCLKConfig+0x126>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80016ba:	6823      	ldr	r3, [r4, #0]
 80016bc:	f013 0f0c 	tst.w	r3, #12
 80016c0:	d045      	beq.n	800174e <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80016c2:	4b8b      	ldr	r3, [pc, #556]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80016c4:	4d8b      	ldr	r5, [pc, #556]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    __HAL_RCC_PLLSAI_DISABLE();
 80016c6:	2200      	movs	r2, #0
 80016c8:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 80016ca:	f7ff fa11 	bl	8000af0 <HAL_GetTick>
 80016ce:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80016d0:	682b      	ldr	r3, [r5, #0]
 80016d2:	009f      	lsls	r7, r3, #2
 80016d4:	f100 80cf 	bmi.w	8001876 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80016d8:	6821      	ldr	r1, [r4, #0]
 80016da:	074e      	lsls	r6, r1, #29
 80016dc:	d515      	bpl.n	800170a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80016de:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80016e2:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80016e6:	061b      	lsls	r3, r3, #24
 80016e8:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80016ec:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80016f0:	4313      	orrs	r3, r2
 80016f2:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80016f6:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80016fa:	6a22      	ldr	r2, [r4, #32]
 80016fc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001700:	3a01      	subs	r2, #1
 8001702:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001706:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800170a:	070d      	lsls	r5, r1, #28
 800170c:	d514      	bpl.n	8001738 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800170e:	4a79      	ldr	r2, [pc, #484]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001710:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001712:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001716:	6920      	ldr	r0, [r4, #16]
 8001718:	071b      	lsls	r3, r3, #28
 800171a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800171e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001722:	430b      	orrs	r3, r1
 8001724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001728:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800172c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800172e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001732:	430b      	orrs	r3, r1
 8001734:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001738:	4b6d      	ldr	r3, [pc, #436]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800173a:	4e6e      	ldr	r6, [pc, #440]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    __HAL_RCC_PLLSAI_ENABLE();
 800173c:	2201      	movs	r2, #1
 800173e:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 8001740:	f7ff f9d6 	bl	8000af0 <HAL_GetTick>
 8001744:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001746:	6833      	ldr	r3, [r6, #0]
 8001748:	0098      	lsls	r0, r3, #2
 800174a:	f140 809b 	bpl.w	8001884 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	069b      	lsls	r3, r3, #26
 8001752:	d533      	bpl.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	4b66      	ldr	r3, [pc, #408]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800175a:	4d67      	ldr	r5, [pc, #412]	; (80018f8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800175c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800175e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001762:	641a      	str	r2, [r3, #64]	; 0x40
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800176e:	682b      	ldr	r3, [r5, #0]
 8001770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001774:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001776:	f7ff f9bb 	bl	8000af0 <HAL_GetTick>
 800177a:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800177c:	682b      	ldr	r3, [r5, #0]
 800177e:	05d9      	lsls	r1, r3, #23
 8001780:	f140 8087 	bpl.w	8001892 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001784:	4d5b      	ldr	r5, [pc, #364]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001786:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001788:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800178c:	f040 8088 	bne.w	80018a0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001790:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001792:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001796:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800179a:	4a56      	ldr	r2, [pc, #344]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800179c:	f040 80a4 	bne.w	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 80017a0:	6891      	ldr	r1, [r2, #8]
 80017a2:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80017a6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80017aa:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80017ae:	4301      	orrs	r1, r0
 80017b0:	6091      	str	r1, [r2, #8]
 80017b2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80017b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b8:	430b      	orrs	r3, r1
 80017ba:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80017bc:	6820      	ldr	r0, [r4, #0]
 80017be:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80017c2:	bf1f      	itttt	ne
 80017c4:	4b4d      	ldrne	r3, [pc, #308]	; (80018fc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80017c6:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 80017ca:	f8c3 21e0 	strne.w	r2, [r3, #480]	; 0x1e0
  }
  return HAL_OK;
 80017ce:	2000      	movne	r0, #0
 80017d0:	e04f      	b.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    __HAL_RCC_PLLI2S_DISABLE();
 80017d2:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80017d4:	4e47      	ldr	r6, [pc, #284]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    __HAL_RCC_PLLI2S_DISABLE();
 80017d6:	2200      	movs	r2, #0
 80017d8:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80017da:	f7ff f989 	bl	8000af0 <HAL_GetTick>
 80017de:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80017e0:	6833      	ldr	r3, [r6, #0]
 80017e2:	011f      	lsls	r7, r3, #4
 80017e4:	d43f      	bmi.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80017e6:	6821      	ldr	r1, [r4, #0]
 80017e8:	07cd      	lsls	r5, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80017ea:	bf41      	itttt	mi
 80017ec:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 80017f0:	071b      	lslmi	r3, r3, #28
 80017f2:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 80017f6:	f8c6 3084 	strmi.w	r3, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80017fa:	0788      	lsls	r0, r1, #30
 80017fc:	d515      	bpl.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x17e>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80017fe:	4a3d      	ldr	r2, [pc, #244]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001800:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001802:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001806:	6865      	ldr	r5, [r4, #4]
 8001808:	061b      	lsls	r3, r3, #24
 800180a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800180e:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001812:	4303      	orrs	r3, r0
 8001814:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001818:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800181c:	69e3      	ldr	r3, [r4, #28]
 800181e:	f020 001f 	bic.w	r0, r0, #31
 8001822:	3b01      	subs	r3, #1
 8001824:	4303      	orrs	r3, r0
 8001826:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800182a:	0649      	lsls	r1, r1, #25
 800182c:	d50a      	bpl.n	8001844 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800182e:	68e3      	ldr	r3, [r4, #12]
 8001830:	6862      	ldr	r2, [r4, #4]
 8001832:	061b      	lsls	r3, r3, #24
 8001834:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001838:	68a2      	ldr	r2, [r4, #8]
 800183a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800183e:	4a2d      	ldr	r2, [pc, #180]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001840:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001846:	4e2b      	ldr	r6, [pc, #172]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    __HAL_RCC_PLLI2S_ENABLE();
 8001848:	2201      	movs	r2, #1
 800184a:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 800184c:	f7ff f950 	bl	8000af0 <HAL_GetTick>
 8001850:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001852:	6833      	ldr	r3, [r6, #0]
 8001854:	011a      	lsls	r2, r3, #4
 8001856:	f53f af30 	bmi.w	80016ba <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800185a:	f7ff f949 	bl	8000af0 <HAL_GetTick>
 800185e:	1b40      	subs	r0, r0, r5
 8001860:	2802      	cmp	r0, #2
 8001862:	d9f6      	bls.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001864:	e004      	b.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001866:	f7ff f943 	bl	8000af0 <HAL_GetTick>
 800186a:	1b40      	subs	r0, r0, r5
 800186c:	2802      	cmp	r0, #2
 800186e:	d9b7      	bls.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0x134>
        return HAL_TIMEOUT;
 8001870:	2003      	movs	r0, #3
}
 8001872:	b003      	add	sp, #12
 8001874:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001876:	f7ff f93b 	bl	8000af0 <HAL_GetTick>
 800187a:	1b80      	subs	r0, r0, r6
 800187c:	2802      	cmp	r0, #2
 800187e:	f67f af27 	bls.w	80016d0 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8001882:	e7f5      	b.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001884:	f7ff f934 	bl	8000af0 <HAL_GetTick>
 8001888:	1b40      	subs	r0, r0, r5
 800188a:	2802      	cmp	r0, #2
 800188c:	f67f af5b 	bls.w	8001746 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8001890:	e7ee      	b.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001892:	f7ff f92d 	bl	8000af0 <HAL_GetTick>
 8001896:	1b80      	subs	r0, r0, r6
 8001898:	2802      	cmp	r0, #2
 800189a:	f67f af6f 	bls.w	800177c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800189e:	e7e7      	b.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80018a2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80018a6:	4293      	cmp	r3, r2
 80018a8:	f43f af72 	beq.w	8001790 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80018ae:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80018b0:	2101      	movs	r1, #1
 80018b2:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018ba:	2100      	movs	r1, #0
 80018bc:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 80018c0:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80018c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018c4:	07da      	lsls	r2, r3, #31
 80018c6:	f57f af63 	bpl.w	8001790 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        tickstart = HAL_GetTick();
 80018ca:	f7ff f911 	bl	8000af0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ce:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80018d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018d6:	079b      	lsls	r3, r3, #30
 80018d8:	f53f af5a 	bmi.w	8001790 <HAL_RCCEx_PeriphCLKConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018dc:	f7ff f908 	bl	8000af0 <HAL_GetTick>
 80018e0:	1b80      	subs	r0, r0, r6
 80018e2:	42b8      	cmp	r0, r7
 80018e4:	d9f6      	bls.n	80018d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80018e6:	e7c3      	b.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018e8:	6891      	ldr	r1, [r2, #8]
 80018ea:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80018ee:	e75f      	b.n	80017b0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80018f0:	42470000 	.word	0x42470000
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40007000 	.word	0x40007000
 80018fc:	42471000 	.word	0x42471000

08001900 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001900:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001904:	461f      	mov	r7, r3
 8001906:	4689      	mov	r9, r1
 8001908:	4690      	mov	r8, r2
 800190a:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800190c:	f7ff f8f0 	bl	8000af0 <HAL_GetTick>
 8001910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001912:	443b      	add	r3, r7
 8001914:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8001916:	f7ff f8eb 	bl	8000af0 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800191a:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 800191c:	681e      	ldr	r6, [r3, #0]
 800191e:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8001922:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8001924:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001926:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001928:	6822      	ldr	r2, [r4, #0]
 800192a:	6893      	ldr	r3, [r2, #8]
 800192c:	ea39 0303 	bics.w	r3, r9, r3
 8001930:	bf0c      	ite	eq
 8001932:	2301      	moveq	r3, #1
 8001934:	2300      	movne	r3, #0
 8001936:	4543      	cmp	r3, r8
 8001938:	d101      	bne.n	800193e <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 800193a:	2000      	movs	r0, #0
 800193c:	e02e      	b.n	800199c <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 800193e:	1c7b      	adds	r3, r7, #1
 8001940:	d0f3      	beq.n	800192a <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001942:	f7ff f8d5 	bl	8000af0 <HAL_GetTick>
 8001946:	eba0 000a 	sub.w	r0, r0, sl
 800194a:	42a8      	cmp	r0, r5
 800194c:	d329      	bcc.n	80019a2 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001956:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001958:	6862      	ldr	r2, [r4, #4]
 800195a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800195e:	d10a      	bne.n	8001976 <SPI_WaitFlagStateUntilTimeout+0x76>
 8001960:	68a2      	ldr	r2, [r4, #8]
 8001962:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001966:	d002      	beq.n	800196e <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001968:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800196c:	d103      	bne.n	8001976 <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001974:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001976:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001978:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800197c:	d107      	bne.n	800198e <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800198c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800198e:	2301      	movs	r3, #1
 8001990:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001994:	2300      	movs	r3, #0
 8001996:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_TIMEOUT;
 800199a:	2003      	movs	r0, #3
}
 800199c:	b002      	add	sp, #8
 800199e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 80019a2:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80019a4:	2b00      	cmp	r3, #0
      count--;
 80019a6:	9b01      	ldr	r3, [sp, #4]
 80019a8:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80019ac:	bf08      	it	eq
 80019ae:	2500      	moveq	r5, #0
      count--;
 80019b0:	9301      	str	r3, [sp, #4]
 80019b2:	e7b9      	b.n	8001928 <SPI_WaitFlagStateUntilTimeout+0x28>
 80019b4:	20000014 	.word	0x20000014

080019b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80019b8:	b530      	push	{r4, r5, lr}
 80019ba:	460b      	mov	r3, r1
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80019bc:	4913      	ldr	r1, [pc, #76]	; (8001a0c <SPI_EndRxTxTransaction+0x54>)
 80019be:	680d      	ldr	r5, [r1, #0]
 80019c0:	4913      	ldr	r1, [pc, #76]	; (8001a10 <SPI_EndRxTxTransaction+0x58>)
 80019c2:	fbb5 f5f1 	udiv	r5, r5, r1
 80019c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019ca:	434d      	muls	r5, r1
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019cc:	6841      	ldr	r1, [r0, #4]
{
 80019ce:	b085      	sub	sp, #20
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019d0:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
{
 80019d4:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80019d6:	9503      	str	r5, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019d8:	d10c      	bne.n	80019f4 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80019da:	9200      	str	r2, [sp, #0]
 80019dc:	2180      	movs	r1, #128	; 0x80
 80019de:	2200      	movs	r2, #0
 80019e0:	f7ff ff8e 	bl	8001900 <SPI_WaitFlagStateUntilTimeout>
 80019e4:	b178      	cbz	r0, 8001a06 <SPI_EndRxTxTransaction+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80019e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019e8:	f043 0320 	orr.w	r3, r3, #32
 80019ec:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80019ee:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 80019f0:	b005      	add	sp, #20
 80019f2:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 80019f4:	9b03      	ldr	r3, [sp, #12]
 80019f6:	b133      	cbz	r3, 8001a06 <SPI_EndRxTxTransaction+0x4e>
      count--;
 80019f8:	9b03      	ldr	r3, [sp, #12]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80019fe:	6823      	ldr	r3, [r4, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	061b      	lsls	r3, r3, #24
 8001a04:	d4f6      	bmi.n	80019f4 <SPI_EndRxTxTransaction+0x3c>
  return HAL_OK;
 8001a06:	2000      	movs	r0, #0
 8001a08:	e7f2      	b.n	80019f0 <SPI_EndRxTxTransaction+0x38>
 8001a0a:	bf00      	nop
 8001a0c:	20000014 	.word	0x20000014
 8001a10:	016e3600 	.word	0x016e3600

08001a14 <HAL_SPI_MspInit>:
}
 8001a14:	4770      	bx	lr

08001a16 <HAL_SPI_Init>:
{
 8001a16:	b538      	push	{r3, r4, r5, lr}
  if (hspi == NULL)
 8001a18:	4604      	mov	r4, r0
 8001a1a:	2800      	cmp	r0, #0
 8001a1c:	d05a      	beq.n	8001ad4 <HAL_SPI_Init+0xbe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d153      	bne.n	8001acc <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a24:	6842      	ldr	r2, [r0, #4]
 8001a26:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001a2a:	d000      	beq.n	8001a2e <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a2c:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a2e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001a32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a36:	b923      	cbnz	r3, 8001a42 <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 8001a38:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f7ff ffe9 	bl	8001a14 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8001a42:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a44:	68a5      	ldr	r5, [r4, #8]
 8001a46:	69a2      	ldr	r2, [r4, #24]
 8001a48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hspi->State = HAL_SPI_STATE_BUSY;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001a50:	680b      	ldr	r3, [r1, #0]
 8001a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a56:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a58:	6863      	ldr	r3, [r4, #4]
 8001a5a:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 8001a5e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8001a62:	432b      	orrs	r3, r5
 8001a64:	68e5      	ldr	r5, [r4, #12]
 8001a66:	f405 6500 	and.w	r5, r5, #2048	; 0x800
 8001a6a:	432b      	orrs	r3, r5
 8001a6c:	6925      	ldr	r5, [r4, #16]
 8001a6e:	f005 0502 	and.w	r5, r5, #2
 8001a72:	432b      	orrs	r3, r5
 8001a74:	6965      	ldr	r5, [r4, #20]
 8001a76:	f005 0501 	and.w	r5, r5, #1
 8001a7a:	432b      	orrs	r3, r5
 8001a7c:	f402 7500 	and.w	r5, r2, #512	; 0x200
 8001a80:	432b      	orrs	r3, r5
 8001a82:	69e5      	ldr	r5, [r4, #28]
 8001a84:	f005 0538 	and.w	r5, r5, #56	; 0x38
 8001a88:	432b      	orrs	r3, r5
 8001a8a:	6a25      	ldr	r5, [r4, #32]
 8001a8c:	f005 0580 	and.w	r5, r5, #128	; 0x80
 8001a90:	432b      	orrs	r3, r5
 8001a92:	f400 5500 	and.w	r5, r0, #8192	; 0x2000
 8001a96:	432b      	orrs	r3, r5
 8001a98:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a9c:	0c12      	lsrs	r2, r2, #16
 8001a9e:	f003 0310 	and.w	r3, r3, #16
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001aa2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001aa6:	f002 0204 	and.w	r2, r2, #4
 8001aaa:	ea42 0203 	orr.w	r2, r2, r3
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8001aae:	bf08      	it	eq
 8001ab0:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ab2:	604a      	str	r2, [r1, #4]
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8001ab4:	bf08      	it	eq
 8001ab6:	610b      	streq	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ab8:	69cb      	ldr	r3, [r1, #28]
 8001aba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001abe:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ac0:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001ac2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ac4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ac6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8001aca:	bd38      	pop	{r3, r4, r5, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001acc:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001ad2:	e7ac      	b.n	8001a2e <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	e7f8      	b.n	8001aca <HAL_SPI_Init+0xb4>

08001ad8 <HAL_SPI_MspDeInit>:
 8001ad8:	4770      	bx	lr

08001ada <HAL_SPI_DeInit>:
{
 8001ada:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8001adc:	4604      	mov	r4, r0
 8001ade:	b180      	cbz	r0, 8001b02 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8001ae0:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001ae8:	6813      	ldr	r3, [r2, #0]
 8001aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001aee:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8001af0:	f7ff fff2 	bl	8001ad8 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001af4:	2000      	movs	r0, #0
 8001af6:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 8001af8:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 8001afc:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
}
 8001b00:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b02:	2001      	movs	r0, #1
 8001b04:	e7fc      	b.n	8001b00 <HAL_SPI_DeInit+0x26>

08001b06 <HAL_SPI_Transmit>:
{
 8001b06:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001b0a:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8001b0c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001b10:	2b01      	cmp	r3, #1
{
 8001b12:	4604      	mov	r4, r0
 8001b14:	460e      	mov	r6, r1
 8001b16:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001b18:	f000 80b9 	beq.w	8001c8e <HAL_SPI_Transmit+0x188>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001b22:	f7fe ffe5 	bl	8000af0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8001b26:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001b2a:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001b2c:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001b2e:	b2d8      	uxtb	r0, r3
 8001b30:	f040 80ab 	bne.w	8001c8a <HAL_SPI_Transmit+0x184>
  if ((pData == NULL) || (Size == 0U))
 8001b34:	2e00      	cmp	r6, #0
 8001b36:	d077      	beq.n	8001c28 <HAL_SPI_Transmit+0x122>
 8001b38:	f1b8 0f00 	cmp.w	r8, #0
 8001b3c:	d074      	beq.n	8001c28 <HAL_SPI_Transmit+0x122>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001b48:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8001b4c:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b50:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001b52:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001b54:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b56:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8001b58:	6825      	ldr	r5, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b5a:	6326      	str	r6, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 8001b60:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b64:	d107      	bne.n	8001b76 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 8001b66:	682b      	ldr	r3, [r5, #0]
 8001b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b6c:	602b      	str	r3, [r5, #0]
    SPI_1LINE_TX(hspi);
 8001b6e:	682b      	ldr	r3, [r5, #0]
 8001b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b74:	602b      	str	r3, [r5, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b7c:	d107      	bne.n	8001b8e <HAL_SPI_Transmit+0x88>
    SPI_RESET_CRC(hspi);
 8001b7e:	682b      	ldr	r3, [r5, #0]
 8001b80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b84:	602b      	str	r3, [r5, #0]
 8001b86:	682b      	ldr	r3, [r5, #0]
 8001b88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b8c:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b8e:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b90:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b92:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001b94:	bf5e      	ittt	pl
 8001b96:	682b      	ldrpl	r3, [r5, #0]
 8001b98:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001b9c:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b9e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ba2:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ba4:	d14c      	bne.n	8001c40 <HAL_SPI_Transmit+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ba6:	b113      	cbz	r3, 8001bae <HAL_SPI_Transmit+0xa8>
 8001ba8:	f1b8 0f01 	cmp.w	r8, #1
 8001bac:	d107      	bne.n	8001bbe <HAL_SPI_Transmit+0xb8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bae:	f836 3b02 	ldrh.w	r3, [r6], #2
 8001bb2:	60eb      	str	r3, [r5, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bb4:	6326      	str	r6, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001bb6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001bbe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	b9f3      	cbnz	r3, 8001c02 <HAL_SPI_Transmit+0xfc>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001bc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bca:	d104      	bne.n	8001bd6 <HAL_SPI_Transmit+0xd0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001bcc:	6822      	ldr	r2, [r4, #0]
 8001bce:	6813      	ldr	r3, [r2, #0]
 8001bd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bd4:	6013      	str	r3, [r2, #0]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001bd6:	464a      	mov	r2, r9
 8001bd8:	4639      	mov	r1, r7
 8001bda:	4620      	mov	r0, r4
 8001bdc:	f7ff feec 	bl	80019b8 <SPI_EndRxTxTransaction>
 8001be0:	b108      	cbz	r0, 8001be6 <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001be2:	2320      	movs	r3, #32
 8001be4:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001be6:	68a3      	ldr	r3, [r4, #8]
 8001be8:	b933      	cbnz	r3, 8001bf8 <HAL_SPI_Transmit+0xf2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bea:	9301      	str	r3, [sp, #4]
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	68da      	ldr	r2, [r3, #12]
 8001bf0:	9201      	str	r2, [sp, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	9301      	str	r3, [sp, #4]
 8001bf6:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001bf8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001bfa:	3800      	subs	r0, #0
 8001bfc:	bf18      	it	ne
 8001bfe:	2001      	movne	r0, #1
error:
 8001c00:	e012      	b.n	8001c28 <HAL_SPI_Transmit+0x122>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c02:	6822      	ldr	r2, [r4, #0]
 8001c04:	6893      	ldr	r3, [r2, #8]
 8001c06:	0798      	lsls	r0, r3, #30
 8001c08:	d505      	bpl.n	8001c16 <HAL_SPI_Transmit+0x110>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c0c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001c10:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c12:	6323      	str	r3, [r4, #48]	; 0x30
 8001c14:	e7cf      	b.n	8001bb6 <HAL_SPI_Transmit+0xb0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c16:	f7fe ff6b 	bl	8000af0 <HAL_GetTick>
 8001c1a:	eba0 0009 	sub.w	r0, r0, r9
 8001c1e:	42b8      	cmp	r0, r7
 8001c20:	d30b      	bcc.n	8001c3a <HAL_SPI_Transmit+0x134>
 8001c22:	1c79      	adds	r1, r7, #1
 8001c24:	d0cb      	beq.n	8001bbe <HAL_SPI_Transmit+0xb8>
          errorcode = HAL_TIMEOUT;
 8001c26:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001c34:	b003      	add	sp, #12
 8001c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c3a:	2f00      	cmp	r7, #0
 8001c3c:	d1bf      	bne.n	8001bbe <HAL_SPI_Transmit+0xb8>
 8001c3e:	e7f2      	b.n	8001c26 <HAL_SPI_Transmit+0x120>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c40:	b113      	cbz	r3, 8001c48 <HAL_SPI_Transmit+0x142>
 8001c42:	f1b8 0f01 	cmp.w	r8, #1
 8001c46:	d108      	bne.n	8001c5a <HAL_SPI_Transmit+0x154>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c48:	7833      	ldrb	r3, [r6, #0]
 8001c4a:	732b      	strb	r3, [r5, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c4e:	3301      	adds	r3, #1
 8001c50:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001c52:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c54:	3b01      	subs	r3, #1
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001c5a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0b0      	beq.n	8001bc4 <HAL_SPI_Transmit+0xbe>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c62:	6823      	ldr	r3, [r4, #0]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	0792      	lsls	r2, r2, #30
 8001c68:	d503      	bpl.n	8001c72 <HAL_SPI_Transmit+0x16c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c6a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c6c:	7812      	ldrb	r2, [r2, #0]
 8001c6e:	731a      	strb	r2, [r3, #12]
 8001c70:	e7ec      	b.n	8001c4c <HAL_SPI_Transmit+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c72:	f7fe ff3d 	bl	8000af0 <HAL_GetTick>
 8001c76:	eba0 0009 	sub.w	r0, r0, r9
 8001c7a:	42b8      	cmp	r0, r7
 8001c7c:	d302      	bcc.n	8001c84 <HAL_SPI_Transmit+0x17e>
 8001c7e:	1c7b      	adds	r3, r7, #1
 8001c80:	d0eb      	beq.n	8001c5a <HAL_SPI_Transmit+0x154>
 8001c82:	e7d0      	b.n	8001c26 <HAL_SPI_Transmit+0x120>
 8001c84:	2f00      	cmp	r7, #0
 8001c86:	d1e8      	bne.n	8001c5a <HAL_SPI_Transmit+0x154>
 8001c88:	e7cd      	b.n	8001c26 <HAL_SPI_Transmit+0x120>
    errorcode = HAL_BUSY;
 8001c8a:	2002      	movs	r0, #2
 8001c8c:	e7cc      	b.n	8001c28 <HAL_SPI_Transmit+0x122>
  __HAL_LOCK(hspi);
 8001c8e:	2002      	movs	r0, #2
 8001c90:	e7d0      	b.n	8001c34 <HAL_SPI_Transmit+0x12e>

08001c92 <HAL_SPI_GetState>:
  return hspi->State;
 8001c92:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8001c96:	4770      	bx	lr

08001c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c9e:	e003      	b.n	8001ca8 <LoopCopyDataInit>

08001ca0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ca2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ca4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ca6:	3104      	adds	r1, #4

08001ca8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ca8:	480b      	ldr	r0, [pc, #44]	; (8001cd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001cac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cb0:	d3f6      	bcc.n	8001ca0 <CopyDataInit>
  ldr  r2, =_sbss
 8001cb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ce0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cb4:	e002      	b.n	8001cbc <LoopFillZerobss>

08001cb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cb8:	f842 3b04 	str.w	r3, [r2], #4

08001cbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001cc0:	d3f9      	bcc.n	8001cb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cc2:	f7fe fea5 	bl	8000a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cc6:	f000 f9a7 	bl	8002018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cca:	f000 f80f 	bl	8001cec <main>
  bx  lr    
 8001cce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001cd0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001cd4:	08003998 	.word	0x08003998
  ldr  r0, =_sdata
 8001cd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cdc:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 8001ce0:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 8001ce4:	200001bc 	.word	0x200001bc

08001ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce8:	e7fe      	b.n	8001ce8 <ADC_IRQHandler>
	...

08001cec <main>:
  * @brief   Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cf0:	b0a0      	sub	sp, #128	; 0x80
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 8001cf2:	f7fe fed7 	bl	8000aa4 <HAL_Init>
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf6:	2500      	movs	r5, #0
 8001cf8:	4b64      	ldr	r3, [pc, #400]	; (8001e8c <main+0x1a0>)
 8001cfa:	9500      	str	r5, [sp, #0]
 8001cfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cfe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d02:	641a      	str	r2, [r3, #64]	; 0x40
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	9b00      	ldr	r3, [sp, #0]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d0e:	4b60      	ldr	r3, [pc, #384]	; (8001e90 <main+0x1a4>)
 8001d10:	9501      	str	r5, [sp, #4]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	9b01      	ldr	r3, [sp, #4]

  /*##-1- System Clock Configuration #########################################*/  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d24:	2701      	movs	r7, #1
 8001d26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d2a:	2602      	movs	r6, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d2c:	e9cd 7307 	strd	r7, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001d34:	2408      	movs	r4, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d36:	e9cd 630d 	strd	r6, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d3a:	f04f 0807 	mov.w	r8, #7
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001d3e:	f44f 73b4 	mov.w	r3, #360	; 0x168
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001d42:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001d44:	e9cd 430f 	strd	r4, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d48:	9611      	str	r6, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d4a:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001d4e:	f7ff fa33 	bl	80011b8 <HAL_RCC_OscConfig>

  /* Activate the Over-Drive mode */
  HAL_PWREx_EnableOverDrive();
 8001d52:	f7ff f9f7 	bl	8001144 <HAL_PWREx_EnableOverDrive>
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001d56:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001d58:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001d5c:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d5e:	e9cd 3602 	strd	r3, r6, [sp, #8]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001d62:	eb0d 0004 	add.w	r0, sp, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d6e:	9504      	str	r5, [sp, #16]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001d70:	f7ff fc00 	bl	8001574 <HAL_RCC_ClockConfig>
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 MHz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 MHz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 MHz */
  /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDIVR_8 = 48/8 = 6 MHz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001d74:	23c0      	movs	r3, #192	; 0xc0
 8001d76:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001d78:	2304      	movs	r3, #4
 8001d7a:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001d7c:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001d7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d82:	931c      	str	r3, [sp, #112]	; 0x70
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d84:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001d86:	f7ff fc91 	bl	80016ac <HAL_RCCEx_PeriphCLKConfig>
  BSP_LED_Init(LED3);   
 8001d8a:	4628      	mov	r0, r5
  LtdcHandle.Instance = LTDC;
 8001d8c:	4c41      	ldr	r4, [pc, #260]	; (8001e94 <main+0x1a8>)
  BSP_LED_Init(LED3);   
 8001d8e:	f7fe fd5f 	bl	8000850 <BSP_LED_Init>
  ili9341_Init();
 8001d92:	f7fe fbad 	bl	80004f0 <ili9341_Init>
  LtdcHandle.Instance = LTDC;
 8001d96:	4b40      	ldr	r3, [pc, #256]	; (8001e98 <main+0x1ac>)
  LtdcHandle.Init.Backcolor.Blue = 0;
 8001d98:	86a5      	strh	r5, [r4, #52]	; 0x34
  LtdcHandle.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001d9a:	e9c4 3500 	strd	r3, r5, [r4]
  LtdcHandle.Init.HorizontalSync = 9;
 8001d9e:	2309      	movs	r3, #9
  LtdcHandle.Init.VerticalSync = 1;
 8001da0:	e9c4 3705 	strd	r3, r7, [r4, #20]
  LtdcHandle.Init.AccumulatedVBP = 3; 
 8001da4:	f04f 0c1d 	mov.w	ip, #29
 8001da8:	2303      	movs	r3, #3
 8001daa:	e9c4 c307 	strd	ip, r3, [r4, #28]
  LtdcHandle.Init.AccumulatedActiveH = 323;
 8001dae:	f240 1e0d 	movw	lr, #269	; 0x10d
 8001db2:	f240 1343 	movw	r3, #323	; 0x143
 8001db6:	e9c4 e309 	strd	lr, r3, [r4, #36]	; 0x24
  LtdcHandle.Init.TotalHeigh = 327;
 8001dba:	f240 1217 	movw	r2, #279	; 0x117
 8001dbe:	f240 1347 	movw	r3, #327	; 0x147
 8001dc2:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
  pLayerCfg1.WindowX1 = 240;
 8001dc6:	23f0      	movs	r3, #240	; 0xf0
  pLayerCfg1.WindowY0 = 0;
 8001dc8:	e9cd 3514 	strd	r3, r5, [sp, #80]	; 0x50
  pLayerCfg1.WindowY1 = 320;
 8001dcc:	f44f 73a0 	mov.w	r3, #320	; 0x140
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001dd0:	e9cd 3616 	strd	r3, r6, [sp, #88]	; 0x58
  pLayerCfg1.FBStartAdress = (uint32_t)&ball2;
 8001dd4:	4b31      	ldr	r3, [pc, #196]	; (8001e9c <main+0x1b0>)
 8001dd6:	931c      	str	r3, [sp, #112]	; 0x70
  pLayerCfg1.Alpha = 255;
 8001dd8:	23ff      	movs	r3, #255	; 0xff
  pLayerCfg1.Alpha0 = 0;
 8001dda:	e9cd 3518 	strd	r3, r5, [sp, #96]	; 0x60
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001dde:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001de2:	e9cd 381a 	strd	r3, r8, [sp, #104]	; 0x68
  pLayerCfg1.ImageHeight = 57;
 8001de6:	2138      	movs	r1, #56	; 0x38
 8001de8:	2339      	movs	r3, #57	; 0x39
  if(HAL_LTDC_Init(&LtdcHandle) != HAL_OK)
 8001dea:	4620      	mov	r0, r4
  LtdcHandle.Init.DEPolarity = LTDC_DEPOLARITY_AL; 
 8001dec:	e9c4 5502 	strd	r5, r5, [r4, #8]
  pLayerCfg1.ImageHeight = 57;
 8001df0:	e9cd 131d 	strd	r1, r3, [sp, #116]	; 0x74
  LtdcHandle.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001df4:	6125      	str	r5, [r4, #16]
  LtdcHandle.Init.Backcolor.Red = 0;
 8001df6:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
  pLayerCfg1.WindowX0 = 0;
 8001dfa:	9513      	str	r5, [sp, #76]	; 0x4c
  pLayerCfg1.Backcolor.Blue = 0;
 8001dfc:	f8ad 507c 	strh.w	r5, [sp, #124]	; 0x7c
  pLayerCfg1.Backcolor.Red = 0;
 8001e00:	f88d 507e 	strb.w	r5, [sp, #126]	; 0x7e
  if(HAL_LTDC_Init(&LtdcHandle) != HAL_OK)
 8001e04:	f7ff f866 	bl	8000ed4 <HAL_LTDC_Init>
 8001e08:	4606      	mov	r6, r0
 8001e0a:	b118      	cbz	r0, 8001e14 <main+0x128>
  * @retval None
  */
static void Error_Handler(void)
{
  /* Turn LED3 on */
  BSP_LED_On(LED3);
 8001e0c:	4628      	mov	r0, r5
 8001e0e:	f7fe fd59 	bl	80008c4 <BSP_LED_On>
  while(1)
 8001e12:	e7fe      	b.n	8001e12 <main+0x126>
  if(HAL_LTDC_ConfigLayer(&LtdcHandle, &pLayerCfg1, 1) != HAL_OK)
 8001e14:	463a      	mov	r2, r7
 8001e16:	a913      	add	r1, sp, #76	; 0x4c
 8001e18:	4620      	mov	r0, r4
 8001e1a:	f7ff f926 	bl	800106a <HAL_LTDC_ConfigLayer>
 8001e1e:	b118      	cbz	r0, 8001e28 <main+0x13c>
  BSP_LED_On(LED3);
 8001e20:	4630      	mov	r0, r6
 8001e22:	f7fe fd4f 	bl	80008c4 <BSP_LED_On>
  while(1)
 8001e26:	e7fe      	b.n	8001e26 <main+0x13a>
 8001e28:	4d1d      	ldr	r5, [pc, #116]	; (8001ea0 <main+0x1b4>)
		change_x = -3;
 8001e2a:	f06f 0602 	mvn.w	r6, #2
	if(x == 0)
 8001e2e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8001e32:	bb09      	cbnz	r1, 8001e78 <main+0x18c>
		change_x = 3;
 8001e34:	2303      	movs	r3, #3
 8001e36:	602b      	str	r3, [r5, #0]
	if(y == 0)
 8001e38:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8001e3c:	bb02      	cbnz	r2, 8001e80 <main+0x194>
		change_y = 3;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	606b      	str	r3, [r5, #4]
	x += change_x;
 8001e42:	682b      	ldr	r3, [r5, #0]
 8001e44:	4419      	add	r1, r3
	y += change_y;
 8001e46:	686b      	ldr	r3, [r5, #4]
	x += change_x;
 8001e48:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
	y += change_y;
 8001e4c:	441a      	add	r2, r3
    HAL_LTDC_SetWindowPosition_NoReload(&LtdcHandle, x, y, 1);
 8001e4e:	4620      	mov	r0, r4
 8001e50:	2301      	movs	r3, #1
	y += change_y;
 8001e52:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
    HAL_LTDC_SetWindowPosition_NoReload(&LtdcHandle, x, y, 1);
 8001e56:	f7ff f94b 	bl	80010f0 <HAL_LTDC_SetWindowPosition_NoReload>
    ReloadFlag = 0;
 8001e5a:	2300      	movs	r3, #0
    HAL_LTDC_Reload(&LtdcHandle,LTDC_SRCR_VBR);
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	4620      	mov	r0, r4
    ReloadFlag = 0;
 8001e60:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    HAL_LTDC_Reload(&LtdcHandle,LTDC_SRCR_VBR);
 8001e64:	f7ff f92e 	bl	80010c4 <HAL_LTDC_Reload>
    while(ReloadFlag == 0) { }
 8001e68:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0fb      	beq.n	8001e68 <main+0x17c>
    HAL_Delay(10);
 8001e70:	200a      	movs	r0, #10
 8001e72:	f7fe fe43 	bl	8000afc <HAL_Delay>
	if(x == 0)
 8001e76:	e7da      	b.n	8001e2e <main+0x142>
	if(x >= 180)
 8001e78:	29b3      	cmp	r1, #179	; 0xb3
		change_x = -3;
 8001e7a:	bf88      	it	hi
 8001e7c:	602e      	strhi	r6, [r5, #0]
 8001e7e:	e7db      	b.n	8001e38 <main+0x14c>
	if(y >= 260)
 8001e80:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
		change_y = -3;
 8001e84:	bf28      	it	cs
 8001e86:	606e      	strcs	r6, [r5, #4]
 8001e88:	e7db      	b.n	8001e42 <main+0x156>
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40007000 	.word	0x40007000
 8001e94:	200000f8 	.word	0x200000f8
 8001e98:	40016800 	.word	0x40016800
 8001e9c:	08002098 	.word	0x08002098
 8001ea0:	20000020 	.word	0x20000020

08001ea4 <HAL_LTDC_ReloadEventCallback>:
  ReloadFlag = 1;
 8001ea4:	4b02      	ldr	r3, [pc, #8]	; (8001eb0 <HAL_LTDC_ReloadEventCallback+0xc>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	200000f8 	.word	0x200000f8

08001eb4 <HAL_LTDC_MspInit>:
  *           - Peripheral's GPIO Configuration  
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{  
 8001eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb6:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_Init_Structure;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/  
  /* Enable the LTDC Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001eb8:	4b48      	ldr	r3, [pc, #288]	; (8001fdc <HAL_LTDC_MspInit+0x128>)
  HAL_GPIO_Init(GPIOA, &GPIO_Init_Structure);
  
  /* LTDC pins configuration: PB8 -- 11 */  
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | \
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_Init_Structure);
 8001eba:	4f49      	ldr	r7, [pc, #292]	; (8001fe0 <HAL_LTDC_MspInit+0x12c>)
  HAL_GPIO_Init(GPIOA, &GPIO_Init_Structure);
 8001ebc:	4849      	ldr	r0, [pc, #292]	; (8001fe4 <HAL_LTDC_MspInit+0x130>)
  HAL_GPIO_Init(GPIOF, &GPIO_Init_Structure);     

  /* LTDC pins configuration: PG6 -- 11 */  
  GPIO_Init_Structure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
                             GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 8001ebe:	4e4a      	ldr	r6, [pc, #296]	; (8001fe8 <HAL_LTDC_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001ec0:	2400      	movs	r4, #0
 8001ec2:	9400      	str	r4, [sp, #0]
 8001ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ec6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001eca:	645a      	str	r2, [r3, #68]	; 0x44
 8001ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ece:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001ed2:	9200      	str	r2, [sp, #0]
 8001ed4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	9401      	str	r4, [sp, #4]
 8001ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eda:	f042 0201 	orr.w	r2, r2, #1
 8001ede:	631a      	str	r2, [r3, #48]	; 0x30
 8001ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee2:	f002 0201 	and.w	r2, r2, #1
 8001ee6:	9201      	str	r2, [sp, #4]
 8001ee8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eea:	9402      	str	r4, [sp, #8]
 8001eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eee:	f042 0202 	orr.w	r2, r2, #2
 8001ef2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ef6:	f002 0202 	and.w	r2, r2, #2
 8001efa:	9202      	str	r2, [sp, #8]
 8001efc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001efe:	9403      	str	r4, [sp, #12]
 8001f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f02:	f042 0204 	orr.w	r2, r2, #4
 8001f06:	631a      	str	r2, [r3, #48]	; 0x30
 8001f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f0a:	f002 0204 	and.w	r2, r2, #4
 8001f0e:	9203      	str	r2, [sp, #12]
 8001f10:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f12:	9404      	str	r4, [sp, #16]
 8001f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f16:	f042 0208 	orr.w	r2, r2, #8
 8001f1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f1e:	f002 0208 	and.w	r2, r2, #8
 8001f22:	9204      	str	r2, [sp, #16]
 8001f24:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f26:	9405      	str	r4, [sp, #20]
 8001f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f2a:	f042 0220 	orr.w	r2, r2, #32
 8001f2e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f32:	f002 0220 	and.w	r2, r2, #32
 8001f36:	9205      	str	r2, [sp, #20]
 8001f38:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f3a:	9406      	str	r4, [sp, #24]
 8001f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f42:	631a      	str	r2, [r3, #48]	; 0x30
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4a:	9306      	str	r3, [sp, #24]
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8001f4c:	f641 0258 	movw	r2, #6232	; 0x1858
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f50:	9b06      	ldr	r3, [sp, #24]
  GPIO_Init_Structure.Alternate= GPIO_AF14_LTDC;
 8001f52:	250e      	movs	r5, #14
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_Init_Structure);
 8001f56:	a907      	add	r1, sp, #28
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8001f58:	e9cd 2307 	strd	r2, r3, [sp, #28]
  GPIO_Init_Structure.Speed = GPIO_SPEED_FAST;
 8001f5c:	e9cd 4309 	strd	r4, r3, [sp, #36]	; 0x24
  GPIO_Init_Structure.Alternate= GPIO_AF14_LTDC;
 8001f60:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_Init_Structure);
 8001f62:	f7fe fe45 	bl	8000bf0 <HAL_GPIO_Init>
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | \
 8001f66:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  HAL_GPIO_Init(GPIOB, &GPIO_Init_Structure);
 8001f6a:	a907      	add	r1, sp, #28
 8001f6c:	4638      	mov	r0, r7
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | \
 8001f6e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_Init_Structure);
 8001f70:	f7fe fe3e 	bl	8000bf0 <HAL_GPIO_Init>
  GPIO_Init_Structure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001f74:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
  HAL_GPIO_Init(GPIOC, &GPIO_Init_Structure);
 8001f78:	a907      	add	r1, sp, #28
 8001f7a:	481c      	ldr	r0, [pc, #112]	; (8001fec <HAL_LTDC_MspInit+0x138>)
  GPIO_Init_Structure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001f7c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_Init_Structure);
 8001f7e:	f7fe fe37 	bl	8000bf0 <HAL_GPIO_Init>
  GPIO_Init_Structure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001f82:	2348      	movs	r3, #72	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8001f84:	a907      	add	r1, sp, #28
 8001f86:	481a      	ldr	r0, [pc, #104]	; (8001ff0 <HAL_LTDC_MspInit+0x13c>)
  GPIO_Init_Structure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001f88:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8001f8a:	f7fe fe31 	bl	8000bf0 <HAL_GPIO_Init>
  GPIO_Init_Structure.Pin = GPIO_PIN_10;
 8001f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOF, &GPIO_Init_Structure);     
 8001f92:	a907      	add	r1, sp, #28
 8001f94:	4817      	ldr	r0, [pc, #92]	; (8001ff4 <HAL_LTDC_MspInit+0x140>)
  GPIO_Init_Structure.Pin = GPIO_PIN_10;
 8001f96:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_Init_Structure);     
 8001f98:	f7fe fe2a 	bl	8000bf0 <HAL_GPIO_Init>
  GPIO_Init_Structure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001f9c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 8001fa0:	a907      	add	r1, sp, #28
 8001fa2:	4630      	mov	r0, r6
  GPIO_Init_Structure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001fa4:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 8001fa6:	f7fe fe23 	bl	8000bf0 <HAL_GPIO_Init>
 
  /* LTDC pins configuration: PB0 -- 1 */  
  GPIO_Init_Structure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001faa:	2303      	movs	r3, #3
 8001fac:	9307      	str	r3, [sp, #28]
  GPIO_Init_Structure.Alternate = GPIO_AF9_LTDC;
  HAL_GPIO_Init(GPIOB, &GPIO_Init_Structure);
 8001fae:	a907      	add	r1, sp, #28
  GPIO_Init_Structure.Alternate = GPIO_AF9_LTDC;
 8001fb0:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_Init_Structure);
 8001fb2:	4638      	mov	r0, r7
  GPIO_Init_Structure.Alternate = GPIO_AF9_LTDC;
 8001fb4:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_Init_Structure);
 8001fb6:	f7fe fe1b 	bl	8000bf0 <HAL_GPIO_Init>

  /* LTDC pins configuration: PG10 -- 12 */  
  GPIO_Init_Structure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001fba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 8001fbe:	a907      	add	r1, sp, #28
 8001fc0:	4630      	mov	r0, r6
  GPIO_Init_Structure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001fc2:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 8001fc4:	f7fe fe14 	bl	8000bf0 <HAL_GPIO_Init>
  
  /* Set LTDC Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(LTDC_IRQn, 0xE, 0);   
 8001fc8:	4622      	mov	r2, r4
 8001fca:	4629      	mov	r1, r5
 8001fcc:	2058      	movs	r0, #88	; 0x58
 8001fce:	f7fe fdbb 	bl	8000b48 <HAL_NVIC_SetPriority>

  /* Enable LTDC Interrupt */
  HAL_NVIC_EnableIRQ(LTDC_IRQn);   
 8001fd2:	2058      	movs	r0, #88	; 0x58
 8001fd4:	f7fe fdea 	bl	8000bac <HAL_NVIC_EnableIRQ>
}
 8001fd8:	b00d      	add	sp, #52	; 0x34
 8001fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40020400 	.word	0x40020400
 8001fe4:	40020000 	.word	0x40020000
 8001fe8:	40021800 	.word	0x40021800
 8001fec:	40020800 	.word	0x40020800
 8001ff0:	40020c00 	.word	0x40020c00
 8001ff4:	40021400 	.word	0x40021400

08001ff8 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8001ff8:	4770      	bx	lr

08001ffa <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001ffa:	e7fe      	b.n	8001ffa <HardFault_Handler>

08001ffc <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <MemManage_Handler>

08001ffe <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001ffe:	e7fe      	b.n	8001ffe <BusFault_Handler>

08002000 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002000:	e7fe      	b.n	8002000 <UsageFault_Handler>

08002002 <SVC_Handler>:
 8002002:	4770      	bx	lr

08002004 <DebugMon_Handler>:
 8002004:	4770      	bx	lr

08002006 <PendSV_Handler>:
 8002006:	4770      	bx	lr

08002008 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8002008:	f7fe bd66 	b.w	8000ad8 <HAL_IncTick>

0800200c <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&LtdcHandle);
 800200c:	4801      	ldr	r0, [pc, #4]	; (8002014 <LTDC_IRQHandler+0x8>)
 800200e:	f7fe bfcf 	b.w	8000fb0 <HAL_LTDC_IRQHandler>
 8002012:	bf00      	nop
 8002014:	200000f8 	.word	0x200000f8

08002018 <__libc_init_array>:
 8002018:	b570      	push	{r4, r5, r6, lr}
 800201a:	4d0d      	ldr	r5, [pc, #52]	; (8002050 <__libc_init_array+0x38>)
 800201c:	4c0d      	ldr	r4, [pc, #52]	; (8002054 <__libc_init_array+0x3c>)
 800201e:	1b64      	subs	r4, r4, r5
 8002020:	10a4      	asrs	r4, r4, #2
 8002022:	2600      	movs	r6, #0
 8002024:	42a6      	cmp	r6, r4
 8002026:	d109      	bne.n	800203c <__libc_init_array+0x24>
 8002028:	4d0b      	ldr	r5, [pc, #44]	; (8002058 <__libc_init_array+0x40>)
 800202a:	4c0c      	ldr	r4, [pc, #48]	; (800205c <__libc_init_array+0x44>)
 800202c:	f000 f818 	bl	8002060 <_init>
 8002030:	1b64      	subs	r4, r4, r5
 8002032:	10a4      	asrs	r4, r4, #2
 8002034:	2600      	movs	r6, #0
 8002036:	42a6      	cmp	r6, r4
 8002038:	d105      	bne.n	8002046 <__libc_init_array+0x2e>
 800203a:	bd70      	pop	{r4, r5, r6, pc}
 800203c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002040:	4798      	blx	r3
 8002042:	3601      	adds	r6, #1
 8002044:	e7ee      	b.n	8002024 <__libc_init_array+0xc>
 8002046:	f855 3b04 	ldr.w	r3, [r5], #4
 800204a:	4798      	blx	r3
 800204c:	3601      	adds	r6, #1
 800204e:	e7f2      	b.n	8002036 <__libc_init_array+0x1e>
 8002050:	08003990 	.word	0x08003990
 8002054:	08003990 	.word	0x08003990
 8002058:	08003990 	.word	0x08003990
 800205c:	08003994 	.word	0x08003994

08002060 <_init>:
 8002060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002062:	bf00      	nop
 8002064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002066:	bc08      	pop	{r3}
 8002068:	469e      	mov	lr, r3
 800206a:	4770      	bx	lr

0800206c <_fini>:
 800206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206e:	bf00      	nop
 8002070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002072:	bc08      	pop	{r3}
 8002074:	469e      	mov	lr, r3
 8002076:	4770      	bx	lr
