
BallGameGyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072f0  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cd8  080074a0  080074a0  000174a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009178  08009178  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009178  08009178  00019178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009180  08009180  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009180  08009180  00019180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009184  08009184  00019184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000010  08009198  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08009198  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019780  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031a4  00000000  00000000  000397c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001780  00000000  00000000  0003c968  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001610  00000000  00000000  0003e0e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026b47  00000000  00000000  0003f6f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000129e4  00000000  00000000  0006623f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e64cd  00000000  00000000  00078c23  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015f0f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066a0  00000000  00000000  0015f16c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007488 	.word	0x08007488

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08007488 	.word	0x08007488

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2f>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000994:	bf24      	itt	cs
 8000996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800099e:	d90d      	bls.n	80009bc <__aeabi_d2f+0x30>
 80009a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b4:	bf08      	it	eq
 80009b6:	f020 0001 	biceq.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009c0:	d121      	bne.n	8000a06 <__aeabi_d2f+0x7a>
 80009c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009c6:	bfbc      	itt	lt
 80009c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	4770      	bxlt	lr
 80009ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d6:	f1c2 0218 	rsb	r2, r2, #24
 80009da:	f1c2 0c20 	rsb	ip, r2, #32
 80009de:	fa10 f30c 	lsls.w	r3, r0, ip
 80009e2:	fa20 f002 	lsr.w	r0, r0, r2
 80009e6:	bf18      	it	ne
 80009e8:	f040 0001 	orrne.w	r0, r0, #1
 80009ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f8:	ea40 000c 	orr.w	r0, r0, ip
 80009fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	e7cc      	b.n	80009a0 <__aeabi_d2f+0x14>
 8000a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a0a:	d107      	bne.n	8000a1c <__aeabi_d2f+0x90>
 8000a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a10:	bf1e      	ittt	ne
 8000a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a1a:	4770      	bxne	lr
 8000a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a40:	f000 b972 	b.w	8000d28 <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f806 	bl	8000a5c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__udivmoddi4>:
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a60:	9e08      	ldr	r6, [sp, #32]
 8000a62:	4604      	mov	r4, r0
 8000a64:	4688      	mov	r8, r1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d14b      	bne.n	8000b02 <__udivmoddi4+0xa6>
 8000a6a:	428a      	cmp	r2, r1
 8000a6c:	4615      	mov	r5, r2
 8000a6e:	d967      	bls.n	8000b40 <__udivmoddi4+0xe4>
 8000a70:	fab2 f282 	clz	r2, r2
 8000a74:	b14a      	cbz	r2, 8000a8a <__udivmoddi4+0x2e>
 8000a76:	f1c2 0720 	rsb	r7, r2, #32
 8000a7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a82:	4095      	lsls	r5, r2
 8000a84:	ea47 0803 	orr.w	r8, r7, r3
 8000a88:	4094      	lsls	r4, r2
 8000a8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a8e:	0c23      	lsrs	r3, r4, #16
 8000a90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a94:	fa1f fc85 	uxth.w	ip, r5
 8000a98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aa0:	fb07 f10c 	mul.w	r1, r7, ip
 8000aa4:	4299      	cmp	r1, r3
 8000aa6:	d909      	bls.n	8000abc <__udivmoddi4+0x60>
 8000aa8:	18eb      	adds	r3, r5, r3
 8000aaa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000aae:	f080 811b 	bcs.w	8000ce8 <__udivmoddi4+0x28c>
 8000ab2:	4299      	cmp	r1, r3
 8000ab4:	f240 8118 	bls.w	8000ce8 <__udivmoddi4+0x28c>
 8000ab8:	3f02      	subs	r7, #2
 8000aba:	442b      	add	r3, r5
 8000abc:	1a5b      	subs	r3, r3, r1
 8000abe:	b2a4      	uxth	r4, r4
 8000ac0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ac4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000acc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ad0:	45a4      	cmp	ip, r4
 8000ad2:	d909      	bls.n	8000ae8 <__udivmoddi4+0x8c>
 8000ad4:	192c      	adds	r4, r5, r4
 8000ad6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ada:	f080 8107 	bcs.w	8000cec <__udivmoddi4+0x290>
 8000ade:	45a4      	cmp	ip, r4
 8000ae0:	f240 8104 	bls.w	8000cec <__udivmoddi4+0x290>
 8000ae4:	3802      	subs	r0, #2
 8000ae6:	442c      	add	r4, r5
 8000ae8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000aec:	eba4 040c 	sub.w	r4, r4, ip
 8000af0:	2700      	movs	r7, #0
 8000af2:	b11e      	cbz	r6, 8000afc <__udivmoddi4+0xa0>
 8000af4:	40d4      	lsrs	r4, r2
 8000af6:	2300      	movs	r3, #0
 8000af8:	e9c6 4300 	strd	r4, r3, [r6]
 8000afc:	4639      	mov	r1, r7
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0xbe>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	f000 80eb 	beq.w	8000ce2 <__udivmoddi4+0x286>
 8000b0c:	2700      	movs	r7, #0
 8000b0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b12:	4638      	mov	r0, r7
 8000b14:	4639      	mov	r1, r7
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	fab3 f783 	clz	r7, r3
 8000b1e:	2f00      	cmp	r7, #0
 8000b20:	d147      	bne.n	8000bb2 <__udivmoddi4+0x156>
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d302      	bcc.n	8000b2c <__udivmoddi4+0xd0>
 8000b26:	4282      	cmp	r2, r0
 8000b28:	f200 80fa 	bhi.w	8000d20 <__udivmoddi4+0x2c4>
 8000b2c:	1a84      	subs	r4, r0, r2
 8000b2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b32:	2001      	movs	r0, #1
 8000b34:	4698      	mov	r8, r3
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d0e0      	beq.n	8000afc <__udivmoddi4+0xa0>
 8000b3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b3e:	e7dd      	b.n	8000afc <__udivmoddi4+0xa0>
 8000b40:	b902      	cbnz	r2, 8000b44 <__udivmoddi4+0xe8>
 8000b42:	deff      	udf	#255	; 0xff
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	f040 808f 	bne.w	8000c6c <__udivmoddi4+0x210>
 8000b4e:	1b49      	subs	r1, r1, r5
 8000b50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b54:	fa1f f885 	uxth.w	r8, r5
 8000b58:	2701      	movs	r7, #1
 8000b5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b68:	fb08 f10c 	mul.w	r1, r8, ip
 8000b6c:	4299      	cmp	r1, r3
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x124>
 8000b70:	18eb      	adds	r3, r5, r3
 8000b72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x122>
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	f200 80cd 	bhi.w	8000d18 <__udivmoddi4+0x2bc>
 8000b7e:	4684      	mov	ip, r0
 8000b80:	1a59      	subs	r1, r3, r1
 8000b82:	b2a3      	uxth	r3, r4
 8000b84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b90:	fb08 f800 	mul.w	r8, r8, r0
 8000b94:	45a0      	cmp	r8, r4
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x14c>
 8000b98:	192c      	adds	r4, r5, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x14a>
 8000ba0:	45a0      	cmp	r8, r4
 8000ba2:	f200 80b6 	bhi.w	8000d12 <__udivmoddi4+0x2b6>
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	eba4 0408 	sub.w	r4, r4, r8
 8000bac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bb0:	e79f      	b.n	8000af2 <__udivmoddi4+0x96>
 8000bb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bb6:	40bb      	lsls	r3, r7
 8000bb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bcc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bd0:	4325      	orrs	r5, r4
 8000bd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bd6:	0c2c      	lsrs	r4, r5, #16
 8000bd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bdc:	fa1f fa8e 	uxth.w	sl, lr
 8000be0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000be4:	fb09 f40a 	mul.w	r4, r9, sl
 8000be8:	429c      	cmp	r4, r3
 8000bea:	fa02 f207 	lsl.w	r2, r2, r7
 8000bee:	fa00 f107 	lsl.w	r1, r0, r7
 8000bf2:	d90b      	bls.n	8000c0c <__udivmoddi4+0x1b0>
 8000bf4:	eb1e 0303 	adds.w	r3, lr, r3
 8000bf8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bfc:	f080 8087 	bcs.w	8000d0e <__udivmoddi4+0x2b2>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f240 8084 	bls.w	8000d0e <__udivmoddi4+0x2b2>
 8000c06:	f1a9 0902 	sub.w	r9, r9, #2
 8000c0a:	4473      	add	r3, lr
 8000c0c:	1b1b      	subs	r3, r3, r4
 8000c0e:	b2ad      	uxth	r5, r5
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c20:	45a2      	cmp	sl, r4
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x1da>
 8000c24:	eb1e 0404 	adds.w	r4, lr, r4
 8000c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2c:	d26b      	bcs.n	8000d06 <__udivmoddi4+0x2aa>
 8000c2e:	45a2      	cmp	sl, r4
 8000c30:	d969      	bls.n	8000d06 <__udivmoddi4+0x2aa>
 8000c32:	3802      	subs	r0, #2
 8000c34:	4474      	add	r4, lr
 8000c36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c3e:	eba4 040a 	sub.w	r4, r4, sl
 8000c42:	454c      	cmp	r4, r9
 8000c44:	46c2      	mov	sl, r8
 8000c46:	464b      	mov	r3, r9
 8000c48:	d354      	bcc.n	8000cf4 <__udivmoddi4+0x298>
 8000c4a:	d051      	beq.n	8000cf0 <__udivmoddi4+0x294>
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	d069      	beq.n	8000d24 <__udivmoddi4+0x2c8>
 8000c50:	ebb1 050a 	subs.w	r5, r1, sl
 8000c54:	eb64 0403 	sbc.w	r4, r4, r3
 8000c58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c5c:	40fd      	lsrs	r5, r7
 8000c5e:	40fc      	lsrs	r4, r7
 8000c60:	ea4c 0505 	orr.w	r5, ip, r5
 8000c64:	e9c6 5400 	strd	r5, r4, [r6]
 8000c68:	2700      	movs	r7, #0
 8000c6a:	e747      	b.n	8000afc <__udivmoddi4+0xa0>
 8000c6c:	f1c2 0320 	rsb	r3, r2, #32
 8000c70:	fa20 f703 	lsr.w	r7, r0, r3
 8000c74:	4095      	lsls	r5, r2
 8000c76:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c82:	4338      	orrs	r0, r7
 8000c84:	0c01      	lsrs	r1, r0, #16
 8000c86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c8a:	fa1f f885 	uxth.w	r8, r5
 8000c8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c96:	fb07 f308 	mul.w	r3, r7, r8
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x256>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ca8:	d22f      	bcs.n	8000d0a <__udivmoddi4+0x2ae>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d92d      	bls.n	8000d0a <__udivmoddi4+0x2ae>
 8000cae:	3f02      	subs	r7, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	1acb      	subs	r3, r1, r3
 8000cb4:	b281      	uxth	r1, r0
 8000cb6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc2:	fb00 f308 	mul.w	r3, r0, r8
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x27e>
 8000cca:	1869      	adds	r1, r5, r1
 8000ccc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd0:	d217      	bcs.n	8000d02 <__udivmoddi4+0x2a6>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d915      	bls.n	8000d02 <__udivmoddi4+0x2a6>
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	4429      	add	r1, r5
 8000cda:	1ac9      	subs	r1, r1, r3
 8000cdc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ce0:	e73b      	b.n	8000b5a <__udivmoddi4+0xfe>
 8000ce2:	4637      	mov	r7, r6
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e709      	b.n	8000afc <__udivmoddi4+0xa0>
 8000ce8:	4607      	mov	r7, r0
 8000cea:	e6e7      	b.n	8000abc <__udivmoddi4+0x60>
 8000cec:	4618      	mov	r0, r3
 8000cee:	e6fb      	b.n	8000ae8 <__udivmoddi4+0x8c>
 8000cf0:	4541      	cmp	r1, r8
 8000cf2:	d2ab      	bcs.n	8000c4c <__udivmoddi4+0x1f0>
 8000cf4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cf8:	eb69 020e 	sbc.w	r2, r9, lr
 8000cfc:	3801      	subs	r0, #1
 8000cfe:	4613      	mov	r3, r2
 8000d00:	e7a4      	b.n	8000c4c <__udivmoddi4+0x1f0>
 8000d02:	4660      	mov	r0, ip
 8000d04:	e7e9      	b.n	8000cda <__udivmoddi4+0x27e>
 8000d06:	4618      	mov	r0, r3
 8000d08:	e795      	b.n	8000c36 <__udivmoddi4+0x1da>
 8000d0a:	4667      	mov	r7, ip
 8000d0c:	e7d1      	b.n	8000cb2 <__udivmoddi4+0x256>
 8000d0e:	4681      	mov	r9, r0
 8000d10:	e77c      	b.n	8000c0c <__udivmoddi4+0x1b0>
 8000d12:	3802      	subs	r0, #2
 8000d14:	442c      	add	r4, r5
 8000d16:	e747      	b.n	8000ba8 <__udivmoddi4+0x14c>
 8000d18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d1c:	442b      	add	r3, r5
 8000d1e:	e72f      	b.n	8000b80 <__udivmoddi4+0x124>
 8000d20:	4638      	mov	r0, r7
 8000d22:	e708      	b.n	8000b36 <__udivmoddi4+0xda>
 8000d24:	4637      	mov	r7, r6
 8000d26:	e6e9      	b.n	8000afc <__udivmoddi4+0xa0>

08000d28 <__aeabi_idiv0>:
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <ball_ctrl_init>:
 *      Author: chedo
 */
#include "ball_control.h"

void ball_ctrl_init(Ball_control_data *ball_data, uint16_t X_start_pos, uint16_t Y_start_pos)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	807b      	strh	r3, [r7, #2]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	803b      	strh	r3, [r7, #0]
	ball_ctrl_restetDrift(ball_data);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f000 f81c 	bl	8000d7a <ball_ctrl_restetDrift>
	ball_data->X_screen_pos = X_start_pos;
 8000d42:	887b      	ldrh	r3, [r7, #2]
 8000d44:	ee07 3a90 	vmov	s15, r3
 8000d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	edc3 7a03 	vstr	s15, [r3, #12]
	ball_data->Y_screen_pos = Y_start_pos;
 8000d52:	883b      	ldrh	r3, [r7, #0]
 8000d54:	ee07 3a90 	vmov	s15, r3
 8000d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	edc3 7a04 	vstr	s15, [r3, #16]
	ball_data->X_screen_speed = 0;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f04f 0200 	mov.w	r2, #0
 8000d68:	615a      	str	r2, [r3, #20]
	ball_data->Y_screen_speed = 0;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <ball_ctrl_restetDrift>:

void ball_ctrl_restetDrift(Ball_control_data *ball_data)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
	ball_data->ctrlX_angle = 0;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f04f 0200 	mov.w	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
	ball_data->ctrlY_angle = 0;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f04f 0200 	mov.w	r2, #0
 8000d90:	605a      	str	r2, [r3, #4]
	ball_data->ctrlY_angle = 0;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f04f 0200 	mov.w	r2, #0
 8000d98:	605a      	str	r2, [r3, #4]
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <ball_update_ctrl_angles>:

void ball_update_ctrl_angles(Ball_control_data *ball_data, L3GD20 *L3GD20_data, int delta_time_ms)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
	float delta_time = delta_time_ms / 1000.0;
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff fb6d 	bl	8000494 <__aeabi_i2d>
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <ball_update_ctrl_angles+0x90>)
 8000dc0:	f7ff fcfc 	bl	80007bc <__aeabi_ddiv>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	460c      	mov	r4, r1
 8000dc8:	4618      	mov	r0, r3
 8000dca:	4621      	mov	r1, r4
 8000dcc:	f7ff fdde 	bl	800098c <__aeabi_d2f>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	617b      	str	r3, [r7, #20]
	ball_data->ctrlX_angle += L3GD20_data->X_val * delta_time;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	ed93 7a00 	vldr	s14, [r3]
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	edd3 6a03 	vldr	s13, [r3, #12]
 8000de0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	edc3 7a00 	vstr	s15, [r3]
	ball_data->ctrlY_angle += L3GD20_data->Y_val * delta_time;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	ed93 7a01 	vldr	s14, [r3, #4]
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	edd3 6a04 	vldr	s13, [r3, #16]
 8000dfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	edc3 7a01 	vstr	s15, [r3, #4]
	ball_data->ctrlZ_angle += L3GD20_data->Z_val * delta_time;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	ed93 7a02 	vldr	s14, [r3, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	edd3 6a05 	vldr	s13, [r3, #20]
 8000e1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000e2e:	bf00      	nop
 8000e30:	371c      	adds	r7, #28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd90      	pop	{r4, r7, pc}
 8000e36:	bf00      	nop
 8000e38:	408f4000 	.word	0x408f4000
 8000e3c:	00000000 	.word	0x00000000

08000e40 <ball_update_pos>:

void ball_update_pos(Ball_control_data *ball_data, int delta_time_ms)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	ed2d 8b02 	vpush	{d8}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
	float delta_time = delta_time_ms / 1000.0;
 8000e4e:	6838      	ldr	r0, [r7, #0]
 8000e50:	f7ff fb20 	bl	8000494 <__aeabi_i2d>
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	4b6f      	ldr	r3, [pc, #444]	; (8001018 <ball_update_pos+0x1d8>)
 8000e5a:	f7ff fcaf 	bl	80007bc <__aeabi_ddiv>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	460c      	mov	r4, r1
 8000e62:	4618      	mov	r0, r3
 8000e64:	4621      	mov	r1, r4
 8000e66:	f7ff fd91 	bl	800098c <__aeabi_d2f>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	617b      	str	r3, [r7, #20]
	float X_radAngle = (ball_data->ctrlX_angle * PI_CONST / 180.0);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fb20 	bl	80004b8 <__aeabi_f2d>
 8000e78:	a365      	add	r3, pc, #404	; (adr r3, 8001010 <ball_update_pos+0x1d0>)
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	f7ff fb73 	bl	8000568 <__aeabi_dmul>
 8000e82:	4603      	mov	r3, r0
 8000e84:	460c      	mov	r4, r1
 8000e86:	4618      	mov	r0, r3
 8000e88:	4621      	mov	r1, r4
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	4b63      	ldr	r3, [pc, #396]	; (800101c <ball_update_pos+0x1dc>)
 8000e90:	f7ff fc94 	bl	80007bc <__aeabi_ddiv>
 8000e94:	4603      	mov	r3, r0
 8000e96:	460c      	mov	r4, r1
 8000e98:	4618      	mov	r0, r3
 8000e9a:	4621      	mov	r1, r4
 8000e9c:	f7ff fd76 	bl	800098c <__aeabi_d2f>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	613b      	str	r3, [r7, #16]
	float Y_radAngle = (ball_data->ctrlY_angle * PI_CONST / 180.0);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fb05 	bl	80004b8 <__aeabi_f2d>
 8000eae:	a358      	add	r3, pc, #352	; (adr r3, 8001010 <ball_update_pos+0x1d0>)
 8000eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb4:	f7ff fb58 	bl	8000568 <__aeabi_dmul>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	460c      	mov	r4, r1
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	4621      	mov	r1, r4
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	4b55      	ldr	r3, [pc, #340]	; (800101c <ball_update_pos+0x1dc>)
 8000ec6:	f7ff fc79 	bl	80007bc <__aeabi_ddiv>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	460c      	mov	r4, r1
 8000ece:	4618      	mov	r0, r3
 8000ed0:	4621      	mov	r1, r4
 8000ed2:	f7ff fd5b 	bl	800098c <__aeabi_d2f>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	60fb      	str	r3, [r7, #12]

	ball_data->X_screen_speed += sinf(X_radAngle) * GRAVITY_CONST * delta_time;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	ed93 8a05 	vldr	s16, [r3, #20]
 8000ee0:	ed97 0a04 	vldr	s0, [r7, #16]
 8000ee4:	f005 fd84 	bl	80069f0 <sinf>
 8000ee8:	eeb0 7a40 	vmov.f32	s14, s0
 8000eec:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8001020 <ball_update_pos+0x1e0>
 8000ef0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ef4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000efc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	edc3 7a05 	vstr	s15, [r3, #20]
	ball_data->Y_screen_speed += sinf(Y_radAngle) * GRAVITY_CONST * delta_time;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	ed93 8a06 	vldr	s16, [r3, #24]
 8000f0c:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f10:	f005 fd6e 	bl	80069f0 <sinf>
 8000f14:	eeb0 7a40 	vmov.f32	s14, s0
 8000f18:	eddf 7a41 	vldr	s15, [pc, #260]	; 8001020 <ball_update_pos+0x1e0>
 8000f1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f20:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f28:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	edc3 7a06 	vstr	s15, [r3, #24]

	if(ball_data->X_screen_speed > 0)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f40:	dd0e      	ble.n	8000f60 <ball_update_pos+0x120>
		ball_data->X_screen_speed -= FRICTION_CONST * delta_time;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f48:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f4c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001024 <ball_update_pos+0x1e4>
 8000f50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	edc3 7a05 	vstr	s15, [r3, #20]
 8000f5e:	e00d      	b.n	8000f7c <ball_update_pos+0x13c>
	else
		ball_data->X_screen_speed += FRICTION_CONST * delta_time;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f6a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001024 <ball_update_pos+0x1e4>
 8000f6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	edc3 7a05 	vstr	s15, [r3, #20]

	if(ball_data->Y_screen_speed > 0)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8a:	dd0e      	ble.n	8000faa <ball_update_pos+0x16a>
			ball_data->Y_screen_speed -= FRICTION_CONST * delta_time;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f92:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f96:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001024 <ball_update_pos+0x1e4>
 8000f9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	edc3 7a06 	vstr	s15, [r3, #24]
 8000fa8:	e00d      	b.n	8000fc6 <ball_update_pos+0x186>
		else
			ball_data->Y_screen_speed += FRICTION_CONST * delta_time;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	ed93 7a06 	vldr	s14, [r3, #24]
 8000fb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fb4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001024 <ball_update_pos+0x1e4>
 8000fb8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	edc3 7a06 	vstr	s15, [r3, #24]

	ball_data->X_screen_pos += (ball_data->X_screen_speed * delta_time);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	ed93 7a03 	vldr	s14, [r3, #12]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	edd3 6a05 	vldr	s13, [r3, #20]
 8000fd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	edc3 7a03 	vstr	s15, [r3, #12]
	ball_data->Y_screen_pos += (ball_data->Y_screen_speed * delta_time);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	ed93 7a04 	vldr	s14, [r3, #16]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	edd3 6a06 	vldr	s13, [r3, #24]
 8000ff0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8001002:	bf00      	nop
 8001004:	371c      	adds	r7, #28
 8001006:	46bd      	mov	sp, r7
 8001008:	ecbd 8b02 	vpop	{d8}
 800100c:	bd90      	pop	{r4, r7, pc}
 800100e:	bf00      	nop
 8001010:	4d12d84a 	.word	0x4d12d84a
 8001014:	400921fb 	.word	0x400921fb
 8001018:	408f4000 	.word	0x408f4000
 800101c:	40668000 	.word	0x40668000
 8001020:	43e10000 	.word	0x43e10000
 8001024:	42480000 	.word	0x42480000

08001028 <ball_handle_collision>:

void ball_handle_collision(Ball_control_data *ball_data,
						   int maxX, int minX, int maxY, int minY)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
	if(ball_data->X_screen_pos > maxX || ball_data->X_screen_pos < minX)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	ed93 7a03 	vldr	s14, [r3, #12]
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	ee07 3a90 	vmov	s15, r3
 8001042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001046:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800104a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104e:	dc0c      	bgt.n	800106a <ball_handle_collision+0x42>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	ed93 7a03 	vldr	s14, [r3, #12]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001060:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001068:	d549      	bpl.n	80010fe <ball_handle_collision+0xd6>
	{
		ball_data->X_screen_speed = -ball_data->X_screen_speed * WALL_ENERGY_LOSS_CONST;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001070:	eef1 7a67 	vneg.f32	s15, s15
 8001074:	ee17 3a90 	vmov	r3, s15
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fa1d 	bl	80004b8 <__aeabi_f2d>
 800107e:	a354      	add	r3, pc, #336	; (adr r3, 80011d0 <ball_handle_collision+0x1a8>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	f7ff fa70 	bl	8000568 <__aeabi_dmul>
 8001088:	4603      	mov	r3, r0
 800108a:	460c      	mov	r4, r1
 800108c:	4618      	mov	r0, r3
 800108e:	4621      	mov	r1, r4
 8001090:	f7ff fc7c 	bl	800098c <__aeabi_d2f>
 8001094:	4602      	mov	r2, r0
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	615a      	str	r2, [r3, #20]
		ball_data->X_screen_pos = ball_data->X_screen_pos > maxX ? maxX : ball_data->X_screen_pos;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	ed93 7a03 	vldr	s14, [r3, #12]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	ee07 3a90 	vmov	s15, r3
 80010a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	dd05      	ble.n	80010c0 <ball_handle_collision+0x98>
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010be:	e002      	b.n	80010c6 <ball_handle_collision+0x9e>
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	edc3 7a03 	vstr	s15, [r3, #12]
		ball_data->X_screen_pos = ball_data->X_screen_pos < minX ? minX : ball_data->X_screen_pos;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	ee07 3a90 	vmov	s15, r3
 80010d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	d505      	bpl.n	80010f2 <ball_handle_collision+0xca>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	ee07 3a90 	vmov	s15, r3
 80010ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f0:	e002      	b.n	80010f8 <ball_handle_collision+0xd0>
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	edc3 7a03 	vstr	s15, [r3, #12]
	}
	if(ball_data->Y_screen_pos > maxY || ball_data->Y_screen_pos < minY)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	ed93 7a04 	vldr	s14, [r3, #16]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800110e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001116:	dc0d      	bgt.n	8001134 <ball_handle_collision+0x10c>
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	ed93 7a04 	vldr	s14, [r3, #16]
 800111e:	6a3b      	ldr	r3, [r7, #32]
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001128:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800112c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001130:	d400      	bmi.n	8001134 <ball_handle_collision+0x10c>
	{
		ball_data->Y_screen_speed = -ball_data->Y_screen_speed * WALL_ENERGY_LOSS_CONST;
		ball_data->Y_screen_pos = ball_data->Y_screen_pos > maxY ? maxY : ball_data->Y_screen_pos;
		ball_data->Y_screen_pos = ball_data->Y_screen_pos < minY ? minY : ball_data->Y_screen_pos;
	}
}
 8001132:	e049      	b.n	80011c8 <ball_handle_collision+0x1a0>
		ball_data->Y_screen_speed = -ball_data->Y_screen_speed * WALL_ENERGY_LOSS_CONST;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	edd3 7a06 	vldr	s15, [r3, #24]
 800113a:	eef1 7a67 	vneg.f32	s15, s15
 800113e:	ee17 3a90 	vmov	r3, s15
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f9b8 	bl	80004b8 <__aeabi_f2d>
 8001148:	a321      	add	r3, pc, #132	; (adr r3, 80011d0 <ball_handle_collision+0x1a8>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	f7ff fa0b 	bl	8000568 <__aeabi_dmul>
 8001152:	4603      	mov	r3, r0
 8001154:	460c      	mov	r4, r1
 8001156:	4618      	mov	r0, r3
 8001158:	4621      	mov	r1, r4
 800115a:	f7ff fc17 	bl	800098c <__aeabi_d2f>
 800115e:	4602      	mov	r2, r0
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	619a      	str	r2, [r3, #24]
		ball_data->Y_screen_pos = ball_data->Y_screen_pos > maxY ? maxY : ball_data->Y_screen_pos;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	ed93 7a04 	vldr	s14, [r3, #16]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001174:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117c:	dd05      	ble.n	800118a <ball_handle_collision+0x162>
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	e002      	b.n	8001190 <ball_handle_collision+0x168>
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	edc3 7a04 	vstr	s15, [r3, #16]
		ball_data->Y_screen_pos = ball_data->Y_screen_pos < minY ? minY : ball_data->Y_screen_pos;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	ed93 7a04 	vldr	s14, [r3, #16]
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	ee07 3a90 	vmov	s15, r3
 80011a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ae:	d505      	bpl.n	80011bc <ball_handle_collision+0x194>
 80011b0:	6a3b      	ldr	r3, [r7, #32]
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ba:	e002      	b.n	80011c2 <ball_handle_collision+0x19a>
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	edd3 7a04 	vldr	s15, [r3, #16]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd90      	pop	{r4, r7, pc}
 80011d0:	cccccccd 	.word	0xcccccccd
 80011d4:	3fe4cccc 	.word	0x3fe4cccc

080011d8 <L3GD20_init>:
 */
#include "gyroscope.h"

//struct L3GD20 L3GD20_data;

int L3GD20_init(SPI_HandleTypeDef *m_hspi_handle, L3GD20 *L3GD20_data){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	L3GD20_data->hspi_handle = m_hspi_handle;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	2102      	movs	r1, #2
 80011ec:	4812      	ldr	r0, [pc, #72]	; (8001238 <L3GD20_init+0x60>)
 80011ee:	f002 fad9 	bl	80037a4 <HAL_GPIO_WritePin>

	if(L3GD20_recive(L3GD20_WHO_AM_I, L3GD20_data) != 212)
 80011f2:	6839      	ldr	r1, [r7, #0]
 80011f4:	200f      	movs	r0, #15
 80011f6:	f000 f847 	bl	8001288 <L3GD20_recive>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2bd4      	cmp	r3, #212	; 0xd4
 80011fe:	d001      	beq.n	8001204 <L3GD20_init+0x2c>
	{
		return 0;
 8001200:	2300      	movs	r3, #0
 8001202:	e014      	b.n	800122e <L3GD20_init+0x56>
	}

	L3GD20_send(L3GD20_CTRL_REG1, 0x0F, L3GD20_data); // aktywuje żyroskop
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	210f      	movs	r1, #15
 8001208:	2020      	movs	r0, #32
 800120a:	f000 f817 	bl	800123c <L3GD20_send>
	L3GD20_send(L3GD20_CTRL_REG4, 0x20, L3GD20_data); // Okreslenie skali
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	2120      	movs	r1, #32
 8001212:	2023      	movs	r0, #35	; 0x23
 8001214:	f000 f812 	bl	800123c <L3GD20_send>
	L3GD20_send(L3GD20_CTRL_REG2, 0x00, L3GD20_data); // ustawia filtr górnoprzepustowy
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	2100      	movs	r1, #0
 800121c:	2021      	movs	r0, #33	; 0x21
 800121e:	f000 f80d 	bl	800123c <L3GD20_send>
	L3GD20_send(L3GD20_CTRL_REG5, 0x10, L3GD20_data); // włącza filtr górnoprzepustowy
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	2110      	movs	r1, #16
 8001226:	2024      	movs	r0, #36	; 0x24
 8001228:	f000 f808 	bl	800123c <L3GD20_send>

	return 1;
 800122c:	2301      	movs	r3, #1
	address_var[0] = 0x00 | L3GD20_CTRL_REG5;
	address_var[1] = 0x10;
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi5, address_var, 2, 500);
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);*/
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40020800 	.word	0x40020800

0800123c <L3GD20_send>:

void L3GD20_send(uint8_t address, uint8_t data, L3GD20 *L3GD20_data)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	603a      	str	r2, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
 8001248:	460b      	mov	r3, r1
 800124a:	71bb      	strb	r3, [r7, #6]
	uint8_t transmit_data[2];
	transmit_data[0] = address;
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	733b      	strb	r3, [r7, #12]
	transmit_data[1] = data;
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	2102      	movs	r1, #2
 8001258:	480a      	ldr	r0, [pc, #40]	; (8001284 <L3GD20_send+0x48>)
 800125a:	f002 faa3 	bl	80037a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(L3GD20_data->hspi_handle, transmit_data, 2, L3GD20_SPI_WAIT_TIME);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	6818      	ldr	r0, [r3, #0]
 8001262:	f107 010c 	add.w	r1, r7, #12
 8001266:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800126a:	2202      	movs	r2, #2
 800126c:	f003 ff48 	bl	8005100 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	2102      	movs	r1, #2
 8001274:	4803      	ldr	r0, [pc, #12]	; (8001284 <L3GD20_send+0x48>)
 8001276:	f002 fa95 	bl	80037a4 <HAL_GPIO_WritePin>
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40020800 	.word	0x40020800

08001288 <L3GD20_recive>:

uint8_t L3GD20_recive(uint8_t addres, L3GD20 *L3GD20_data)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af02      	add	r7, sp, #8
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
	uint8_t transmit_data[2];
	uint8_t recive_data[2];
	transmit_data[0] = addres | 0x80;
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800129a:	b2db      	uxtb	r3, r3
 800129c:	733b      	strb	r3, [r7, #12]
	transmit_data[1] = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	737b      	strb	r3, [r7, #13]
	recive_data[1] = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	727b      	strb	r3, [r7, #9]
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2102      	movs	r1, #2
 80012aa:	480c      	ldr	r0, [pc, #48]	; (80012dc <L3GD20_recive+0x54>)
 80012ac:	f002 fa7a 	bl	80037a4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(L3GD20_data->hspi_handle, transmit_data, recive_data, 2, L3GD20_SPI_WAIT_TIME);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	f107 0208 	add.w	r2, r7, #8
 80012b8:	f107 010c 	add.w	r1, r7, #12
 80012bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2302      	movs	r3, #2
 80012c4:	f004 f850 	bl	8005368 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 80012c8:	2201      	movs	r2, #1
 80012ca:	2102      	movs	r1, #2
 80012cc:	4803      	ldr	r0, [pc, #12]	; (80012dc <L3GD20_recive+0x54>)
 80012ce:	f002 fa69 	bl	80037a4 <HAL_GPIO_WritePin>
	return recive_data[1];
 80012d2:	7a7b      	ldrb	r3, [r7, #9]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40020800 	.word	0x40020800

080012e0 <L3GD20_readRawData>:

void L3GD20_readRawData(L3GD20 *L3GD20_data)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	L3GD20_data->X_raw = L3GD20_recive(L3GD20_OUT_X_L, L3GD20_data);
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	2028      	movs	r0, #40	; 0x28
 80012ec:	f7ff ffcc 	bl	8001288 <L3GD20_recive>
 80012f0:	4603      	mov	r3, r0
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	809a      	strh	r2, [r3, #4]
	L3GD20_data->X_raw |= L3GD20_recive(L3GD20_OUT_X_H, L3GD20_data) << 8;
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	2029      	movs	r0, #41	; 0x29
 80012fc:	f7ff ffc4 	bl	8001288 <L3GD20_recive>
 8001300:	4603      	mov	r3, r0
 8001302:	0219      	lsls	r1, r3, #8
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800130a:	b20b      	sxth	r3, r1
 800130c:	4313      	orrs	r3, r2
 800130e:	b21a      	sxth	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	809a      	strh	r2, [r3, #4]

	L3GD20_data->Y_raw = L3GD20_recive(L3GD20_OUT_Y_L, L3GD20_data);
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	202a      	movs	r0, #42	; 0x2a
 8001318:	f7ff ffb6 	bl	8001288 <L3GD20_recive>
 800131c:	4603      	mov	r3, r0
 800131e:	b21a      	sxth	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	80da      	strh	r2, [r3, #6]
	L3GD20_data->Y_raw |= L3GD20_recive(L3GD20_OUT_Y_H, L3GD20_data) << 8;
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	202b      	movs	r0, #43	; 0x2b
 8001328:	f7ff ffae 	bl	8001288 <L3GD20_recive>
 800132c:	4603      	mov	r3, r0
 800132e:	0219      	lsls	r1, r3, #8
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001336:	b20b      	sxth	r3, r1
 8001338:	4313      	orrs	r3, r2
 800133a:	b21a      	sxth	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	80da      	strh	r2, [r3, #6]

	L3GD20_data->Z_raw = L3GD20_recive(L3GD20_OUT_Z_L, L3GD20_data);
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	202c      	movs	r0, #44	; 0x2c
 8001344:	f7ff ffa0 	bl	8001288 <L3GD20_recive>
 8001348:	4603      	mov	r3, r0
 800134a:	b21a      	sxth	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	811a      	strh	r2, [r3, #8]
	L3GD20_data->Z_raw |= L3GD20_recive(L3GD20_OUT_Z_H, L3GD20_data) << 8;
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	202d      	movs	r0, #45	; 0x2d
 8001354:	f7ff ff98 	bl	8001288 <L3GD20_recive>
 8001358:	4603      	mov	r3, r0
 800135a:	0219      	lsls	r1, r3, #8
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8001362:	b20b      	sxth	r3, r1
 8001364:	4313      	orrs	r3, r2
 8001366:	b21a      	sxth	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	811a      	strh	r2, [r3, #8]
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	0000      	movs	r0, r0
	...

08001378 <L3GD20_convertRawData>:

void L3GD20_convertRawData(struct L3GD20 *L3GD20_data)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	L3GD20_data->X_val = (L3GD20_data->X_raw + L3GD20_X_OFFSET) * SENSITIVITY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001386:	3b1e      	subs	r3, #30
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f883 	bl	8000494 <__aeabi_i2d>
 800138e:	a31e      	add	r3, pc, #120	; (adr r3, 8001408 <L3GD20_convertRawData+0x90>)
 8001390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001394:	f7ff f8e8 	bl	8000568 <__aeabi_dmul>
 8001398:	4603      	mov	r3, r0
 800139a:	460c      	mov	r4, r1
 800139c:	4618      	mov	r0, r3
 800139e:	4621      	mov	r1, r4
 80013a0:	f7ff faf4 	bl	800098c <__aeabi_d2f>
 80013a4:	4602      	mov	r2, r0
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60da      	str	r2, [r3, #12]
	L3GD20_data->Y_val = (L3GD20_data->Y_raw + L3GD20_Y_OFFSET) * SENSITIVITY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013b0:	3b05      	subs	r3, #5
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f86e 	bl	8000494 <__aeabi_i2d>
 80013b8:	a313      	add	r3, pc, #76	; (adr r3, 8001408 <L3GD20_convertRawData+0x90>)
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	f7ff f8d3 	bl	8000568 <__aeabi_dmul>
 80013c2:	4603      	mov	r3, r0
 80013c4:	460c      	mov	r4, r1
 80013c6:	4618      	mov	r0, r3
 80013c8:	4621      	mov	r1, r4
 80013ca:	f7ff fadf 	bl	800098c <__aeabi_d2f>
 80013ce:	4602      	mov	r2, r0
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	611a      	str	r2, [r3, #16]
	L3GD20_data->Z_val = (L3GD20_data->Z_raw + L3GD20_Z_OFFSET) * SENSITIVITY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013da:	330d      	adds	r3, #13
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f859 	bl	8000494 <__aeabi_i2d>
 80013e2:	a309      	add	r3, pc, #36	; (adr r3, 8001408 <L3GD20_convertRawData+0x90>)
 80013e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e8:	f7ff f8be 	bl	8000568 <__aeabi_dmul>
 80013ec:	4603      	mov	r3, r0
 80013ee:	460c      	mov	r4, r1
 80013f0:	4618      	mov	r0, r3
 80013f2:	4621      	mov	r1, r4
 80013f4:	f7ff faca 	bl	800098c <__aeabi_d2f>
 80013f8:	4602      	mov	r2, r0
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	615a      	str	r2, [r3, #20]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bd90      	pop	{r4, r7, pc}
 8001406:	bf00      	nop
 8001408:	70a3d70a 	.word	0x70a3d70a
 800140c:	3fb70a3d 	.word	0x3fb70a3d

08001410 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001414:	f000 fe9a 	bl	800214c <LCD_IO_Init>

  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001418:	20ca      	movs	r0, #202	; 0xca
 800141a:	f000 f943 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800141e:	20c3      	movs	r0, #195	; 0xc3
 8001420:	f000 f94d 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001424:	2008      	movs	r0, #8
 8001426:	f000 f94a 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800142a:	2050      	movs	r0, #80	; 0x50
 800142c:	f000 f947 	bl	80016be <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001430:	20cf      	movs	r0, #207	; 0xcf
 8001432:	f000 f937 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001436:	2000      	movs	r0, #0
 8001438:	f000 f941 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800143c:	20c1      	movs	r0, #193	; 0xc1
 800143e:	f000 f93e 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001442:	2030      	movs	r0, #48	; 0x30
 8001444:	f000 f93b 	bl	80016be <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001448:	20ed      	movs	r0, #237	; 0xed
 800144a:	f000 f92b 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800144e:	2064      	movs	r0, #100	; 0x64
 8001450:	f000 f935 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001454:	2003      	movs	r0, #3
 8001456:	f000 f932 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x12);
 800145a:	2012      	movs	r0, #18
 800145c:	f000 f92f 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001460:	2081      	movs	r0, #129	; 0x81
 8001462:	f000 f92c 	bl	80016be <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001466:	20e8      	movs	r0, #232	; 0xe8
 8001468:	f000 f91c 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800146c:	2085      	movs	r0, #133	; 0x85
 800146e:	f000 f926 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001472:	2000      	movs	r0, #0
 8001474:	f000 f923 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001478:	2078      	movs	r0, #120	; 0x78
 800147a:	f000 f920 	bl	80016be <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800147e:	20cb      	movs	r0, #203	; 0xcb
 8001480:	f000 f910 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001484:	2039      	movs	r0, #57	; 0x39
 8001486:	f000 f91a 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 800148a:	202c      	movs	r0, #44	; 0x2c
 800148c:	f000 f917 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001490:	2000      	movs	r0, #0
 8001492:	f000 f914 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001496:	2034      	movs	r0, #52	; 0x34
 8001498:	f000 f911 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800149c:	2002      	movs	r0, #2
 800149e:	f000 f90e 	bl	80016be <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80014a2:	20f7      	movs	r0, #247	; 0xf7
 80014a4:	f000 f8fe 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80014a8:	2020      	movs	r0, #32
 80014aa:	f000 f908 	bl	80016be <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80014ae:	20ea      	movs	r0, #234	; 0xea
 80014b0:	f000 f8f8 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80014b4:	2000      	movs	r0, #0
 80014b6:	f000 f902 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80014ba:	2000      	movs	r0, #0
 80014bc:	f000 f8ff 	bl	80016be <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80014c0:	20b1      	movs	r0, #177	; 0xb1
 80014c2:	f000 f8ef 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80014c6:	2000      	movs	r0, #0
 80014c8:	f000 f8f9 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80014cc:	201b      	movs	r0, #27
 80014ce:	f000 f8f6 	bl	80016be <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80014d2:	20b6      	movs	r0, #182	; 0xb6
 80014d4:	f000 f8e6 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80014d8:	200a      	movs	r0, #10
 80014da:	f000 f8f0 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80014de:	20a2      	movs	r0, #162	; 0xa2
 80014e0:	f000 f8ed 	bl	80016be <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80014e4:	20c0      	movs	r0, #192	; 0xc0
 80014e6:	f000 f8dd 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80014ea:	2010      	movs	r0, #16
 80014ec:	f000 f8e7 	bl	80016be <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80014f0:	20c1      	movs	r0, #193	; 0xc1
 80014f2:	f000 f8d7 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80014f6:	2010      	movs	r0, #16
 80014f8:	f000 f8e1 	bl	80016be <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80014fc:	20c5      	movs	r0, #197	; 0xc5
 80014fe:	f000 f8d1 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001502:	2045      	movs	r0, #69	; 0x45
 8001504:	f000 f8db 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001508:	2015      	movs	r0, #21
 800150a:	f000 f8d8 	bl	80016be <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 800150e:	20c7      	movs	r0, #199	; 0xc7
 8001510:	f000 f8c8 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001514:	2090      	movs	r0, #144	; 0x90
 8001516:	f000 f8d2 	bl	80016be <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800151a:	2036      	movs	r0, #54	; 0x36
 800151c:	f000 f8c2 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001520:	20c8      	movs	r0, #200	; 0xc8
 8001522:	f000 f8cc 	bl	80016be <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001526:	20f2      	movs	r0, #242	; 0xf2
 8001528:	f000 f8bc 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800152c:	2000      	movs	r0, #0
 800152e:	f000 f8c6 	bl	80016be <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001532:	20b0      	movs	r0, #176	; 0xb0
 8001534:	f000 f8b6 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001538:	20c2      	movs	r0, #194	; 0xc2
 800153a:	f000 f8c0 	bl	80016be <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800153e:	20b6      	movs	r0, #182	; 0xb6
 8001540:	f000 f8b0 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001544:	200a      	movs	r0, #10
 8001546:	f000 f8ba 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 800154a:	20a7      	movs	r0, #167	; 0xa7
 800154c:	f000 f8b7 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001550:	2027      	movs	r0, #39	; 0x27
 8001552:	f000 f8b4 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001556:	2004      	movs	r0, #4
 8001558:	f000 f8b1 	bl	80016be <ili9341_WriteData>

  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800155c:	202a      	movs	r0, #42	; 0x2a
 800155e:	f000 f8a1 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001562:	2000      	movs	r0, #0
 8001564:	f000 f8ab 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001568:	2000      	movs	r0, #0
 800156a:	f000 f8a8 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800156e:	2000      	movs	r0, #0
 8001570:	f000 f8a5 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001574:	20ef      	movs	r0, #239	; 0xef
 8001576:	f000 f8a2 	bl	80016be <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 800157a:	202b      	movs	r0, #43	; 0x2b
 800157c:	f000 f892 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001580:	2000      	movs	r0, #0
 8001582:	f000 f89c 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001586:	2000      	movs	r0, #0
 8001588:	f000 f899 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800158c:	2001      	movs	r0, #1
 800158e:	f000 f896 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001592:	203f      	movs	r0, #63	; 0x3f
 8001594:	f000 f893 	bl	80016be <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001598:	20f6      	movs	r0, #246	; 0xf6
 800159a:	f000 f883 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800159e:	2001      	movs	r0, #1
 80015a0:	f000 f88d 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80015a4:	2000      	movs	r0, #0
 80015a6:	f000 f88a 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80015aa:	2006      	movs	r0, #6
 80015ac:	f000 f887 	bl	80016be <ili9341_WriteData>

  ili9341_WriteReg(LCD_GRAM);
 80015b0:	202c      	movs	r0, #44	; 0x2c
 80015b2:	f000 f877 	bl	80016a4 <ili9341_WriteReg>
  LCD_Delay(200);
 80015b6:	20c8      	movs	r0, #200	; 0xc8
 80015b8:	f000 fe84 	bl	80022c4 <LCD_Delay>

  ili9341_WriteReg(LCD_GAMMA);
 80015bc:	2026      	movs	r0, #38	; 0x26
 80015be:	f000 f871 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80015c2:	2001      	movs	r0, #1
 80015c4:	f000 f87b 	bl	80016be <ili9341_WriteData>

  ili9341_WriteReg(LCD_PGAMMA);
 80015c8:	20e0      	movs	r0, #224	; 0xe0
 80015ca:	f000 f86b 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80015ce:	200f      	movs	r0, #15
 80015d0:	f000 f875 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80015d4:	2029      	movs	r0, #41	; 0x29
 80015d6:	f000 f872 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80015da:	2024      	movs	r0, #36	; 0x24
 80015dc:	f000 f86f 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80015e0:	200c      	movs	r0, #12
 80015e2:	f000 f86c 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80015e6:	200e      	movs	r0, #14
 80015e8:	f000 f869 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80015ec:	2009      	movs	r0, #9
 80015ee:	f000 f866 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80015f2:	204e      	movs	r0, #78	; 0x4e
 80015f4:	f000 f863 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80015f8:	2078      	movs	r0, #120	; 0x78
 80015fa:	f000 f860 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80015fe:	203c      	movs	r0, #60	; 0x3c
 8001600:	f000 f85d 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001604:	2009      	movs	r0, #9
 8001606:	f000 f85a 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800160a:	2013      	movs	r0, #19
 800160c:	f000 f857 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001610:	2005      	movs	r0, #5
 8001612:	f000 f854 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001616:	2017      	movs	r0, #23
 8001618:	f000 f851 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800161c:	2011      	movs	r0, #17
 800161e:	f000 f84e 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001622:	2000      	movs	r0, #0
 8001624:	f000 f84b 	bl	80016be <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001628:	20e1      	movs	r0, #225	; 0xe1
 800162a:	f000 f83b 	bl	80016a4 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800162e:	2000      	movs	r0, #0
 8001630:	f000 f845 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001634:	2016      	movs	r0, #22
 8001636:	f000 f842 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800163a:	201b      	movs	r0, #27
 800163c:	f000 f83f 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001640:	2004      	movs	r0, #4
 8001642:	f000 f83c 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001646:	2011      	movs	r0, #17
 8001648:	f000 f839 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800164c:	2007      	movs	r0, #7
 800164e:	f000 f836 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001652:	2031      	movs	r0, #49	; 0x31
 8001654:	f000 f833 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001658:	2033      	movs	r0, #51	; 0x33
 800165a:	f000 f830 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800165e:	2042      	movs	r0, #66	; 0x42
 8001660:	f000 f82d 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001664:	2005      	movs	r0, #5
 8001666:	f000 f82a 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800166a:	200c      	movs	r0, #12
 800166c:	f000 f827 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001670:	200a      	movs	r0, #10
 8001672:	f000 f824 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001676:	2028      	movs	r0, #40	; 0x28
 8001678:	f000 f821 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800167c:	202f      	movs	r0, #47	; 0x2f
 800167e:	f000 f81e 	bl	80016be <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001682:	200f      	movs	r0, #15
 8001684:	f000 f81b 	bl	80016be <ili9341_WriteData>

  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001688:	2011      	movs	r0, #17
 800168a:	f000 f80b 	bl	80016a4 <ili9341_WriteReg>
  LCD_Delay(200);
 800168e:	20c8      	movs	r0, #200	; 0xc8
 8001690:	f000 fe18 	bl	80022c4 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001694:	2029      	movs	r0, #41	; 0x29
 8001696:	f000 f805 	bl	80016a4 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800169a:	202c      	movs	r0, #44	; 0x2c
 800169c:	f000 f802 	bl	80016a4 <ili9341_WriteReg>
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 fde5 	bl	8002280 <LCD_IO_WriteReg>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fdb6 	bl	800223c <LCD_IO_WriteData>
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b090      	sub	sp, #64	; 0x40
 80016dc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint32_t index = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	637b      	str	r3, [r7, #52]	; 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e2:	f001 fa45 	bl	8002b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e6:	f000 f871 	bl	80017cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //BSP_LED_Init(LED3);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ea:	f000 fb39 	bl	8001d60 <MX_GPIO_Init>
  MX_CRC_Init();
 80016ee:	f000 f8f1 	bl	80018d4 <MX_CRC_Init>
  MX_DMA2D_Init();
 80016f2:	f000 f903 	bl	80018fc <MX_DMA2D_Init>
  MX_FMC_Init();
 80016f6:	f000 fae3 	bl	8001cc0 <MX_FMC_Init>
  MX_LTDC_Init();
 80016fa:	f000 f971 	bl	80019e0 <MX_LTDC_Init>
  MX_SPI5_Init();
 80016fe:	f000 fa2f 	bl	8001b60 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001702:	f000 fa63 	bl	8001bcc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001706:	f000 fab1 	bl	8001c6c <MX_USART1_UART_Init>
  MX_I2C3_Init();
 800170a:	f000 f929 	bl	8001960 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  L3GD20 m_gyro;
  Ball_control_data m_ball;
  L3GD20_init(&hspi5, &m_gyro);
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	4619      	mov	r1, r3
 8001714:	4829      	ldr	r0, [pc, #164]	; (80017bc <main+0xe4>)
 8001716:	f7ff fd5f 	bl	80011d8 <L3GD20_init>
  ball_ctrl_init(&m_ball, 100, 100);
 800171a:	463b      	mov	r3, r7
 800171c:	2264      	movs	r2, #100	; 0x64
 800171e:	2164      	movs	r1, #100	; 0x64
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fb03 	bl	8000d2c <ball_ctrl_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  L3GD20_readRawData(&m_gyro);
 8001726:	f107 031c 	add.w	r3, r7, #28
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fdd8 	bl	80012e0 <L3GD20_readRawData>
	  L3GD20_convertRawData(&m_gyro);
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fe1f 	bl	8001378 <L3GD20_convertRawData>
	  ball_update_ctrl_angles(&m_ball, &m_gyro, 10);
 800173a:	f107 011c 	add.w	r1, r7, #28
 800173e:	463b      	mov	r3, r7
 8001740:	220a      	movs	r2, #10
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fb30 	bl	8000da8 <ball_update_ctrl_angles>
	  ball_update_pos(&m_ball, 10);
 8001748:	463b      	mov	r3, r7
 800174a:	210a      	movs	r1, #10
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fb77 	bl	8000e40 <ball_update_pos>
	  ball_handle_collision(&m_ball, 260, 0, 180, 0);
 8001752:	4638      	mov	r0, r7
 8001754:	2300      	movs	r3, #0
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	23b4      	movs	r3, #180	; 0xb4
 800175a:	2200      	movs	r2, #0
 800175c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001760:	f7ff fc62 	bl	8001028 <ball_handle_collision>

	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 8001764:	2101      	movs	r1, #1
 8001766:	4816      	ldr	r0, [pc, #88]	; (80017c0 <main+0xe8>)
 8001768:	f002 f804 	bl	8003774 <HAL_GPIO_ReadPin>
 800176c:	4603      	mov	r3, r0
 800176e:	2b01      	cmp	r3, #1
 8001770:	d103      	bne.n	800177a <main+0xa2>
	  {
	  	  ball_ctrl_restetDrift(&m_ball);
 8001772:	463b      	mov	r3, r7
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fb00 	bl	8000d7a <ball_ctrl_restetDrift>
	  }

	  HAL_LTDC_SetWindowPosition_NoReload(&hltdc, m_ball.Y_screen_pos, m_ball.X_screen_pos, 1);
 800177a:	edd7 7a04 	vldr	s15, [r7, #16]
 800177e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8001782:	edd7 7a03 	vldr	s15, [r7, #12]
 8001786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800178a:	2301      	movs	r3, #1
 800178c:	ee17 2a90 	vmov	r2, s15
 8001790:	ee17 1a10 	vmov	r1, s14
 8001794:	480b      	ldr	r0, [pc, #44]	; (80017c4 <main+0xec>)
 8001796:	f002 fbc8 	bl	8003f2a <HAL_LTDC_SetWindowPosition_NoReload>
	  /* Ask for LTDC reload within next vertical blanking*/
	  ReloadFlag = 0;
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <main+0xf0>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
	  HAL_LTDC_Reload(&hltdc,LTDC_SRCR_VBR);
 80017a0:	2102      	movs	r1, #2
 80017a2:	4808      	ldr	r0, [pc, #32]	; (80017c4 <main+0xec>)
 80017a4:	f002 fb92 	bl	8003ecc <HAL_LTDC_Reload>

	  while(ReloadFlag == 0) { }
 80017a8:	bf00      	nop
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <main+0xf0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0fb      	beq.n	80017aa <main+0xd2>

	  HAL_Delay(10);
 80017b2:	200a      	movs	r0, #10
 80017b4:	f001 fa1e 	bl	8002bf4 <HAL_Delay>
	  L3GD20_readRawData(&m_gyro);
 80017b8:	e7b5      	b.n	8001726 <main+0x4e>
 80017ba:	bf00      	nop
 80017bc:	200000e4 	.word	0x200000e4
 80017c0:	40020000 	.word	0x40020000
 80017c4:	20000144 	.word	0x20000144
 80017c8:	2000002c 	.word	0x2000002c

080017cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b0a0      	sub	sp, #128	; 0x80
 80017d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017d6:	2230      	movs	r2, #48	; 0x30
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f005 f900 	bl	80069e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	2230      	movs	r2, #48	; 0x30
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f005 f8f1 	bl	80069e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	4b32      	ldr	r3, [pc, #200]	; (80018cc <SystemClock_Config+0x100>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a31      	ldr	r2, [pc, #196]	; (80018cc <SystemClock_Config+0x100>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
 800180e:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <SystemClock_Config+0x100>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <SystemClock_Config+0x104>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001826:	4a2a      	ldr	r2, [pc, #168]	; (80018d0 <SystemClock_Config+0x104>)
 8001828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <SystemClock_Config+0x104>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800183a:	2301      	movs	r3, #1
 800183c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800183e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001842:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001844:	2302      	movs	r3, #2
 8001846:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001848:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800184c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800184e:	2308      	movs	r3, #8
 8001850:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001852:	2390      	movs	r3, #144	; 0x90
 8001854:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001856:	2302      	movs	r3, #2
 8001858:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800185a:	2303      	movs	r3, #3
 800185c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800185e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001862:	4618      	mov	r0, r3
 8001864:	f002 fd3a 	bl	80042dc <HAL_RCC_OscConfig>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800186e:	f000 fbc7 	bl	8002000 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001872:	230f      	movs	r3, #15
 8001874:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001876:	2302      	movs	r3, #2
 8001878:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800187a:	2300      	movs	r3, #0
 800187c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800187e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001882:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001884:	2300      	movs	r3, #0
 8001886:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001888:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800188c:	2102      	movs	r1, #2
 800188e:	4618      	mov	r0, r3
 8001890:	f002 ff94 	bl	80047bc <HAL_RCC_ClockConfig>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800189a:	f000 fbb1 	bl	8002000 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800189e:	2308      	movs	r3, #8
 80018a0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80018a2:	23c0      	movs	r3, #192	; 0xc0
 80018a4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80018a6:	2304      	movs	r3, #4
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80018aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	4618      	mov	r0, r3
 80018b6:	f003 f9a5 	bl	8004c04 <HAL_RCCEx_PeriphCLKConfig>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80018c0:	f000 fb9e 	bl	8002000 <Error_Handler>
  }
}
 80018c4:	bf00      	nop
 80018c6:	3780      	adds	r7, #128	; 0x80
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40007000 	.word	0x40007000

080018d4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <MX_CRC_Init+0x20>)
 80018da:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <MX_CRC_Init+0x24>)
 80018dc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_CRC_Init+0x20>)
 80018e0:	f001 fa8c 	bl	8002dfc <HAL_CRC_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80018ea:	f000 fb89 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2000013c 	.word	0x2000013c
 80018f8:	40023000 	.word	0x40023000

080018fc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001900:	4b15      	ldr	r3, [pc, #84]	; (8001958 <MX_DMA2D_Init+0x5c>)
 8001902:	4a16      	ldr	r2, [pc, #88]	; (800195c <MX_DMA2D_Init+0x60>)
 8001904:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001906:	4b14      	ldr	r3, [pc, #80]	; (8001958 <MX_DMA2D_Init+0x5c>)
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <MX_DMA2D_Init+0x5c>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <MX_DMA2D_Init+0x5c>)
 8001914:	2200      	movs	r2, #0
 8001916:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <MX_DMA2D_Init+0x5c>)
 800191a:	2200      	movs	r2, #0
 800191c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <MX_DMA2D_Init+0x5c>)
 8001920:	2200      	movs	r2, #0
 8001922:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <MX_DMA2D_Init+0x5c>)
 8001926:	2200      	movs	r2, #0
 8001928:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <MX_DMA2D_Init+0x5c>)
 800192c:	2200      	movs	r2, #0
 800192e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001930:	4809      	ldr	r0, [pc, #36]	; (8001958 <MX_DMA2D_Init+0x5c>)
 8001932:	f001 fa7f 	bl	8002e34 <HAL_DMA2D_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800193c:	f000 fb60 	bl	8002000 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001940:	2101      	movs	r1, #1
 8001942:	4805      	ldr	r0, [pc, #20]	; (8001958 <MX_DMA2D_Init+0x5c>)
 8001944:	f001 fbd0 	bl	80030e8 <HAL_DMA2D_ConfigLayer>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800194e:	f000 fb57 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000026c 	.word	0x2000026c
 800195c:	4002b000 	.word	0x4002b000

08001960 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001964:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <MX_I2C3_Init+0x74>)
 8001966:	4a1c      	ldr	r2, [pc, #112]	; (80019d8 <MX_I2C3_Init+0x78>)
 8001968:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800196a:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <MX_I2C3_Init+0x74>)
 800196c:	4a1b      	ldr	r2, [pc, #108]	; (80019dc <MX_I2C3_Init+0x7c>)
 800196e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001970:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <MX_I2C3_Init+0x74>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001976:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <MX_I2C3_Init+0x74>)
 8001978:	2200      	movs	r2, #0
 800197a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800197c:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <MX_I2C3_Init+0x74>)
 800197e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001982:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <MX_I2C3_Init+0x74>)
 8001986:	2200      	movs	r2, #0
 8001988:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <MX_I2C3_Init+0x74>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001990:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <MX_I2C3_Init+0x74>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <MX_I2C3_Init+0x74>)
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800199c:	480d      	ldr	r0, [pc, #52]	; (80019d4 <MX_I2C3_Init+0x74>)
 800199e:	f001 ff1b 	bl	80037d8 <HAL_I2C_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80019a8:	f000 fb2a 	bl	8002000 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019ac:	2100      	movs	r1, #0
 80019ae:	4809      	ldr	r0, [pc, #36]	; (80019d4 <MX_I2C3_Init+0x74>)
 80019b0:	f002 f84a 	bl	8003a48 <HAL_I2CEx_ConfigAnalogFilter>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80019ba:	f000 fb21 	bl	8002000 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80019be:	2100      	movs	r1, #0
 80019c0:	4804      	ldr	r0, [pc, #16]	; (80019d4 <MX_I2C3_Init+0x74>)
 80019c2:	f002 f87d 	bl	8003ac0 <HAL_I2CEx_ConfigDigitalFilter>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80019cc:	f000 fb18 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000090 	.word	0x20000090
 80019d8:	40005c00 	.word	0x40005c00
 80019dc:	000186a0 	.word	0x000186a0

080019e0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b09a      	sub	sp, #104	; 0x68
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80019e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019ea:	2234      	movs	r2, #52	; 0x34
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f004 fff6 	bl	80069e0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80019f4:	463b      	mov	r3, r7
 80019f6:	2234      	movs	r2, #52	; 0x34
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f004 fff0 	bl	80069e0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */
  ili9341_Init();
 8001a00:	f7ff fd06 	bl	8001410 <ili9341_Init>
  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001a04:	4b53      	ldr	r3, [pc, #332]	; (8001b54 <MX_LTDC_Init+0x174>)
 8001a06:	4a54      	ldr	r2, [pc, #336]	; (8001b58 <MX_LTDC_Init+0x178>)
 8001a08:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001a0a:	4b52      	ldr	r3, [pc, #328]	; (8001b54 <MX_LTDC_Init+0x174>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001a10:	4b50      	ldr	r3, [pc, #320]	; (8001b54 <MX_LTDC_Init+0x174>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001a16:	4b4f      	ldr	r3, [pc, #316]	; (8001b54 <MX_LTDC_Init+0x174>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001a1c:	4b4d      	ldr	r3, [pc, #308]	; (8001b54 <MX_LTDC_Init+0x174>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001a22:	4b4c      	ldr	r3, [pc, #304]	; (8001b54 <MX_LTDC_Init+0x174>)
 8001a24:	2209      	movs	r2, #9
 8001a26:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001a28:	4b4a      	ldr	r3, [pc, #296]	; (8001b54 <MX_LTDC_Init+0x174>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001a2e:	4b49      	ldr	r3, [pc, #292]	; (8001b54 <MX_LTDC_Init+0x174>)
 8001a30:	221d      	movs	r2, #29
 8001a32:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8001a34:	4b47      	ldr	r3, [pc, #284]	; (8001b54 <MX_LTDC_Init+0x174>)
 8001a36:	2203      	movs	r2, #3
 8001a38:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001a3a:	4b46      	ldr	r3, [pc, #280]	; (8001b54 <MX_LTDC_Init+0x174>)
 8001a3c:	f240 120d 	movw	r2, #269	; 0x10d
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8001a42:	4b44      	ldr	r3, [pc, #272]	; (8001b54 <MX_LTDC_Init+0x174>)
 8001a44:	f240 1243 	movw	r2, #323	; 0x143
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001a4a:	4b42      	ldr	r3, [pc, #264]	; (8001b54 <MX_LTDC_Init+0x174>)
 8001a4c:	f240 1217 	movw	r2, #279	; 0x117
 8001a50:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001a52:	4b40      	ldr	r3, [pc, #256]	; (8001b54 <MX_LTDC_Init+0x174>)
 8001a54:	f240 1247 	movw	r2, #327	; 0x147
 8001a58:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001a5a:	4b3e      	ldr	r3, [pc, #248]	; (8001b54 <MX_LTDC_Init+0x174>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001a62:	4b3c      	ldr	r3, [pc, #240]	; (8001b54 <MX_LTDC_Init+0x174>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001a6a:	4b3a      	ldr	r3, [pc, #232]	; (8001b54 <MX_LTDC_Init+0x174>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001a72:	4838      	ldr	r0, [pc, #224]	; (8001b54 <MX_LTDC_Init+0x174>)
 8001a74:	f002 f864 	bl	8003b40 <HAL_LTDC_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_LTDC_Init+0xa2>
  {
    Error_Handler();
 8001a7e:	f000 fabf 	bl	8002000 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8001a86:	23f0      	movs	r3, #240	; 0xf0
 8001a88:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 8001a8e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001a92:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001a94:	2302      	movs	r3, #2
 8001a96:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8001a98:	23ff      	movs	r3, #255	; 0xff
 8001a9a:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001aa0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001aa4:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001aa6:	2307      	movs	r3, #7
 8001aa8:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0x0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8001aae:	23f0      	movs	r3, #240	; 0xf0
 8001ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8001ab2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001ab6:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 255;
 8001abe:	23ff      	movs	r3, #255	; 0xff
 8001ac0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001aca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ace:	2200      	movs	r2, #0
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4820      	ldr	r0, [pc, #128]	; (8001b54 <MX_LTDC_Init+0x174>)
 8001ad4:	f002 f9bc 	bl	8003e50 <HAL_LTDC_ConfigLayer>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_LTDC_Init+0x102>
  {
    Error_Handler();
 8001ade:	f000 fa8f 	bl	8002000 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 60;
 8001ae6:	233c      	movs	r3, #60	; 0x3c
 8001ae8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 60;
 8001aee:	233c      	movs	r3, #60	; 0x3c
 8001af0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001af2:	2302      	movs	r3, #2
 8001af4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 255;
 8001af6:	23ff      	movs	r3, #255	; 0xff
 8001af8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 255;
 8001afa:	23ff      	movs	r3, #255	; 0xff
 8001afc:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001afe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b02:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001b04:	2307      	movs	r3, #7
 8001b06:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 56;
 8001b0c:	2338      	movs	r3, #56	; 0x38
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 57;
 8001b10:	2339      	movs	r3, #57	; 0x39
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001b26:	463b      	mov	r3, r7
 8001b28:	2201      	movs	r2, #1
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4809      	ldr	r0, [pc, #36]	; (8001b54 <MX_LTDC_Init+0x174>)
 8001b2e:	f002 f98f 	bl	8003e50 <HAL_LTDC_ConfigLayer>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_LTDC_Init+0x15c>
  {
    Error_Handler();
 8001b38:	f000 fa62 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  pLayerCfg1.FBStartAdress = (uint32_t)&ball2;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <MX_LTDC_Init+0x17c>)
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1);
 8001b40:	463b      	mov	r3, r7
 8001b42:	2201      	movs	r2, #1
 8001b44:	4619      	mov	r1, r3
 8001b46:	4803      	ldr	r0, [pc, #12]	; (8001b54 <MX_LTDC_Init+0x174>)
 8001b48:	f002 f982 	bl	8003e50 <HAL_LTDC_ConfigLayer>
  /* USER CODE END LTDC_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	3768      	adds	r7, #104	; 0x68
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000144 	.word	0x20000144
 8001b58:	40016800 	.word	0x40016800
 8001b5c:	080074a0 	.word	0x080074a0

08001b60 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001b64:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <MX_SPI5_Init+0x64>)
 8001b66:	4a18      	ldr	r2, [pc, #96]	; (8001bc8 <MX_SPI5_Init+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001b6a:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <MX_SPI5_Init+0x64>)
 8001b6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b70:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001b72:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <MX_SPI5_Init+0x64>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <MX_SPI5_Init+0x64>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b7e:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <MX_SPI5_Init+0x64>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b84:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <MX_SPI5_Init+0x64>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <MX_SPI5_Init+0x64>)
 8001b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b90:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b92:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <MX_SPI5_Init+0x64>)
 8001b94:	2218      	movs	r2, #24
 8001b96:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b98:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <MX_SPI5_Init+0x64>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <MX_SPI5_Init+0x64>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba4:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <MX_SPI5_Init+0x64>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <MX_SPI5_Init+0x64>)
 8001bac:	220a      	movs	r2, #10
 8001bae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001bb0:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <MX_SPI5_Init+0x64>)
 8001bb2:	f003 fa19 	bl	8004fe8 <HAL_SPI_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001bbc:	f000 fa20 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	200000e4 	.word	0x200000e4
 8001bc8:	40015000 	.word	0x40015000

08001bcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bd2:	f107 0308 	add.w	r3, r7, #8
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be0:	463b      	mov	r3, r7
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001be8:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <MX_TIM1_Init+0x98>)
 8001bea:	4a1f      	ldr	r2, [pc, #124]	; (8001c68 <MX_TIM1_Init+0x9c>)
 8001bec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bee:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <MX_TIM1_Init+0x98>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <MX_TIM1_Init+0x98>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <MX_TIM1_Init+0x98>)
 8001bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c02:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <MX_TIM1_Init+0x98>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c08:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <MX_TIM1_Init+0x98>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <MX_TIM1_Init+0x98>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c14:	4813      	ldr	r0, [pc, #76]	; (8001c64 <MX_TIM1_Init+0x98>)
 8001c16:	f003 fe03 	bl	8005820 <HAL_TIM_Base_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001c20:	f000 f9ee 	bl	8002000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c2a:	f107 0308 	add.w	r3, r7, #8
 8001c2e:	4619      	mov	r1, r3
 8001c30:	480c      	ldr	r0, [pc, #48]	; (8001c64 <MX_TIM1_Init+0x98>)
 8001c32:	f003 ff4c 	bl	8005ace <HAL_TIM_ConfigClockSource>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001c3c:	f000 f9e0 	bl	8002000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c40:	2300      	movs	r3, #0
 8001c42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c48:	463b      	mov	r3, r7
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4805      	ldr	r0, [pc, #20]	; (8001c64 <MX_TIM1_Init+0x98>)
 8001c4e:	f004 f957 	bl	8005f00 <HAL_TIMEx_MasterConfigSynchronization>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001c58:	f000 f9d2 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c5c:	bf00      	nop
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	2000022c 	.word	0x2000022c
 8001c68:	40010000 	.word	0x40010000

08001c6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c72:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <MX_USART1_UART_Init+0x50>)
 8001c74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c92:	220c      	movs	r2, #12
 8001c94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c96:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ca2:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001ca4:	f004 f9bc 	bl	8006020 <HAL_UART_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cae:	f000 f9a7 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200001ec 	.word	0x200001ec
 8001cbc:	40011000 	.word	0x40011000

08001cc0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
 8001cd4:	615a      	str	r2, [r3, #20]
 8001cd6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001cd8:	4b1f      	ldr	r3, [pc, #124]	; (8001d58 <MX_FMC_Init+0x98>)
 8001cda:	4a20      	ldr	r2, [pc, #128]	; (8001d5c <MX_FMC_Init+0x9c>)
 8001cdc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <MX_FMC_Init+0x98>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001ce4:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <MX_FMC_Init+0x98>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001cea:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <MX_FMC_Init+0x98>)
 8001cec:	2204      	movs	r2, #4
 8001cee:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <MX_FMC_Init+0x98>)
 8001cf2:	2210      	movs	r2, #16
 8001cf4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001cf6:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <MX_FMC_Init+0x98>)
 8001cf8:	2240      	movs	r2, #64	; 0x40
 8001cfa:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <MX_FMC_Init+0x98>)
 8001cfe:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001d02:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <MX_FMC_Init+0x98>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001d0a:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <MX_FMC_Init+0x98>)
 8001d0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d10:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <MX_FMC_Init+0x98>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <MX_FMC_Init+0x98>)
 8001d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001d20:	2302      	movs	r3, #2
 8001d22:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001d24:	2307      	movs	r3, #7
 8001d26:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001d28:	2304      	movs	r3, #4
 8001d2a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001d2c:	2307      	movs	r3, #7
 8001d2e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001d30:	2303      	movs	r3, #3
 8001d32:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001d34:	2302      	movs	r3, #2
 8001d36:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4805      	ldr	r0, [pc, #20]	; (8001d58 <MX_FMC_Init+0x98>)
 8001d42:	f003 f91d 	bl	8004f80 <HAL_SDRAM_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001d4c:	f000 f958 	bl	8002000 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001d50:	bf00      	nop
 8001d52:	3720      	adds	r7, #32
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	200002ac 	.word	0x200002ac
 8001d5c:	a0000140 	.word	0xa0000140

08001d60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08e      	sub	sp, #56	; 0x38
 8001d64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	60da      	str	r2, [r3, #12]
 8001d74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
 8001d7a:	4b89      	ldr	r3, [pc, #548]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a88      	ldr	r2, [pc, #544]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001d80:	f043 0304 	orr.w	r3, r3, #4
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b86      	ldr	r3, [pc, #536]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	623b      	str	r3, [r7, #32]
 8001d90:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	4b82      	ldr	r3, [pc, #520]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a81      	ldr	r2, [pc, #516]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001d9c:	f043 0320 	orr.w	r3, r3, #32
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b7f      	ldr	r3, [pc, #508]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0320 	and.w	r3, r3, #32
 8001daa:	61fb      	str	r3, [r7, #28]
 8001dac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	4b7b      	ldr	r3, [pc, #492]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a7a      	ldr	r2, [pc, #488]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b78      	ldr	r3, [pc, #480]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	4b74      	ldr	r3, [pc, #464]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a73      	ldr	r2, [pc, #460]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b71      	ldr	r3, [pc, #452]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4b6d      	ldr	r3, [pc, #436]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a6c      	ldr	r2, [pc, #432]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b6a      	ldr	r3, [pc, #424]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b66      	ldr	r3, [pc, #408]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a65      	ldr	r2, [pc, #404]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b63      	ldr	r3, [pc, #396]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	4b5f      	ldr	r3, [pc, #380]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a5e      	ldr	r2, [pc, #376]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001e28:	f043 0310 	orr.w	r3, r3, #16
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b5c      	ldr	r3, [pc, #368]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	4b58      	ldr	r3, [pc, #352]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a57      	ldr	r2, [pc, #348]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001e44:	f043 0308 	orr.w	r3, r3, #8
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b55      	ldr	r3, [pc, #340]	; (8001fa0 <MX_GPIO_Init+0x240>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2116      	movs	r1, #22
 8001e5a:	4852      	ldr	r0, [pc, #328]	; (8001fa4 <MX_GPIO_Init+0x244>)
 8001e5c:	f001 fca2 	bl	80037a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2180      	movs	r1, #128	; 0x80
 8001e64:	4850      	ldr	r0, [pc, #320]	; (8001fa8 <MX_GPIO_Init+0x248>)
 8001e66:	f001 fc9d 	bl	80037a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001e70:	484e      	ldr	r0, [pc, #312]	; (8001fac <MX_GPIO_Init+0x24c>)
 8001e72:	f001 fc97 	bl	80037a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001e76:	2200      	movs	r2, #0
 8001e78:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001e7c:	484c      	ldr	r0, [pc, #304]	; (8001fb0 <MX_GPIO_Init+0x250>)
 8001e7e:	f001 fc91 	bl	80037a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001e82:	2316      	movs	r3, #22
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e86:	2301      	movs	r3, #1
 8001e88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e96:	4619      	mov	r1, r3
 8001e98:	4842      	ldr	r0, [pc, #264]	; (8001fa4 <MX_GPIO_Init+0x244>)
 8001e9a:	f001 f9b7 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001e9e:	f248 0307 	movw	r3, #32775	; 0x8007
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ea4:	4b43      	ldr	r3, [pc, #268]	; (8001fb4 <MX_GPIO_Init+0x254>)
 8001ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	483d      	ldr	r0, [pc, #244]	; (8001fa8 <MX_GPIO_Init+0x248>)
 8001eb4:	f001 f9aa 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4836      	ldr	r0, [pc, #216]	; (8001fa8 <MX_GPIO_Init+0x248>)
 8001ed0:	f001 f99c 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001ed4:	2320      	movs	r3, #32
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ed8:	4b36      	ldr	r3, [pc, #216]	; (8001fb4 <MX_GPIO_Init+0x254>)
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	482f      	ldr	r0, [pc, #188]	; (8001fa4 <MX_GPIO_Init+0x244>)
 8001ee8:	f001 f990 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001eec:	2304      	movs	r3, #4
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efc:	4619      	mov	r1, r3
 8001efe:	482e      	ldr	r0, [pc, #184]	; (8001fb8 <MX_GPIO_Init+0x258>)
 8001f00:	f001 f984 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001f04:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001f16:	230c      	movs	r3, #12
 8001f18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4825      	ldr	r0, [pc, #148]	; (8001fb8 <MX_GPIO_Init+0x258>)
 8001f22:	f001 f973 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001f26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f38:	4619      	mov	r1, r3
 8001f3a:	481f      	ldr	r0, [pc, #124]	; (8001fb8 <MX_GPIO_Init+0x258>)
 8001f3c:	f001 f966 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001f40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f46:	2300      	movs	r3, #0
 8001f48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f52:	4619      	mov	r1, r3
 8001f54:	4815      	ldr	r0, [pc, #84]	; (8001fac <MX_GPIO_Init+0x24c>)
 8001f56:	f001 f959 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001f5a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f60:	2301      	movs	r3, #1
 8001f62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f70:	4619      	mov	r1, r3
 8001f72:	480e      	ldr	r0, [pc, #56]	; (8001fac <MX_GPIO_Init+0x24c>)
 8001f74:	f001 f94a 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001f78:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f86:	2300      	movs	r3, #0
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4807      	ldr	r0, [pc, #28]	; (8001fb0 <MX_GPIO_Init+0x250>)
 8001f92:	f001 f93b 	bl	800320c <HAL_GPIO_Init>

}
 8001f96:	bf00      	nop
 8001f98:	3738      	adds	r7, #56	; 0x38
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	40020c00 	.word	0x40020c00
 8001fb0:	40021800 	.word	0x40021800
 8001fb4:	10120000 	.word	0x10120000
 8001fb8:	40020400 	.word	0x40020400

08001fbc <HAL_LTDC_ReloadEventCallback>:
  *x2 = 0;
  *y2 = 160 - index*4;
}

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  ReloadFlag = 1;
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <HAL_LTDC_ReloadEventCallback+0x1c>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	2000002c 	.word	0x2000002c

08001fdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d101      	bne.n	8001ff2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fee:	f000 fde1 	bl	8002bb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40001000 	.word	0x40001000

08002000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002014:	4819      	ldr	r0, [pc, #100]	; (800207c <SPIx_Init+0x6c>)
 8002016:	f003 fb49 	bl	80056ac <HAL_SPI_GetState>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d12b      	bne.n	8002078 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002020:	4b16      	ldr	r3, [pc, #88]	; (800207c <SPIx_Init+0x6c>)
 8002022:	4a17      	ldr	r2, [pc, #92]	; (8002080 <SPIx_Init+0x70>)
 8002024:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <SPIx_Init+0x6c>)
 8002028:	2218      	movs	r2, #24
 800202a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800202c:	4b13      	ldr	r3, [pc, #76]	; (800207c <SPIx_Init+0x6c>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002032:	4b12      	ldr	r3, [pc, #72]	; (800207c <SPIx_Init+0x6c>)
 8002034:	2200      	movs	r2, #0
 8002036:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002038:	4b10      	ldr	r3, [pc, #64]	; (800207c <SPIx_Init+0x6c>)
 800203a:	2200      	movs	r2, #0
 800203c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800203e:	4b0f      	ldr	r3, [pc, #60]	; (800207c <SPIx_Init+0x6c>)
 8002040:	2200      	movs	r2, #0
 8002042:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002044:	4b0d      	ldr	r3, [pc, #52]	; (800207c <SPIx_Init+0x6c>)
 8002046:	2207      	movs	r2, #7
 8002048:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <SPIx_Init+0x6c>)
 800204c:	2200      	movs	r2, #0
 800204e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002050:	4b0a      	ldr	r3, [pc, #40]	; (800207c <SPIx_Init+0x6c>)
 8002052:	2200      	movs	r2, #0
 8002054:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <SPIx_Init+0x6c>)
 8002058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800205c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800205e:	4b07      	ldr	r3, [pc, #28]	; (800207c <SPIx_Init+0x6c>)
 8002060:	2200      	movs	r2, #0
 8002062:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <SPIx_Init+0x6c>)
 8002066:	f44f 7282 	mov.w	r2, #260	; 0x104
 800206a:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 800206c:	4803      	ldr	r0, [pc, #12]	; (800207c <SPIx_Init+0x6c>)
 800206e:	f000 f833 	bl	80020d8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002072:	4802      	ldr	r0, [pc, #8]	; (800207c <SPIx_Init+0x6c>)
 8002074:	f002 ffb8 	bl	8004fe8 <HAL_SPI_Init>
  }
}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000030 	.word	0x20000030
 8002080:	40015000 	.word	0x40015000

08002084 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <SPIx_Write+0x34>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	1db9      	adds	r1, r7, #6
 8002098:	2201      	movs	r2, #1
 800209a:	4808      	ldr	r0, [pc, #32]	; (80020bc <SPIx_Write+0x38>)
 800209c:	f003 f830 	bl	8005100 <HAL_SPI_Transmit>
 80020a0:	4603      	mov	r3, r0
 80020a2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80020aa:	f000 f809 	bl	80020c0 <SPIx_Error>
  }
}
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000000 	.word	0x20000000
 80020bc:	20000030 	.word	0x20000030

080020c0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80020c4:	4803      	ldr	r0, [pc, #12]	; (80020d4 <SPIx_Error+0x14>)
 80020c6:	f002 fff3 	bl	80050b0 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80020ca:	f7ff ffa1 	bl	8002010 <SPIx_Init>
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000030 	.word	0x20000030

080020d8 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	; 0x28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	4b17      	ldr	r3, [pc, #92]	; (8002144 <SPIx_MspInit+0x6c>)
 80020e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e8:	4a16      	ldr	r2, [pc, #88]	; (8002144 <SPIx_MspInit+0x6c>)
 80020ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ee:	6453      	str	r3, [r2, #68]	; 0x44
 80020f0:	4b14      	ldr	r3, [pc, #80]	; (8002144 <SPIx_MspInit+0x6c>)
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <SPIx_MspInit+0x6c>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	4a0f      	ldr	r2, [pc, #60]	; (8002144 <SPIx_MspInit+0x6c>)
 8002106:	f043 0320 	orr.w	r3, r3, #32
 800210a:	6313      	str	r3, [r2, #48]	; 0x30
 800210c:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <SPIx_MspInit+0x6c>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002118:	f44f 7360 	mov.w	r3, #896	; 0x380
 800211c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002122:	2302      	movs	r3, #2
 8002124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002126:	2301      	movs	r3, #1
 8002128:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800212a:	2305      	movs	r3, #5
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	4619      	mov	r1, r3
 8002134:	4804      	ldr	r0, [pc, #16]	; (8002148 <SPIx_MspInit+0x70>)
 8002136:	f001 f869 	bl	800320c <HAL_GPIO_Init>
}
 800213a:	bf00      	nop
 800213c:	3728      	adds	r7, #40	; 0x28
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	40021400 	.word	0x40021400

0800214c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8002152:	4b36      	ldr	r3, [pc, #216]	; (800222c <LCD_IO_Init+0xe0>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d164      	bne.n	8002224 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800215a:	4b34      	ldr	r3, [pc, #208]	; (800222c <LCD_IO_Init+0xe0>)
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002160:	2300      	movs	r3, #0
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	4b32      	ldr	r3, [pc, #200]	; (8002230 <LCD_IO_Init+0xe4>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	4a31      	ldr	r2, [pc, #196]	; (8002230 <LCD_IO_Init+0xe4>)
 800216a:	f043 0308 	orr.w	r3, r3, #8
 800216e:	6313      	str	r3, [r2, #48]	; 0x30
 8002170:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <LCD_IO_Init+0xe4>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800217c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002180:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002182:	2301      	movs	r3, #1
 8002184:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800218a:	2302      	movs	r3, #2
 800218c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800218e:	f107 030c 	add.w	r3, r7, #12
 8002192:	4619      	mov	r1, r3
 8002194:	4827      	ldr	r0, [pc, #156]	; (8002234 <LCD_IO_Init+0xe8>)
 8002196:	f001 f839 	bl	800320c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
 800219e:	4b24      	ldr	r3, [pc, #144]	; (8002230 <LCD_IO_Init+0xe4>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a23      	ldr	r2, [pc, #140]	; (8002230 <LCD_IO_Init+0xe4>)
 80021a4:	f043 0308 	orr.w	r3, r3, #8
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b21      	ldr	r3, [pc, #132]	; (8002230 <LCD_IO_Init+0xe4>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80021b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80021bc:	2301      	movs	r3, #1
 80021be:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80021c4:	2302      	movs	r3, #2
 80021c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80021c8:	f107 030c 	add.w	r3, r7, #12
 80021cc:	4619      	mov	r1, r3
 80021ce:	4819      	ldr	r0, [pc, #100]	; (8002234 <LCD_IO_Init+0xe8>)
 80021d0:	f001 f81c 	bl	800320c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80021d4:	2300      	movs	r3, #0
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	4b15      	ldr	r3, [pc, #84]	; (8002230 <LCD_IO_Init+0xe4>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	4a14      	ldr	r2, [pc, #80]	; (8002230 <LCD_IO_Init+0xe4>)
 80021de:	f043 0304 	orr.w	r3, r3, #4
 80021e2:	6313      	str	r3, [r2, #48]	; 0x30
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <LCD_IO_Init+0xe4>)
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	603b      	str	r3, [r7, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80021f0:	2304      	movs	r3, #4
 80021f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80021f4:	2301      	movs	r3, #1
 80021f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80021fc:	2302      	movs	r3, #2
 80021fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002200:	f107 030c 	add.w	r3, r7, #12
 8002204:	4619      	mov	r1, r3
 8002206:	480c      	ldr	r0, [pc, #48]	; (8002238 <LCD_IO_Init+0xec>)
 8002208:	f001 f800 	bl	800320c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 800220c:	2200      	movs	r2, #0
 800220e:	2104      	movs	r1, #4
 8002210:	4809      	ldr	r0, [pc, #36]	; (8002238 <LCD_IO_Init+0xec>)
 8002212:	f001 fac7 	bl	80037a4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002216:	2201      	movs	r2, #1
 8002218:	2104      	movs	r1, #4
 800221a:	4807      	ldr	r0, [pc, #28]	; (8002238 <LCD_IO_Init+0xec>)
 800221c:	f001 fac2 	bl	80037a4 <HAL_GPIO_WritePin>

    SPIx_Init();
 8002220:	f7ff fef6 	bl	8002010 <SPIx_Init>
  }
}
 8002224:	bf00      	nop
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000088 	.word	0x20000088
 8002230:	40023800 	.word	0x40023800
 8002234:	40020c00 	.word	0x40020c00
 8002238:	40020800 	.word	0x40020800

0800223c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002246:	2201      	movs	r2, #1
 8002248:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800224c:	480a      	ldr	r0, [pc, #40]	; (8002278 <LCD_IO_WriteData+0x3c>)
 800224e:	f001 faa9 	bl	80037a4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8002252:	2200      	movs	r2, #0
 8002254:	2104      	movs	r1, #4
 8002256:	4809      	ldr	r0, [pc, #36]	; (800227c <LCD_IO_WriteData+0x40>)
 8002258:	f001 faa4 	bl	80037a4 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff ff10 	bl	8002084 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002264:	2201      	movs	r2, #1
 8002266:	2104      	movs	r1, #4
 8002268:	4804      	ldr	r0, [pc, #16]	; (800227c <LCD_IO_WriteData+0x40>)
 800226a:	f001 fa9b 	bl	80037a4 <HAL_GPIO_WritePin>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40020c00 	.word	0x40020c00
 800227c:	40020800 	.word	0x40020800

08002280 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800228a:	2200      	movs	r2, #0
 800228c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002290:	480a      	ldr	r0, [pc, #40]	; (80022bc <LCD_IO_WriteReg+0x3c>)
 8002292:	f001 fa87 	bl	80037a4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002296:	2200      	movs	r2, #0
 8002298:	2104      	movs	r1, #4
 800229a:	4809      	ldr	r0, [pc, #36]	; (80022c0 <LCD_IO_WriteReg+0x40>)
 800229c:	f001 fa82 	bl	80037a4 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff feed 	bl	8002084 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80022aa:	2201      	movs	r2, #1
 80022ac:	2104      	movs	r1, #4
 80022ae:	4804      	ldr	r0, [pc, #16]	; (80022c0 <LCD_IO_WriteReg+0x40>)
 80022b0:	f001 fa78 	bl	80037a4 <HAL_GPIO_WritePin>
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40020800 	.word	0x40020800

080022c4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 fc91 	bl	8002bf4 <HAL_Delay>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	607b      	str	r3, [r7, #4]
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_MspInit+0x54>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	4a11      	ldr	r2, [pc, #68]	; (8002330 <HAL_MspInit+0x54>)
 80022ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f0:	6453      	str	r3, [r2, #68]	; 0x44
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <HAL_MspInit+0x54>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	603b      	str	r3, [r7, #0]
 8002302:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_MspInit+0x54>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <HAL_MspInit+0x54>)
 8002308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800230c:	6413      	str	r3, [r2, #64]	; 0x40
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <HAL_MspInit+0x54>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	210f      	movs	r1, #15
 800231e:	f06f 0001 	mvn.w	r0, #1
 8002322:	f000 fd41 	bl	8002da8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800

08002334 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0b      	ldr	r2, [pc, #44]	; (8002370 <HAL_CRC_MspInit+0x3c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d10d      	bne.n	8002362 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <HAL_CRC_MspInit+0x40>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a09      	ldr	r2, [pc, #36]	; (8002374 <HAL_CRC_MspInit+0x40>)
 8002350:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <HAL_CRC_MspInit+0x40>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002362:	bf00      	nop
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40023000 	.word	0x40023000
 8002374:	40023800 	.word	0x40023800

08002378 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0e      	ldr	r2, [pc, #56]	; (80023c0 <HAL_DMA2D_MspInit+0x48>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d115      	bne.n	80023b6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <HAL_DMA2D_MspInit+0x4c>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a0c      	ldr	r2, [pc, #48]	; (80023c4 <HAL_DMA2D_MspInit+0x4c>)
 8002394:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_DMA2D_MspInit+0x4c>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2105      	movs	r1, #5
 80023aa:	205a      	movs	r0, #90	; 0x5a
 80023ac:	f000 fcfc 	bl	8002da8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80023b0:	205a      	movs	r0, #90	; 0x5a
 80023b2:	f000 fd15 	bl	8002de0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	4002b000 	.word	0x4002b000
 80023c4:	40023800 	.word	0x40023800

080023c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	; 0x28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a29      	ldr	r2, [pc, #164]	; (800248c <HAL_I2C_MspInit+0xc4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d14b      	bne.n	8002482 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	4b28      	ldr	r3, [pc, #160]	; (8002490 <HAL_I2C_MspInit+0xc8>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a27      	ldr	r2, [pc, #156]	; (8002490 <HAL_I2C_MspInit+0xc8>)
 80023f4:	f043 0304 	orr.w	r3, r3, #4
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b25      	ldr	r3, [pc, #148]	; (8002490 <HAL_I2C_MspInit+0xc8>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b21      	ldr	r3, [pc, #132]	; (8002490 <HAL_I2C_MspInit+0xc8>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	4a20      	ldr	r2, [pc, #128]	; (8002490 <HAL_I2C_MspInit+0xc8>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6313      	str	r3, [r2, #48]	; 0x30
 8002416:	4b1e      	ldr	r3, [pc, #120]	; (8002490 <HAL_I2C_MspInit+0xc8>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002422:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002428:	2312      	movs	r3, #18
 800242a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800242c:	2301      	movs	r3, #1
 800242e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002430:	2300      	movs	r3, #0
 8002432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002434:	2304      	movs	r3, #4
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	4619      	mov	r1, r3
 800243e:	4815      	ldr	r0, [pc, #84]	; (8002494 <HAL_I2C_MspInit+0xcc>)
 8002440:	f000 fee4 	bl	800320c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002444:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800244a:	2312      	movs	r3, #18
 800244c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800244e:	2301      	movs	r3, #1
 8002450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002452:	2300      	movs	r3, #0
 8002454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002456:	2304      	movs	r3, #4
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800245a:	f107 0314 	add.w	r3, r7, #20
 800245e:	4619      	mov	r1, r3
 8002460:	480d      	ldr	r0, [pc, #52]	; (8002498 <HAL_I2C_MspInit+0xd0>)
 8002462:	f000 fed3 	bl	800320c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_I2C_MspInit+0xc8>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a08      	ldr	r2, [pc, #32]	; (8002490 <HAL_I2C_MspInit+0xc8>)
 8002470:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_I2C_MspInit+0xc8>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002482:	bf00      	nop
 8002484:	3728      	adds	r7, #40	; 0x28
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40005c00 	.word	0x40005c00
 8002490:	40023800 	.word	0x40023800
 8002494:	40020800 	.word	0x40020800
 8002498:	40020000 	.word	0x40020000

0800249c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08e      	sub	sp, #56	; 0x38
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a7b      	ldr	r2, [pc, #492]	; (80026a8 <HAL_LTDC_MspInit+0x20c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	f040 80f0 	bne.w	80026a0 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80024c0:	2300      	movs	r3, #0
 80024c2:	623b      	str	r3, [r7, #32]
 80024c4:	4b79      	ldr	r3, [pc, #484]	; (80026ac <HAL_LTDC_MspInit+0x210>)
 80024c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c8:	4a78      	ldr	r2, [pc, #480]	; (80026ac <HAL_LTDC_MspInit+0x210>)
 80024ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024ce:	6453      	str	r3, [r2, #68]	; 0x44
 80024d0:	4b76      	ldr	r3, [pc, #472]	; (80026ac <HAL_LTDC_MspInit+0x210>)
 80024d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024d8:	623b      	str	r3, [r7, #32]
 80024da:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024dc:	2300      	movs	r3, #0
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	4b72      	ldr	r3, [pc, #456]	; (80026ac <HAL_LTDC_MspInit+0x210>)
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	4a71      	ldr	r2, [pc, #452]	; (80026ac <HAL_LTDC_MspInit+0x210>)
 80024e6:	f043 0320 	orr.w	r3, r3, #32
 80024ea:	6313      	str	r3, [r2, #48]	; 0x30
 80024ec:	4b6f      	ldr	r3, [pc, #444]	; (80026ac <HAL_LTDC_MspInit+0x210>)
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f8:	2300      	movs	r3, #0
 80024fa:	61bb      	str	r3, [r7, #24]
 80024fc:	4b6b      	ldr	r3, [pc, #428]	; (80026ac <HAL_LTDC_MspInit+0x210>)
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	4a6a      	ldr	r2, [pc, #424]	; (80026ac <HAL_LTDC_MspInit+0x210>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6313      	str	r3, [r2, #48]	; 0x30
 8002508:	4b68      	ldr	r3, [pc, #416]	; (80026ac <HAL_LTDC_MspInit+0x210>)
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	4b64      	ldr	r3, [pc, #400]	; (80026ac <HAL_LTDC_MspInit+0x210>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	4a63      	ldr	r2, [pc, #396]	; (80026ac <HAL_LTDC_MspInit+0x210>)
 800251e:	f043 0302 	orr.w	r3, r3, #2
 8002522:	6313      	str	r3, [r2, #48]	; 0x30
 8002524:	4b61      	ldr	r3, [pc, #388]	; (80026ac <HAL_LTDC_MspInit+0x210>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002530:	2300      	movs	r3, #0
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	4b5d      	ldr	r3, [pc, #372]	; (80026ac <HAL_LTDC_MspInit+0x210>)
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	4a5c      	ldr	r2, [pc, #368]	; (80026ac <HAL_LTDC_MspInit+0x210>)
 800253a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800253e:	6313      	str	r3, [r2, #48]	; 0x30
 8002540:	4b5a      	ldr	r3, [pc, #360]	; (80026ac <HAL_LTDC_MspInit+0x210>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	4b56      	ldr	r3, [pc, #344]	; (80026ac <HAL_LTDC_MspInit+0x210>)
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	4a55      	ldr	r2, [pc, #340]	; (80026ac <HAL_LTDC_MspInit+0x210>)
 8002556:	f043 0304 	orr.w	r3, r3, #4
 800255a:	6313      	str	r3, [r2, #48]	; 0x30
 800255c:	4b53      	ldr	r3, [pc, #332]	; (80026ac <HAL_LTDC_MspInit+0x210>)
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002568:	2300      	movs	r3, #0
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	4b4f      	ldr	r3, [pc, #316]	; (80026ac <HAL_LTDC_MspInit+0x210>)
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	4a4e      	ldr	r2, [pc, #312]	; (80026ac <HAL_LTDC_MspInit+0x210>)
 8002572:	f043 0308 	orr.w	r3, r3, #8
 8002576:	6313      	str	r3, [r2, #48]	; 0x30
 8002578:	4b4c      	ldr	r3, [pc, #304]	; (80026ac <HAL_LTDC_MspInit+0x210>)
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258a:	2302      	movs	r3, #2
 800258c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002592:	2300      	movs	r3, #0
 8002594:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002596:	230e      	movs	r3, #14
 8002598:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800259a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800259e:	4619      	mov	r1, r3
 80025a0:	4843      	ldr	r0, [pc, #268]	; (80026b0 <HAL_LTDC_MspInit+0x214>)
 80025a2:	f000 fe33 	bl	800320c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80025a6:	f641 0358 	movw	r3, #6232	; 0x1858
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b4:	2300      	movs	r3, #0
 80025b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025b8:	230e      	movs	r3, #14
 80025ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c0:	4619      	mov	r1, r3
 80025c2:	483c      	ldr	r0, [pc, #240]	; (80026b4 <HAL_LTDC_MspInit+0x218>)
 80025c4:	f000 fe22 	bl	800320c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80025c8:	2303      	movs	r3, #3
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d4:	2300      	movs	r3, #0
 80025d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80025d8:	2309      	movs	r3, #9
 80025da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e0:	4619      	mov	r1, r3
 80025e2:	4835      	ldr	r0, [pc, #212]	; (80026b8 <HAL_LTDC_MspInit+0x21c>)
 80025e4:	f000 fe12 	bl	800320c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80025e8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f6:	2300      	movs	r3, #0
 80025f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025fa:	230e      	movs	r3, #14
 80025fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002602:	4619      	mov	r1, r3
 8002604:	482c      	ldr	r0, [pc, #176]	; (80026b8 <HAL_LTDC_MspInit+0x21c>)
 8002606:	f000 fe01 	bl	800320c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800260a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002618:	2300      	movs	r3, #0
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800261c:	230e      	movs	r3, #14
 800261e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002624:	4619      	mov	r1, r3
 8002626:	4825      	ldr	r0, [pc, #148]	; (80026bc <HAL_LTDC_MspInit+0x220>)
 8002628:	f000 fdf0 	bl	800320c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800262c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263a:	2300      	movs	r3, #0
 800263c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800263e:	230e      	movs	r3, #14
 8002640:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002646:	4619      	mov	r1, r3
 8002648:	481d      	ldr	r0, [pc, #116]	; (80026c0 <HAL_LTDC_MspInit+0x224>)
 800264a:	f000 fddf 	bl	800320c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800264e:	2348      	movs	r3, #72	; 0x48
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265a:	2300      	movs	r3, #0
 800265c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800265e:	230e      	movs	r3, #14
 8002660:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002666:	4619      	mov	r1, r3
 8002668:	4816      	ldr	r0, [pc, #88]	; (80026c4 <HAL_LTDC_MspInit+0x228>)
 800266a:	f000 fdcf 	bl	800320c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800266e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267c:	2300      	movs	r3, #0
 800267e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002680:	2309      	movs	r3, #9
 8002682:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002688:	4619      	mov	r1, r3
 800268a:	480c      	ldr	r0, [pc, #48]	; (80026bc <HAL_LTDC_MspInit+0x220>)
 800268c:	f000 fdbe 	bl	800320c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002690:	2200      	movs	r2, #0
 8002692:	2105      	movs	r1, #5
 8002694:	2058      	movs	r0, #88	; 0x58
 8002696:	f000 fb87 	bl	8002da8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800269a:	2058      	movs	r0, #88	; 0x58
 800269c:	f000 fba0 	bl	8002de0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80026a0:	bf00      	nop
 80026a2:	3738      	adds	r7, #56	; 0x38
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40016800 	.word	0x40016800
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40021400 	.word	0x40021400
 80026b4:	40020000 	.word	0x40020000
 80026b8:	40020400 	.word	0x40020400
 80026bc:	40021800 	.word	0x40021800
 80026c0:	40020800 	.word	0x40020800
 80026c4:	40020c00 	.word	0x40020c00

080026c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08a      	sub	sp, #40	; 0x28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a19      	ldr	r2, [pc, #100]	; (800274c <HAL_SPI_MspInit+0x84>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d12c      	bne.n	8002744 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	4b18      	ldr	r3, [pc, #96]	; (8002750 <HAL_SPI_MspInit+0x88>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	4a17      	ldr	r2, [pc, #92]	; (8002750 <HAL_SPI_MspInit+0x88>)
 80026f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026f8:	6453      	str	r3, [r2, #68]	; 0x44
 80026fa:	4b15      	ldr	r3, [pc, #84]	; (8002750 <HAL_SPI_MspInit+0x88>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	4b11      	ldr	r3, [pc, #68]	; (8002750 <HAL_SPI_MspInit+0x88>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	4a10      	ldr	r2, [pc, #64]	; (8002750 <HAL_SPI_MspInit+0x88>)
 8002710:	f043 0320 	orr.w	r3, r3, #32
 8002714:	6313      	str	r3, [r2, #48]	; 0x30
 8002716:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <HAL_SPI_MspInit+0x88>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002722:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002734:	2305      	movs	r3, #5
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002738:	f107 0314 	add.w	r3, r7, #20
 800273c:	4619      	mov	r1, r3
 800273e:	4805      	ldr	r0, [pc, #20]	; (8002754 <HAL_SPI_MspInit+0x8c>)
 8002740:	f000 fd64 	bl	800320c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002744:	bf00      	nop
 8002746:	3728      	adds	r7, #40	; 0x28
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40015000 	.word	0x40015000
 8002750:	40023800 	.word	0x40023800
 8002754:	40021400 	.word	0x40021400

08002758 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a08      	ldr	r2, [pc, #32]	; (8002788 <HAL_SPI_MspDeInit+0x30>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d10a      	bne.n	8002780 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800276a:	4b08      	ldr	r3, [pc, #32]	; (800278c <HAL_SPI_MspDeInit+0x34>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	4a07      	ldr	r2, [pc, #28]	; (800278c <HAL_SPI_MspDeInit+0x34>)
 8002770:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002774:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002776:	f44f 7160 	mov.w	r1, #896	; 0x380
 800277a:	4805      	ldr	r0, [pc, #20]	; (8002790 <HAL_SPI_MspDeInit+0x38>)
 800277c:	f000 fef0 	bl	8003560 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40015000 	.word	0x40015000
 800278c:	40023800 	.word	0x40023800
 8002790:	40021400 	.word	0x40021400

08002794 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <HAL_TIM_Base_MspInit+0x3c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10d      	bne.n	80027c2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_TIM_Base_MspInit+0x40>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <HAL_TIM_Base_MspInit+0x40>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6453      	str	r3, [r2, #68]	; 0x44
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <HAL_TIM_Base_MspInit+0x40>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40023800 	.word	0x40023800

080027d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	; 0x28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a19      	ldr	r2, [pc, #100]	; (800285c <HAL_UART_MspInit+0x84>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d12c      	bne.n	8002854 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	4b18      	ldr	r3, [pc, #96]	; (8002860 <HAL_UART_MspInit+0x88>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	4a17      	ldr	r2, [pc, #92]	; (8002860 <HAL_UART_MspInit+0x88>)
 8002804:	f043 0310 	orr.w	r3, r3, #16
 8002808:	6453      	str	r3, [r2, #68]	; 0x44
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <HAL_UART_MspInit+0x88>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <HAL_UART_MspInit+0x88>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a10      	ldr	r2, [pc, #64]	; (8002860 <HAL_UART_MspInit+0x88>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <HAL_UART_MspInit+0x88>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002832:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002840:	2303      	movs	r3, #3
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002844:	2307      	movs	r3, #7
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	4805      	ldr	r0, [pc, #20]	; (8002864 <HAL_UART_MspInit+0x8c>)
 8002850:	f000 fcdc 	bl	800320c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002854:	bf00      	nop
 8002856:	3728      	adds	r7, #40	; 0x28
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40011000 	.word	0x40011000
 8002860:	40023800 	.word	0x40023800
 8002864:	40020000 	.word	0x40020000

08002868 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800286e:	1d3b      	adds	r3, r7, #4
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800287c:	4b3b      	ldr	r3, [pc, #236]	; (800296c <HAL_FMC_MspInit+0x104>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d16f      	bne.n	8002964 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002884:	4b39      	ldr	r3, [pc, #228]	; (800296c <HAL_FMC_MspInit+0x104>)
 8002886:	2201      	movs	r2, #1
 8002888:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	603b      	str	r3, [r7, #0]
 800288e:	4b38      	ldr	r3, [pc, #224]	; (8002970 <HAL_FMC_MspInit+0x108>)
 8002890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002892:	4a37      	ldr	r2, [pc, #220]	; (8002970 <HAL_FMC_MspInit+0x108>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6393      	str	r3, [r2, #56]	; 0x38
 800289a:	4b35      	ldr	r3, [pc, #212]	; (8002970 <HAL_FMC_MspInit+0x108>)
 800289c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80028a6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80028aa:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b4:	2303      	movs	r3, #3
 80028b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028b8:	230c      	movs	r3, #12
 80028ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028bc:	1d3b      	adds	r3, r7, #4
 80028be:	4619      	mov	r1, r3
 80028c0:	482c      	ldr	r0, [pc, #176]	; (8002974 <HAL_FMC_MspInit+0x10c>)
 80028c2:	f000 fca3 	bl	800320c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80028c6:	2301      	movs	r3, #1
 80028c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d2:	2303      	movs	r3, #3
 80028d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028d6:	230c      	movs	r3, #12
 80028d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80028da:	1d3b      	adds	r3, r7, #4
 80028dc:	4619      	mov	r1, r3
 80028de:	4826      	ldr	r0, [pc, #152]	; (8002978 <HAL_FMC_MspInit+0x110>)
 80028e0:	f000 fc94 	bl	800320c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80028e4:	f248 1333 	movw	r3, #33075	; 0x8133
 80028e8:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ea:	2302      	movs	r3, #2
 80028ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f2:	2303      	movs	r3, #3
 80028f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028f6:	230c      	movs	r3, #12
 80028f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	4619      	mov	r1, r3
 80028fe:	481f      	ldr	r0, [pc, #124]	; (800297c <HAL_FMC_MspInit+0x114>)
 8002900:	f000 fc84 	bl	800320c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002904:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002908:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	2302      	movs	r3, #2
 800290c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002912:	2303      	movs	r3, #3
 8002914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002916:	230c      	movs	r3, #12
 8002918:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800291a:	1d3b      	adds	r3, r7, #4
 800291c:	4619      	mov	r1, r3
 800291e:	4818      	ldr	r0, [pc, #96]	; (8002980 <HAL_FMC_MspInit+0x118>)
 8002920:	f000 fc74 	bl	800320c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002924:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002928:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002932:	2303      	movs	r3, #3
 8002934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002936:	230c      	movs	r3, #12
 8002938:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800293a:	1d3b      	adds	r3, r7, #4
 800293c:	4619      	mov	r1, r3
 800293e:	4811      	ldr	r0, [pc, #68]	; (8002984 <HAL_FMC_MspInit+0x11c>)
 8002940:	f000 fc64 	bl	800320c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002944:	2360      	movs	r3, #96	; 0x60
 8002946:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002950:	2303      	movs	r3, #3
 8002952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002954:	230c      	movs	r3, #12
 8002956:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002958:	1d3b      	adds	r3, r7, #4
 800295a:	4619      	mov	r1, r3
 800295c:	480a      	ldr	r0, [pc, #40]	; (8002988 <HAL_FMC_MspInit+0x120>)
 800295e:	f000 fc55 	bl	800320c <HAL_GPIO_Init>
 8002962:	e000      	b.n	8002966 <HAL_FMC_MspInit+0xfe>
    return;
 8002964:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	2000008c 	.word	0x2000008c
 8002970:	40023800 	.word	0x40023800
 8002974:	40021400 	.word	0x40021400
 8002978:	40020800 	.word	0x40020800
 800297c:	40021800 	.word	0x40021800
 8002980:	40021000 	.word	0x40021000
 8002984:	40020c00 	.word	0x40020c00
 8002988:	40020400 	.word	0x40020400

0800298c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002994:	f7ff ff68 	bl	8002868 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08c      	sub	sp, #48	; 0x30
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80029b0:	2200      	movs	r2, #0
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	2036      	movs	r0, #54	; 0x36
 80029b6:	f000 f9f7 	bl	8002da8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029ba:	2036      	movs	r0, #54	; 0x36
 80029bc:	f000 fa10 	bl	8002de0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	4b1f      	ldr	r3, [pc, #124]	; (8002a44 <HAL_InitTick+0xa4>)
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	4a1e      	ldr	r2, [pc, #120]	; (8002a44 <HAL_InitTick+0xa4>)
 80029ca:	f043 0310 	orr.w	r3, r3, #16
 80029ce:	6413      	str	r3, [r2, #64]	; 0x40
 80029d0:	4b1c      	ldr	r3, [pc, #112]	; (8002a44 <HAL_InitTick+0xa4>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029dc:	f107 0210 	add.w	r2, r7, #16
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	4611      	mov	r1, r2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f002 f8da 	bl	8004ba0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80029ec:	f002 f8b0 	bl	8004b50 <HAL_RCC_GetPCLK1Freq>
 80029f0:	4603      	mov	r3, r0
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f8:	4a13      	ldr	r2, [pc, #76]	; (8002a48 <HAL_InitTick+0xa8>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	0c9b      	lsrs	r3, r3, #18
 8002a00:	3b01      	subs	r3, #1
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a04:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <HAL_InitTick+0xac>)
 8002a06:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <HAL_InitTick+0xb0>)
 8002a08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002a0a:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <HAL_InitTick+0xac>)
 8002a0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a10:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002a12:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <HAL_InitTick+0xac>)
 8002a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a16:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <HAL_InitTick+0xac>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_InitTick+0xac>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002a24:	4809      	ldr	r0, [pc, #36]	; (8002a4c <HAL_InitTick+0xac>)
 8002a26:	f002 fefb 	bl	8005820 <HAL_TIM_Base_Init>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d104      	bne.n	8002a3a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002a30:	4806      	ldr	r0, [pc, #24]	; (8002a4c <HAL_InitTick+0xac>)
 8002a32:	f002 ff20 	bl	8005876 <HAL_TIM_Base_Start_IT>
 8002a36:	4603      	mov	r3, r0
 8002a38:	e000      	b.n	8002a3c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3730      	adds	r7, #48	; 0x30
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40023800 	.word	0x40023800
 8002a48:	431bde83 	.word	0x431bde83
 8002a4c:	200002e0 	.word	0x200002e0
 8002a50:	40001000 	.word	0x40001000

08002a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a62:	b480      	push	{r7}
 8002a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a66:	e7fe      	b.n	8002a66 <HardFault_Handler+0x4>

08002a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a6c:	e7fe      	b.n	8002a6c <MemManage_Handler+0x4>

08002a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a72:	e7fe      	b.n	8002a72 <BusFault_Handler+0x4>

08002a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a78:	e7fe      	b.n	8002a78 <UsageFault_Handler+0x4>

08002a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ab8:	4802      	ldr	r0, [pc, #8]	; (8002ac4 <TIM6_DAC_IRQHandler+0x10>)
 8002aba:	f002 ff00 	bl	80058be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	200002e0 	.word	0x200002e0

08002ac8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002acc:	4802      	ldr	r0, [pc, #8]	; (8002ad8 <LTDC_IRQHandler+0x10>)
 8002ace:	f001 f907 	bl	8003ce0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000144 	.word	0x20000144

08002adc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002ae0:	4802      	ldr	r0, [pc, #8]	; (8002aec <DMA2D_IRQHandler+0x10>)
 8002ae2:	f000 f9f0 	bl	8002ec6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	2000026c 	.word	0x2000026c

08002af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002af4:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <SystemInit+0x28>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afa:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <SystemInit+0x28>)
 8002afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <SystemInit+0x28>)
 8002b06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b0a:	609a      	str	r2, [r3, #8]
#endif
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b54 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b22:	e003      	b.n	8002b2c <LoopCopyDataInit>

08002b24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b2a:	3104      	adds	r1, #4

08002b2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b2c:	480b      	ldr	r0, [pc, #44]	; (8002b5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b2e:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b34:	d3f6      	bcc.n	8002b24 <CopyDataInit>
  ldr  r2, =_sbss
 8002b36:	4a0b      	ldr	r2, [pc, #44]	; (8002b64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b38:	e002      	b.n	8002b40 <LoopFillZerobss>

08002b3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b3c:	f842 3b04 	str.w	r3, [r2], #4

08002b40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b40:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b44:	d3f9      	bcc.n	8002b3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b46:	f7ff ffd3 	bl	8002af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b4a:	f003 ff25 	bl	8006998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b4e:	f7fe fdc3 	bl	80016d8 <main>
  bx  lr    
 8002b52:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002b54:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002b58:	08009188 	.word	0x08009188
  ldr  r0, =_sdata
 8002b5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b60:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002b64:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002b68:	20000324 	.word	0x20000324

08002b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b6c:	e7fe      	b.n	8002b6c <ADC_IRQHandler>
	...

08002b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b74:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_Init+0x40>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a0d      	ldr	r2, [pc, #52]	; (8002bb0 <HAL_Init+0x40>)
 8002b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <HAL_Init+0x40>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <HAL_Init+0x40>)
 8002b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b8c:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <HAL_Init+0x40>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a07      	ldr	r2, [pc, #28]	; (8002bb0 <HAL_Init+0x40>)
 8002b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b98:	2003      	movs	r0, #3
 8002b9a:	f000 f8fa 	bl	8002d92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f7ff fefe 	bl	80029a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ba4:	f7ff fb9a 	bl	80022dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023c00 	.word	0x40023c00

08002bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_IncTick+0x20>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_IncTick+0x24>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	4a04      	ldr	r2, [pc, #16]	; (8002bd8 <HAL_IncTick+0x24>)
 8002bc6:	6013      	str	r3, [r2, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	2000000c 	.word	0x2000000c
 8002bd8:	20000320 	.word	0x20000320

08002bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return uwTick;
 8002be0:	4b03      	ldr	r3, [pc, #12]	; (8002bf0 <HAL_GetTick+0x14>)
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20000320 	.word	0x20000320

08002bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bfc:	f7ff ffee 	bl	8002bdc <HAL_GetTick>
 8002c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d005      	beq.n	8002c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c0e:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <HAL_Delay+0x40>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c1a:	bf00      	nop
 8002c1c:	f7ff ffde 	bl	8002bdc <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d8f7      	bhi.n	8002c1c <HAL_Delay+0x28>
  {
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	2000000c 	.word	0x2000000c

08002c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c48:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <__NVIC_SetPriorityGrouping+0x44>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c54:	4013      	ands	r3, r2
 8002c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c6a:	4a04      	ldr	r2, [pc, #16]	; (8002c7c <__NVIC_SetPriorityGrouping+0x44>)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	60d3      	str	r3, [r2, #12]
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c84:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <__NVIC_GetPriorityGrouping+0x18>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	0a1b      	lsrs	r3, r3, #8
 8002c8a:	f003 0307 	and.w	r3, r3, #7
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	db0b      	blt.n	8002cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	f003 021f 	and.w	r2, r3, #31
 8002cb4:	4907      	ldr	r1, [pc, #28]	; (8002cd4 <__NVIC_EnableIRQ+0x38>)
 8002cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	e000e100 	.word	0xe000e100

08002cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	6039      	str	r1, [r7, #0]
 8002ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	db0a      	blt.n	8002d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	490c      	ldr	r1, [pc, #48]	; (8002d24 <__NVIC_SetPriority+0x4c>)
 8002cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf6:	0112      	lsls	r2, r2, #4
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d00:	e00a      	b.n	8002d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	4908      	ldr	r1, [pc, #32]	; (8002d28 <__NVIC_SetPriority+0x50>)
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	3b04      	subs	r3, #4
 8002d10:	0112      	lsls	r2, r2, #4
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	440b      	add	r3, r1
 8002d16:	761a      	strb	r2, [r3, #24]
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000e100 	.word	0xe000e100
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b089      	sub	sp, #36	; 0x24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f1c3 0307 	rsb	r3, r3, #7
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	bf28      	it	cs
 8002d4a:	2304      	movcs	r3, #4
 8002d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3304      	adds	r3, #4
 8002d52:	2b06      	cmp	r3, #6
 8002d54:	d902      	bls.n	8002d5c <NVIC_EncodePriority+0x30>
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3b03      	subs	r3, #3
 8002d5a:	e000      	b.n	8002d5e <NVIC_EncodePriority+0x32>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d60:	f04f 32ff 	mov.w	r2, #4294967295
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	401a      	ands	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d74:	f04f 31ff 	mov.w	r1, #4294967295
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7e:	43d9      	mvns	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d84:	4313      	orrs	r3, r2
         );
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3724      	adds	r7, #36	; 0x24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff ff4c 	bl	8002c38 <__NVIC_SetPriorityGrouping>
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dba:	f7ff ff61 	bl	8002c80 <__NVIC_GetPriorityGrouping>
 8002dbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	6978      	ldr	r0, [r7, #20]
 8002dc6:	f7ff ffb1 	bl	8002d2c <NVIC_EncodePriority>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff ff80 	bl	8002cd8 <__NVIC_SetPriority>
}
 8002dd8:	bf00      	nop
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff ff54 	bl	8002c9c <__NVIC_EnableIRQ>
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00e      	b.n	8002e2c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	795b      	ldrb	r3, [r3, #5]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d105      	bne.n	8002e24 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff fa88 	bl	8002334 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e03b      	b.n	8002ebe <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff fa8c 	bl	8002378 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e84:	f023 0107 	bic.w	r1, r3, #7
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e9e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68d1      	ldr	r1, [r2, #12]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	430b      	orrs	r3, r1
 8002eac:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d026      	beq.n	8002f36 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d021      	beq.n	8002f36 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f00:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f06:	f043 0201 	orr.w	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2201      	movs	r2, #1
 8002f14:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2204      	movs	r2, #4
 8002f1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d026      	beq.n	8002f8e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d021      	beq.n	8002f8e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f58:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f66:	f043 0202 	orr.w	r2, r3, #2
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2204      	movs	r2, #4
 8002f72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d026      	beq.n	8002fe6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d021      	beq.n	8002fe6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2208      	movs	r2, #8
 8002fb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbe:	f043 0204 	orr.w	r2, r3, #4
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2204      	movs	r2, #4
 8002fca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d013      	beq.n	8003018 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00e      	beq.n	8003018 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003008:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2204      	movs	r2, #4
 8003010:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f853 	bl	80030be <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d024      	beq.n	800306c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01f      	beq.n	800306c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800303a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2202      	movs	r2, #2
 8003042:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	2b00      	cmp	r3, #0
 8003074:	d01f      	beq.n	80030b6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01a      	beq.n	80030b6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800308e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2210      	movs	r2, #16
 8003096:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f80e 	bl	80030d2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80030b6:	bf00      	nop
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <HAL_DMA2D_ConfigLayer+0x20>
 8003104:	2302      	movs	r3, #2
 8003106:	e079      	b.n	80031fc <HAL_DMA2D_ConfigLayer+0x114>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	3318      	adds	r3, #24
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	4413      	add	r3, r2
 8003122:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	041b      	lsls	r3, r3, #16
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003132:	4b35      	ldr	r3, [pc, #212]	; (8003208 <HAL_DMA2D_ConfigLayer+0x120>)
 8003134:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b0a      	cmp	r3, #10
 800313c:	d003      	beq.n	8003146 <HAL_DMA2D_ConfigLayer+0x5e>
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b09      	cmp	r3, #9
 8003144:	d107      	bne.n	8003156 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	e005      	b.n	8003162 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	061b      	lsls	r3, r3, #24
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d120      	bne.n	80031aa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	43db      	mvns	r3, r3
 8003172:	ea02 0103 	and.w	r1, r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	430a      	orrs	r2, r1
 800317e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b0a      	cmp	r3, #10
 8003190:	d003      	beq.n	800319a <HAL_DMA2D_ConfigLayer+0xb2>
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b09      	cmp	r3, #9
 8003198:	d127      	bne.n	80031ea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80031a6:	629a      	str	r2, [r3, #40]	; 0x28
 80031a8:	e01f      	b.n	80031ea <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	43db      	mvns	r3, r3
 80031b4:	ea02 0103 	and.w	r1, r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	430a      	orrs	r2, r1
 80031c0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	6812      	ldr	r2, [r2, #0]
 80031ca:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b0a      	cmp	r3, #10
 80031d2:	d003      	beq.n	80031dc <HAL_DMA2D_ConfigLayer+0xf4>
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b09      	cmp	r3, #9
 80031da:	d106      	bne.n	80031ea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80031e8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	371c      	adds	r7, #28
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	ff03000f 	.word	0xff03000f

0800320c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800320c:	b480      	push	{r7}
 800320e:	b089      	sub	sp, #36	; 0x24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800321a:	2300      	movs	r3, #0
 800321c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800321e:	2300      	movs	r3, #0
 8003220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	e177      	b.n	8003518 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003228:	2201      	movs	r2, #1
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	4013      	ands	r3, r2
 800323a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	429a      	cmp	r2, r3
 8003242:	f040 8166 	bne.w	8003512 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d00b      	beq.n	8003266 <HAL_GPIO_Init+0x5a>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d007      	beq.n	8003266 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800325a:	2b11      	cmp	r3, #17
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b12      	cmp	r3, #18
 8003264:	d130      	bne.n	80032c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	2203      	movs	r2, #3
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800329c:	2201      	movs	r2, #1
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	091b      	lsrs	r3, r3, #4
 80032b2:	f003 0201 	and.w	r2, r3, #1
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	2203      	movs	r2, #3
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d003      	beq.n	8003308 <HAL_GPIO_Init+0xfc>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b12      	cmp	r3, #18
 8003306:	d123      	bne.n	8003350 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	08da      	lsrs	r2, r3, #3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3208      	adds	r2, #8
 8003310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003314:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	220f      	movs	r2, #15
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	08da      	lsrs	r2, r3, #3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3208      	adds	r2, #8
 800334a:	69b9      	ldr	r1, [r7, #24]
 800334c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	2203      	movs	r2, #3
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 0203 	and.w	r2, r3, #3
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80c0 	beq.w	8003512 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	4b65      	ldr	r3, [pc, #404]	; (800352c <HAL_GPIO_Init+0x320>)
 8003398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339a:	4a64      	ldr	r2, [pc, #400]	; (800352c <HAL_GPIO_Init+0x320>)
 800339c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033a0:	6453      	str	r3, [r2, #68]	; 0x44
 80033a2:	4b62      	ldr	r3, [pc, #392]	; (800352c <HAL_GPIO_Init+0x320>)
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ae:	4a60      	ldr	r2, [pc, #384]	; (8003530 <HAL_GPIO_Init+0x324>)
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	089b      	lsrs	r3, r3, #2
 80033b4:	3302      	adds	r3, #2
 80033b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	220f      	movs	r2, #15
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4013      	ands	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a57      	ldr	r2, [pc, #348]	; (8003534 <HAL_GPIO_Init+0x328>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d037      	beq.n	800344a <HAL_GPIO_Init+0x23e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a56      	ldr	r2, [pc, #344]	; (8003538 <HAL_GPIO_Init+0x32c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d031      	beq.n	8003446 <HAL_GPIO_Init+0x23a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a55      	ldr	r2, [pc, #340]	; (800353c <HAL_GPIO_Init+0x330>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d02b      	beq.n	8003442 <HAL_GPIO_Init+0x236>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a54      	ldr	r2, [pc, #336]	; (8003540 <HAL_GPIO_Init+0x334>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d025      	beq.n	800343e <HAL_GPIO_Init+0x232>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a53      	ldr	r2, [pc, #332]	; (8003544 <HAL_GPIO_Init+0x338>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d01f      	beq.n	800343a <HAL_GPIO_Init+0x22e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a52      	ldr	r2, [pc, #328]	; (8003548 <HAL_GPIO_Init+0x33c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d019      	beq.n	8003436 <HAL_GPIO_Init+0x22a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a51      	ldr	r2, [pc, #324]	; (800354c <HAL_GPIO_Init+0x340>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d013      	beq.n	8003432 <HAL_GPIO_Init+0x226>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a50      	ldr	r2, [pc, #320]	; (8003550 <HAL_GPIO_Init+0x344>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00d      	beq.n	800342e <HAL_GPIO_Init+0x222>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a4f      	ldr	r2, [pc, #316]	; (8003554 <HAL_GPIO_Init+0x348>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d007      	beq.n	800342a <HAL_GPIO_Init+0x21e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a4e      	ldr	r2, [pc, #312]	; (8003558 <HAL_GPIO_Init+0x34c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <HAL_GPIO_Init+0x21a>
 8003422:	2309      	movs	r3, #9
 8003424:	e012      	b.n	800344c <HAL_GPIO_Init+0x240>
 8003426:	230a      	movs	r3, #10
 8003428:	e010      	b.n	800344c <HAL_GPIO_Init+0x240>
 800342a:	2308      	movs	r3, #8
 800342c:	e00e      	b.n	800344c <HAL_GPIO_Init+0x240>
 800342e:	2307      	movs	r3, #7
 8003430:	e00c      	b.n	800344c <HAL_GPIO_Init+0x240>
 8003432:	2306      	movs	r3, #6
 8003434:	e00a      	b.n	800344c <HAL_GPIO_Init+0x240>
 8003436:	2305      	movs	r3, #5
 8003438:	e008      	b.n	800344c <HAL_GPIO_Init+0x240>
 800343a:	2304      	movs	r3, #4
 800343c:	e006      	b.n	800344c <HAL_GPIO_Init+0x240>
 800343e:	2303      	movs	r3, #3
 8003440:	e004      	b.n	800344c <HAL_GPIO_Init+0x240>
 8003442:	2302      	movs	r3, #2
 8003444:	e002      	b.n	800344c <HAL_GPIO_Init+0x240>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <HAL_GPIO_Init+0x240>
 800344a:	2300      	movs	r3, #0
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	f002 0203 	and.w	r2, r2, #3
 8003452:	0092      	lsls	r2, r2, #2
 8003454:	4093      	lsls	r3, r2
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800345c:	4934      	ldr	r1, [pc, #208]	; (8003530 <HAL_GPIO_Init+0x324>)
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	3302      	adds	r3, #2
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800346a:	4b3c      	ldr	r3, [pc, #240]	; (800355c <HAL_GPIO_Init+0x350>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	43db      	mvns	r3, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4013      	ands	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800348e:	4a33      	ldr	r2, [pc, #204]	; (800355c <HAL_GPIO_Init+0x350>)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003494:	4b31      	ldr	r3, [pc, #196]	; (800355c <HAL_GPIO_Init+0x350>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034b8:	4a28      	ldr	r2, [pc, #160]	; (800355c <HAL_GPIO_Init+0x350>)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034be:	4b27      	ldr	r3, [pc, #156]	; (800355c <HAL_GPIO_Init+0x350>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034e2:	4a1e      	ldr	r2, [pc, #120]	; (800355c <HAL_GPIO_Init+0x350>)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034e8:	4b1c      	ldr	r3, [pc, #112]	; (800355c <HAL_GPIO_Init+0x350>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800350c:	4a13      	ldr	r2, [pc, #76]	; (800355c <HAL_GPIO_Init+0x350>)
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3301      	adds	r3, #1
 8003516:	61fb      	str	r3, [r7, #28]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2b0f      	cmp	r3, #15
 800351c:	f67f ae84 	bls.w	8003228 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003520:	bf00      	nop
 8003522:	3724      	adds	r7, #36	; 0x24
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	40023800 	.word	0x40023800
 8003530:	40013800 	.word	0x40013800
 8003534:	40020000 	.word	0x40020000
 8003538:	40020400 	.word	0x40020400
 800353c:	40020800 	.word	0x40020800
 8003540:	40020c00 	.word	0x40020c00
 8003544:	40021000 	.word	0x40021000
 8003548:	40021400 	.word	0x40021400
 800354c:	40021800 	.word	0x40021800
 8003550:	40021c00 	.word	0x40021c00
 8003554:	40022000 	.word	0x40022000
 8003558:	40022400 	.word	0x40022400
 800355c:	40013c00 	.word	0x40013c00

08003560 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800356a:	2300      	movs	r3, #0
 800356c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003572:	2300      	movs	r3, #0
 8003574:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	e0d9      	b.n	8003730 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800357c:	2201      	movs	r2, #1
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	4013      	ands	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	429a      	cmp	r2, r3
 8003594:	f040 80c9 	bne.w	800372a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003598:	4a6a      	ldr	r2, [pc, #424]	; (8003744 <HAL_GPIO_DeInit+0x1e4>)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	089b      	lsrs	r3, r3, #2
 800359e:	3302      	adds	r3, #2
 80035a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	220f      	movs	r2, #15
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	4013      	ands	r3, r2
 80035b8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a62      	ldr	r2, [pc, #392]	; (8003748 <HAL_GPIO_DeInit+0x1e8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d037      	beq.n	8003632 <HAL_GPIO_DeInit+0xd2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a61      	ldr	r2, [pc, #388]	; (800374c <HAL_GPIO_DeInit+0x1ec>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d031      	beq.n	800362e <HAL_GPIO_DeInit+0xce>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a60      	ldr	r2, [pc, #384]	; (8003750 <HAL_GPIO_DeInit+0x1f0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d02b      	beq.n	800362a <HAL_GPIO_DeInit+0xca>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a5f      	ldr	r2, [pc, #380]	; (8003754 <HAL_GPIO_DeInit+0x1f4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d025      	beq.n	8003626 <HAL_GPIO_DeInit+0xc6>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a5e      	ldr	r2, [pc, #376]	; (8003758 <HAL_GPIO_DeInit+0x1f8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d01f      	beq.n	8003622 <HAL_GPIO_DeInit+0xc2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a5d      	ldr	r2, [pc, #372]	; (800375c <HAL_GPIO_DeInit+0x1fc>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d019      	beq.n	800361e <HAL_GPIO_DeInit+0xbe>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a5c      	ldr	r2, [pc, #368]	; (8003760 <HAL_GPIO_DeInit+0x200>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <HAL_GPIO_DeInit+0xba>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a5b      	ldr	r2, [pc, #364]	; (8003764 <HAL_GPIO_DeInit+0x204>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00d      	beq.n	8003616 <HAL_GPIO_DeInit+0xb6>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a5a      	ldr	r2, [pc, #360]	; (8003768 <HAL_GPIO_DeInit+0x208>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d007      	beq.n	8003612 <HAL_GPIO_DeInit+0xb2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a59      	ldr	r2, [pc, #356]	; (800376c <HAL_GPIO_DeInit+0x20c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d101      	bne.n	800360e <HAL_GPIO_DeInit+0xae>
 800360a:	2309      	movs	r3, #9
 800360c:	e012      	b.n	8003634 <HAL_GPIO_DeInit+0xd4>
 800360e:	230a      	movs	r3, #10
 8003610:	e010      	b.n	8003634 <HAL_GPIO_DeInit+0xd4>
 8003612:	2308      	movs	r3, #8
 8003614:	e00e      	b.n	8003634 <HAL_GPIO_DeInit+0xd4>
 8003616:	2307      	movs	r3, #7
 8003618:	e00c      	b.n	8003634 <HAL_GPIO_DeInit+0xd4>
 800361a:	2306      	movs	r3, #6
 800361c:	e00a      	b.n	8003634 <HAL_GPIO_DeInit+0xd4>
 800361e:	2305      	movs	r3, #5
 8003620:	e008      	b.n	8003634 <HAL_GPIO_DeInit+0xd4>
 8003622:	2304      	movs	r3, #4
 8003624:	e006      	b.n	8003634 <HAL_GPIO_DeInit+0xd4>
 8003626:	2303      	movs	r3, #3
 8003628:	e004      	b.n	8003634 <HAL_GPIO_DeInit+0xd4>
 800362a:	2302      	movs	r3, #2
 800362c:	e002      	b.n	8003634 <HAL_GPIO_DeInit+0xd4>
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <HAL_GPIO_DeInit+0xd4>
 8003632:	2300      	movs	r3, #0
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	f002 0203 	and.w	r2, r2, #3
 800363a:	0092      	lsls	r2, r2, #2
 800363c:	4093      	lsls	r3, r2
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	429a      	cmp	r2, r3
 8003642:	d132      	bne.n	80036aa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003644:	4b4a      	ldr	r3, [pc, #296]	; (8003770 <HAL_GPIO_DeInit+0x210>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	43db      	mvns	r3, r3
 800364c:	4948      	ldr	r1, [pc, #288]	; (8003770 <HAL_GPIO_DeInit+0x210>)
 800364e:	4013      	ands	r3, r2
 8003650:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003652:	4b47      	ldr	r3, [pc, #284]	; (8003770 <HAL_GPIO_DeInit+0x210>)
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	43db      	mvns	r3, r3
 800365a:	4945      	ldr	r1, [pc, #276]	; (8003770 <HAL_GPIO_DeInit+0x210>)
 800365c:	4013      	ands	r3, r2
 800365e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003660:	4b43      	ldr	r3, [pc, #268]	; (8003770 <HAL_GPIO_DeInit+0x210>)
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	43db      	mvns	r3, r3
 8003668:	4941      	ldr	r1, [pc, #260]	; (8003770 <HAL_GPIO_DeInit+0x210>)
 800366a:	4013      	ands	r3, r2
 800366c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800366e:	4b40      	ldr	r3, [pc, #256]	; (8003770 <HAL_GPIO_DeInit+0x210>)
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	43db      	mvns	r3, r3
 8003676:	493e      	ldr	r1, [pc, #248]	; (8003770 <HAL_GPIO_DeInit+0x210>)
 8003678:	4013      	ands	r3, r2
 800367a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	220f      	movs	r2, #15
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800368c:	4a2d      	ldr	r2, [pc, #180]	; (8003744 <HAL_GPIO_DeInit+0x1e4>)
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	089b      	lsrs	r3, r3, #2
 8003692:	3302      	adds	r3, #2
 8003694:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	43da      	mvns	r2, r3
 800369c:	4829      	ldr	r0, [pc, #164]	; (8003744 <HAL_GPIO_DeInit+0x1e4>)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	089b      	lsrs	r3, r3, #2
 80036a2:	400a      	ands	r2, r1
 80036a4:	3302      	adds	r3, #2
 80036a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	2103      	movs	r1, #3
 80036b4:	fa01 f303 	lsl.w	r3, r1, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	401a      	ands	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	08da      	lsrs	r2, r3, #3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3208      	adds	r2, #8
 80036c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	220f      	movs	r2, #15
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	08d2      	lsrs	r2, r2, #3
 80036e0:	4019      	ands	r1, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3208      	adds	r2, #8
 80036e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	2103      	movs	r1, #3
 80036f4:	fa01 f303 	lsl.w	r3, r1, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	401a      	ands	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	2101      	movs	r1, #1
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	fa01 f303 	lsl.w	r3, r1, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	401a      	ands	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	2103      	movs	r1, #3
 800371e:	fa01 f303 	lsl.w	r3, r1, r3
 8003722:	43db      	mvns	r3, r3
 8003724:	401a      	ands	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	3301      	adds	r3, #1
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2b0f      	cmp	r3, #15
 8003734:	f67f af22 	bls.w	800357c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003738:	bf00      	nop
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	40013800 	.word	0x40013800
 8003748:	40020000 	.word	0x40020000
 800374c:	40020400 	.word	0x40020400
 8003750:	40020800 	.word	0x40020800
 8003754:	40020c00 	.word	0x40020c00
 8003758:	40021000 	.word	0x40021000
 800375c:	40021400 	.word	0x40021400
 8003760:	40021800 	.word	0x40021800
 8003764:	40021c00 	.word	0x40021c00
 8003768:	40022000 	.word	0x40022000
 800376c:	40022400 	.word	0x40022400
 8003770:	40013c00 	.word	0x40013c00

08003774 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	887b      	ldrh	r3, [r7, #2]
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
 8003790:	e001      	b.n	8003796 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003792:	2300      	movs	r3, #0
 8003794:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003796:	7bfb      	ldrb	r3, [r7, #15]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	807b      	strh	r3, [r7, #2]
 80037b0:	4613      	mov	r3, r2
 80037b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037b4:	787b      	ldrb	r3, [r7, #1]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ba:	887a      	ldrh	r2, [r7, #2]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037c0:	e003      	b.n	80037ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037c2:	887b      	ldrh	r3, [r7, #2]
 80037c4:	041a      	lsls	r2, r3, #16
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	619a      	str	r2, [r3, #24]
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e11f      	b.n	8003a2a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fe fde2 	bl	80023c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2224      	movs	r2, #36	; 0x24
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0201 	bic.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800382a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800383a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800383c:	f001 f988 	bl	8004b50 <HAL_RCC_GetPCLK1Freq>
 8003840:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4a7b      	ldr	r2, [pc, #492]	; (8003a34 <HAL_I2C_Init+0x25c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d807      	bhi.n	800385c <HAL_I2C_Init+0x84>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4a7a      	ldr	r2, [pc, #488]	; (8003a38 <HAL_I2C_Init+0x260>)
 8003850:	4293      	cmp	r3, r2
 8003852:	bf94      	ite	ls
 8003854:	2301      	movls	r3, #1
 8003856:	2300      	movhi	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	e006      	b.n	800386a <HAL_I2C_Init+0x92>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4a77      	ldr	r2, [pc, #476]	; (8003a3c <HAL_I2C_Init+0x264>)
 8003860:	4293      	cmp	r3, r2
 8003862:	bf94      	ite	ls
 8003864:	2301      	movls	r3, #1
 8003866:	2300      	movhi	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e0db      	b.n	8003a2a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4a72      	ldr	r2, [pc, #456]	; (8003a40 <HAL_I2C_Init+0x268>)
 8003876:	fba2 2303 	umull	r2, r3, r2, r3
 800387a:	0c9b      	lsrs	r3, r3, #18
 800387c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	4a64      	ldr	r2, [pc, #400]	; (8003a34 <HAL_I2C_Init+0x25c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d802      	bhi.n	80038ac <HAL_I2C_Init+0xd4>
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	3301      	adds	r3, #1
 80038aa:	e009      	b.n	80038c0 <HAL_I2C_Init+0xe8>
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038b2:	fb02 f303 	mul.w	r3, r2, r3
 80038b6:	4a63      	ldr	r2, [pc, #396]	; (8003a44 <HAL_I2C_Init+0x26c>)
 80038b8:	fba2 2303 	umull	r2, r3, r2, r3
 80038bc:	099b      	lsrs	r3, r3, #6
 80038be:	3301      	adds	r3, #1
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6812      	ldr	r2, [r2, #0]
 80038c4:	430b      	orrs	r3, r1
 80038c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	4956      	ldr	r1, [pc, #344]	; (8003a34 <HAL_I2C_Init+0x25c>)
 80038dc:	428b      	cmp	r3, r1
 80038de:	d80d      	bhi.n	80038fc <HAL_I2C_Init+0x124>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1e59      	subs	r1, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80038ee:	3301      	adds	r3, #1
 80038f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	bf38      	it	cc
 80038f8:	2304      	movcc	r3, #4
 80038fa:	e04f      	b.n	800399c <HAL_I2C_Init+0x1c4>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d111      	bne.n	8003928 <HAL_I2C_Init+0x150>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1e58      	subs	r0, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6859      	ldr	r1, [r3, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	440b      	add	r3, r1
 8003912:	fbb0 f3f3 	udiv	r3, r0, r3
 8003916:	3301      	adds	r3, #1
 8003918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391c:	2b00      	cmp	r3, #0
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e012      	b.n	800394e <HAL_I2C_Init+0x176>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	1e58      	subs	r0, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6859      	ldr	r1, [r3, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	0099      	lsls	r1, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	fbb0 f3f3 	udiv	r3, r0, r3
 800393e:	3301      	adds	r3, #1
 8003940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_I2C_Init+0x17e>
 8003952:	2301      	movs	r3, #1
 8003954:	e022      	b.n	800399c <HAL_I2C_Init+0x1c4>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10e      	bne.n	800397c <HAL_I2C_Init+0x1a4>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1e58      	subs	r0, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6859      	ldr	r1, [r3, #4]
 8003966:	460b      	mov	r3, r1
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	440b      	add	r3, r1
 800396c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003970:	3301      	adds	r3, #1
 8003972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800397a:	e00f      	b.n	800399c <HAL_I2C_Init+0x1c4>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6859      	ldr	r1, [r3, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	0099      	lsls	r1, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003992:	3301      	adds	r3, #1
 8003994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003998:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	6809      	ldr	r1, [r1, #0]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69da      	ldr	r2, [r3, #28]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6911      	ldr	r1, [r2, #16]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	68d2      	ldr	r2, [r2, #12]
 80039d6:	4311      	orrs	r1, r2
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	430b      	orrs	r3, r1
 80039de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695a      	ldr	r2, [r3, #20]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	000186a0 	.word	0x000186a0
 8003a38:	001e847f 	.word	0x001e847f
 8003a3c:	003d08ff 	.word	0x003d08ff
 8003a40:	431bde83 	.word	0x431bde83
 8003a44:	10624dd3 	.word	0x10624dd3

08003a48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b20      	cmp	r3, #32
 8003a5c:	d129      	bne.n	8003ab2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2224      	movs	r2, #36	; 0x24
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0201 	bic.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0210 	bic.w	r2, r2, #16
 8003a84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f042 0201 	orr.w	r2, r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	e000      	b.n	8003ab4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003ab2:	2302      	movs	r3, #2
  }
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d12a      	bne.n	8003b30 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2224      	movs	r2, #36	; 0x24
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0201 	bic.w	r2, r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003afa:	89fb      	ldrh	r3, [r7, #14]
 8003afc:	f023 030f 	bic.w	r3, r3, #15
 8003b00:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	89fb      	ldrh	r3, [r7, #14]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	89fa      	ldrh	r2, [r7, #14]
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	e000      	b.n	8003b32 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
  }
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
	...

08003b40 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e0bf      	b.n	8003cd2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fe fc98 	bl	800249c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003b82:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6999      	ldr	r1, [r3, #24]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003b98:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6899      	ldr	r1, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4b4a      	ldr	r3, [pc, #296]	; (8003cdc <HAL_LTDC_Init+0x19c>)
 8003bb4:	400b      	ands	r3, r1
 8003bb6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	041b      	lsls	r3, r3, #16
 8003bbe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6899      	ldr	r1, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699a      	ldr	r2, [r3, #24]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68d9      	ldr	r1, [r3, #12]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	4b3e      	ldr	r3, [pc, #248]	; (8003cdc <HAL_LTDC_Init+0x19c>)
 8003be2:	400b      	ands	r3, r1
 8003be4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	041b      	lsls	r3, r3, #16
 8003bec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68d9      	ldr	r1, [r3, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a1a      	ldr	r2, [r3, #32]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6919      	ldr	r1, [r3, #16]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	4b33      	ldr	r3, [pc, #204]	; (8003cdc <HAL_LTDC_Init+0x19c>)
 8003c10:	400b      	ands	r3, r1
 8003c12:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	041b      	lsls	r3, r3, #16
 8003c1a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6919      	ldr	r1, [r3, #16]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6959      	ldr	r1, [r3, #20]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4b27      	ldr	r3, [pc, #156]	; (8003cdc <HAL_LTDC_Init+0x19c>)
 8003c3e:	400b      	ands	r3, r1
 8003c40:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	041b      	lsls	r3, r3, #16
 8003c48:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6959      	ldr	r1, [r3, #20]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c66:	021b      	lsls	r3, r3, #8
 8003c68:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003c70:	041b      	lsls	r3, r3, #16
 8003c72:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0206 	orr.w	r2, r2, #6
 8003cae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	f000f800 	.word	0xf000f800

08003ce0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d023      	beq.n	8003d4a <HAL_LTDC_IRQHandler+0x6a>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01e      	beq.n	8003d4a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0204 	bic.w	r2, r2, #4
 8003d1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2204      	movs	r2, #4
 8003d22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d2a:	f043 0201 	orr.w	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2204      	movs	r2, #4
 8003d38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f86f 	bl	8003e28 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d023      	beq.n	8003d9c <HAL_LTDC_IRQHandler+0xbc>
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d01e      	beq.n	8003d9c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0202 	bic.w	r2, r2, #2
 8003d6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2202      	movs	r2, #2
 8003d74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d7c:	f043 0202 	orr.w	r2, r3, #2
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2204      	movs	r2, #4
 8003d8a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f846 	bl	8003e28 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d01b      	beq.n	8003dde <HAL_LTDC_IRQHandler+0xfe>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d016      	beq.n	8003dde <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0201 	bic.w	r2, r2, #1
 8003dbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f82f 	bl	8003e3c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d01b      	beq.n	8003e20 <HAL_LTDC_IRQHandler+0x140>
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d016      	beq.n	8003e20 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0208 	bic.w	r2, r2, #8
 8003e00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2208      	movs	r2, #8
 8003e08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fe f8ce 	bl	8001fbc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003e50:	b5b0      	push	{r4, r5, r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_LTDC_ConfigLayer+0x1a>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e02c      	b.n	8003ec4 <HAL_LTDC_ConfigLayer+0x74>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2202      	movs	r2, #2
 8003e76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2134      	movs	r1, #52	; 0x34
 8003e80:	fb01 f303 	mul.w	r3, r1, r3
 8003e84:	4413      	add	r3, r2
 8003e86:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	4614      	mov	r4, r2
 8003e8e:	461d      	mov	r5, r3
 8003e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e9c:	682b      	ldr	r3, [r5, #0]
 8003e9e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	68b9      	ldr	r1, [r7, #8]
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 f882 	bl	8003fae <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bdb0      	pop	{r4, r5, r7, pc}

08003ecc <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_LTDC_Reload+0x18>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e01c      	b.n	8003f1e <HAL_LTDC_Reload+0x52>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0208 	orr.w	r2, r2, #8
 8003f02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <HAL_LTDC_SetWindowPosition_NoReload>:
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b086      	sub	sp, #24
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	607a      	str	r2, [r7, #4]
 8003f36:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(X0));
  assert_param(IS_LTDC_CFBLNBR(Y0));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_LTDC_SetWindowPosition_NoReload+0x1c>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e02f      	b.n	8003fa6 <HAL_LTDC_SetWindowPosition_NoReload+0x7c>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2202      	movs	r2, #2
 8003f52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2234      	movs	r2, #52	; 0x34
 8003f5a:	fb02 f303 	mul.w	r3, r2, r3
 8003f5e:	3338      	adds	r3, #56	; 0x38
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	441a      	add	r2, r3
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	441a      	add	r2, r3
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	6979      	ldr	r1, [r7, #20]
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 f80d 	bl	8003fae <LTDC_SetConfig>

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b089      	sub	sp, #36	; 0x24
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	0c1b      	lsrs	r3, r3, #16
 8003fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fca:	4413      	add	r3, r2
 8003fcc:	041b      	lsls	r3, r3, #16
 8003fce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	01db      	lsls	r3, r3, #7
 8003fda:	4413      	add	r3, r2
 8003fdc:	3384      	adds	r3, #132	; 0x84
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	01d2      	lsls	r2, r2, #7
 8003fea:	440a      	add	r2, r1
 8003fec:	3284      	adds	r2, #132	; 0x84
 8003fee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003ff2:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	0c1b      	lsrs	r3, r3, #16
 8004000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004004:	4413      	add	r3, r2
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4619      	mov	r1, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	01db      	lsls	r3, r3, #7
 8004012:	440b      	add	r3, r1
 8004014:	3384      	adds	r3, #132	; 0x84
 8004016:	4619      	mov	r1, r3
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	4313      	orrs	r3, r2
 800401c:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800402c:	4413      	add	r3, r2
 800402e:	041b      	lsls	r3, r3, #16
 8004030:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	01db      	lsls	r3, r3, #7
 800403c:	4413      	add	r3, r2
 800403e:	3384      	adds	r3, #132	; 0x84
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	4611      	mov	r1, r2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	01d2      	lsls	r2, r2, #7
 800404c:	440a      	add	r2, r1
 800404e:	3284      	adds	r2, #132	; 0x84
 8004050:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004054:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004064:	4413      	add	r3, r2
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4619      	mov	r1, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	01db      	lsls	r3, r3, #7
 8004072:	440b      	add	r3, r1
 8004074:	3384      	adds	r3, #132	; 0x84
 8004076:	4619      	mov	r1, r3
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	4313      	orrs	r3, r2
 800407c:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	01db      	lsls	r3, r3, #7
 8004088:	4413      	add	r3, r2
 800408a:	3384      	adds	r3, #132	; 0x84
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	4611      	mov	r1, r2
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	01d2      	lsls	r2, r2, #7
 8004098:	440a      	add	r2, r1
 800409a:	3284      	adds	r2, #132	; 0x84
 800409c:	f023 0307 	bic.w	r3, r3, #7
 80040a0:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	01db      	lsls	r3, r3, #7
 80040ac:	4413      	add	r3, r2
 80040ae:	3384      	adds	r3, #132	; 0x84
 80040b0:	461a      	mov	r2, r3
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80040c8:	041b      	lsls	r3, r3, #16
 80040ca:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	061b      	lsls	r3, r3, #24
 80040d2:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	461a      	mov	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	01db      	lsls	r3, r3, #7
 80040de:	4413      	add	r3, r2
 80040e0:	3384      	adds	r3, #132	; 0x84
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	01db      	lsls	r3, r3, #7
 80040ee:	4413      	add	r3, r2
 80040f0:	3384      	adds	r3, #132	; 0x84
 80040f2:	461a      	mov	r2, r3
 80040f4:	2300      	movs	r3, #0
 80040f6:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040fe:	461a      	mov	r2, r3
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	431a      	orrs	r2, r3
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	431a      	orrs	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4619      	mov	r1, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	01db      	lsls	r3, r3, #7
 8004112:	440b      	add	r3, r1
 8004114:	3384      	adds	r3, #132	; 0x84
 8004116:	4619      	mov	r1, r3
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	4313      	orrs	r3, r2
 800411c:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	01db      	lsls	r3, r3, #7
 8004128:	4413      	add	r3, r2
 800412a:	3384      	adds	r3, #132	; 0x84
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	6812      	ldr	r2, [r2, #0]
 8004132:	4611      	mov	r1, r2
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	01d2      	lsls	r2, r2, #7
 8004138:	440a      	add	r2, r1
 800413a:	3284      	adds	r2, #132	; 0x84
 800413c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004140:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	01db      	lsls	r3, r3, #7
 800414c:	4413      	add	r3, r2
 800414e:	3384      	adds	r3, #132	; 0x84
 8004150:	461a      	mov	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	461a      	mov	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	01db      	lsls	r3, r3, #7
 8004162:	4413      	add	r3, r2
 8004164:	3384      	adds	r3, #132	; 0x84
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	4611      	mov	r1, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	01d2      	lsls	r2, r2, #7
 8004172:	440a      	add	r2, r1
 8004174:	3284      	adds	r2, #132	; 0x84
 8004176:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800417a:	f023 0307 	bic.w	r3, r3, #7
 800417e:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	69da      	ldr	r2, [r3, #28]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	68f9      	ldr	r1, [r7, #12]
 800418a:	6809      	ldr	r1, [r1, #0]
 800418c:	4608      	mov	r0, r1
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	01c9      	lsls	r1, r1, #7
 8004192:	4401      	add	r1, r0
 8004194:	3184      	adds	r1, #132	; 0x84
 8004196:	4313      	orrs	r3, r2
 8004198:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	01db      	lsls	r3, r3, #7
 80041a4:	4413      	add	r3, r2
 80041a6:	3384      	adds	r3, #132	; 0x84
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	01db      	lsls	r3, r3, #7
 80041b4:	4413      	add	r3, r2
 80041b6:	3384      	adds	r3, #132	; 0x84
 80041b8:	461a      	mov	r2, r3
 80041ba:	2300      	movs	r3, #0
 80041bc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	01db      	lsls	r3, r3, #7
 80041c8:	4413      	add	r3, r2
 80041ca:	3384      	adds	r3, #132	; 0x84
 80041cc:	461a      	mov	r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80041dc:	2304      	movs	r3, #4
 80041de:	61fb      	str	r3, [r7, #28]
 80041e0:	e01b      	b.n	800421a <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d102      	bne.n	80041f0 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80041ea:	2303      	movs	r3, #3
 80041ec:	61fb      	str	r3, [r7, #28]
 80041ee:	e014      	b.n	800421a <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d00b      	beq.n	8004210 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d007      	beq.n	8004210 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004204:	2b03      	cmp	r3, #3
 8004206:	d003      	beq.n	8004210 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800420c:	2b07      	cmp	r3, #7
 800420e:	d102      	bne.n	8004216 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004210:	2302      	movs	r3, #2
 8004212:	61fb      	str	r3, [r7, #28]
 8004214:	e001      	b.n	800421a <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004216:	2301      	movs	r3, #1
 8004218:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	01db      	lsls	r3, r3, #7
 8004224:	4413      	add	r3, r2
 8004226:	3384      	adds	r3, #132	; 0x84
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	4611      	mov	r1, r2
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	01d2      	lsls	r2, r2, #7
 8004234:	440a      	add	r2, r1
 8004236:	3284      	adds	r2, #132	; 0x84
 8004238:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800423c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	fb02 f303 	mul.w	r3, r2, r3
 8004248:	041a      	lsls	r2, r3, #16
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	6859      	ldr	r1, [r3, #4]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	1acb      	subs	r3, r1, r3
 8004254:	69f9      	ldr	r1, [r7, #28]
 8004256:	fb01 f303 	mul.w	r3, r1, r3
 800425a:	3303      	adds	r3, #3
 800425c:	68f9      	ldr	r1, [r7, #12]
 800425e:	6809      	ldr	r1, [r1, #0]
 8004260:	4608      	mov	r0, r1
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	01c9      	lsls	r1, r1, #7
 8004266:	4401      	add	r1, r0
 8004268:	3184      	adds	r1, #132	; 0x84
 800426a:	4313      	orrs	r3, r2
 800426c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	01db      	lsls	r3, r3, #7
 8004278:	4413      	add	r3, r2
 800427a:	3384      	adds	r3, #132	; 0x84
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	6812      	ldr	r2, [r2, #0]
 8004282:	4611      	mov	r1, r2
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	01d2      	lsls	r2, r2, #7
 8004288:	440a      	add	r2, r1
 800428a:	3284      	adds	r2, #132	; 0x84
 800428c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004290:	f023 0307 	bic.w	r3, r3, #7
 8004294:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	01db      	lsls	r3, r3, #7
 80042a0:	4413      	add	r3, r2
 80042a2:	3384      	adds	r3, #132	; 0x84
 80042a4:	461a      	mov	r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	01db      	lsls	r3, r3, #7
 80042b6:	4413      	add	r3, r2
 80042b8:	3384      	adds	r3, #132	; 0x84
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	4611      	mov	r1, r2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	01d2      	lsls	r2, r2, #7
 80042c6:	440a      	add	r2, r1
 80042c8:	3284      	adds	r2, #132	; 0x84
 80042ca:	f043 0301 	orr.w	r3, r3, #1
 80042ce:	6013      	str	r3, [r2, #0]
}
 80042d0:	bf00      	nop
 80042d2:	3724      	adds	r7, #36	; 0x24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e25b      	b.n	80047a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d075      	beq.n	80043e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042fa:	4ba3      	ldr	r3, [pc, #652]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 030c 	and.w	r3, r3, #12
 8004302:	2b04      	cmp	r3, #4
 8004304:	d00c      	beq.n	8004320 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004306:	4ba0      	ldr	r3, [pc, #640]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800430e:	2b08      	cmp	r3, #8
 8004310:	d112      	bne.n	8004338 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004312:	4b9d      	ldr	r3, [pc, #628]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800431a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800431e:	d10b      	bne.n	8004338 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004320:	4b99      	ldr	r3, [pc, #612]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d05b      	beq.n	80043e4 <HAL_RCC_OscConfig+0x108>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d157      	bne.n	80043e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e236      	b.n	80047a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004340:	d106      	bne.n	8004350 <HAL_RCC_OscConfig+0x74>
 8004342:	4b91      	ldr	r3, [pc, #580]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a90      	ldr	r2, [pc, #576]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 8004348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	e01d      	b.n	800438c <HAL_RCC_OscConfig+0xb0>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004358:	d10c      	bne.n	8004374 <HAL_RCC_OscConfig+0x98>
 800435a:	4b8b      	ldr	r3, [pc, #556]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a8a      	ldr	r2, [pc, #552]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 8004360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	4b88      	ldr	r3, [pc, #544]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a87      	ldr	r2, [pc, #540]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 800436c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	e00b      	b.n	800438c <HAL_RCC_OscConfig+0xb0>
 8004374:	4b84      	ldr	r3, [pc, #528]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a83      	ldr	r2, [pc, #524]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 800437a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	4b81      	ldr	r3, [pc, #516]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a80      	ldr	r2, [pc, #512]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 8004386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800438a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d013      	beq.n	80043bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004394:	f7fe fc22 	bl	8002bdc <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800439c:	f7fe fc1e 	bl	8002bdc <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b64      	cmp	r3, #100	; 0x64
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e1fb      	b.n	80047a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ae:	4b76      	ldr	r3, [pc, #472]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f0      	beq.n	800439c <HAL_RCC_OscConfig+0xc0>
 80043ba:	e014      	b.n	80043e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043bc:	f7fe fc0e 	bl	8002bdc <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c4:	f7fe fc0a 	bl	8002bdc <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b64      	cmp	r3, #100	; 0x64
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e1e7      	b.n	80047a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043d6:	4b6c      	ldr	r3, [pc, #432]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f0      	bne.n	80043c4 <HAL_RCC_OscConfig+0xe8>
 80043e2:	e000      	b.n	80043e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d063      	beq.n	80044ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043f2:	4b65      	ldr	r3, [pc, #404]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 030c 	and.w	r3, r3, #12
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00b      	beq.n	8004416 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043fe:	4b62      	ldr	r3, [pc, #392]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004406:	2b08      	cmp	r3, #8
 8004408:	d11c      	bne.n	8004444 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800440a:	4b5f      	ldr	r3, [pc, #380]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d116      	bne.n	8004444 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004416:	4b5c      	ldr	r3, [pc, #368]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <HAL_RCC_OscConfig+0x152>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d001      	beq.n	800442e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e1bb      	b.n	80047a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442e:	4b56      	ldr	r3, [pc, #344]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	4952      	ldr	r1, [pc, #328]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 800443e:	4313      	orrs	r3, r2
 8004440:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004442:	e03a      	b.n	80044ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d020      	beq.n	800448e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800444c:	4b4f      	ldr	r3, [pc, #316]	; (800458c <HAL_RCC_OscConfig+0x2b0>)
 800444e:	2201      	movs	r2, #1
 8004450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004452:	f7fe fbc3 	bl	8002bdc <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800445a:	f7fe fbbf 	bl	8002bdc <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e19c      	b.n	80047a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800446c:	4b46      	ldr	r3, [pc, #280]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0f0      	beq.n	800445a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004478:	4b43      	ldr	r3, [pc, #268]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	4940      	ldr	r1, [pc, #256]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 8004488:	4313      	orrs	r3, r2
 800448a:	600b      	str	r3, [r1, #0]
 800448c:	e015      	b.n	80044ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800448e:	4b3f      	ldr	r3, [pc, #252]	; (800458c <HAL_RCC_OscConfig+0x2b0>)
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004494:	f7fe fba2 	bl	8002bdc <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800449c:	f7fe fb9e 	bl	8002bdc <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e17b      	b.n	80047a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ae:	4b36      	ldr	r3, [pc, #216]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f0      	bne.n	800449c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d030      	beq.n	8004528 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d016      	beq.n	80044fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ce:	4b30      	ldr	r3, [pc, #192]	; (8004590 <HAL_RCC_OscConfig+0x2b4>)
 80044d0:	2201      	movs	r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d4:	f7fe fb82 	bl	8002bdc <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044dc:	f7fe fb7e 	bl	8002bdc <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e15b      	b.n	80047a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ee:	4b26      	ldr	r3, [pc, #152]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 80044f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0x200>
 80044fa:	e015      	b.n	8004528 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044fc:	4b24      	ldr	r3, [pc, #144]	; (8004590 <HAL_RCC_OscConfig+0x2b4>)
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004502:	f7fe fb6b 	bl	8002bdc <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800450a:	f7fe fb67 	bl	8002bdc <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e144      	b.n	80047a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800451c:	4b1a      	ldr	r3, [pc, #104]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 800451e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1f0      	bne.n	800450a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 80a0 	beq.w	8004676 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004536:	2300      	movs	r3, #0
 8004538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800453a:	4b13      	ldr	r3, [pc, #76]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10f      	bne.n	8004566 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004546:	2300      	movs	r3, #0
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	4b0f      	ldr	r3, [pc, #60]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	4a0e      	ldr	r2, [pc, #56]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 8004550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004554:	6413      	str	r3, [r2, #64]	; 0x40
 8004556:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <HAL_RCC_OscConfig+0x2ac>)
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455e:	60bb      	str	r3, [r7, #8]
 8004560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004562:	2301      	movs	r3, #1
 8004564:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004566:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <HAL_RCC_OscConfig+0x2b8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456e:	2b00      	cmp	r3, #0
 8004570:	d121      	bne.n	80045b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004572:	4b08      	ldr	r3, [pc, #32]	; (8004594 <HAL_RCC_OscConfig+0x2b8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a07      	ldr	r2, [pc, #28]	; (8004594 <HAL_RCC_OscConfig+0x2b8>)
 8004578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800457c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800457e:	f7fe fb2d 	bl	8002bdc <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004584:	e011      	b.n	80045aa <HAL_RCC_OscConfig+0x2ce>
 8004586:	bf00      	nop
 8004588:	40023800 	.word	0x40023800
 800458c:	42470000 	.word	0x42470000
 8004590:	42470e80 	.word	0x42470e80
 8004594:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004598:	f7fe fb20 	bl	8002bdc <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e0fd      	b.n	80047a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045aa:	4b81      	ldr	r3, [pc, #516]	; (80047b0 <HAL_RCC_OscConfig+0x4d4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d106      	bne.n	80045cc <HAL_RCC_OscConfig+0x2f0>
 80045be:	4b7d      	ldr	r3, [pc, #500]	; (80047b4 <HAL_RCC_OscConfig+0x4d8>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c2:	4a7c      	ldr	r2, [pc, #496]	; (80047b4 <HAL_RCC_OscConfig+0x4d8>)
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ca:	e01c      	b.n	8004606 <HAL_RCC_OscConfig+0x32a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2b05      	cmp	r3, #5
 80045d2:	d10c      	bne.n	80045ee <HAL_RCC_OscConfig+0x312>
 80045d4:	4b77      	ldr	r3, [pc, #476]	; (80047b4 <HAL_RCC_OscConfig+0x4d8>)
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	4a76      	ldr	r2, [pc, #472]	; (80047b4 <HAL_RCC_OscConfig+0x4d8>)
 80045da:	f043 0304 	orr.w	r3, r3, #4
 80045de:	6713      	str	r3, [r2, #112]	; 0x70
 80045e0:	4b74      	ldr	r3, [pc, #464]	; (80047b4 <HAL_RCC_OscConfig+0x4d8>)
 80045e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e4:	4a73      	ldr	r2, [pc, #460]	; (80047b4 <HAL_RCC_OscConfig+0x4d8>)
 80045e6:	f043 0301 	orr.w	r3, r3, #1
 80045ea:	6713      	str	r3, [r2, #112]	; 0x70
 80045ec:	e00b      	b.n	8004606 <HAL_RCC_OscConfig+0x32a>
 80045ee:	4b71      	ldr	r3, [pc, #452]	; (80047b4 <HAL_RCC_OscConfig+0x4d8>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f2:	4a70      	ldr	r2, [pc, #448]	; (80047b4 <HAL_RCC_OscConfig+0x4d8>)
 80045f4:	f023 0301 	bic.w	r3, r3, #1
 80045f8:	6713      	str	r3, [r2, #112]	; 0x70
 80045fa:	4b6e      	ldr	r3, [pc, #440]	; (80047b4 <HAL_RCC_OscConfig+0x4d8>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fe:	4a6d      	ldr	r2, [pc, #436]	; (80047b4 <HAL_RCC_OscConfig+0x4d8>)
 8004600:	f023 0304 	bic.w	r3, r3, #4
 8004604:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d015      	beq.n	800463a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460e:	f7fe fae5 	bl	8002bdc <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004614:	e00a      	b.n	800462c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004616:	f7fe fae1 	bl	8002bdc <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	f241 3288 	movw	r2, #5000	; 0x1388
 8004624:	4293      	cmp	r3, r2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e0bc      	b.n	80047a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462c:	4b61      	ldr	r3, [pc, #388]	; (80047b4 <HAL_RCC_OscConfig+0x4d8>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0ee      	beq.n	8004616 <HAL_RCC_OscConfig+0x33a>
 8004638:	e014      	b.n	8004664 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800463a:	f7fe facf 	bl	8002bdc <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004640:	e00a      	b.n	8004658 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004642:	f7fe facb 	bl	8002bdc <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004650:	4293      	cmp	r3, r2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e0a6      	b.n	80047a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004658:	4b56      	ldr	r3, [pc, #344]	; (80047b4 <HAL_RCC_OscConfig+0x4d8>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1ee      	bne.n	8004642 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004664:	7dfb      	ldrb	r3, [r7, #23]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d105      	bne.n	8004676 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800466a:	4b52      	ldr	r3, [pc, #328]	; (80047b4 <HAL_RCC_OscConfig+0x4d8>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	4a51      	ldr	r2, [pc, #324]	; (80047b4 <HAL_RCC_OscConfig+0x4d8>)
 8004670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004674:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 8092 	beq.w	80047a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004680:	4b4c      	ldr	r3, [pc, #304]	; (80047b4 <HAL_RCC_OscConfig+0x4d8>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 030c 	and.w	r3, r3, #12
 8004688:	2b08      	cmp	r3, #8
 800468a:	d05c      	beq.n	8004746 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d141      	bne.n	8004718 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004694:	4b48      	ldr	r3, [pc, #288]	; (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469a:	f7fe fa9f 	bl	8002bdc <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a2:	f7fe fa9b 	bl	8002bdc <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e078      	b.n	80047a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b4:	4b3f      	ldr	r3, [pc, #252]	; (80047b4 <HAL_RCC_OscConfig+0x4d8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1f0      	bne.n	80046a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	019b      	lsls	r3, r3, #6
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d6:	085b      	lsrs	r3, r3, #1
 80046d8:	3b01      	subs	r3, #1
 80046da:	041b      	lsls	r3, r3, #16
 80046dc:	431a      	orrs	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	061b      	lsls	r3, r3, #24
 80046e4:	4933      	ldr	r1, [pc, #204]	; (80047b4 <HAL_RCC_OscConfig+0x4d8>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046ea:	4b33      	ldr	r3, [pc, #204]	; (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f0:	f7fe fa74 	bl	8002bdc <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f8:	f7fe fa70 	bl	8002bdc <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e04d      	b.n	80047a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800470a:	4b2a      	ldr	r3, [pc, #168]	; (80047b4 <HAL_RCC_OscConfig+0x4d8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0f0      	beq.n	80046f8 <HAL_RCC_OscConfig+0x41c>
 8004716:	e045      	b.n	80047a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004718:	4b27      	ldr	r3, [pc, #156]	; (80047b8 <HAL_RCC_OscConfig+0x4dc>)
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471e:	f7fe fa5d 	bl	8002bdc <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004724:	e008      	b.n	8004738 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004726:	f7fe fa59 	bl	8002bdc <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e036      	b.n	80047a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004738:	4b1e      	ldr	r3, [pc, #120]	; (80047b4 <HAL_RCC_OscConfig+0x4d8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1f0      	bne.n	8004726 <HAL_RCC_OscConfig+0x44a>
 8004744:	e02e      	b.n	80047a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e029      	b.n	80047a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004752:	4b18      	ldr	r3, [pc, #96]	; (80047b4 <HAL_RCC_OscConfig+0x4d8>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	429a      	cmp	r2, r3
 8004764:	d11c      	bne.n	80047a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004770:	429a      	cmp	r2, r3
 8004772:	d115      	bne.n	80047a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800477a:	4013      	ands	r3, r2
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004780:	4293      	cmp	r3, r2
 8004782:	d10d      	bne.n	80047a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800478e:	429a      	cmp	r2, r3
 8004790:	d106      	bne.n	80047a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800479c:	429a      	cmp	r2, r3
 800479e:	d001      	beq.n	80047a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40007000 	.word	0x40007000
 80047b4:	40023800 	.word	0x40023800
 80047b8:	42470060 	.word	0x42470060

080047bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e0cc      	b.n	800496a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047d0:	4b68      	ldr	r3, [pc, #416]	; (8004974 <HAL_RCC_ClockConfig+0x1b8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d90c      	bls.n	80047f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047de:	4b65      	ldr	r3, [pc, #404]	; (8004974 <HAL_RCC_ClockConfig+0x1b8>)
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e6:	4b63      	ldr	r3, [pc, #396]	; (8004974 <HAL_RCC_ClockConfig+0x1b8>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d001      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e0b8      	b.n	800496a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d020      	beq.n	8004846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004810:	4b59      	ldr	r3, [pc, #356]	; (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	4a58      	ldr	r2, [pc, #352]	; (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800481a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004828:	4b53      	ldr	r3, [pc, #332]	; (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	4a52      	ldr	r2, [pc, #328]	; (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004834:	4b50      	ldr	r3, [pc, #320]	; (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	494d      	ldr	r1, [pc, #308]	; (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	4313      	orrs	r3, r2
 8004844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d044      	beq.n	80048dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d107      	bne.n	800486a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485a:	4b47      	ldr	r3, [pc, #284]	; (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d119      	bne.n	800489a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e07f      	b.n	800496a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d003      	beq.n	800487a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004876:	2b03      	cmp	r3, #3
 8004878:	d107      	bne.n	800488a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487a:	4b3f      	ldr	r3, [pc, #252]	; (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d109      	bne.n	800489a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e06f      	b.n	800496a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800488a:	4b3b      	ldr	r3, [pc, #236]	; (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e067      	b.n	800496a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800489a:	4b37      	ldr	r3, [pc, #220]	; (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f023 0203 	bic.w	r2, r3, #3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	4934      	ldr	r1, [pc, #208]	; (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048ac:	f7fe f996 	bl	8002bdc <HAL_GetTick>
 80048b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b2:	e00a      	b.n	80048ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b4:	f7fe f992 	bl	8002bdc <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e04f      	b.n	800496a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ca:	4b2b      	ldr	r3, [pc, #172]	; (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 020c 	and.w	r2, r3, #12
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	429a      	cmp	r2, r3
 80048da:	d1eb      	bne.n	80048b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048dc:	4b25      	ldr	r3, [pc, #148]	; (8004974 <HAL_RCC_ClockConfig+0x1b8>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 030f 	and.w	r3, r3, #15
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d20c      	bcs.n	8004904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ea:	4b22      	ldr	r3, [pc, #136]	; (8004974 <HAL_RCC_ClockConfig+0x1b8>)
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f2:	4b20      	ldr	r3, [pc, #128]	; (8004974 <HAL_RCC_ClockConfig+0x1b8>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d001      	beq.n	8004904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e032      	b.n	800496a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004910:	4b19      	ldr	r3, [pc, #100]	; (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	4916      	ldr	r1, [pc, #88]	; (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800491e:	4313      	orrs	r3, r2
 8004920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d009      	beq.n	8004942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800492e:	4b12      	ldr	r3, [pc, #72]	; (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	490e      	ldr	r1, [pc, #56]	; (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	4313      	orrs	r3, r2
 8004940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004942:	f000 f821 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 8004946:	4601      	mov	r1, r0
 8004948:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	091b      	lsrs	r3, r3, #4
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	4a0a      	ldr	r2, [pc, #40]	; (800497c <HAL_RCC_ClockConfig+0x1c0>)
 8004954:	5cd3      	ldrb	r3, [r2, r3]
 8004956:	fa21 f303 	lsr.w	r3, r1, r3
 800495a:	4a09      	ldr	r2, [pc, #36]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800495c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800495e:	4b09      	ldr	r3, [pc, #36]	; (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f7fe f81c 	bl	80029a0 <HAL_InitTick>

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40023c00 	.word	0x40023c00
 8004978:	40023800 	.word	0x40023800
 800497c:	08008d90 	.word	0x08008d90
 8004980:	20000004 	.word	0x20000004
 8004984:	20000008 	.word	0x20000008

08004988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	607b      	str	r3, [r7, #4]
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	2300      	movs	r3, #0
 8004998:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800499e:	4b63      	ldr	r3, [pc, #396]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 030c 	and.w	r3, r3, #12
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d007      	beq.n	80049ba <HAL_RCC_GetSysClockFreq+0x32>
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d008      	beq.n	80049c0 <HAL_RCC_GetSysClockFreq+0x38>
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f040 80b4 	bne.w	8004b1c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049b4:	4b5e      	ldr	r3, [pc, #376]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80049b6:	60bb      	str	r3, [r7, #8]
       break;
 80049b8:	e0b3      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049ba:	4b5e      	ldr	r3, [pc, #376]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80049bc:	60bb      	str	r3, [r7, #8]
      break;
 80049be:	e0b0      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049c0:	4b5a      	ldr	r3, [pc, #360]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ca:	4b58      	ldr	r3, [pc, #352]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d04a      	beq.n	8004a6c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d6:	4b55      	ldr	r3, [pc, #340]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	099b      	lsrs	r3, r3, #6
 80049dc:	f04f 0400 	mov.w	r4, #0
 80049e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	ea03 0501 	and.w	r5, r3, r1
 80049ec:	ea04 0602 	and.w	r6, r4, r2
 80049f0:	4629      	mov	r1, r5
 80049f2:	4632      	mov	r2, r6
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	f04f 0400 	mov.w	r4, #0
 80049fc:	0154      	lsls	r4, r2, #5
 80049fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a02:	014b      	lsls	r3, r1, #5
 8004a04:	4619      	mov	r1, r3
 8004a06:	4622      	mov	r2, r4
 8004a08:	1b49      	subs	r1, r1, r5
 8004a0a:	eb62 0206 	sbc.w	r2, r2, r6
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	f04f 0400 	mov.w	r4, #0
 8004a16:	0194      	lsls	r4, r2, #6
 8004a18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a1c:	018b      	lsls	r3, r1, #6
 8004a1e:	1a5b      	subs	r3, r3, r1
 8004a20:	eb64 0402 	sbc.w	r4, r4, r2
 8004a24:	f04f 0100 	mov.w	r1, #0
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	00e2      	lsls	r2, r4, #3
 8004a2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a32:	00d9      	lsls	r1, r3, #3
 8004a34:	460b      	mov	r3, r1
 8004a36:	4614      	mov	r4, r2
 8004a38:	195b      	adds	r3, r3, r5
 8004a3a:	eb44 0406 	adc.w	r4, r4, r6
 8004a3e:	f04f 0100 	mov.w	r1, #0
 8004a42:	f04f 0200 	mov.w	r2, #0
 8004a46:	0262      	lsls	r2, r4, #9
 8004a48:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004a4c:	0259      	lsls	r1, r3, #9
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4614      	mov	r4, r2
 8004a52:	4618      	mov	r0, r3
 8004a54:	4621      	mov	r1, r4
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f04f 0400 	mov.w	r4, #0
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	4623      	mov	r3, r4
 8004a60:	f7fb ffe4 	bl	8000a2c <__aeabi_uldivmod>
 8004a64:	4603      	mov	r3, r0
 8004a66:	460c      	mov	r4, r1
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	e049      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a6c:	4b2f      	ldr	r3, [pc, #188]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	099b      	lsrs	r3, r3, #6
 8004a72:	f04f 0400 	mov.w	r4, #0
 8004a76:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	ea03 0501 	and.w	r5, r3, r1
 8004a82:	ea04 0602 	and.w	r6, r4, r2
 8004a86:	4629      	mov	r1, r5
 8004a88:	4632      	mov	r2, r6
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	f04f 0400 	mov.w	r4, #0
 8004a92:	0154      	lsls	r4, r2, #5
 8004a94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a98:	014b      	lsls	r3, r1, #5
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4622      	mov	r2, r4
 8004a9e:	1b49      	subs	r1, r1, r5
 8004aa0:	eb62 0206 	sbc.w	r2, r2, r6
 8004aa4:	f04f 0300 	mov.w	r3, #0
 8004aa8:	f04f 0400 	mov.w	r4, #0
 8004aac:	0194      	lsls	r4, r2, #6
 8004aae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ab2:	018b      	lsls	r3, r1, #6
 8004ab4:	1a5b      	subs	r3, r3, r1
 8004ab6:	eb64 0402 	sbc.w	r4, r4, r2
 8004aba:	f04f 0100 	mov.w	r1, #0
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	00e2      	lsls	r2, r4, #3
 8004ac4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ac8:	00d9      	lsls	r1, r3, #3
 8004aca:	460b      	mov	r3, r1
 8004acc:	4614      	mov	r4, r2
 8004ace:	195b      	adds	r3, r3, r5
 8004ad0:	eb44 0406 	adc.w	r4, r4, r6
 8004ad4:	f04f 0100 	mov.w	r1, #0
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	02a2      	lsls	r2, r4, #10
 8004ade:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004ae2:	0299      	lsls	r1, r3, #10
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	4614      	mov	r4, r2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	4621      	mov	r1, r4
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f04f 0400 	mov.w	r4, #0
 8004af2:	461a      	mov	r2, r3
 8004af4:	4623      	mov	r3, r4
 8004af6:	f7fb ff99 	bl	8000a2c <__aeabi_uldivmod>
 8004afa:	4603      	mov	r3, r0
 8004afc:	460c      	mov	r4, r1
 8004afe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b00:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	0c1b      	lsrs	r3, r3, #16
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b18:	60bb      	str	r3, [r7, #8]
      break;
 8004b1a:	e002      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b1c:	4b04      	ldr	r3, [pc, #16]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b1e:	60bb      	str	r3, [r7, #8]
      break;
 8004b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b22:	68bb      	ldr	r3, [r7, #8]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	00f42400 	.word	0x00f42400
 8004b34:	007a1200 	.word	0x007a1200

08004b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b3c:	4b03      	ldr	r3, [pc, #12]	; (8004b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	20000004 	.word	0x20000004

08004b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b54:	f7ff fff0 	bl	8004b38 <HAL_RCC_GetHCLKFreq>
 8004b58:	4601      	mov	r1, r0
 8004b5a:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	0a9b      	lsrs	r3, r3, #10
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	4a03      	ldr	r2, [pc, #12]	; (8004b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b66:	5cd3      	ldrb	r3, [r2, r3]
 8004b68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40023800 	.word	0x40023800
 8004b74:	08008da0 	.word	0x08008da0

08004b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b7c:	f7ff ffdc 	bl	8004b38 <HAL_RCC_GetHCLKFreq>
 8004b80:	4601      	mov	r1, r0
 8004b82:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	0b5b      	lsrs	r3, r3, #13
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	4a03      	ldr	r2, [pc, #12]	; (8004b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b8e:	5cd3      	ldrb	r3, [r2, r3]
 8004b90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	08008da0 	.word	0x08008da0

08004ba0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	220f      	movs	r2, #15
 8004bae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bb0:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 0203 	and.w	r2, r3, #3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004bbc:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bc8:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004bd4:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	08db      	lsrs	r3, r3, #3
 8004bda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004be2:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <HAL_RCC_GetClockConfig+0x60>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 020f 	and.w	r2, r3, #15
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	601a      	str	r2, [r3, #0]
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40023800 	.word	0x40023800
 8004c00:	40023c00 	.word	0x40023c00

08004c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10b      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d105      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d075      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c38:	4bad      	ldr	r3, [pc, #692]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c3e:	f7fd ffcd 	bl	8002bdc <HAL_GetTick>
 8004c42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c44:	e008      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c46:	f7fd ffc9 	bl	8002bdc <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e18b      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c58:	4ba6      	ldr	r3, [pc, #664]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1f0      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d009      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	019a      	lsls	r2, r3, #6
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	071b      	lsls	r3, r3, #28
 8004c7c:	499d      	ldr	r1, [pc, #628]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d01f      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c90:	4b98      	ldr	r3, [pc, #608]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c96:	0f1b      	lsrs	r3, r3, #28
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	019a      	lsls	r2, r3, #6
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	061b      	lsls	r3, r3, #24
 8004caa:	431a      	orrs	r2, r3
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	071b      	lsls	r3, r3, #28
 8004cb0:	4990      	ldr	r1, [pc, #576]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004cb8:	4b8e      	ldr	r3, [pc, #568]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cbe:	f023 021f 	bic.w	r2, r3, #31
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	498a      	ldr	r1, [pc, #552]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00d      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	019a      	lsls	r2, r3, #6
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	061b      	lsls	r3, r3, #24
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	071b      	lsls	r3, r3, #28
 8004cf0:	4980      	ldr	r1, [pc, #512]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cf8:	4b7d      	ldr	r3, [pc, #500]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cfe:	f7fd ff6d 	bl	8002bdc <HAL_GetTick>
 8004d02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d04:	e008      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d06:	f7fd ff69 	bl	8002bdc <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e12b      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d18:	4b76      	ldr	r3, [pc, #472]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d105      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d079      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d3c:	4b6e      	ldr	r3, [pc, #440]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d42:	f7fd ff4b 	bl	8002bdc <HAL_GetTick>
 8004d46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d48:	e008      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004d4a:	f7fd ff47 	bl	8002bdc <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e109      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d5c:	4b65      	ldr	r3, [pc, #404]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d68:	d0ef      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0304 	and.w	r3, r3, #4
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d020      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d76:	4b5f      	ldr	r3, [pc, #380]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7c:	0f1b      	lsrs	r3, r3, #28
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	019a      	lsls	r2, r3, #6
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	061b      	lsls	r3, r3, #24
 8004d90:	431a      	orrs	r2, r3
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	071b      	lsls	r3, r3, #28
 8004d96:	4957      	ldr	r1, [pc, #348]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d9e:	4b55      	ldr	r3, [pc, #340]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004da4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	4950      	ldr	r1, [pc, #320]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0308 	and.w	r3, r3, #8
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d01e      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dc4:	4b4b      	ldr	r3, [pc, #300]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dca:	0e1b      	lsrs	r3, r3, #24
 8004dcc:	f003 030f 	and.w	r3, r3, #15
 8004dd0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	019a      	lsls	r2, r3, #6
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	061b      	lsls	r3, r3, #24
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	071b      	lsls	r3, r3, #28
 8004de4:	4943      	ldr	r1, [pc, #268]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004dec:	4b41      	ldr	r3, [pc, #260]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004df2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	493e      	ldr	r1, [pc, #248]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e02:	4b3d      	ldr	r3, [pc, #244]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e04:	2201      	movs	r2, #1
 8004e06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e08:	f7fd fee8 	bl	8002bdc <HAL_GetTick>
 8004e0c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004e10:	f7fd fee4 	bl	8002bdc <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e0a6      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e22:	4b34      	ldr	r3, [pc, #208]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e2e:	d1ef      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 808d 	beq.w	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	4b2c      	ldr	r3, [pc, #176]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	4a2b      	ldr	r2, [pc, #172]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e4e:	4b29      	ldr	r3, [pc, #164]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e5a:	4b28      	ldr	r3, [pc, #160]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a27      	ldr	r2, [pc, #156]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e66:	f7fd feb9 	bl	8002bdc <HAL_GetTick>
 8004e6a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e6e:	f7fd feb5 	bl	8002bdc <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e077      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e80:	4b1e      	ldr	r3, [pc, #120]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0f0      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e8c:	4b19      	ldr	r3, [pc, #100]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e94:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d039      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d032      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004eaa:	4b12      	ldr	r3, [pc, #72]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eb4:	4b12      	ldr	r3, [pc, #72]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004eba:	4b11      	ldr	r3, [pc, #68]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ec0:	4a0c      	ldr	r2, [pc, #48]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ec6:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d11e      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ed2:	f7fd fe83 	bl	8002bdc <HAL_GetTick>
 8004ed6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed8:	e014      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eda:	f7fd fe7f 	bl	8002bdc <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d90b      	bls.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e03f      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8004ef0:	42470068 	.word	0x42470068
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	42470070 	.word	0x42470070
 8004efc:	40007000 	.word	0x40007000
 8004f00:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f04:	4b1c      	ldr	r3, [pc, #112]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0e4      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f1c:	d10d      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004f1e:	4b16      	ldr	r3, [pc, #88]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f32:	4911      	ldr	r1, [pc, #68]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	608b      	str	r3, [r1, #8]
 8004f38:	e005      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004f3a:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	4a0e      	ldr	r2, [pc, #56]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f40:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f44:	6093      	str	r3, [r2, #8]
 8004f46:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f52:	4909      	ldr	r1, [pc, #36]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0310 	and.w	r3, r3, #16
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d004      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004f6a:	4b04      	ldr	r3, [pc, #16]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004f6c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	424711e0 	.word	0x424711e0

08004f80 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e025      	b.n	8004fe0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d106      	bne.n	8004fae <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7fd fcef 	bl	800298c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	f001 fbf7 	bl	80067b4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	6839      	ldr	r1, [r7, #0]
 8004fd2:	f001 fc62 	bl	800689a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e056      	b.n	80050a8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d106      	bne.n	800501a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7fd fb57 	bl	80026c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2202      	movs	r2, #2
 800501e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005030:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	431a      	orrs	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	431a      	orrs	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	ea42 0103 	orr.w	r1, r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	0c1b      	lsrs	r3, r3, #16
 8005078:	f003 0104 	and.w	r1, r3, #4
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	69da      	ldr	r2, [r3, #28]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005096:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e01a      	b.n	80050f8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2202      	movs	r2, #2
 80050c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fd fb3c 	bl	8002758 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	4613      	mov	r3, r2
 800510e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005110:	2300      	movs	r3, #0
 8005112:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800511a:	2b01      	cmp	r3, #1
 800511c:	d101      	bne.n	8005122 <HAL_SPI_Transmit+0x22>
 800511e:	2302      	movs	r3, #2
 8005120:	e11e      	b.n	8005360 <HAL_SPI_Transmit+0x260>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800512a:	f7fd fd57 	bl	8002bdc <HAL_GetTick>
 800512e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005130:	88fb      	ldrh	r3, [r7, #6]
 8005132:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b01      	cmp	r3, #1
 800513e:	d002      	beq.n	8005146 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005140:	2302      	movs	r3, #2
 8005142:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005144:	e103      	b.n	800534e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <HAL_SPI_Transmit+0x52>
 800514c:	88fb      	ldrh	r3, [r7, #6]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d102      	bne.n	8005158 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005156:	e0fa      	b.n	800534e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2203      	movs	r2, #3
 800515c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	88fa      	ldrh	r2, [r7, #6]
 8005170:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	88fa      	ldrh	r2, [r7, #6]
 8005176:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800519e:	d107      	bne.n	80051b0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ba:	2b40      	cmp	r3, #64	; 0x40
 80051bc:	d007      	beq.n	80051ce <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d6:	d14b      	bne.n	8005270 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <HAL_SPI_Transmit+0xe6>
 80051e0:	8afb      	ldrh	r3, [r7, #22]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d13e      	bne.n	8005264 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	881a      	ldrh	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f6:	1c9a      	adds	r2, r3, #2
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005200:	b29b      	uxth	r3, r3
 8005202:	3b01      	subs	r3, #1
 8005204:	b29a      	uxth	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800520a:	e02b      	b.n	8005264 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b02      	cmp	r3, #2
 8005218:	d112      	bne.n	8005240 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	881a      	ldrh	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	1c9a      	adds	r2, r3, #2
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005234:	b29b      	uxth	r3, r3
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	86da      	strh	r2, [r3, #54]	; 0x36
 800523e:	e011      	b.n	8005264 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005240:	f7fd fccc 	bl	8002bdc <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	429a      	cmp	r2, r3
 800524e:	d803      	bhi.n	8005258 <HAL_SPI_Transmit+0x158>
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005256:	d102      	bne.n	800525e <HAL_SPI_Transmit+0x15e>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d102      	bne.n	8005264 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005262:	e074      	b.n	800534e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005268:	b29b      	uxth	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1ce      	bne.n	800520c <HAL_SPI_Transmit+0x10c>
 800526e:	e04c      	b.n	800530a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <HAL_SPI_Transmit+0x17e>
 8005278:	8afb      	ldrh	r3, [r7, #22]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d140      	bne.n	8005300 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	330c      	adds	r3, #12
 8005288:	7812      	ldrb	r2, [r2, #0]
 800528a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800529a:	b29b      	uxth	r3, r3
 800529c:	3b01      	subs	r3, #1
 800529e:	b29a      	uxth	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80052a4:	e02c      	b.n	8005300 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d113      	bne.n	80052dc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	330c      	adds	r3, #12
 80052be:	7812      	ldrb	r2, [r2, #0]
 80052c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80052da:	e011      	b.n	8005300 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052dc:	f7fd fc7e 	bl	8002bdc <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d803      	bhi.n	80052f4 <HAL_SPI_Transmit+0x1f4>
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f2:	d102      	bne.n	80052fa <HAL_SPI_Transmit+0x1fa>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d102      	bne.n	8005300 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052fe:	e026      	b.n	800534e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1cd      	bne.n	80052a6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	6839      	ldr	r1, [r7, #0]
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 fa44 	bl	800579c <SPI_EndRxTxTransaction>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10a      	bne.n	800533e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005328:	2300      	movs	r3, #0
 800532a:	613b      	str	r3, [r7, #16]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	613b      	str	r3, [r7, #16]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	613b      	str	r3, [r7, #16]
 800533c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	77fb      	strb	r3, [r7, #31]
 800534a:	e000      	b.n	800534e <HAL_SPI_Transmit+0x24e>
  }

error:
 800534c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800535e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3720      	adds	r7, #32
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08c      	sub	sp, #48	; 0x30
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005376:	2301      	movs	r3, #1
 8005378:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005386:	2b01      	cmp	r3, #1
 8005388:	d101      	bne.n	800538e <HAL_SPI_TransmitReceive+0x26>
 800538a:	2302      	movs	r3, #2
 800538c:	e18a      	b.n	80056a4 <HAL_SPI_TransmitReceive+0x33c>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005396:	f7fd fc21 	bl	8002bdc <HAL_GetTick>
 800539a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80053ac:	887b      	ldrh	r3, [r7, #2]
 80053ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80053b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d00f      	beq.n	80053d8 <HAL_SPI_TransmitReceive+0x70>
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053be:	d107      	bne.n	80053d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d103      	bne.n	80053d0 <HAL_SPI_TransmitReceive+0x68>
 80053c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d003      	beq.n	80053d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80053d0:	2302      	movs	r3, #2
 80053d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80053d6:	e15b      	b.n	8005690 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d005      	beq.n	80053ea <HAL_SPI_TransmitReceive+0x82>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <HAL_SPI_TransmitReceive+0x82>
 80053e4:	887b      	ldrh	r3, [r7, #2]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d103      	bne.n	80053f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80053f0:	e14e      	b.n	8005690 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d003      	beq.n	8005406 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2205      	movs	r2, #5
 8005402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	887a      	ldrh	r2, [r7, #2]
 8005416:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	887a      	ldrh	r2, [r7, #2]
 800541c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	887a      	ldrh	r2, [r7, #2]
 8005428:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	887a      	ldrh	r2, [r7, #2]
 800542e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005446:	2b40      	cmp	r3, #64	; 0x40
 8005448:	d007      	beq.n	800545a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005458:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005462:	d178      	bne.n	8005556 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <HAL_SPI_TransmitReceive+0x10a>
 800546c:	8b7b      	ldrh	r3, [r7, #26]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d166      	bne.n	8005540 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005476:	881a      	ldrh	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005482:	1c9a      	adds	r2, r3, #2
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800548c:	b29b      	uxth	r3, r3
 800548e:	3b01      	subs	r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005496:	e053      	b.n	8005540 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d11b      	bne.n	80054de <HAL_SPI_TransmitReceive+0x176>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d016      	beq.n	80054de <HAL_SPI_TransmitReceive+0x176>
 80054b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d113      	bne.n	80054de <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ba:	881a      	ldrh	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c6:	1c9a      	adds	r2, r3, #2
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d119      	bne.n	8005520 <HAL_SPI_TransmitReceive+0x1b8>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d014      	beq.n	8005520 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005500:	b292      	uxth	r2, r2
 8005502:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005508:	1c9a      	adds	r2, r3, #2
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005512:	b29b      	uxth	r3, r3
 8005514:	3b01      	subs	r3, #1
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800551c:	2301      	movs	r3, #1
 800551e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005520:	f7fd fb5c 	bl	8002bdc <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800552c:	429a      	cmp	r2, r3
 800552e:	d807      	bhi.n	8005540 <HAL_SPI_TransmitReceive+0x1d8>
 8005530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005536:	d003      	beq.n	8005540 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800553e:	e0a7      	b.n	8005690 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1a6      	bne.n	8005498 <HAL_SPI_TransmitReceive+0x130>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800554e:	b29b      	uxth	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1a1      	bne.n	8005498 <HAL_SPI_TransmitReceive+0x130>
 8005554:	e07c      	b.n	8005650 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <HAL_SPI_TransmitReceive+0x1fc>
 800555e:	8b7b      	ldrh	r3, [r7, #26]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d16b      	bne.n	800563c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	330c      	adds	r3, #12
 800556e:	7812      	ldrb	r2, [r2, #0]
 8005570:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005580:	b29b      	uxth	r3, r3
 8005582:	3b01      	subs	r3, #1
 8005584:	b29a      	uxth	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800558a:	e057      	b.n	800563c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b02      	cmp	r3, #2
 8005598:	d11c      	bne.n	80055d4 <HAL_SPI_TransmitReceive+0x26c>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800559e:	b29b      	uxth	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d017      	beq.n	80055d4 <HAL_SPI_TransmitReceive+0x26c>
 80055a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d114      	bne.n	80055d4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	330c      	adds	r3, #12
 80055b4:	7812      	ldrb	r2, [r2, #0]
 80055b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d119      	bne.n	8005616 <HAL_SPI_TransmitReceive+0x2ae>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d014      	beq.n	8005616 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005608:	b29b      	uxth	r3, r3
 800560a:	3b01      	subs	r3, #1
 800560c:	b29a      	uxth	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005612:	2301      	movs	r3, #1
 8005614:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005616:	f7fd fae1 	bl	8002bdc <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005622:	429a      	cmp	r2, r3
 8005624:	d803      	bhi.n	800562e <HAL_SPI_TransmitReceive+0x2c6>
 8005626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562c:	d102      	bne.n	8005634 <HAL_SPI_TransmitReceive+0x2cc>
 800562e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005630:	2b00      	cmp	r3, #0
 8005632:	d103      	bne.n	800563c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800563a:	e029      	b.n	8005690 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005640:	b29b      	uxth	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1a2      	bne.n	800558c <HAL_SPI_TransmitReceive+0x224>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800564a:	b29b      	uxth	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d19d      	bne.n	800558c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005652:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 f8a1 	bl	800579c <SPI_EndRxTxTransaction>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d006      	beq.n	800566e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2220      	movs	r2, #32
 800566a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800566c:	e010      	b.n	8005690 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10b      	bne.n	800568e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005676:	2300      	movs	r3, #0
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	e000      	b.n	8005690 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800568e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3730      	adds	r7, #48	; 0x30
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056ba:	b2db      	uxtb	r3, r3
}
 80056bc:	4618      	mov	r0, r3
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	4613      	mov	r3, r2
 80056d6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056d8:	e04c      	b.n	8005774 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e0:	d048      	beq.n	8005774 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80056e2:	f7fd fa7b 	bl	8002bdc <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d902      	bls.n	80056f8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d13d      	bne.n	8005774 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005706:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005710:	d111      	bne.n	8005736 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800571a:	d004      	beq.n	8005726 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005724:	d107      	bne.n	8005736 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005734:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800573e:	d10f      	bne.n	8005760 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800575e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e00f      	b.n	8005794 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	4013      	ands	r3, r2
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	429a      	cmp	r2, r3
 8005782:	bf0c      	ite	eq
 8005784:	2301      	moveq	r3, #1
 8005786:	2300      	movne	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	461a      	mov	r2, r3
 800578c:	79fb      	ldrb	r3, [r7, #7]
 800578e:	429a      	cmp	r2, r3
 8005790:	d1a3      	bne.n	80056da <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b088      	sub	sp, #32
 80057a0:	af02      	add	r7, sp, #8
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057a8:	4b1b      	ldr	r3, [pc, #108]	; (8005818 <SPI_EndRxTxTransaction+0x7c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1b      	ldr	r2, [pc, #108]	; (800581c <SPI_EndRxTxTransaction+0x80>)
 80057ae:	fba2 2303 	umull	r2, r3, r2, r3
 80057b2:	0d5b      	lsrs	r3, r3, #21
 80057b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057b8:	fb02 f303 	mul.w	r3, r2, r3
 80057bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057c6:	d112      	bne.n	80057ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2200      	movs	r2, #0
 80057d0:	2180      	movs	r1, #128	; 0x80
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f7ff ff78 	bl	80056c8 <SPI_WaitFlagStateUntilTimeout>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d016      	beq.n	800580c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e2:	f043 0220 	orr.w	r2, r3, #32
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e00f      	b.n	800580e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005804:	2b80      	cmp	r3, #128	; 0x80
 8005806:	d0f2      	beq.n	80057ee <SPI_EndRxTxTransaction+0x52>
 8005808:	e000      	b.n	800580c <SPI_EndRxTxTransaction+0x70>
        break;
 800580a:	bf00      	nop
  }

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20000004 	.word	0x20000004
 800581c:	165e9f81 	.word	0x165e9f81

08005820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e01d      	b.n	800586e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d106      	bne.n	800584c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fc ffa4 	bl	8002794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3304      	adds	r3, #4
 800585c:	4619      	mov	r1, r3
 800585e:	4610      	mov	r0, r2
 8005860:	f000 fa14 	bl	8005c8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005876:	b480      	push	{r7}
 8005878:	b085      	sub	sp, #20
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0201 	orr.w	r2, r2, #1
 800588c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f003 0307 	and.w	r3, r3, #7
 8005898:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b06      	cmp	r3, #6
 800589e:	d007      	beq.n	80058b0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0201 	orr.w	r2, r2, #1
 80058ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d122      	bne.n	800591a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d11b      	bne.n	800591a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f06f 0202 	mvn.w	r2, #2
 80058ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	f003 0303 	and.w	r3, r3, #3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f9a5 	bl	8005c50 <HAL_TIM_IC_CaptureCallback>
 8005906:	e005      	b.n	8005914 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f997 	bl	8005c3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f9a8 	bl	8005c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b04      	cmp	r3, #4
 8005926:	d122      	bne.n	800596e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	2b04      	cmp	r3, #4
 8005934:	d11b      	bne.n	800596e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f06f 0204 	mvn.w	r2, #4
 800593e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f97b 	bl	8005c50 <HAL_TIM_IC_CaptureCallback>
 800595a:	e005      	b.n	8005968 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f96d 	bl	8005c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f97e 	bl	8005c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f003 0308 	and.w	r3, r3, #8
 8005978:	2b08      	cmp	r3, #8
 800597a:	d122      	bne.n	80059c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f003 0308 	and.w	r3, r3, #8
 8005986:	2b08      	cmp	r3, #8
 8005988:	d11b      	bne.n	80059c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f06f 0208 	mvn.w	r2, #8
 8005992:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2204      	movs	r2, #4
 8005998:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	f003 0303 	and.w	r3, r3, #3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f951 	bl	8005c50 <HAL_TIM_IC_CaptureCallback>
 80059ae:	e005      	b.n	80059bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f943 	bl	8005c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f954 	bl	8005c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	f003 0310 	and.w	r3, r3, #16
 80059cc:	2b10      	cmp	r3, #16
 80059ce:	d122      	bne.n	8005a16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f003 0310 	and.w	r3, r3, #16
 80059da:	2b10      	cmp	r3, #16
 80059dc:	d11b      	bne.n	8005a16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f06f 0210 	mvn.w	r2, #16
 80059e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2208      	movs	r2, #8
 80059ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f927 	bl	8005c50 <HAL_TIM_IC_CaptureCallback>
 8005a02:	e005      	b.n	8005a10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f919 	bl	8005c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f92a 	bl	8005c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d10e      	bne.n	8005a42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d107      	bne.n	8005a42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f06f 0201 	mvn.w	r2, #1
 8005a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7fc facd 	bl	8001fdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4c:	2b80      	cmp	r3, #128	; 0x80
 8005a4e:	d10e      	bne.n	8005a6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5a:	2b80      	cmp	r3, #128	; 0x80
 8005a5c:	d107      	bne.n	8005a6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 facf 	bl	800600c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a78:	2b40      	cmp	r3, #64	; 0x40
 8005a7a:	d10e      	bne.n	8005a9a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a86:	2b40      	cmp	r3, #64	; 0x40
 8005a88:	d107      	bne.n	8005a9a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f8ef 	bl	8005c78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	f003 0320 	and.w	r3, r3, #32
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d10e      	bne.n	8005ac6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b20      	cmp	r3, #32
 8005ab4:	d107      	bne.n	8005ac6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f06f 0220 	mvn.w	r2, #32
 8005abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fa99 	bl	8005ff8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ac6:	bf00      	nop
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <HAL_TIM_ConfigClockSource+0x18>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e0a6      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x166>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2202      	movs	r2, #2
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b04:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b0c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b40      	cmp	r3, #64	; 0x40
 8005b1c:	d067      	beq.n	8005bee <HAL_TIM_ConfigClockSource+0x120>
 8005b1e:	2b40      	cmp	r3, #64	; 0x40
 8005b20:	d80b      	bhi.n	8005b3a <HAL_TIM_ConfigClockSource+0x6c>
 8005b22:	2b10      	cmp	r3, #16
 8005b24:	d073      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x140>
 8005b26:	2b10      	cmp	r3, #16
 8005b28:	d802      	bhi.n	8005b30 <HAL_TIM_ConfigClockSource+0x62>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d06f      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005b2e:	e078      	b.n	8005c22 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b30:	2b20      	cmp	r3, #32
 8005b32:	d06c      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x140>
 8005b34:	2b30      	cmp	r3, #48	; 0x30
 8005b36:	d06a      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005b38:	e073      	b.n	8005c22 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b3a:	2b70      	cmp	r3, #112	; 0x70
 8005b3c:	d00d      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0x8c>
 8005b3e:	2b70      	cmp	r3, #112	; 0x70
 8005b40:	d804      	bhi.n	8005b4c <HAL_TIM_ConfigClockSource+0x7e>
 8005b42:	2b50      	cmp	r3, #80	; 0x50
 8005b44:	d033      	beq.n	8005bae <HAL_TIM_ConfigClockSource+0xe0>
 8005b46:	2b60      	cmp	r3, #96	; 0x60
 8005b48:	d041      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005b4a:	e06a      	b.n	8005c22 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b50:	d066      	beq.n	8005c20 <HAL_TIM_ConfigClockSource+0x152>
 8005b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b56:	d017      	beq.n	8005b88 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005b58:	e063      	b.n	8005c22 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6818      	ldr	r0, [r3, #0]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	6899      	ldr	r1, [r3, #8]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f000 f9a9 	bl	8005ec0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	609a      	str	r2, [r3, #8]
      break;
 8005b86:	e04c      	b.n	8005c22 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6818      	ldr	r0, [r3, #0]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	6899      	ldr	r1, [r3, #8]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f000 f992 	bl	8005ec0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005baa:	609a      	str	r2, [r3, #8]
      break;
 8005bac:	e039      	b.n	8005c22 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6818      	ldr	r0, [r3, #0]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	6859      	ldr	r1, [r3, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f000 f906 	bl	8005dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2150      	movs	r1, #80	; 0x50
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 f95f 	bl	8005e8a <TIM_ITRx_SetConfig>
      break;
 8005bcc:	e029      	b.n	8005c22 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	6859      	ldr	r1, [r3, #4]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f000 f925 	bl	8005e2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2160      	movs	r1, #96	; 0x60
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 f94f 	bl	8005e8a <TIM_ITRx_SetConfig>
      break;
 8005bec:	e019      	b.n	8005c22 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6818      	ldr	r0, [r3, #0]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	6859      	ldr	r1, [r3, #4]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f000 f8e6 	bl	8005dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2140      	movs	r1, #64	; 0x40
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 f93f 	bl	8005e8a <TIM_ITRx_SetConfig>
      break;
 8005c0c:	e009      	b.n	8005c22 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4619      	mov	r1, r3
 8005c18:	4610      	mov	r0, r2
 8005c1a:	f000 f936 	bl	8005e8a <TIM_ITRx_SetConfig>
      break;
 8005c1e:	e000      	b.n	8005c22 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005c20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a40      	ldr	r2, [pc, #256]	; (8005da0 <TIM_Base_SetConfig+0x114>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d013      	beq.n	8005ccc <TIM_Base_SetConfig+0x40>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005caa:	d00f      	beq.n	8005ccc <TIM_Base_SetConfig+0x40>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a3d      	ldr	r2, [pc, #244]	; (8005da4 <TIM_Base_SetConfig+0x118>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00b      	beq.n	8005ccc <TIM_Base_SetConfig+0x40>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a3c      	ldr	r2, [pc, #240]	; (8005da8 <TIM_Base_SetConfig+0x11c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d007      	beq.n	8005ccc <TIM_Base_SetConfig+0x40>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a3b      	ldr	r2, [pc, #236]	; (8005dac <TIM_Base_SetConfig+0x120>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d003      	beq.n	8005ccc <TIM_Base_SetConfig+0x40>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a3a      	ldr	r2, [pc, #232]	; (8005db0 <TIM_Base_SetConfig+0x124>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d108      	bne.n	8005cde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a2f      	ldr	r2, [pc, #188]	; (8005da0 <TIM_Base_SetConfig+0x114>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d02b      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cec:	d027      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a2c      	ldr	r2, [pc, #176]	; (8005da4 <TIM_Base_SetConfig+0x118>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d023      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a2b      	ldr	r2, [pc, #172]	; (8005da8 <TIM_Base_SetConfig+0x11c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d01f      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a2a      	ldr	r2, [pc, #168]	; (8005dac <TIM_Base_SetConfig+0x120>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d01b      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a29      	ldr	r2, [pc, #164]	; (8005db0 <TIM_Base_SetConfig+0x124>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d017      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a28      	ldr	r2, [pc, #160]	; (8005db4 <TIM_Base_SetConfig+0x128>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d013      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a27      	ldr	r2, [pc, #156]	; (8005db8 <TIM_Base_SetConfig+0x12c>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d00f      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a26      	ldr	r2, [pc, #152]	; (8005dbc <TIM_Base_SetConfig+0x130>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00b      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a25      	ldr	r2, [pc, #148]	; (8005dc0 <TIM_Base_SetConfig+0x134>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d007      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a24      	ldr	r2, [pc, #144]	; (8005dc4 <TIM_Base_SetConfig+0x138>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d003      	beq.n	8005d3e <TIM_Base_SetConfig+0xb2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a23      	ldr	r2, [pc, #140]	; (8005dc8 <TIM_Base_SetConfig+0x13c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d108      	bne.n	8005d50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a0a      	ldr	r2, [pc, #40]	; (8005da0 <TIM_Base_SetConfig+0x114>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d003      	beq.n	8005d84 <TIM_Base_SetConfig+0xf8>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a0c      	ldr	r2, [pc, #48]	; (8005db0 <TIM_Base_SetConfig+0x124>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d103      	bne.n	8005d8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	691a      	ldr	r2, [r3, #16]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	615a      	str	r2, [r3, #20]
}
 8005d92:	bf00      	nop
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40010000 	.word	0x40010000
 8005da4:	40000400 	.word	0x40000400
 8005da8:	40000800 	.word	0x40000800
 8005dac:	40000c00 	.word	0x40000c00
 8005db0:	40010400 	.word	0x40010400
 8005db4:	40014000 	.word	0x40014000
 8005db8:	40014400 	.word	0x40014400
 8005dbc:	40014800 	.word	0x40014800
 8005dc0:	40001800 	.word	0x40001800
 8005dc4:	40001c00 	.word	0x40001c00
 8005dc8:	40002000 	.word	0x40002000

08005dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	f023 0201 	bic.w	r2, r3, #1
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f023 030a 	bic.w	r3, r3, #10
 8005e08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	621a      	str	r2, [r3, #32]
}
 8005e1e:	bf00      	nop
 8005e20:	371c      	adds	r7, #28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b087      	sub	sp, #28
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	f023 0210 	bic.w	r2, r3, #16
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	031b      	lsls	r3, r3, #12
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	011b      	lsls	r3, r3, #4
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	621a      	str	r2, [r3, #32]
}
 8005e7e:	bf00      	nop
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b085      	sub	sp, #20
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	f043 0307 	orr.w	r3, r3, #7
 8005eac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	609a      	str	r2, [r3, #8]
}
 8005eb4:	bf00      	nop
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	021a      	lsls	r2, r3, #8
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	609a      	str	r2, [r3, #8]
}
 8005ef4:	bf00      	nop
 8005ef6:	371c      	adds	r7, #28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e05a      	b.n	8005fce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a21      	ldr	r2, [pc, #132]	; (8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d022      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f64:	d01d      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1d      	ldr	r2, [pc, #116]	; (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d018      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a1b      	ldr	r2, [pc, #108]	; (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d013      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a1a      	ldr	r2, [pc, #104]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00e      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a18      	ldr	r2, [pc, #96]	; (8005fec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d009      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a17      	ldr	r2, [pc, #92]	; (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d004      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a15      	ldr	r2, [pc, #84]	; (8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d10c      	bne.n	8005fbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40010000 	.word	0x40010000
 8005fe0:	40000400 	.word	0x40000400
 8005fe4:	40000800 	.word	0x40000800
 8005fe8:	40000c00 	.word	0x40000c00
 8005fec:	40010400 	.word	0x40010400
 8005ff0:	40014000 	.word	0x40014000
 8005ff4:	40001800 	.word	0x40001800

08005ff8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e03f      	b.n	80060b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d106      	bne.n	800604c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fc fbc6 	bl	80027d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2224      	movs	r2, #36	; 0x24
 8006050:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006062:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f829 	bl	80060bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	691a      	ldr	r2, [r3, #16]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006078:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695a      	ldr	r2, [r3, #20]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006088:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68da      	ldr	r2, [r3, #12]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006098:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
	...

080060bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c0:	b085      	sub	sp, #20
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	430a      	orrs	r2, r1
 80060da:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	431a      	orrs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80060fe:	f023 030c 	bic.w	r3, r3, #12
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	6812      	ldr	r2, [r2, #0]
 8006106:	68f9      	ldr	r1, [r7, #12]
 8006108:	430b      	orrs	r3, r1
 800610a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	699a      	ldr	r2, [r3, #24]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800612a:	f040 818b 	bne.w	8006444 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4ac1      	ldr	r2, [pc, #772]	; (8006438 <UART_SetConfig+0x37c>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d005      	beq.n	8006144 <UART_SetConfig+0x88>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4abf      	ldr	r2, [pc, #764]	; (800643c <UART_SetConfig+0x380>)
 800613e:	4293      	cmp	r3, r2
 8006140:	f040 80bd 	bne.w	80062be <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006144:	f7fe fd18 	bl	8004b78 <HAL_RCC_GetPCLK2Freq>
 8006148:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	461d      	mov	r5, r3
 800614e:	f04f 0600 	mov.w	r6, #0
 8006152:	46a8      	mov	r8, r5
 8006154:	46b1      	mov	r9, r6
 8006156:	eb18 0308 	adds.w	r3, r8, r8
 800615a:	eb49 0409 	adc.w	r4, r9, r9
 800615e:	4698      	mov	r8, r3
 8006160:	46a1      	mov	r9, r4
 8006162:	eb18 0805 	adds.w	r8, r8, r5
 8006166:	eb49 0906 	adc.w	r9, r9, r6
 800616a:	f04f 0100 	mov.w	r1, #0
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006176:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800617a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800617e:	4688      	mov	r8, r1
 8006180:	4691      	mov	r9, r2
 8006182:	eb18 0005 	adds.w	r0, r8, r5
 8006186:	eb49 0106 	adc.w	r1, r9, r6
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	461d      	mov	r5, r3
 8006190:	f04f 0600 	mov.w	r6, #0
 8006194:	196b      	adds	r3, r5, r5
 8006196:	eb46 0406 	adc.w	r4, r6, r6
 800619a:	461a      	mov	r2, r3
 800619c:	4623      	mov	r3, r4
 800619e:	f7fa fc45 	bl	8000a2c <__aeabi_uldivmod>
 80061a2:	4603      	mov	r3, r0
 80061a4:	460c      	mov	r4, r1
 80061a6:	461a      	mov	r2, r3
 80061a8:	4ba5      	ldr	r3, [pc, #660]	; (8006440 <UART_SetConfig+0x384>)
 80061aa:	fba3 2302 	umull	r2, r3, r3, r2
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	461d      	mov	r5, r3
 80061b8:	f04f 0600 	mov.w	r6, #0
 80061bc:	46a9      	mov	r9, r5
 80061be:	46b2      	mov	sl, r6
 80061c0:	eb19 0309 	adds.w	r3, r9, r9
 80061c4:	eb4a 040a 	adc.w	r4, sl, sl
 80061c8:	4699      	mov	r9, r3
 80061ca:	46a2      	mov	sl, r4
 80061cc:	eb19 0905 	adds.w	r9, r9, r5
 80061d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80061d4:	f04f 0100 	mov.w	r1, #0
 80061d8:	f04f 0200 	mov.w	r2, #0
 80061dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061e8:	4689      	mov	r9, r1
 80061ea:	4692      	mov	sl, r2
 80061ec:	eb19 0005 	adds.w	r0, r9, r5
 80061f0:	eb4a 0106 	adc.w	r1, sl, r6
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	461d      	mov	r5, r3
 80061fa:	f04f 0600 	mov.w	r6, #0
 80061fe:	196b      	adds	r3, r5, r5
 8006200:	eb46 0406 	adc.w	r4, r6, r6
 8006204:	461a      	mov	r2, r3
 8006206:	4623      	mov	r3, r4
 8006208:	f7fa fc10 	bl	8000a2c <__aeabi_uldivmod>
 800620c:	4603      	mov	r3, r0
 800620e:	460c      	mov	r4, r1
 8006210:	461a      	mov	r2, r3
 8006212:	4b8b      	ldr	r3, [pc, #556]	; (8006440 <UART_SetConfig+0x384>)
 8006214:	fba3 1302 	umull	r1, r3, r3, r2
 8006218:	095b      	lsrs	r3, r3, #5
 800621a:	2164      	movs	r1, #100	; 0x64
 800621c:	fb01 f303 	mul.w	r3, r1, r3
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	3332      	adds	r3, #50	; 0x32
 8006226:	4a86      	ldr	r2, [pc, #536]	; (8006440 <UART_SetConfig+0x384>)
 8006228:	fba2 2303 	umull	r2, r3, r2, r3
 800622c:	095b      	lsrs	r3, r3, #5
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006234:	4498      	add	r8, r3
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	461d      	mov	r5, r3
 800623a:	f04f 0600 	mov.w	r6, #0
 800623e:	46a9      	mov	r9, r5
 8006240:	46b2      	mov	sl, r6
 8006242:	eb19 0309 	adds.w	r3, r9, r9
 8006246:	eb4a 040a 	adc.w	r4, sl, sl
 800624a:	4699      	mov	r9, r3
 800624c:	46a2      	mov	sl, r4
 800624e:	eb19 0905 	adds.w	r9, r9, r5
 8006252:	eb4a 0a06 	adc.w	sl, sl, r6
 8006256:	f04f 0100 	mov.w	r1, #0
 800625a:	f04f 0200 	mov.w	r2, #0
 800625e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006262:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006266:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800626a:	4689      	mov	r9, r1
 800626c:	4692      	mov	sl, r2
 800626e:	eb19 0005 	adds.w	r0, r9, r5
 8006272:	eb4a 0106 	adc.w	r1, sl, r6
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	461d      	mov	r5, r3
 800627c:	f04f 0600 	mov.w	r6, #0
 8006280:	196b      	adds	r3, r5, r5
 8006282:	eb46 0406 	adc.w	r4, r6, r6
 8006286:	461a      	mov	r2, r3
 8006288:	4623      	mov	r3, r4
 800628a:	f7fa fbcf 	bl	8000a2c <__aeabi_uldivmod>
 800628e:	4603      	mov	r3, r0
 8006290:	460c      	mov	r4, r1
 8006292:	461a      	mov	r2, r3
 8006294:	4b6a      	ldr	r3, [pc, #424]	; (8006440 <UART_SetConfig+0x384>)
 8006296:	fba3 1302 	umull	r1, r3, r3, r2
 800629a:	095b      	lsrs	r3, r3, #5
 800629c:	2164      	movs	r1, #100	; 0x64
 800629e:	fb01 f303 	mul.w	r3, r1, r3
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	3332      	adds	r3, #50	; 0x32
 80062a8:	4a65      	ldr	r2, [pc, #404]	; (8006440 <UART_SetConfig+0x384>)
 80062aa:	fba2 2303 	umull	r2, r3, r2, r3
 80062ae:	095b      	lsrs	r3, r3, #5
 80062b0:	f003 0207 	and.w	r2, r3, #7
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4442      	add	r2, r8
 80062ba:	609a      	str	r2, [r3, #8]
 80062bc:	e26f      	b.n	800679e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062be:	f7fe fc47 	bl	8004b50 <HAL_RCC_GetPCLK1Freq>
 80062c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	461d      	mov	r5, r3
 80062c8:	f04f 0600 	mov.w	r6, #0
 80062cc:	46a8      	mov	r8, r5
 80062ce:	46b1      	mov	r9, r6
 80062d0:	eb18 0308 	adds.w	r3, r8, r8
 80062d4:	eb49 0409 	adc.w	r4, r9, r9
 80062d8:	4698      	mov	r8, r3
 80062da:	46a1      	mov	r9, r4
 80062dc:	eb18 0805 	adds.w	r8, r8, r5
 80062e0:	eb49 0906 	adc.w	r9, r9, r6
 80062e4:	f04f 0100 	mov.w	r1, #0
 80062e8:	f04f 0200 	mov.w	r2, #0
 80062ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80062f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80062f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80062f8:	4688      	mov	r8, r1
 80062fa:	4691      	mov	r9, r2
 80062fc:	eb18 0005 	adds.w	r0, r8, r5
 8006300:	eb49 0106 	adc.w	r1, r9, r6
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	461d      	mov	r5, r3
 800630a:	f04f 0600 	mov.w	r6, #0
 800630e:	196b      	adds	r3, r5, r5
 8006310:	eb46 0406 	adc.w	r4, r6, r6
 8006314:	461a      	mov	r2, r3
 8006316:	4623      	mov	r3, r4
 8006318:	f7fa fb88 	bl	8000a2c <__aeabi_uldivmod>
 800631c:	4603      	mov	r3, r0
 800631e:	460c      	mov	r4, r1
 8006320:	461a      	mov	r2, r3
 8006322:	4b47      	ldr	r3, [pc, #284]	; (8006440 <UART_SetConfig+0x384>)
 8006324:	fba3 2302 	umull	r2, r3, r3, r2
 8006328:	095b      	lsrs	r3, r3, #5
 800632a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	461d      	mov	r5, r3
 8006332:	f04f 0600 	mov.w	r6, #0
 8006336:	46a9      	mov	r9, r5
 8006338:	46b2      	mov	sl, r6
 800633a:	eb19 0309 	adds.w	r3, r9, r9
 800633e:	eb4a 040a 	adc.w	r4, sl, sl
 8006342:	4699      	mov	r9, r3
 8006344:	46a2      	mov	sl, r4
 8006346:	eb19 0905 	adds.w	r9, r9, r5
 800634a:	eb4a 0a06 	adc.w	sl, sl, r6
 800634e:	f04f 0100 	mov.w	r1, #0
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800635a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800635e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006362:	4689      	mov	r9, r1
 8006364:	4692      	mov	sl, r2
 8006366:	eb19 0005 	adds.w	r0, r9, r5
 800636a:	eb4a 0106 	adc.w	r1, sl, r6
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	461d      	mov	r5, r3
 8006374:	f04f 0600 	mov.w	r6, #0
 8006378:	196b      	adds	r3, r5, r5
 800637a:	eb46 0406 	adc.w	r4, r6, r6
 800637e:	461a      	mov	r2, r3
 8006380:	4623      	mov	r3, r4
 8006382:	f7fa fb53 	bl	8000a2c <__aeabi_uldivmod>
 8006386:	4603      	mov	r3, r0
 8006388:	460c      	mov	r4, r1
 800638a:	461a      	mov	r2, r3
 800638c:	4b2c      	ldr	r3, [pc, #176]	; (8006440 <UART_SetConfig+0x384>)
 800638e:	fba3 1302 	umull	r1, r3, r3, r2
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	2164      	movs	r1, #100	; 0x64
 8006396:	fb01 f303 	mul.w	r3, r1, r3
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	3332      	adds	r3, #50	; 0x32
 80063a0:	4a27      	ldr	r2, [pc, #156]	; (8006440 <UART_SetConfig+0x384>)
 80063a2:	fba2 2303 	umull	r2, r3, r2, r3
 80063a6:	095b      	lsrs	r3, r3, #5
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063ae:	4498      	add	r8, r3
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	461d      	mov	r5, r3
 80063b4:	f04f 0600 	mov.w	r6, #0
 80063b8:	46a9      	mov	r9, r5
 80063ba:	46b2      	mov	sl, r6
 80063bc:	eb19 0309 	adds.w	r3, r9, r9
 80063c0:	eb4a 040a 	adc.w	r4, sl, sl
 80063c4:	4699      	mov	r9, r3
 80063c6:	46a2      	mov	sl, r4
 80063c8:	eb19 0905 	adds.w	r9, r9, r5
 80063cc:	eb4a 0a06 	adc.w	sl, sl, r6
 80063d0:	f04f 0100 	mov.w	r1, #0
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063e4:	4689      	mov	r9, r1
 80063e6:	4692      	mov	sl, r2
 80063e8:	eb19 0005 	adds.w	r0, r9, r5
 80063ec:	eb4a 0106 	adc.w	r1, sl, r6
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	461d      	mov	r5, r3
 80063f6:	f04f 0600 	mov.w	r6, #0
 80063fa:	196b      	adds	r3, r5, r5
 80063fc:	eb46 0406 	adc.w	r4, r6, r6
 8006400:	461a      	mov	r2, r3
 8006402:	4623      	mov	r3, r4
 8006404:	f7fa fb12 	bl	8000a2c <__aeabi_uldivmod>
 8006408:	4603      	mov	r3, r0
 800640a:	460c      	mov	r4, r1
 800640c:	461a      	mov	r2, r3
 800640e:	4b0c      	ldr	r3, [pc, #48]	; (8006440 <UART_SetConfig+0x384>)
 8006410:	fba3 1302 	umull	r1, r3, r3, r2
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	2164      	movs	r1, #100	; 0x64
 8006418:	fb01 f303 	mul.w	r3, r1, r3
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	3332      	adds	r3, #50	; 0x32
 8006422:	4a07      	ldr	r2, [pc, #28]	; (8006440 <UART_SetConfig+0x384>)
 8006424:	fba2 2303 	umull	r2, r3, r2, r3
 8006428:	095b      	lsrs	r3, r3, #5
 800642a:	f003 0207 	and.w	r2, r3, #7
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4442      	add	r2, r8
 8006434:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006436:	e1b2      	b.n	800679e <UART_SetConfig+0x6e2>
 8006438:	40011000 	.word	0x40011000
 800643c:	40011400 	.word	0x40011400
 8006440:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4ad7      	ldr	r2, [pc, #860]	; (80067a8 <UART_SetConfig+0x6ec>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d005      	beq.n	800645a <UART_SetConfig+0x39e>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4ad6      	ldr	r2, [pc, #856]	; (80067ac <UART_SetConfig+0x6f0>)
 8006454:	4293      	cmp	r3, r2
 8006456:	f040 80d1 	bne.w	80065fc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800645a:	f7fe fb8d 	bl	8004b78 <HAL_RCC_GetPCLK2Freq>
 800645e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	469a      	mov	sl, r3
 8006464:	f04f 0b00 	mov.w	fp, #0
 8006468:	46d0      	mov	r8, sl
 800646a:	46d9      	mov	r9, fp
 800646c:	eb18 0308 	adds.w	r3, r8, r8
 8006470:	eb49 0409 	adc.w	r4, r9, r9
 8006474:	4698      	mov	r8, r3
 8006476:	46a1      	mov	r9, r4
 8006478:	eb18 080a 	adds.w	r8, r8, sl
 800647c:	eb49 090b 	adc.w	r9, r9, fp
 8006480:	f04f 0100 	mov.w	r1, #0
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800648c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006490:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006494:	4688      	mov	r8, r1
 8006496:	4691      	mov	r9, r2
 8006498:	eb1a 0508 	adds.w	r5, sl, r8
 800649c:	eb4b 0609 	adc.w	r6, fp, r9
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	4619      	mov	r1, r3
 80064a6:	f04f 0200 	mov.w	r2, #0
 80064aa:	f04f 0300 	mov.w	r3, #0
 80064ae:	f04f 0400 	mov.w	r4, #0
 80064b2:	0094      	lsls	r4, r2, #2
 80064b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80064b8:	008b      	lsls	r3, r1, #2
 80064ba:	461a      	mov	r2, r3
 80064bc:	4623      	mov	r3, r4
 80064be:	4628      	mov	r0, r5
 80064c0:	4631      	mov	r1, r6
 80064c2:	f7fa fab3 	bl	8000a2c <__aeabi_uldivmod>
 80064c6:	4603      	mov	r3, r0
 80064c8:	460c      	mov	r4, r1
 80064ca:	461a      	mov	r2, r3
 80064cc:	4bb8      	ldr	r3, [pc, #736]	; (80067b0 <UART_SetConfig+0x6f4>)
 80064ce:	fba3 2302 	umull	r2, r3, r3, r2
 80064d2:	095b      	lsrs	r3, r3, #5
 80064d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	469b      	mov	fp, r3
 80064dc:	f04f 0c00 	mov.w	ip, #0
 80064e0:	46d9      	mov	r9, fp
 80064e2:	46e2      	mov	sl, ip
 80064e4:	eb19 0309 	adds.w	r3, r9, r9
 80064e8:	eb4a 040a 	adc.w	r4, sl, sl
 80064ec:	4699      	mov	r9, r3
 80064ee:	46a2      	mov	sl, r4
 80064f0:	eb19 090b 	adds.w	r9, r9, fp
 80064f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80064f8:	f04f 0100 	mov.w	r1, #0
 80064fc:	f04f 0200 	mov.w	r2, #0
 8006500:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006504:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006508:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800650c:	4689      	mov	r9, r1
 800650e:	4692      	mov	sl, r2
 8006510:	eb1b 0509 	adds.w	r5, fp, r9
 8006514:	eb4c 060a 	adc.w	r6, ip, sl
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	4619      	mov	r1, r3
 800651e:	f04f 0200 	mov.w	r2, #0
 8006522:	f04f 0300 	mov.w	r3, #0
 8006526:	f04f 0400 	mov.w	r4, #0
 800652a:	0094      	lsls	r4, r2, #2
 800652c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006530:	008b      	lsls	r3, r1, #2
 8006532:	461a      	mov	r2, r3
 8006534:	4623      	mov	r3, r4
 8006536:	4628      	mov	r0, r5
 8006538:	4631      	mov	r1, r6
 800653a:	f7fa fa77 	bl	8000a2c <__aeabi_uldivmod>
 800653e:	4603      	mov	r3, r0
 8006540:	460c      	mov	r4, r1
 8006542:	461a      	mov	r2, r3
 8006544:	4b9a      	ldr	r3, [pc, #616]	; (80067b0 <UART_SetConfig+0x6f4>)
 8006546:	fba3 1302 	umull	r1, r3, r3, r2
 800654a:	095b      	lsrs	r3, r3, #5
 800654c:	2164      	movs	r1, #100	; 0x64
 800654e:	fb01 f303 	mul.w	r3, r1, r3
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	3332      	adds	r3, #50	; 0x32
 8006558:	4a95      	ldr	r2, [pc, #596]	; (80067b0 <UART_SetConfig+0x6f4>)
 800655a:	fba2 2303 	umull	r2, r3, r2, r3
 800655e:	095b      	lsrs	r3, r3, #5
 8006560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006564:	4498      	add	r8, r3
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	469b      	mov	fp, r3
 800656a:	f04f 0c00 	mov.w	ip, #0
 800656e:	46d9      	mov	r9, fp
 8006570:	46e2      	mov	sl, ip
 8006572:	eb19 0309 	adds.w	r3, r9, r9
 8006576:	eb4a 040a 	adc.w	r4, sl, sl
 800657a:	4699      	mov	r9, r3
 800657c:	46a2      	mov	sl, r4
 800657e:	eb19 090b 	adds.w	r9, r9, fp
 8006582:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006586:	f04f 0100 	mov.w	r1, #0
 800658a:	f04f 0200 	mov.w	r2, #0
 800658e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006592:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006596:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800659a:	4689      	mov	r9, r1
 800659c:	4692      	mov	sl, r2
 800659e:	eb1b 0509 	adds.w	r5, fp, r9
 80065a2:	eb4c 060a 	adc.w	r6, ip, sl
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	4619      	mov	r1, r3
 80065ac:	f04f 0200 	mov.w	r2, #0
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	f04f 0400 	mov.w	r4, #0
 80065b8:	0094      	lsls	r4, r2, #2
 80065ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80065be:	008b      	lsls	r3, r1, #2
 80065c0:	461a      	mov	r2, r3
 80065c2:	4623      	mov	r3, r4
 80065c4:	4628      	mov	r0, r5
 80065c6:	4631      	mov	r1, r6
 80065c8:	f7fa fa30 	bl	8000a2c <__aeabi_uldivmod>
 80065cc:	4603      	mov	r3, r0
 80065ce:	460c      	mov	r4, r1
 80065d0:	461a      	mov	r2, r3
 80065d2:	4b77      	ldr	r3, [pc, #476]	; (80067b0 <UART_SetConfig+0x6f4>)
 80065d4:	fba3 1302 	umull	r1, r3, r3, r2
 80065d8:	095b      	lsrs	r3, r3, #5
 80065da:	2164      	movs	r1, #100	; 0x64
 80065dc:	fb01 f303 	mul.w	r3, r1, r3
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	3332      	adds	r3, #50	; 0x32
 80065e6:	4a72      	ldr	r2, [pc, #456]	; (80067b0 <UART_SetConfig+0x6f4>)
 80065e8:	fba2 2303 	umull	r2, r3, r2, r3
 80065ec:	095b      	lsrs	r3, r3, #5
 80065ee:	f003 020f 	and.w	r2, r3, #15
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4442      	add	r2, r8
 80065f8:	609a      	str	r2, [r3, #8]
 80065fa:	e0d0      	b.n	800679e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80065fc:	f7fe faa8 	bl	8004b50 <HAL_RCC_GetPCLK1Freq>
 8006600:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	469a      	mov	sl, r3
 8006606:	f04f 0b00 	mov.w	fp, #0
 800660a:	46d0      	mov	r8, sl
 800660c:	46d9      	mov	r9, fp
 800660e:	eb18 0308 	adds.w	r3, r8, r8
 8006612:	eb49 0409 	adc.w	r4, r9, r9
 8006616:	4698      	mov	r8, r3
 8006618:	46a1      	mov	r9, r4
 800661a:	eb18 080a 	adds.w	r8, r8, sl
 800661e:	eb49 090b 	adc.w	r9, r9, fp
 8006622:	f04f 0100 	mov.w	r1, #0
 8006626:	f04f 0200 	mov.w	r2, #0
 800662a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800662e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006632:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006636:	4688      	mov	r8, r1
 8006638:	4691      	mov	r9, r2
 800663a:	eb1a 0508 	adds.w	r5, sl, r8
 800663e:	eb4b 0609 	adc.w	r6, fp, r9
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	4619      	mov	r1, r3
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	f04f 0300 	mov.w	r3, #0
 8006650:	f04f 0400 	mov.w	r4, #0
 8006654:	0094      	lsls	r4, r2, #2
 8006656:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800665a:	008b      	lsls	r3, r1, #2
 800665c:	461a      	mov	r2, r3
 800665e:	4623      	mov	r3, r4
 8006660:	4628      	mov	r0, r5
 8006662:	4631      	mov	r1, r6
 8006664:	f7fa f9e2 	bl	8000a2c <__aeabi_uldivmod>
 8006668:	4603      	mov	r3, r0
 800666a:	460c      	mov	r4, r1
 800666c:	461a      	mov	r2, r3
 800666e:	4b50      	ldr	r3, [pc, #320]	; (80067b0 <UART_SetConfig+0x6f4>)
 8006670:	fba3 2302 	umull	r2, r3, r3, r2
 8006674:	095b      	lsrs	r3, r3, #5
 8006676:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	469b      	mov	fp, r3
 800667e:	f04f 0c00 	mov.w	ip, #0
 8006682:	46d9      	mov	r9, fp
 8006684:	46e2      	mov	sl, ip
 8006686:	eb19 0309 	adds.w	r3, r9, r9
 800668a:	eb4a 040a 	adc.w	r4, sl, sl
 800668e:	4699      	mov	r9, r3
 8006690:	46a2      	mov	sl, r4
 8006692:	eb19 090b 	adds.w	r9, r9, fp
 8006696:	eb4a 0a0c 	adc.w	sl, sl, ip
 800669a:	f04f 0100 	mov.w	r1, #0
 800669e:	f04f 0200 	mov.w	r2, #0
 80066a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066ae:	4689      	mov	r9, r1
 80066b0:	4692      	mov	sl, r2
 80066b2:	eb1b 0509 	adds.w	r5, fp, r9
 80066b6:	eb4c 060a 	adc.w	r6, ip, sl
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	4619      	mov	r1, r3
 80066c0:	f04f 0200 	mov.w	r2, #0
 80066c4:	f04f 0300 	mov.w	r3, #0
 80066c8:	f04f 0400 	mov.w	r4, #0
 80066cc:	0094      	lsls	r4, r2, #2
 80066ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066d2:	008b      	lsls	r3, r1, #2
 80066d4:	461a      	mov	r2, r3
 80066d6:	4623      	mov	r3, r4
 80066d8:	4628      	mov	r0, r5
 80066da:	4631      	mov	r1, r6
 80066dc:	f7fa f9a6 	bl	8000a2c <__aeabi_uldivmod>
 80066e0:	4603      	mov	r3, r0
 80066e2:	460c      	mov	r4, r1
 80066e4:	461a      	mov	r2, r3
 80066e6:	4b32      	ldr	r3, [pc, #200]	; (80067b0 <UART_SetConfig+0x6f4>)
 80066e8:	fba3 1302 	umull	r1, r3, r3, r2
 80066ec:	095b      	lsrs	r3, r3, #5
 80066ee:	2164      	movs	r1, #100	; 0x64
 80066f0:	fb01 f303 	mul.w	r3, r1, r3
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	3332      	adds	r3, #50	; 0x32
 80066fa:	4a2d      	ldr	r2, [pc, #180]	; (80067b0 <UART_SetConfig+0x6f4>)
 80066fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006700:	095b      	lsrs	r3, r3, #5
 8006702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006706:	4498      	add	r8, r3
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	469b      	mov	fp, r3
 800670c:	f04f 0c00 	mov.w	ip, #0
 8006710:	46d9      	mov	r9, fp
 8006712:	46e2      	mov	sl, ip
 8006714:	eb19 0309 	adds.w	r3, r9, r9
 8006718:	eb4a 040a 	adc.w	r4, sl, sl
 800671c:	4699      	mov	r9, r3
 800671e:	46a2      	mov	sl, r4
 8006720:	eb19 090b 	adds.w	r9, r9, fp
 8006724:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006728:	f04f 0100 	mov.w	r1, #0
 800672c:	f04f 0200 	mov.w	r2, #0
 8006730:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006734:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006738:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800673c:	4689      	mov	r9, r1
 800673e:	4692      	mov	sl, r2
 8006740:	eb1b 0509 	adds.w	r5, fp, r9
 8006744:	eb4c 060a 	adc.w	r6, ip, sl
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	4619      	mov	r1, r3
 800674e:	f04f 0200 	mov.w	r2, #0
 8006752:	f04f 0300 	mov.w	r3, #0
 8006756:	f04f 0400 	mov.w	r4, #0
 800675a:	0094      	lsls	r4, r2, #2
 800675c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006760:	008b      	lsls	r3, r1, #2
 8006762:	461a      	mov	r2, r3
 8006764:	4623      	mov	r3, r4
 8006766:	4628      	mov	r0, r5
 8006768:	4631      	mov	r1, r6
 800676a:	f7fa f95f 	bl	8000a2c <__aeabi_uldivmod>
 800676e:	4603      	mov	r3, r0
 8006770:	460c      	mov	r4, r1
 8006772:	461a      	mov	r2, r3
 8006774:	4b0e      	ldr	r3, [pc, #56]	; (80067b0 <UART_SetConfig+0x6f4>)
 8006776:	fba3 1302 	umull	r1, r3, r3, r2
 800677a:	095b      	lsrs	r3, r3, #5
 800677c:	2164      	movs	r1, #100	; 0x64
 800677e:	fb01 f303 	mul.w	r3, r1, r3
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	011b      	lsls	r3, r3, #4
 8006786:	3332      	adds	r3, #50	; 0x32
 8006788:	4a09      	ldr	r2, [pc, #36]	; (80067b0 <UART_SetConfig+0x6f4>)
 800678a:	fba2 2303 	umull	r2, r3, r2, r3
 800678e:	095b      	lsrs	r3, r3, #5
 8006790:	f003 020f 	and.w	r2, r3, #15
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4442      	add	r2, r8
 800679a:	609a      	str	r2, [r3, #8]
}
 800679c:	e7ff      	b.n	800679e <UART_SetConfig+0x6e2>
 800679e:	bf00      	nop
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a8:	40011000 	.word	0x40011000
 80067ac:	40011400 	.word	0x40011400
 80067b0:	51eb851f 	.word	0x51eb851f

080067b4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80067be:	2300      	movs	r3, #0
 80067c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d029      	beq.n	8006822 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80067da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067de:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80067e8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80067ee:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80067f4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80067fa:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8006800:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8006806:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800680c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8006812:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	4313      	orrs	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	601a      	str	r2, [r3, #0]
 8006820:	e034      	b.n	800688c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800682e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006838:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800683e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	4313      	orrs	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006852:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006856:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006860:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8006866:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800686c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8006872:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006878:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	4313      	orrs	r3, r2
 800687e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800689a:	b480      	push	{r7}
 800689c:	b087      	sub	sp, #28
 800689e:	af00      	add	r7, sp, #0
 80068a0:	60f8      	str	r0, [r7, #12]
 80068a2:	60b9      	str	r1, [r7, #8]
 80068a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d02e      	beq.n	8006912 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80068c0:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80068d0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80068da:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	3b01      	subs	r3, #1
 80068e2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80068e4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	3b01      	subs	r3, #1
 80068ec:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80068ee:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	3b01      	subs	r3, #1
 80068f6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80068f8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	3b01      	subs	r3, #1
 8006900:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006902:	4313      	orrs	r3, r2
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	4313      	orrs	r3, r2
 8006908:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	609a      	str	r2, [r3, #8]
 8006910:	e03b      	b.n	800698a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800691e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006922:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	3b01      	subs	r3, #1
 800692a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	3b01      	subs	r3, #1
 8006932:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006934:	4313      	orrs	r3, r2
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006948:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	3b01      	subs	r3, #1
 8006956:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006958:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	3b01      	subs	r3, #1
 8006960:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006962:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	3b01      	subs	r3, #1
 800696a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800696c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	3b01      	subs	r3, #1
 8006974:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006976:	4313      	orrs	r3, r2
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4313      	orrs	r3, r2
 800697c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	371c      	adds	r7, #28
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <__libc_init_array>:
 8006998:	b570      	push	{r4, r5, r6, lr}
 800699a:	4e0d      	ldr	r6, [pc, #52]	; (80069d0 <__libc_init_array+0x38>)
 800699c:	4c0d      	ldr	r4, [pc, #52]	; (80069d4 <__libc_init_array+0x3c>)
 800699e:	1ba4      	subs	r4, r4, r6
 80069a0:	10a4      	asrs	r4, r4, #2
 80069a2:	2500      	movs	r5, #0
 80069a4:	42a5      	cmp	r5, r4
 80069a6:	d109      	bne.n	80069bc <__libc_init_array+0x24>
 80069a8:	4e0b      	ldr	r6, [pc, #44]	; (80069d8 <__libc_init_array+0x40>)
 80069aa:	4c0c      	ldr	r4, [pc, #48]	; (80069dc <__libc_init_array+0x44>)
 80069ac:	f000 fd6c 	bl	8007488 <_init>
 80069b0:	1ba4      	subs	r4, r4, r6
 80069b2:	10a4      	asrs	r4, r4, #2
 80069b4:	2500      	movs	r5, #0
 80069b6:	42a5      	cmp	r5, r4
 80069b8:	d105      	bne.n	80069c6 <__libc_init_array+0x2e>
 80069ba:	bd70      	pop	{r4, r5, r6, pc}
 80069bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069c0:	4798      	blx	r3
 80069c2:	3501      	adds	r5, #1
 80069c4:	e7ee      	b.n	80069a4 <__libc_init_array+0xc>
 80069c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069ca:	4798      	blx	r3
 80069cc:	3501      	adds	r5, #1
 80069ce:	e7f2      	b.n	80069b6 <__libc_init_array+0x1e>
 80069d0:	08009180 	.word	0x08009180
 80069d4:	08009180 	.word	0x08009180
 80069d8:	08009180 	.word	0x08009180
 80069dc:	08009184 	.word	0x08009184

080069e0 <memset>:
 80069e0:	4402      	add	r2, r0
 80069e2:	4603      	mov	r3, r0
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d100      	bne.n	80069ea <memset+0xa>
 80069e8:	4770      	bx	lr
 80069ea:	f803 1b01 	strb.w	r1, [r3], #1
 80069ee:	e7f9      	b.n	80069e4 <memset+0x4>

080069f0 <sinf>:
 80069f0:	ee10 3a10 	vmov	r3, s0
 80069f4:	b507      	push	{r0, r1, r2, lr}
 80069f6:	4a1d      	ldr	r2, [pc, #116]	; (8006a6c <sinf+0x7c>)
 80069f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069fc:	4293      	cmp	r3, r2
 80069fe:	dc05      	bgt.n	8006a0c <sinf+0x1c>
 8006a00:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8006a70 <sinf+0x80>
 8006a04:	2000      	movs	r0, #0
 8006a06:	f000 fc41 	bl	800728c <__kernel_sinf>
 8006a0a:	e004      	b.n	8006a16 <sinf+0x26>
 8006a0c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006a10:	db04      	blt.n	8006a1c <sinf+0x2c>
 8006a12:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006a16:	b003      	add	sp, #12
 8006a18:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a1c:	4668      	mov	r0, sp
 8006a1e:	f000 f829 	bl	8006a74 <__ieee754_rem_pio2f>
 8006a22:	f000 0003 	and.w	r0, r0, #3
 8006a26:	2801      	cmp	r0, #1
 8006a28:	d008      	beq.n	8006a3c <sinf+0x4c>
 8006a2a:	2802      	cmp	r0, #2
 8006a2c:	d00d      	beq.n	8006a4a <sinf+0x5a>
 8006a2e:	b9b0      	cbnz	r0, 8006a5e <sinf+0x6e>
 8006a30:	2001      	movs	r0, #1
 8006a32:	eddd 0a01 	vldr	s1, [sp, #4]
 8006a36:	ed9d 0a00 	vldr	s0, [sp]
 8006a3a:	e7e4      	b.n	8006a06 <sinf+0x16>
 8006a3c:	eddd 0a01 	vldr	s1, [sp, #4]
 8006a40:	ed9d 0a00 	vldr	s0, [sp]
 8006a44:	f000 f942 	bl	8006ccc <__kernel_cosf>
 8006a48:	e7e5      	b.n	8006a16 <sinf+0x26>
 8006a4a:	2001      	movs	r0, #1
 8006a4c:	eddd 0a01 	vldr	s1, [sp, #4]
 8006a50:	ed9d 0a00 	vldr	s0, [sp]
 8006a54:	f000 fc1a 	bl	800728c <__kernel_sinf>
 8006a58:	eeb1 0a40 	vneg.f32	s0, s0
 8006a5c:	e7db      	b.n	8006a16 <sinf+0x26>
 8006a5e:	eddd 0a01 	vldr	s1, [sp, #4]
 8006a62:	ed9d 0a00 	vldr	s0, [sp]
 8006a66:	f000 f931 	bl	8006ccc <__kernel_cosf>
 8006a6a:	e7f5      	b.n	8006a58 <sinf+0x68>
 8006a6c:	3f490fd8 	.word	0x3f490fd8
 8006a70:	00000000 	.word	0x00000000

08006a74 <__ieee754_rem_pio2f>:
 8006a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a76:	ee10 6a10 	vmov	r6, s0
 8006a7a:	4b86      	ldr	r3, [pc, #536]	; (8006c94 <__ieee754_rem_pio2f+0x220>)
 8006a7c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8006a80:	429c      	cmp	r4, r3
 8006a82:	b087      	sub	sp, #28
 8006a84:	4605      	mov	r5, r0
 8006a86:	dc05      	bgt.n	8006a94 <__ieee754_rem_pio2f+0x20>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	ed85 0a00 	vstr	s0, [r5]
 8006a8e:	6043      	str	r3, [r0, #4]
 8006a90:	2000      	movs	r0, #0
 8006a92:	e020      	b.n	8006ad6 <__ieee754_rem_pio2f+0x62>
 8006a94:	4b80      	ldr	r3, [pc, #512]	; (8006c98 <__ieee754_rem_pio2f+0x224>)
 8006a96:	429c      	cmp	r4, r3
 8006a98:	dc38      	bgt.n	8006b0c <__ieee754_rem_pio2f+0x98>
 8006a9a:	2e00      	cmp	r6, #0
 8006a9c:	f024 040f 	bic.w	r4, r4, #15
 8006aa0:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8006c9c <__ieee754_rem_pio2f+0x228>
 8006aa4:	4b7e      	ldr	r3, [pc, #504]	; (8006ca0 <__ieee754_rem_pio2f+0x22c>)
 8006aa6:	dd18      	ble.n	8006ada <__ieee754_rem_pio2f+0x66>
 8006aa8:	429c      	cmp	r4, r3
 8006aaa:	ee70 7a47 	vsub.f32	s15, s0, s14
 8006aae:	bf09      	itett	eq
 8006ab0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8006ca4 <__ieee754_rem_pio2f+0x230>
 8006ab4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8006ca8 <__ieee754_rem_pio2f+0x234>
 8006ab8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8006abc:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8006cac <__ieee754_rem_pio2f+0x238>
 8006ac0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8006ac4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ac8:	edc0 6a00 	vstr	s13, [r0]
 8006acc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ad0:	edc0 7a01 	vstr	s15, [r0, #4]
 8006ad4:	2001      	movs	r0, #1
 8006ad6:	b007      	add	sp, #28
 8006ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ada:	429c      	cmp	r4, r3
 8006adc:	ee70 7a07 	vadd.f32	s15, s0, s14
 8006ae0:	bf09      	itett	eq
 8006ae2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8006ca4 <__ieee754_rem_pio2f+0x230>
 8006ae6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8006ca8 <__ieee754_rem_pio2f+0x234>
 8006aea:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8006aee:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8006cac <__ieee754_rem_pio2f+0x238>
 8006af2:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006af6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006afa:	edc0 6a00 	vstr	s13, [r0]
 8006afe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b02:	edc0 7a01 	vstr	s15, [r0, #4]
 8006b06:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0a:	e7e4      	b.n	8006ad6 <__ieee754_rem_pio2f+0x62>
 8006b0c:	4b68      	ldr	r3, [pc, #416]	; (8006cb0 <__ieee754_rem_pio2f+0x23c>)
 8006b0e:	429c      	cmp	r4, r3
 8006b10:	dc71      	bgt.n	8006bf6 <__ieee754_rem_pio2f+0x182>
 8006b12:	f000 fc03 	bl	800731c <fabsf>
 8006b16:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8006cb4 <__ieee754_rem_pio2f+0x240>
 8006b1a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006b1e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006b22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b26:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8006b2a:	ee17 0a90 	vmov	r0, s15
 8006b2e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8006c9c <__ieee754_rem_pio2f+0x228>
 8006b32:	eeb1 7a46 	vneg.f32	s14, s12
 8006b36:	eea7 0a27 	vfma.f32	s0, s14, s15
 8006b3a:	281f      	cmp	r0, #31
 8006b3c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8006ca8 <__ieee754_rem_pio2f+0x234>
 8006b40:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006b44:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006b48:	ee16 3a90 	vmov	r3, s13
 8006b4c:	dc1c      	bgt.n	8006b88 <__ieee754_rem_pio2f+0x114>
 8006b4e:	1e47      	subs	r7, r0, #1
 8006b50:	4959      	ldr	r1, [pc, #356]	; (8006cb8 <__ieee754_rem_pio2f+0x244>)
 8006b52:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8006b56:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8006b5a:	428a      	cmp	r2, r1
 8006b5c:	d014      	beq.n	8006b88 <__ieee754_rem_pio2f+0x114>
 8006b5e:	602b      	str	r3, [r5, #0]
 8006b60:	ed95 7a00 	vldr	s14, [r5]
 8006b64:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006b68:	2e00      	cmp	r6, #0
 8006b6a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006b6e:	ed85 0a01 	vstr	s0, [r5, #4]
 8006b72:	dab0      	bge.n	8006ad6 <__ieee754_rem_pio2f+0x62>
 8006b74:	eeb1 7a47 	vneg.f32	s14, s14
 8006b78:	eeb1 0a40 	vneg.f32	s0, s0
 8006b7c:	ed85 7a00 	vstr	s14, [r5]
 8006b80:	ed85 0a01 	vstr	s0, [r5, #4]
 8006b84:	4240      	negs	r0, r0
 8006b86:	e7a6      	b.n	8006ad6 <__ieee754_rem_pio2f+0x62>
 8006b88:	15e4      	asrs	r4, r4, #23
 8006b8a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006b8e:	1aa2      	subs	r2, r4, r2
 8006b90:	2a08      	cmp	r2, #8
 8006b92:	dde4      	ble.n	8006b5e <__ieee754_rem_pio2f+0xea>
 8006b94:	eddf 7a43 	vldr	s15, [pc, #268]	; 8006ca4 <__ieee754_rem_pio2f+0x230>
 8006b98:	eef0 6a40 	vmov.f32	s13, s0
 8006b9c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006ba0:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006ba4:	eea7 0a27 	vfma.f32	s0, s14, s15
 8006ba8:	eddf 7a40 	vldr	s15, [pc, #256]	; 8006cac <__ieee754_rem_pio2f+0x238>
 8006bac:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8006bb0:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8006bb4:	eef0 7a40 	vmov.f32	s15, s0
 8006bb8:	ee15 3a90 	vmov	r3, s11
 8006bbc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006bc0:	1aa4      	subs	r4, r4, r2
 8006bc2:	2c19      	cmp	r4, #25
 8006bc4:	dc04      	bgt.n	8006bd0 <__ieee754_rem_pio2f+0x15c>
 8006bc6:	edc5 5a00 	vstr	s11, [r5]
 8006bca:	eeb0 0a66 	vmov.f32	s0, s13
 8006bce:	e7c7      	b.n	8006b60 <__ieee754_rem_pio2f+0xec>
 8006bd0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8006cbc <__ieee754_rem_pio2f+0x248>
 8006bd4:	eeb0 0a66 	vmov.f32	s0, s13
 8006bd8:	eea7 0a25 	vfma.f32	s0, s14, s11
 8006bdc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8006be0:	eee7 7a25 	vfma.f32	s15, s14, s11
 8006be4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006cc0 <__ieee754_rem_pio2f+0x24c>
 8006be8:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8006bec:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006bf0:	ed85 7a00 	vstr	s14, [r5]
 8006bf4:	e7b4      	b.n	8006b60 <__ieee754_rem_pio2f+0xec>
 8006bf6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006bfa:	db06      	blt.n	8006c0a <__ieee754_rem_pio2f+0x196>
 8006bfc:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006c00:	edc0 7a01 	vstr	s15, [r0, #4]
 8006c04:	edc0 7a00 	vstr	s15, [r0]
 8006c08:	e742      	b.n	8006a90 <__ieee754_rem_pio2f+0x1c>
 8006c0a:	15e2      	asrs	r2, r4, #23
 8006c0c:	3a86      	subs	r2, #134	; 0x86
 8006c0e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006c1a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8006cc4 <__ieee754_rem_pio2f+0x250>
 8006c1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006c22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c26:	ed8d 7a03 	vstr	s14, [sp, #12]
 8006c2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006c2e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006c32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006c36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c3a:	ed8d 7a04 	vstr	s14, [sp, #16]
 8006c3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006c42:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c4a:	edcd 7a05 	vstr	s15, [sp, #20]
 8006c4e:	d11e      	bne.n	8006c8e <__ieee754_rem_pio2f+0x21a>
 8006c50:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8006c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c58:	bf0c      	ite	eq
 8006c5a:	2301      	moveq	r3, #1
 8006c5c:	2302      	movne	r3, #2
 8006c5e:	491a      	ldr	r1, [pc, #104]	; (8006cc8 <__ieee754_rem_pio2f+0x254>)
 8006c60:	9101      	str	r1, [sp, #4]
 8006c62:	2102      	movs	r1, #2
 8006c64:	9100      	str	r1, [sp, #0]
 8006c66:	a803      	add	r0, sp, #12
 8006c68:	4629      	mov	r1, r5
 8006c6a:	f000 f88d 	bl	8006d88 <__kernel_rem_pio2f>
 8006c6e:	2e00      	cmp	r6, #0
 8006c70:	f6bf af31 	bge.w	8006ad6 <__ieee754_rem_pio2f+0x62>
 8006c74:	edd5 7a00 	vldr	s15, [r5]
 8006c78:	eef1 7a67 	vneg.f32	s15, s15
 8006c7c:	edc5 7a00 	vstr	s15, [r5]
 8006c80:	edd5 7a01 	vldr	s15, [r5, #4]
 8006c84:	eef1 7a67 	vneg.f32	s15, s15
 8006c88:	edc5 7a01 	vstr	s15, [r5, #4]
 8006c8c:	e77a      	b.n	8006b84 <__ieee754_rem_pio2f+0x110>
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e7e5      	b.n	8006c5e <__ieee754_rem_pio2f+0x1ea>
 8006c92:	bf00      	nop
 8006c94:	3f490fd8 	.word	0x3f490fd8
 8006c98:	4016cbe3 	.word	0x4016cbe3
 8006c9c:	3fc90f80 	.word	0x3fc90f80
 8006ca0:	3fc90fd0 	.word	0x3fc90fd0
 8006ca4:	37354400 	.word	0x37354400
 8006ca8:	37354443 	.word	0x37354443
 8006cac:	2e85a308 	.word	0x2e85a308
 8006cb0:	43490f80 	.word	0x43490f80
 8006cb4:	3f22f984 	.word	0x3f22f984
 8006cb8:	08008da8 	.word	0x08008da8
 8006cbc:	2e85a300 	.word	0x2e85a300
 8006cc0:	248d3132 	.word	0x248d3132
 8006cc4:	43800000 	.word	0x43800000
 8006cc8:	08008e28 	.word	0x08008e28

08006ccc <__kernel_cosf>:
 8006ccc:	ee10 3a10 	vmov	r3, s0
 8006cd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cd4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8006cd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cdc:	da05      	bge.n	8006cea <__kernel_cosf+0x1e>
 8006cde:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006ce2:	ee17 2a90 	vmov	r2, s15
 8006ce6:	2a00      	cmp	r2, #0
 8006ce8:	d03b      	beq.n	8006d62 <__kernel_cosf+0x96>
 8006cea:	ee20 6a00 	vmul.f32	s12, s0, s0
 8006cee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006cf2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006d68 <__kernel_cosf+0x9c>
 8006cf6:	4a1d      	ldr	r2, [pc, #116]	; (8006d6c <__kernel_cosf+0xa0>)
 8006cf8:	ee66 7a07 	vmul.f32	s15, s12, s14
 8006cfc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006d70 <__kernel_cosf+0xa4>
 8006d00:	eea6 7a25 	vfma.f32	s14, s12, s11
 8006d04:	4293      	cmp	r3, r2
 8006d06:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8006d74 <__kernel_cosf+0xa8>
 8006d0a:	eee7 5a06 	vfma.f32	s11, s14, s12
 8006d0e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006d78 <__kernel_cosf+0xac>
 8006d12:	eea5 7a86 	vfma.f32	s14, s11, s12
 8006d16:	eddf 5a19 	vldr	s11, [pc, #100]	; 8006d7c <__kernel_cosf+0xb0>
 8006d1a:	eee7 5a06 	vfma.f32	s11, s14, s12
 8006d1e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006d80 <__kernel_cosf+0xb4>
 8006d22:	eea5 7a86 	vfma.f32	s14, s11, s12
 8006d26:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8006d2a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8006d2e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8006d32:	dc04      	bgt.n	8006d3e <__kernel_cosf+0x72>
 8006d34:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8006d38:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8006d3c:	4770      	bx	lr
 8006d3e:	4a11      	ldr	r2, [pc, #68]	; (8006d84 <__kernel_cosf+0xb8>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	bfda      	itte	le
 8006d44:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8006d48:	ee07 3a10 	vmovle	s14, r3
 8006d4c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8006d50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d54:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8006d58:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006d5c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006d60:	4770      	bx	lr
 8006d62:	eeb0 0a66 	vmov.f32	s0, s13
 8006d66:	4770      	bx	lr
 8006d68:	ad47d74e 	.word	0xad47d74e
 8006d6c:	3e999999 	.word	0x3e999999
 8006d70:	310f74f6 	.word	0x310f74f6
 8006d74:	b493f27c 	.word	0xb493f27c
 8006d78:	37d00d01 	.word	0x37d00d01
 8006d7c:	bab60b61 	.word	0xbab60b61
 8006d80:	3d2aaaab 	.word	0x3d2aaaab
 8006d84:	3f480000 	.word	0x3f480000

08006d88 <__kernel_rem_pio2f>:
 8006d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d8c:	ed2d 8b04 	vpush	{d8-d9}
 8006d90:	b0d7      	sub	sp, #348	; 0x15c
 8006d92:	469b      	mov	fp, r3
 8006d94:	460e      	mov	r6, r1
 8006d96:	4bbe      	ldr	r3, [pc, #760]	; (8007090 <__kernel_rem_pio2f+0x308>)
 8006d98:	9964      	ldr	r1, [sp, #400]	; 0x190
 8006d9a:	9002      	str	r0, [sp, #8]
 8006d9c:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8006da0:	9865      	ldr	r0, [sp, #404]	; 0x194
 8006da2:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80070a0 <__kernel_rem_pio2f+0x318>
 8006da6:	1ed1      	subs	r1, r2, #3
 8006da8:	2308      	movs	r3, #8
 8006daa:	fb91 f1f3 	sdiv	r1, r1, r3
 8006dae:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8006db2:	f10b 3aff 	add.w	sl, fp, #4294967295
 8006db6:	1c4c      	adds	r4, r1, #1
 8006db8:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8006dbc:	eba1 050a 	sub.w	r5, r1, sl
 8006dc0:	aa1a      	add	r2, sp, #104	; 0x68
 8006dc2:	eb09 070a 	add.w	r7, r9, sl
 8006dc6:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8006dca:	4696      	mov	lr, r2
 8006dcc:	2300      	movs	r3, #0
 8006dce:	42bb      	cmp	r3, r7
 8006dd0:	dd0f      	ble.n	8006df2 <__kernel_rem_pio2f+0x6a>
 8006dd2:	af42      	add	r7, sp, #264	; 0x108
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	454a      	cmp	r2, r9
 8006dd8:	dc27      	bgt.n	8006e2a <__kernel_rem_pio2f+0xa2>
 8006dda:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8006dde:	eb0b 0302 	add.w	r3, fp, r2
 8006de2:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8006de6:	9d02      	ldr	r5, [sp, #8]
 8006de8:	eddf 7aad 	vldr	s15, [pc, #692]	; 80070a0 <__kernel_rem_pio2f+0x318>
 8006dec:	f04f 0c00 	mov.w	ip, #0
 8006df0:	e015      	b.n	8006e1e <__kernel_rem_pio2f+0x96>
 8006df2:	42dd      	cmn	r5, r3
 8006df4:	bf5d      	ittte	pl
 8006df6:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8006dfa:	ee07 2a90 	vmovpl	s15, r2
 8006dfe:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8006e02:	eef0 7a47 	vmovmi.f32	s15, s14
 8006e06:	ecee 7a01 	vstmia	lr!, {s15}
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	e7df      	b.n	8006dce <__kernel_rem_pio2f+0x46>
 8006e0e:	ecf5 6a01 	vldmia	r5!, {s13}
 8006e12:	ed33 7a01 	vldmdb	r3!, {s14}
 8006e16:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006e1a:	f10c 0c01 	add.w	ip, ip, #1
 8006e1e:	45d4      	cmp	ip, sl
 8006e20:	ddf5      	ble.n	8006e0e <__kernel_rem_pio2f+0x86>
 8006e22:	ece7 7a01 	vstmia	r7!, {s15}
 8006e26:	3201      	adds	r2, #1
 8006e28:	e7d5      	b.n	8006dd6 <__kernel_rem_pio2f+0x4e>
 8006e2a:	ab06      	add	r3, sp, #24
 8006e2c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8006e30:	9304      	str	r3, [sp, #16]
 8006e32:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800709c <__kernel_rem_pio2f+0x314>
 8006e36:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8007098 <__kernel_rem_pio2f+0x310>
 8006e3a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8006e3e:	9303      	str	r3, [sp, #12]
 8006e40:	464d      	mov	r5, r9
 8006e42:	ab56      	add	r3, sp, #344	; 0x158
 8006e44:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8006e48:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8006e4c:	3f01      	subs	r7, #1
 8006e4e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8006e52:	00bf      	lsls	r7, r7, #2
 8006e54:	ab56      	add	r3, sp, #344	; 0x158
 8006e56:	19da      	adds	r2, r3, r7
 8006e58:	3a4c      	subs	r2, #76	; 0x4c
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	1ae9      	subs	r1, r5, r3
 8006e5e:	2900      	cmp	r1, #0
 8006e60:	dc4c      	bgt.n	8006efc <__kernel_rem_pio2f+0x174>
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 faa4 	bl	80073b0 <scalbnf>
 8006e68:	eeb0 8a40 	vmov.f32	s16, s0
 8006e6c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8006e70:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006e74:	f000 fa5a 	bl	800732c <floorf>
 8006e78:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8006e7c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8006e80:	2c00      	cmp	r4, #0
 8006e82:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8006e86:	edcd 7a01 	vstr	s15, [sp, #4]
 8006e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e8e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8006e92:	dd48      	ble.n	8006f26 <__kernel_rem_pio2f+0x19e>
 8006e94:	1e69      	subs	r1, r5, #1
 8006e96:	ab06      	add	r3, sp, #24
 8006e98:	f1c4 0008 	rsb	r0, r4, #8
 8006e9c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8006ea0:	9a01      	ldr	r2, [sp, #4]
 8006ea2:	fa4c f300 	asr.w	r3, ip, r0
 8006ea6:	441a      	add	r2, r3
 8006ea8:	4083      	lsls	r3, r0
 8006eaa:	9201      	str	r2, [sp, #4]
 8006eac:	ebac 0203 	sub.w	r2, ip, r3
 8006eb0:	ab06      	add	r3, sp, #24
 8006eb2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8006eb6:	f1c4 0307 	rsb	r3, r4, #7
 8006eba:	fa42 f803 	asr.w	r8, r2, r3
 8006ebe:	f1b8 0f00 	cmp.w	r8, #0
 8006ec2:	dd41      	ble.n	8006f48 <__kernel_rem_pio2f+0x1c0>
 8006ec4:	9b01      	ldr	r3, [sp, #4]
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	3301      	adds	r3, #1
 8006eca:	9301      	str	r3, [sp, #4]
 8006ecc:	4601      	mov	r1, r0
 8006ece:	4285      	cmp	r5, r0
 8006ed0:	dc6d      	bgt.n	8006fae <__kernel_rem_pio2f+0x226>
 8006ed2:	2c00      	cmp	r4, #0
 8006ed4:	dd04      	ble.n	8006ee0 <__kernel_rem_pio2f+0x158>
 8006ed6:	2c01      	cmp	r4, #1
 8006ed8:	d07e      	beq.n	8006fd8 <__kernel_rem_pio2f+0x250>
 8006eda:	2c02      	cmp	r4, #2
 8006edc:	f000 8086 	beq.w	8006fec <__kernel_rem_pio2f+0x264>
 8006ee0:	f1b8 0f02 	cmp.w	r8, #2
 8006ee4:	d130      	bne.n	8006f48 <__kernel_rem_pio2f+0x1c0>
 8006ee6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006eea:	ee30 8a48 	vsub.f32	s16, s0, s16
 8006eee:	b359      	cbz	r1, 8006f48 <__kernel_rem_pio2f+0x1c0>
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f000 fa5d 	bl	80073b0 <scalbnf>
 8006ef6:	ee38 8a40 	vsub.f32	s16, s16, s0
 8006efa:	e025      	b.n	8006f48 <__kernel_rem_pio2f+0x1c0>
 8006efc:	ee60 7a28 	vmul.f32	s15, s0, s17
 8006f00:	a806      	add	r0, sp, #24
 8006f02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f0a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8006f0e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006f12:	ee10 1a10 	vmov	r1, s0
 8006f16:	ed32 0a01 	vldmdb	r2!, {s0}
 8006f1a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8006f1e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006f22:	3301      	adds	r3, #1
 8006f24:	e79a      	b.n	8006e5c <__kernel_rem_pio2f+0xd4>
 8006f26:	d106      	bne.n	8006f36 <__kernel_rem_pio2f+0x1ae>
 8006f28:	1e6b      	subs	r3, r5, #1
 8006f2a:	aa06      	add	r2, sp, #24
 8006f2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006f30:	ea4f 2822 	mov.w	r8, r2, asr #8
 8006f34:	e7c3      	b.n	8006ebe <__kernel_rem_pio2f+0x136>
 8006f36:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006f3a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f42:	da31      	bge.n	8006fa8 <__kernel_rem_pio2f+0x220>
 8006f44:	f04f 0800 	mov.w	r8, #0
 8006f48:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f50:	f040 80a8 	bne.w	80070a4 <__kernel_rem_pio2f+0x31c>
 8006f54:	1e6b      	subs	r3, r5, #1
 8006f56:	4618      	mov	r0, r3
 8006f58:	2200      	movs	r2, #0
 8006f5a:	4548      	cmp	r0, r9
 8006f5c:	da4d      	bge.n	8006ffa <__kernel_rem_pio2f+0x272>
 8006f5e:	2a00      	cmp	r2, #0
 8006f60:	f000 8087 	beq.w	8007072 <__kernel_rem_pio2f+0x2ea>
 8006f64:	aa06      	add	r2, sp, #24
 8006f66:	3c08      	subs	r4, #8
 8006f68:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006f6c:	2900      	cmp	r1, #0
 8006f6e:	f000 808d 	beq.w	800708c <__kernel_rem_pio2f+0x304>
 8006f72:	4620      	mov	r0, r4
 8006f74:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006f78:	9302      	str	r3, [sp, #8]
 8006f7a:	f000 fa19 	bl	80073b0 <scalbnf>
 8006f7e:	9b02      	ldr	r3, [sp, #8]
 8006f80:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800709c <__kernel_rem_pio2f+0x314>
 8006f84:	0099      	lsls	r1, r3, #2
 8006f86:	aa42      	add	r2, sp, #264	; 0x108
 8006f88:	1850      	adds	r0, r2, r1
 8006f8a:	1d05      	adds	r5, r0, #4
 8006f8c:	461c      	mov	r4, r3
 8006f8e:	2c00      	cmp	r4, #0
 8006f90:	f280 80b8 	bge.w	8007104 <__kernel_rem_pio2f+0x37c>
 8006f94:	2500      	movs	r5, #0
 8006f96:	1b5c      	subs	r4, r3, r5
 8006f98:	2c00      	cmp	r4, #0
 8006f9a:	f2c0 80d8 	blt.w	800714e <__kernel_rem_pio2f+0x3c6>
 8006f9e:	4f3d      	ldr	r7, [pc, #244]	; (8007094 <__kernel_rem_pio2f+0x30c>)
 8006fa0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80070a0 <__kernel_rem_pio2f+0x318>
 8006fa4:	2400      	movs	r4, #0
 8006fa6:	e0c6      	b.n	8007136 <__kernel_rem_pio2f+0x3ae>
 8006fa8:	f04f 0802 	mov.w	r8, #2
 8006fac:	e78a      	b.n	8006ec4 <__kernel_rem_pio2f+0x13c>
 8006fae:	ab06      	add	r3, sp, #24
 8006fb0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006fb4:	b949      	cbnz	r1, 8006fca <__kernel_rem_pio2f+0x242>
 8006fb6:	b12b      	cbz	r3, 8006fc4 <__kernel_rem_pio2f+0x23c>
 8006fb8:	aa06      	add	r2, sp, #24
 8006fba:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006fbe:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	e781      	b.n	8006ece <__kernel_rem_pio2f+0x146>
 8006fca:	aa06      	add	r2, sp, #24
 8006fcc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8006fd0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	e7f5      	b.n	8006fc4 <__kernel_rem_pio2f+0x23c>
 8006fd8:	1e68      	subs	r0, r5, #1
 8006fda:	ab06      	add	r3, sp, #24
 8006fdc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fe4:	aa06      	add	r2, sp, #24
 8006fe6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8006fea:	e779      	b.n	8006ee0 <__kernel_rem_pio2f+0x158>
 8006fec:	1e68      	subs	r0, r5, #1
 8006fee:	ab06      	add	r3, sp, #24
 8006ff0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ff8:	e7f4      	b.n	8006fe4 <__kernel_rem_pio2f+0x25c>
 8006ffa:	a906      	add	r1, sp, #24
 8006ffc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007000:	3801      	subs	r0, #1
 8007002:	430a      	orrs	r2, r1
 8007004:	e7a9      	b.n	8006f5a <__kernel_rem_pio2f+0x1d2>
 8007006:	f10c 0c01 	add.w	ip, ip, #1
 800700a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800700e:	2a00      	cmp	r2, #0
 8007010:	d0f9      	beq.n	8007006 <__kernel_rem_pio2f+0x27e>
 8007012:	eb0b 0305 	add.w	r3, fp, r5
 8007016:	aa1a      	add	r2, sp, #104	; 0x68
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	1898      	adds	r0, r3, r2
 800701c:	3004      	adds	r0, #4
 800701e:	1c69      	adds	r1, r5, #1
 8007020:	3704      	adds	r7, #4
 8007022:	2200      	movs	r2, #0
 8007024:	4465      	add	r5, ip
 8007026:	9005      	str	r0, [sp, #20]
 8007028:	428d      	cmp	r5, r1
 800702a:	f6ff af0a 	blt.w	8006e42 <__kernel_rem_pio2f+0xba>
 800702e:	a81a      	add	r0, sp, #104	; 0x68
 8007030:	eb02 0c03 	add.w	ip, r2, r3
 8007034:	4484      	add	ip, r0
 8007036:	9803      	ldr	r0, [sp, #12]
 8007038:	f8dd e008 	ldr.w	lr, [sp, #8]
 800703c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8007040:	9001      	str	r0, [sp, #4]
 8007042:	ee07 0a90 	vmov	s15, r0
 8007046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800704a:	9805      	ldr	r0, [sp, #20]
 800704c:	edcc 7a00 	vstr	s15, [ip]
 8007050:	eddf 7a13 	vldr	s15, [pc, #76]	; 80070a0 <__kernel_rem_pio2f+0x318>
 8007054:	eb00 0802 	add.w	r8, r0, r2
 8007058:	f04f 0c00 	mov.w	ip, #0
 800705c:	45d4      	cmp	ip, sl
 800705e:	dd0c      	ble.n	800707a <__kernel_rem_pio2f+0x2f2>
 8007060:	eb02 0c07 	add.w	ip, r2, r7
 8007064:	a842      	add	r0, sp, #264	; 0x108
 8007066:	4484      	add	ip, r0
 8007068:	edcc 7a01 	vstr	s15, [ip, #4]
 800706c:	3101      	adds	r1, #1
 800706e:	3204      	adds	r2, #4
 8007070:	e7da      	b.n	8007028 <__kernel_rem_pio2f+0x2a0>
 8007072:	9b04      	ldr	r3, [sp, #16]
 8007074:	f04f 0c01 	mov.w	ip, #1
 8007078:	e7c7      	b.n	800700a <__kernel_rem_pio2f+0x282>
 800707a:	ecfe 6a01 	vldmia	lr!, {s13}
 800707e:	ed38 7a01 	vldmdb	r8!, {s14}
 8007082:	f10c 0c01 	add.w	ip, ip, #1
 8007086:	eee6 7a87 	vfma.f32	s15, s13, s14
 800708a:	e7e7      	b.n	800705c <__kernel_rem_pio2f+0x2d4>
 800708c:	3b01      	subs	r3, #1
 800708e:	e769      	b.n	8006f64 <__kernel_rem_pio2f+0x1dc>
 8007090:	0800916c 	.word	0x0800916c
 8007094:	08009140 	.word	0x08009140
 8007098:	43800000 	.word	0x43800000
 800709c:	3b800000 	.word	0x3b800000
 80070a0:	00000000 	.word	0x00000000
 80070a4:	4260      	negs	r0, r4
 80070a6:	eeb0 0a48 	vmov.f32	s0, s16
 80070aa:	f000 f981 	bl	80073b0 <scalbnf>
 80070ae:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8007098 <__kernel_rem_pio2f+0x310>
 80070b2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80070b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ba:	db1a      	blt.n	80070f2 <__kernel_rem_pio2f+0x36a>
 80070bc:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800709c <__kernel_rem_pio2f+0x314>
 80070c0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80070c4:	aa06      	add	r2, sp, #24
 80070c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070ca:	a906      	add	r1, sp, #24
 80070cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070d0:	3408      	adds	r4, #8
 80070d2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80070d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070da:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80070de:	ee10 3a10 	vmov	r3, s0
 80070e2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80070e6:	1c6b      	adds	r3, r5, #1
 80070e8:	ee17 2a90 	vmov	r2, s15
 80070ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80070f0:	e73f      	b.n	8006f72 <__kernel_rem_pio2f+0x1ea>
 80070f2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80070f6:	aa06      	add	r2, sp, #24
 80070f8:	ee10 3a10 	vmov	r3, s0
 80070fc:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8007100:	462b      	mov	r3, r5
 8007102:	e736      	b.n	8006f72 <__kernel_rem_pio2f+0x1ea>
 8007104:	aa06      	add	r2, sp, #24
 8007106:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800710a:	9202      	str	r2, [sp, #8]
 800710c:	ee07 2a90 	vmov	s15, r2
 8007110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007114:	3c01      	subs	r4, #1
 8007116:	ee67 7a80 	vmul.f32	s15, s15, s0
 800711a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800711e:	ed65 7a01 	vstmdb	r5!, {s15}
 8007122:	e734      	b.n	8006f8e <__kernel_rem_pio2f+0x206>
 8007124:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8007128:	ecf7 6a01 	vldmia	r7!, {s13}
 800712c:	ed9c 7a00 	vldr	s14, [ip]
 8007130:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007134:	3401      	adds	r4, #1
 8007136:	454c      	cmp	r4, r9
 8007138:	dc01      	bgt.n	800713e <__kernel_rem_pio2f+0x3b6>
 800713a:	42a5      	cmp	r5, r4
 800713c:	daf2      	bge.n	8007124 <__kernel_rem_pio2f+0x39c>
 800713e:	aa56      	add	r2, sp, #344	; 0x158
 8007140:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8007144:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8007148:	3501      	adds	r5, #1
 800714a:	3804      	subs	r0, #4
 800714c:	e723      	b.n	8006f96 <__kernel_rem_pio2f+0x20e>
 800714e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007150:	2a03      	cmp	r2, #3
 8007152:	d84d      	bhi.n	80071f0 <__kernel_rem_pio2f+0x468>
 8007154:	e8df f002 	tbb	[pc, r2]
 8007158:	021f1f3e 	.word	0x021f1f3e
 800715c:	aa56      	add	r2, sp, #344	; 0x158
 800715e:	4411      	add	r1, r2
 8007160:	399c      	subs	r1, #156	; 0x9c
 8007162:	4608      	mov	r0, r1
 8007164:	461c      	mov	r4, r3
 8007166:	2c00      	cmp	r4, #0
 8007168:	dc5f      	bgt.n	800722a <__kernel_rem_pio2f+0x4a2>
 800716a:	4608      	mov	r0, r1
 800716c:	461c      	mov	r4, r3
 800716e:	2c01      	cmp	r4, #1
 8007170:	dc6b      	bgt.n	800724a <__kernel_rem_pio2f+0x4c2>
 8007172:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80070a0 <__kernel_rem_pio2f+0x318>
 8007176:	2b01      	cmp	r3, #1
 8007178:	dc77      	bgt.n	800726a <__kernel_rem_pio2f+0x4e2>
 800717a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800717e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8007182:	f1b8 0f00 	cmp.w	r8, #0
 8007186:	d176      	bne.n	8007276 <__kernel_rem_pio2f+0x4ee>
 8007188:	edc6 6a00 	vstr	s13, [r6]
 800718c:	ed86 7a01 	vstr	s14, [r6, #4]
 8007190:	edc6 7a02 	vstr	s15, [r6, #8]
 8007194:	e02c      	b.n	80071f0 <__kernel_rem_pio2f+0x468>
 8007196:	aa56      	add	r2, sp, #344	; 0x158
 8007198:	4411      	add	r1, r2
 800719a:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80070a0 <__kernel_rem_pio2f+0x318>
 800719e:	399c      	subs	r1, #156	; 0x9c
 80071a0:	4618      	mov	r0, r3
 80071a2:	2800      	cmp	r0, #0
 80071a4:	da32      	bge.n	800720c <__kernel_rem_pio2f+0x484>
 80071a6:	f1b8 0f00 	cmp.w	r8, #0
 80071aa:	d035      	beq.n	8007218 <__kernel_rem_pio2f+0x490>
 80071ac:	eef1 7a47 	vneg.f32	s15, s14
 80071b0:	edc6 7a00 	vstr	s15, [r6]
 80071b4:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80071b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071bc:	a82f      	add	r0, sp, #188	; 0xbc
 80071be:	2101      	movs	r1, #1
 80071c0:	428b      	cmp	r3, r1
 80071c2:	da2c      	bge.n	800721e <__kernel_rem_pio2f+0x496>
 80071c4:	f1b8 0f00 	cmp.w	r8, #0
 80071c8:	d001      	beq.n	80071ce <__kernel_rem_pio2f+0x446>
 80071ca:	eef1 7a67 	vneg.f32	s15, s15
 80071ce:	edc6 7a01 	vstr	s15, [r6, #4]
 80071d2:	e00d      	b.n	80071f0 <__kernel_rem_pio2f+0x468>
 80071d4:	aa56      	add	r2, sp, #344	; 0x158
 80071d6:	4411      	add	r1, r2
 80071d8:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80070a0 <__kernel_rem_pio2f+0x318>
 80071dc:	399c      	subs	r1, #156	; 0x9c
 80071de:	2b00      	cmp	r3, #0
 80071e0:	da0e      	bge.n	8007200 <__kernel_rem_pio2f+0x478>
 80071e2:	f1b8 0f00 	cmp.w	r8, #0
 80071e6:	d001      	beq.n	80071ec <__kernel_rem_pio2f+0x464>
 80071e8:	eef1 7a67 	vneg.f32	s15, s15
 80071ec:	edc6 7a00 	vstr	s15, [r6]
 80071f0:	9b01      	ldr	r3, [sp, #4]
 80071f2:	f003 0007 	and.w	r0, r3, #7
 80071f6:	b057      	add	sp, #348	; 0x15c
 80071f8:	ecbd 8b04 	vpop	{d8-d9}
 80071fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007200:	ed31 7a01 	vldmdb	r1!, {s14}
 8007204:	3b01      	subs	r3, #1
 8007206:	ee77 7a87 	vadd.f32	s15, s15, s14
 800720a:	e7e8      	b.n	80071de <__kernel_rem_pio2f+0x456>
 800720c:	ed71 7a01 	vldmdb	r1!, {s15}
 8007210:	3801      	subs	r0, #1
 8007212:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007216:	e7c4      	b.n	80071a2 <__kernel_rem_pio2f+0x41a>
 8007218:	eef0 7a47 	vmov.f32	s15, s14
 800721c:	e7c8      	b.n	80071b0 <__kernel_rem_pio2f+0x428>
 800721e:	ecb0 7a01 	vldmia	r0!, {s14}
 8007222:	3101      	adds	r1, #1
 8007224:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007228:	e7ca      	b.n	80071c0 <__kernel_rem_pio2f+0x438>
 800722a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800722e:	ed70 6a01 	vldmdb	r0!, {s13}
 8007232:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007236:	3c01      	subs	r4, #1
 8007238:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800723c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8007240:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007244:	edc0 7a00 	vstr	s15, [r0]
 8007248:	e78d      	b.n	8007166 <__kernel_rem_pio2f+0x3de>
 800724a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800724e:	ed70 6a01 	vldmdb	r0!, {s13}
 8007252:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007256:	3c01      	subs	r4, #1
 8007258:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800725c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8007260:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007264:	edc0 7a00 	vstr	s15, [r0]
 8007268:	e781      	b.n	800716e <__kernel_rem_pio2f+0x3e6>
 800726a:	ed31 7a01 	vldmdb	r1!, {s14}
 800726e:	3b01      	subs	r3, #1
 8007270:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007274:	e77f      	b.n	8007176 <__kernel_rem_pio2f+0x3ee>
 8007276:	eef1 6a66 	vneg.f32	s13, s13
 800727a:	eeb1 7a47 	vneg.f32	s14, s14
 800727e:	edc6 6a00 	vstr	s13, [r6]
 8007282:	ed86 7a01 	vstr	s14, [r6, #4]
 8007286:	eef1 7a67 	vneg.f32	s15, s15
 800728a:	e781      	b.n	8007190 <__kernel_rem_pio2f+0x408>

0800728c <__kernel_sinf>:
 800728c:	ee10 3a10 	vmov	r3, s0
 8007290:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007294:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007298:	da04      	bge.n	80072a4 <__kernel_sinf+0x18>
 800729a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800729e:	ee17 3a90 	vmov	r3, s15
 80072a2:	b35b      	cbz	r3, 80072fc <__kernel_sinf+0x70>
 80072a4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80072a8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007300 <__kernel_sinf+0x74>
 80072ac:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007304 <__kernel_sinf+0x78>
 80072b0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80072b4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007308 <__kernel_sinf+0x7c>
 80072b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80072bc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800730c <__kernel_sinf+0x80>
 80072c0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80072c4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007310 <__kernel_sinf+0x84>
 80072c8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80072cc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80072d0:	b930      	cbnz	r0, 80072e0 <__kernel_sinf+0x54>
 80072d2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007314 <__kernel_sinf+0x88>
 80072d6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80072da:	eea6 0a26 	vfma.f32	s0, s12, s13
 80072de:	4770      	bx	lr
 80072e0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80072e4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80072e8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80072ec:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80072f0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007318 <__kernel_sinf+0x8c>
 80072f4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80072f8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	2f2ec9d3 	.word	0x2f2ec9d3
 8007304:	b2d72f34 	.word	0xb2d72f34
 8007308:	3638ef1b 	.word	0x3638ef1b
 800730c:	b9500d01 	.word	0xb9500d01
 8007310:	3c088889 	.word	0x3c088889
 8007314:	be2aaaab 	.word	0xbe2aaaab
 8007318:	3e2aaaab 	.word	0x3e2aaaab

0800731c <fabsf>:
 800731c:	ee10 3a10 	vmov	r3, s0
 8007320:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007324:	ee00 3a10 	vmov	s0, r3
 8007328:	4770      	bx	lr
	...

0800732c <floorf>:
 800732c:	ee10 3a10 	vmov	r3, s0
 8007330:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007334:	0dca      	lsrs	r2, r1, #23
 8007336:	3a7f      	subs	r2, #127	; 0x7f
 8007338:	2a16      	cmp	r2, #22
 800733a:	dc2a      	bgt.n	8007392 <floorf+0x66>
 800733c:	2a00      	cmp	r2, #0
 800733e:	da11      	bge.n	8007364 <floorf+0x38>
 8007340:	eddf 7a18 	vldr	s15, [pc, #96]	; 80073a4 <floorf+0x78>
 8007344:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007348:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800734c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007350:	dd05      	ble.n	800735e <floorf+0x32>
 8007352:	2b00      	cmp	r3, #0
 8007354:	da23      	bge.n	800739e <floorf+0x72>
 8007356:	4a14      	ldr	r2, [pc, #80]	; (80073a8 <floorf+0x7c>)
 8007358:	2900      	cmp	r1, #0
 800735a:	bf18      	it	ne
 800735c:	4613      	movne	r3, r2
 800735e:	ee00 3a10 	vmov	s0, r3
 8007362:	4770      	bx	lr
 8007364:	4911      	ldr	r1, [pc, #68]	; (80073ac <floorf+0x80>)
 8007366:	4111      	asrs	r1, r2
 8007368:	420b      	tst	r3, r1
 800736a:	d0fa      	beq.n	8007362 <floorf+0x36>
 800736c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80073a4 <floorf+0x78>
 8007370:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007374:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800737c:	ddef      	ble.n	800735e <floorf+0x32>
 800737e:	2b00      	cmp	r3, #0
 8007380:	bfbe      	ittt	lt
 8007382:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007386:	fa40 f202 	asrlt.w	r2, r0, r2
 800738a:	189b      	addlt	r3, r3, r2
 800738c:	ea23 0301 	bic.w	r3, r3, r1
 8007390:	e7e5      	b.n	800735e <floorf+0x32>
 8007392:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007396:	d3e4      	bcc.n	8007362 <floorf+0x36>
 8007398:	ee30 0a00 	vadd.f32	s0, s0, s0
 800739c:	4770      	bx	lr
 800739e:	2300      	movs	r3, #0
 80073a0:	e7dd      	b.n	800735e <floorf+0x32>
 80073a2:	bf00      	nop
 80073a4:	7149f2ca 	.word	0x7149f2ca
 80073a8:	bf800000 	.word	0xbf800000
 80073ac:	007fffff 	.word	0x007fffff

080073b0 <scalbnf>:
 80073b0:	b508      	push	{r3, lr}
 80073b2:	ee10 2a10 	vmov	r2, s0
 80073b6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80073ba:	ed2d 8b02 	vpush	{d8}
 80073be:	eef0 0a40 	vmov.f32	s1, s0
 80073c2:	d004      	beq.n	80073ce <scalbnf+0x1e>
 80073c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80073c8:	d306      	bcc.n	80073d8 <scalbnf+0x28>
 80073ca:	ee70 0a00 	vadd.f32	s1, s0, s0
 80073ce:	ecbd 8b02 	vpop	{d8}
 80073d2:	eeb0 0a60 	vmov.f32	s0, s1
 80073d6:	bd08      	pop	{r3, pc}
 80073d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80073dc:	d21c      	bcs.n	8007418 <scalbnf+0x68>
 80073de:	4b1f      	ldr	r3, [pc, #124]	; (800745c <scalbnf+0xac>)
 80073e0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007460 <scalbnf+0xb0>
 80073e4:	4298      	cmp	r0, r3
 80073e6:	ee60 0a27 	vmul.f32	s1, s0, s15
 80073ea:	db10      	blt.n	800740e <scalbnf+0x5e>
 80073ec:	ee10 2a90 	vmov	r2, s1
 80073f0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80073f4:	3b19      	subs	r3, #25
 80073f6:	4403      	add	r3, r0
 80073f8:	2bfe      	cmp	r3, #254	; 0xfe
 80073fa:	dd0f      	ble.n	800741c <scalbnf+0x6c>
 80073fc:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8007464 <scalbnf+0xb4>
 8007400:	eeb0 0a48 	vmov.f32	s0, s16
 8007404:	f000 f834 	bl	8007470 <copysignf>
 8007408:	ee60 0a08 	vmul.f32	s1, s0, s16
 800740c:	e7df      	b.n	80073ce <scalbnf+0x1e>
 800740e:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007468 <scalbnf+0xb8>
 8007412:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8007416:	e7da      	b.n	80073ce <scalbnf+0x1e>
 8007418:	0ddb      	lsrs	r3, r3, #23
 800741a:	e7ec      	b.n	80073f6 <scalbnf+0x46>
 800741c:	2b00      	cmp	r3, #0
 800741e:	dd06      	ble.n	800742e <scalbnf+0x7e>
 8007420:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007424:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007428:	ee00 3a90 	vmov	s1, r3
 800742c:	e7cf      	b.n	80073ce <scalbnf+0x1e>
 800742e:	f113 0f16 	cmn.w	r3, #22
 8007432:	da06      	bge.n	8007442 <scalbnf+0x92>
 8007434:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007438:	4298      	cmp	r0, r3
 800743a:	dcdf      	bgt.n	80073fc <scalbnf+0x4c>
 800743c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8007468 <scalbnf+0xb8>
 8007440:	e7de      	b.n	8007400 <scalbnf+0x50>
 8007442:	3319      	adds	r3, #25
 8007444:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007448:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800744c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800746c <scalbnf+0xbc>
 8007450:	ee07 3a10 	vmov	s14, r3
 8007454:	ee67 0a27 	vmul.f32	s1, s14, s15
 8007458:	e7b9      	b.n	80073ce <scalbnf+0x1e>
 800745a:	bf00      	nop
 800745c:	ffff3cb0 	.word	0xffff3cb0
 8007460:	4c000000 	.word	0x4c000000
 8007464:	7149f2ca 	.word	0x7149f2ca
 8007468:	0da24260 	.word	0x0da24260
 800746c:	33000000 	.word	0x33000000

08007470 <copysignf>:
 8007470:	ee10 3a10 	vmov	r3, s0
 8007474:	ee10 2a90 	vmov	r2, s1
 8007478:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800747c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007480:	4313      	orrs	r3, r2
 8007482:	ee00 3a10 	vmov	s0, r3
 8007486:	4770      	bx	lr

08007488 <_init>:
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	bf00      	nop
 800748c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748e:	bc08      	pop	{r3}
 8007490:	469e      	mov	lr, r3
 8007492:	4770      	bx	lr

08007494 <_fini>:
 8007494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007496:	bf00      	nop
 8007498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749a:	bc08      	pop	{r3}
 800749c:	469e      	mov	lr, r3
 800749e:	4770      	bx	lr
