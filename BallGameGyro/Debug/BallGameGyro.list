
BallGameGyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009008  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cd8  080091b8  080091b8  000191b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae90  0800ae90  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae90  0800ae90  0001ae90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae98  0800ae98  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae98  0800ae98  0001ae98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae9c  0800ae9c  0001ae9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800aea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  20000010  0800aeb0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  0800aeb0  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d3c0  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003863  00000000  00000000  0003d400  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a90  00000000  00000000  00040c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018f0  00000000  00000000  000426f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027736  00000000  00000000  00043fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015290  00000000  00000000  0006b71e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8195  00000000  00000000  000809ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00168b43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000744c  00000000  00000000  00168bc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080091a0 	.word	0x080091a0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	080091a0 	.word	0x080091a0

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2f>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000994:	bf24      	itt	cs
 8000996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800099e:	d90d      	bls.n	80009bc <__aeabi_d2f+0x30>
 80009a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b4:	bf08      	it	eq
 80009b6:	f020 0001 	biceq.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009c0:	d121      	bne.n	8000a06 <__aeabi_d2f+0x7a>
 80009c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009c6:	bfbc      	itt	lt
 80009c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	4770      	bxlt	lr
 80009ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d6:	f1c2 0218 	rsb	r2, r2, #24
 80009da:	f1c2 0c20 	rsb	ip, r2, #32
 80009de:	fa10 f30c 	lsls.w	r3, r0, ip
 80009e2:	fa20 f002 	lsr.w	r0, r0, r2
 80009e6:	bf18      	it	ne
 80009e8:	f040 0001 	orrne.w	r0, r0, #1
 80009ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f8:	ea40 000c 	orr.w	r0, r0, ip
 80009fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	e7cc      	b.n	80009a0 <__aeabi_d2f+0x14>
 8000a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a0a:	d107      	bne.n	8000a1c <__aeabi_d2f+0x90>
 8000a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a10:	bf1e      	ittt	ne
 8000a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a1a:	4770      	bxne	lr
 8000a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a40:	f000 b972 	b.w	8000d28 <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f806 	bl	8000a5c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__udivmoddi4>:
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a60:	9e08      	ldr	r6, [sp, #32]
 8000a62:	4604      	mov	r4, r0
 8000a64:	4688      	mov	r8, r1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d14b      	bne.n	8000b02 <__udivmoddi4+0xa6>
 8000a6a:	428a      	cmp	r2, r1
 8000a6c:	4615      	mov	r5, r2
 8000a6e:	d967      	bls.n	8000b40 <__udivmoddi4+0xe4>
 8000a70:	fab2 f282 	clz	r2, r2
 8000a74:	b14a      	cbz	r2, 8000a8a <__udivmoddi4+0x2e>
 8000a76:	f1c2 0720 	rsb	r7, r2, #32
 8000a7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a82:	4095      	lsls	r5, r2
 8000a84:	ea47 0803 	orr.w	r8, r7, r3
 8000a88:	4094      	lsls	r4, r2
 8000a8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a8e:	0c23      	lsrs	r3, r4, #16
 8000a90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a94:	fa1f fc85 	uxth.w	ip, r5
 8000a98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aa0:	fb07 f10c 	mul.w	r1, r7, ip
 8000aa4:	4299      	cmp	r1, r3
 8000aa6:	d909      	bls.n	8000abc <__udivmoddi4+0x60>
 8000aa8:	18eb      	adds	r3, r5, r3
 8000aaa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000aae:	f080 811b 	bcs.w	8000ce8 <__udivmoddi4+0x28c>
 8000ab2:	4299      	cmp	r1, r3
 8000ab4:	f240 8118 	bls.w	8000ce8 <__udivmoddi4+0x28c>
 8000ab8:	3f02      	subs	r7, #2
 8000aba:	442b      	add	r3, r5
 8000abc:	1a5b      	subs	r3, r3, r1
 8000abe:	b2a4      	uxth	r4, r4
 8000ac0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ac4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000acc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ad0:	45a4      	cmp	ip, r4
 8000ad2:	d909      	bls.n	8000ae8 <__udivmoddi4+0x8c>
 8000ad4:	192c      	adds	r4, r5, r4
 8000ad6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ada:	f080 8107 	bcs.w	8000cec <__udivmoddi4+0x290>
 8000ade:	45a4      	cmp	ip, r4
 8000ae0:	f240 8104 	bls.w	8000cec <__udivmoddi4+0x290>
 8000ae4:	3802      	subs	r0, #2
 8000ae6:	442c      	add	r4, r5
 8000ae8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000aec:	eba4 040c 	sub.w	r4, r4, ip
 8000af0:	2700      	movs	r7, #0
 8000af2:	b11e      	cbz	r6, 8000afc <__udivmoddi4+0xa0>
 8000af4:	40d4      	lsrs	r4, r2
 8000af6:	2300      	movs	r3, #0
 8000af8:	e9c6 4300 	strd	r4, r3, [r6]
 8000afc:	4639      	mov	r1, r7
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0xbe>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	f000 80eb 	beq.w	8000ce2 <__udivmoddi4+0x286>
 8000b0c:	2700      	movs	r7, #0
 8000b0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b12:	4638      	mov	r0, r7
 8000b14:	4639      	mov	r1, r7
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	fab3 f783 	clz	r7, r3
 8000b1e:	2f00      	cmp	r7, #0
 8000b20:	d147      	bne.n	8000bb2 <__udivmoddi4+0x156>
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d302      	bcc.n	8000b2c <__udivmoddi4+0xd0>
 8000b26:	4282      	cmp	r2, r0
 8000b28:	f200 80fa 	bhi.w	8000d20 <__udivmoddi4+0x2c4>
 8000b2c:	1a84      	subs	r4, r0, r2
 8000b2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b32:	2001      	movs	r0, #1
 8000b34:	4698      	mov	r8, r3
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d0e0      	beq.n	8000afc <__udivmoddi4+0xa0>
 8000b3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b3e:	e7dd      	b.n	8000afc <__udivmoddi4+0xa0>
 8000b40:	b902      	cbnz	r2, 8000b44 <__udivmoddi4+0xe8>
 8000b42:	deff      	udf	#255	; 0xff
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	f040 808f 	bne.w	8000c6c <__udivmoddi4+0x210>
 8000b4e:	1b49      	subs	r1, r1, r5
 8000b50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b54:	fa1f f885 	uxth.w	r8, r5
 8000b58:	2701      	movs	r7, #1
 8000b5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b68:	fb08 f10c 	mul.w	r1, r8, ip
 8000b6c:	4299      	cmp	r1, r3
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x124>
 8000b70:	18eb      	adds	r3, r5, r3
 8000b72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x122>
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	f200 80cd 	bhi.w	8000d18 <__udivmoddi4+0x2bc>
 8000b7e:	4684      	mov	ip, r0
 8000b80:	1a59      	subs	r1, r3, r1
 8000b82:	b2a3      	uxth	r3, r4
 8000b84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b90:	fb08 f800 	mul.w	r8, r8, r0
 8000b94:	45a0      	cmp	r8, r4
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x14c>
 8000b98:	192c      	adds	r4, r5, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x14a>
 8000ba0:	45a0      	cmp	r8, r4
 8000ba2:	f200 80b6 	bhi.w	8000d12 <__udivmoddi4+0x2b6>
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	eba4 0408 	sub.w	r4, r4, r8
 8000bac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bb0:	e79f      	b.n	8000af2 <__udivmoddi4+0x96>
 8000bb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bb6:	40bb      	lsls	r3, r7
 8000bb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bcc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bd0:	4325      	orrs	r5, r4
 8000bd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bd6:	0c2c      	lsrs	r4, r5, #16
 8000bd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bdc:	fa1f fa8e 	uxth.w	sl, lr
 8000be0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000be4:	fb09 f40a 	mul.w	r4, r9, sl
 8000be8:	429c      	cmp	r4, r3
 8000bea:	fa02 f207 	lsl.w	r2, r2, r7
 8000bee:	fa00 f107 	lsl.w	r1, r0, r7
 8000bf2:	d90b      	bls.n	8000c0c <__udivmoddi4+0x1b0>
 8000bf4:	eb1e 0303 	adds.w	r3, lr, r3
 8000bf8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bfc:	f080 8087 	bcs.w	8000d0e <__udivmoddi4+0x2b2>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f240 8084 	bls.w	8000d0e <__udivmoddi4+0x2b2>
 8000c06:	f1a9 0902 	sub.w	r9, r9, #2
 8000c0a:	4473      	add	r3, lr
 8000c0c:	1b1b      	subs	r3, r3, r4
 8000c0e:	b2ad      	uxth	r5, r5
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c20:	45a2      	cmp	sl, r4
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x1da>
 8000c24:	eb1e 0404 	adds.w	r4, lr, r4
 8000c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2c:	d26b      	bcs.n	8000d06 <__udivmoddi4+0x2aa>
 8000c2e:	45a2      	cmp	sl, r4
 8000c30:	d969      	bls.n	8000d06 <__udivmoddi4+0x2aa>
 8000c32:	3802      	subs	r0, #2
 8000c34:	4474      	add	r4, lr
 8000c36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c3e:	eba4 040a 	sub.w	r4, r4, sl
 8000c42:	454c      	cmp	r4, r9
 8000c44:	46c2      	mov	sl, r8
 8000c46:	464b      	mov	r3, r9
 8000c48:	d354      	bcc.n	8000cf4 <__udivmoddi4+0x298>
 8000c4a:	d051      	beq.n	8000cf0 <__udivmoddi4+0x294>
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	d069      	beq.n	8000d24 <__udivmoddi4+0x2c8>
 8000c50:	ebb1 050a 	subs.w	r5, r1, sl
 8000c54:	eb64 0403 	sbc.w	r4, r4, r3
 8000c58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c5c:	40fd      	lsrs	r5, r7
 8000c5e:	40fc      	lsrs	r4, r7
 8000c60:	ea4c 0505 	orr.w	r5, ip, r5
 8000c64:	e9c6 5400 	strd	r5, r4, [r6]
 8000c68:	2700      	movs	r7, #0
 8000c6a:	e747      	b.n	8000afc <__udivmoddi4+0xa0>
 8000c6c:	f1c2 0320 	rsb	r3, r2, #32
 8000c70:	fa20 f703 	lsr.w	r7, r0, r3
 8000c74:	4095      	lsls	r5, r2
 8000c76:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c82:	4338      	orrs	r0, r7
 8000c84:	0c01      	lsrs	r1, r0, #16
 8000c86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c8a:	fa1f f885 	uxth.w	r8, r5
 8000c8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c96:	fb07 f308 	mul.w	r3, r7, r8
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x256>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ca8:	d22f      	bcs.n	8000d0a <__udivmoddi4+0x2ae>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d92d      	bls.n	8000d0a <__udivmoddi4+0x2ae>
 8000cae:	3f02      	subs	r7, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	1acb      	subs	r3, r1, r3
 8000cb4:	b281      	uxth	r1, r0
 8000cb6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc2:	fb00 f308 	mul.w	r3, r0, r8
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x27e>
 8000cca:	1869      	adds	r1, r5, r1
 8000ccc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd0:	d217      	bcs.n	8000d02 <__udivmoddi4+0x2a6>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d915      	bls.n	8000d02 <__udivmoddi4+0x2a6>
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	4429      	add	r1, r5
 8000cda:	1ac9      	subs	r1, r1, r3
 8000cdc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ce0:	e73b      	b.n	8000b5a <__udivmoddi4+0xfe>
 8000ce2:	4637      	mov	r7, r6
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e709      	b.n	8000afc <__udivmoddi4+0xa0>
 8000ce8:	4607      	mov	r7, r0
 8000cea:	e6e7      	b.n	8000abc <__udivmoddi4+0x60>
 8000cec:	4618      	mov	r0, r3
 8000cee:	e6fb      	b.n	8000ae8 <__udivmoddi4+0x8c>
 8000cf0:	4541      	cmp	r1, r8
 8000cf2:	d2ab      	bcs.n	8000c4c <__udivmoddi4+0x1f0>
 8000cf4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cf8:	eb69 020e 	sbc.w	r2, r9, lr
 8000cfc:	3801      	subs	r0, #1
 8000cfe:	4613      	mov	r3, r2
 8000d00:	e7a4      	b.n	8000c4c <__udivmoddi4+0x1f0>
 8000d02:	4660      	mov	r0, ip
 8000d04:	e7e9      	b.n	8000cda <__udivmoddi4+0x27e>
 8000d06:	4618      	mov	r0, r3
 8000d08:	e795      	b.n	8000c36 <__udivmoddi4+0x1da>
 8000d0a:	4667      	mov	r7, ip
 8000d0c:	e7d1      	b.n	8000cb2 <__udivmoddi4+0x256>
 8000d0e:	4681      	mov	r9, r0
 8000d10:	e77c      	b.n	8000c0c <__udivmoddi4+0x1b0>
 8000d12:	3802      	subs	r0, #2
 8000d14:	442c      	add	r4, r5
 8000d16:	e747      	b.n	8000ba8 <__udivmoddi4+0x14c>
 8000d18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d1c:	442b      	add	r3, r5
 8000d1e:	e72f      	b.n	8000b80 <__udivmoddi4+0x124>
 8000d20:	4638      	mov	r0, r7
 8000d22:	e708      	b.n	8000b36 <__udivmoddi4+0xda>
 8000d24:	4637      	mov	r7, r6
 8000d26:	e6e9      	b.n	8000afc <__udivmoddi4+0xa0>

08000d28 <__aeabi_idiv0>:
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <ball_ctrl_init>:
 *      Author: chedo
 */
#include "ball_control.h"

void ball_ctrl_init(Ball_control_data *ball_data, uint16_t X_start_pos, uint16_t Y_start_pos)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	807b      	strh	r3, [r7, #2]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	803b      	strh	r3, [r7, #0]
	ball_ctrl_restetDrift(ball_data);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f000 f81c 	bl	8000d7a <ball_ctrl_restetDrift>
	ball_data->X_screen_pos = X_start_pos;
 8000d42:	887b      	ldrh	r3, [r7, #2]
 8000d44:	ee07 3a90 	vmov	s15, r3
 8000d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	edc3 7a03 	vstr	s15, [r3, #12]
	ball_data->Y_screen_pos = Y_start_pos;
 8000d52:	883b      	ldrh	r3, [r7, #0]
 8000d54:	ee07 3a90 	vmov	s15, r3
 8000d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	edc3 7a04 	vstr	s15, [r3, #16]
	ball_data->X_screen_speed = 0;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f04f 0200 	mov.w	r2, #0
 8000d68:	615a      	str	r2, [r3, #20]
	ball_data->Y_screen_speed = 0;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <ball_ctrl_restetDrift>:

void ball_ctrl_restetDrift(Ball_control_data *ball_data)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
	ball_data->ctrlX_angle = 0;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f04f 0200 	mov.w	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
	ball_data->ctrlY_angle = 0;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f04f 0200 	mov.w	r2, #0
 8000d90:	605a      	str	r2, [r3, #4]
	ball_data->ctrlY_angle = 0;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f04f 0200 	mov.w	r2, #0
 8000d98:	605a      	str	r2, [r3, #4]
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <ball_update_ctrl_angles>:

void ball_update_ctrl_angles(Ball_control_data *ball_data, L3GD20 *L3GD20_data, int delta_time_ms)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
	float delta_time = delta_time_ms / 1000.0;
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff fb6d 	bl	8000494 <__aeabi_i2d>
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <ball_update_ctrl_angles+0x90>)
 8000dc0:	f7ff fcfc 	bl	80007bc <__aeabi_ddiv>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	460c      	mov	r4, r1
 8000dc8:	4618      	mov	r0, r3
 8000dca:	4621      	mov	r1, r4
 8000dcc:	f7ff fdde 	bl	800098c <__aeabi_d2f>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	617b      	str	r3, [r7, #20]
	ball_data->ctrlX_angle += L3GD20_data->X_val * delta_time;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	ed93 7a00 	vldr	s14, [r3]
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	edd3 6a03 	vldr	s13, [r3, #12]
 8000de0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	edc3 7a00 	vstr	s15, [r3]
	ball_data->ctrlY_angle += L3GD20_data->Y_val * delta_time;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	ed93 7a01 	vldr	s14, [r3, #4]
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	edd3 6a04 	vldr	s13, [r3, #16]
 8000dfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	edc3 7a01 	vstr	s15, [r3, #4]
	ball_data->ctrlZ_angle += L3GD20_data->Z_val * delta_time;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	ed93 7a02 	vldr	s14, [r3, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	edd3 6a05 	vldr	s13, [r3, #20]
 8000e1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000e2e:	bf00      	nop
 8000e30:	371c      	adds	r7, #28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd90      	pop	{r4, r7, pc}
 8000e36:	bf00      	nop
 8000e38:	408f4000 	.word	0x408f4000
 8000e3c:	00000000 	.word	0x00000000

08000e40 <ball_update_pos>:

void ball_update_pos(Ball_control_data *ball_data, int delta_time_ms)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	ed2d 8b02 	vpush	{d8}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
	float delta_time = delta_time_ms / 1000.0;
 8000e4e:	6838      	ldr	r0, [r7, #0]
 8000e50:	f7ff fb20 	bl	8000494 <__aeabi_i2d>
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	4b6f      	ldr	r3, [pc, #444]	; (8001018 <ball_update_pos+0x1d8>)
 8000e5a:	f7ff fcaf 	bl	80007bc <__aeabi_ddiv>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	460c      	mov	r4, r1
 8000e62:	4618      	mov	r0, r3
 8000e64:	4621      	mov	r1, r4
 8000e66:	f7ff fd91 	bl	800098c <__aeabi_d2f>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	617b      	str	r3, [r7, #20]
	float X_radAngle = (ball_data->ctrlX_angle * PI_CONST / 180.0);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fb20 	bl	80004b8 <__aeabi_f2d>
 8000e78:	a365      	add	r3, pc, #404	; (adr r3, 8001010 <ball_update_pos+0x1d0>)
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	f7ff fb73 	bl	8000568 <__aeabi_dmul>
 8000e82:	4603      	mov	r3, r0
 8000e84:	460c      	mov	r4, r1
 8000e86:	4618      	mov	r0, r3
 8000e88:	4621      	mov	r1, r4
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	4b63      	ldr	r3, [pc, #396]	; (800101c <ball_update_pos+0x1dc>)
 8000e90:	f7ff fc94 	bl	80007bc <__aeabi_ddiv>
 8000e94:	4603      	mov	r3, r0
 8000e96:	460c      	mov	r4, r1
 8000e98:	4618      	mov	r0, r3
 8000e9a:	4621      	mov	r1, r4
 8000e9c:	f7ff fd76 	bl	800098c <__aeabi_d2f>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	613b      	str	r3, [r7, #16]
	float Y_radAngle = (ball_data->ctrlY_angle * PI_CONST / 180.0);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fb05 	bl	80004b8 <__aeabi_f2d>
 8000eae:	a358      	add	r3, pc, #352	; (adr r3, 8001010 <ball_update_pos+0x1d0>)
 8000eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb4:	f7ff fb58 	bl	8000568 <__aeabi_dmul>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	460c      	mov	r4, r1
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	4621      	mov	r1, r4
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	4b55      	ldr	r3, [pc, #340]	; (800101c <ball_update_pos+0x1dc>)
 8000ec6:	f7ff fc79 	bl	80007bc <__aeabi_ddiv>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	460c      	mov	r4, r1
 8000ece:	4618      	mov	r0, r3
 8000ed0:	4621      	mov	r1, r4
 8000ed2:	f7ff fd5b 	bl	800098c <__aeabi_d2f>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	60fb      	str	r3, [r7, #12]

	ball_data->X_screen_speed += sinf(X_radAngle) * GRAVITY_CONST * delta_time;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	ed93 8a05 	vldr	s16, [r3, #20]
 8000ee0:	ed97 0a04 	vldr	s0, [r7, #16]
 8000ee4:	f007 fc10 	bl	8008708 <sinf>
 8000ee8:	eeb0 7a40 	vmov.f32	s14, s0
 8000eec:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8001020 <ball_update_pos+0x1e0>
 8000ef0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ef4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000efc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	edc3 7a05 	vstr	s15, [r3, #20]
	ball_data->Y_screen_speed += sinf(Y_radAngle) * GRAVITY_CONST * delta_time;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	ed93 8a06 	vldr	s16, [r3, #24]
 8000f0c:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f10:	f007 fbfa 	bl	8008708 <sinf>
 8000f14:	eeb0 7a40 	vmov.f32	s14, s0
 8000f18:	eddf 7a41 	vldr	s15, [pc, #260]	; 8001020 <ball_update_pos+0x1e0>
 8000f1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f20:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f28:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	edc3 7a06 	vstr	s15, [r3, #24]

	if(ball_data->X_screen_speed > 0)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f40:	dd0e      	ble.n	8000f60 <ball_update_pos+0x120>
		ball_data->X_screen_speed -= FRICTION_CONST * delta_time;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f48:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f4c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001024 <ball_update_pos+0x1e4>
 8000f50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	edc3 7a05 	vstr	s15, [r3, #20]
 8000f5e:	e00d      	b.n	8000f7c <ball_update_pos+0x13c>
	else
		ball_data->X_screen_speed += FRICTION_CONST * delta_time;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f6a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001024 <ball_update_pos+0x1e4>
 8000f6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	edc3 7a05 	vstr	s15, [r3, #20]

	if(ball_data->Y_screen_speed > 0)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8a:	dd0e      	ble.n	8000faa <ball_update_pos+0x16a>
			ball_data->Y_screen_speed -= FRICTION_CONST * delta_time;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f92:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f96:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001024 <ball_update_pos+0x1e4>
 8000f9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	edc3 7a06 	vstr	s15, [r3, #24]
 8000fa8:	e00d      	b.n	8000fc6 <ball_update_pos+0x186>
		else
			ball_data->Y_screen_speed += FRICTION_CONST * delta_time;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	ed93 7a06 	vldr	s14, [r3, #24]
 8000fb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fb4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001024 <ball_update_pos+0x1e4>
 8000fb8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	edc3 7a06 	vstr	s15, [r3, #24]

	ball_data->X_screen_pos += (ball_data->X_screen_speed * delta_time);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	ed93 7a03 	vldr	s14, [r3, #12]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	edd3 6a05 	vldr	s13, [r3, #20]
 8000fd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	edc3 7a03 	vstr	s15, [r3, #12]
	ball_data->Y_screen_pos += (ball_data->Y_screen_speed * delta_time);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	ed93 7a04 	vldr	s14, [r3, #16]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	edd3 6a06 	vldr	s13, [r3, #24]
 8000ff0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8001002:	bf00      	nop
 8001004:	371c      	adds	r7, #28
 8001006:	46bd      	mov	sp, r7
 8001008:	ecbd 8b02 	vpop	{d8}
 800100c:	bd90      	pop	{r4, r7, pc}
 800100e:	bf00      	nop
 8001010:	4d12d84a 	.word	0x4d12d84a
 8001014:	400921fb 	.word	0x400921fb
 8001018:	408f4000 	.word	0x408f4000
 800101c:	40668000 	.word	0x40668000
 8001020:	437a0000 	.word	0x437a0000
 8001024:	42480000 	.word	0x42480000

08001028 <ball_handle_collision>:

void ball_handle_collision(Ball_control_data *ball_data,
						   int maxX, int minX, int maxY, int minY)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
	if(ball_data->X_screen_pos > maxX || ball_data->X_screen_pos < minX)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	ed93 7a03 	vldr	s14, [r3, #12]
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	ee07 3a90 	vmov	s15, r3
 8001042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001046:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800104a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104e:	dc0c      	bgt.n	800106a <ball_handle_collision+0x42>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	ed93 7a03 	vldr	s14, [r3, #12]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001060:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001068:	d539      	bpl.n	80010de <ball_handle_collision+0xb6>
	{
		ball_data->X_screen_speed = -ball_data->X_screen_speed;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001070:	eef1 7a67 	vneg.f32	s15, s15
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	edc3 7a05 	vstr	s15, [r3, #20]
		ball_data->X_screen_pos = ball_data->X_screen_pos > maxX ? maxX : ball_data->X_screen_pos;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	ee07 3a90 	vmov	s15, r3
 8001086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800108e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001092:	dd05      	ble.n	80010a0 <ball_handle_collision+0x78>
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109e:	e002      	b.n	80010a6 <ball_handle_collision+0x7e>
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	edc3 7a03 	vstr	s15, [r3, #12]
		ball_data->X_screen_pos = ball_data->X_screen_pos < minX ? minX : ball_data->X_screen_pos;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	ed93 7a03 	vldr	s14, [r3, #12]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	ee07 3a90 	vmov	s15, r3
 80010b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c4:	d505      	bpl.n	80010d2 <ball_handle_collision+0xaa>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d0:	e002      	b.n	80010d8 <ball_handle_collision+0xb0>
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	edc3 7a03 	vstr	s15, [r3, #12]
	}
	if(ball_data->Y_screen_pos > maxY || ball_data->Y_screen_pos < minY)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	ed93 7a04 	vldr	s14, [r3, #16]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f6:	dc0d      	bgt.n	8001114 <ball_handle_collision+0xec>
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	ed93 7a04 	vldr	s14, [r3, #16]
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	ee07 3a90 	vmov	s15, r3
 8001104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001108:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001110:	d400      	bmi.n	8001114 <ball_handle_collision+0xec>
	{
		ball_data->Y_screen_speed = -ball_data->Y_screen_speed;
		ball_data->Y_screen_pos = ball_data->Y_screen_pos > maxY ? maxY : ball_data->Y_screen_pos;
		ball_data->Y_screen_pos = ball_data->Y_screen_pos < minY ? minY : ball_data->Y_screen_pos;
	}
}
 8001112:	e039      	b.n	8001188 <ball_handle_collision+0x160>
		ball_data->Y_screen_speed = -ball_data->Y_screen_speed;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	edd3 7a06 	vldr	s15, [r3, #24]
 800111a:	eef1 7a67 	vneg.f32	s15, s15
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	edc3 7a06 	vstr	s15, [r3, #24]
		ball_data->Y_screen_pos = ball_data->Y_screen_pos > maxY ? maxY : ball_data->Y_screen_pos;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	ed93 7a04 	vldr	s14, [r3, #16]
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	ee07 3a90 	vmov	s15, r3
 8001130:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001134:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113c:	dd05      	ble.n	800114a <ball_handle_collision+0x122>
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	ee07 3a90 	vmov	s15, r3
 8001144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001148:	e002      	b.n	8001150 <ball_handle_collision+0x128>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	edc3 7a04 	vstr	s15, [r3, #16]
		ball_data->Y_screen_pos = ball_data->Y_screen_pos < minY ? minY : ball_data->Y_screen_pos;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	ed93 7a04 	vldr	s14, [r3, #16]
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001166:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116e:	d505      	bpl.n	800117c <ball_handle_collision+0x154>
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117a:	e002      	b.n	8001182 <ball_handle_collision+0x15a>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <L3GD20_init>:
 */
#include "gyroscope.h"

//struct L3GD20 L3GD20_data;

int L3GD20_init(SPI_HandleTypeDef *m_hspi_handle, L3GD20 *L3GD20_data){
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	L3GD20_data->hspi_handle = m_hspi_handle;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2102      	movs	r1, #2
 80011a8:	4812      	ldr	r0, [pc, #72]	; (80011f4 <L3GD20_init+0x60>)
 80011aa:	f002 fb25 	bl	80037f8 <HAL_GPIO_WritePin>

	if(L3GD20_recive(L3GD20_WHO_AM_I, L3GD20_data) != 212)
 80011ae:	6839      	ldr	r1, [r7, #0]
 80011b0:	200f      	movs	r0, #15
 80011b2:	f000 f847 	bl	8001244 <L3GD20_recive>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2bd4      	cmp	r3, #212	; 0xd4
 80011ba:	d001      	beq.n	80011c0 <L3GD20_init+0x2c>
	{
		return 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	e014      	b.n	80011ea <L3GD20_init+0x56>
	}

	L3GD20_send(L3GD20_CTRL_REG1, 0x0F, L3GD20_data); // aktywuje żyroskop
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	210f      	movs	r1, #15
 80011c4:	2020      	movs	r0, #32
 80011c6:	f000 f817 	bl	80011f8 <L3GD20_send>
	L3GD20_send(L3GD20_CTRL_REG4, 0x20, L3GD20_data); // Okreslenie skali
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	2120      	movs	r1, #32
 80011ce:	2023      	movs	r0, #35	; 0x23
 80011d0:	f000 f812 	bl	80011f8 <L3GD20_send>
	L3GD20_send(L3GD20_CTRL_REG2, 0x00, L3GD20_data); // ustawia filtr górnoprzepustowy
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	2100      	movs	r1, #0
 80011d8:	2021      	movs	r0, #33	; 0x21
 80011da:	f000 f80d 	bl	80011f8 <L3GD20_send>
	L3GD20_send(L3GD20_CTRL_REG5, 0x10, L3GD20_data); // włącza filtr górnoprzepustowy
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	2110      	movs	r1, #16
 80011e2:	2024      	movs	r0, #36	; 0x24
 80011e4:	f000 f808 	bl	80011f8 <L3GD20_send>

	return 1;
 80011e8:	2301      	movs	r3, #1
	address_var[0] = 0x00 | L3GD20_CTRL_REG5;
	address_var[1] = 0x10;
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi5, address_var, 2, 500);
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);*/
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40020800 	.word	0x40020800

080011f8 <L3GD20_send>:

void L3GD20_send(uint8_t address, uint8_t data, L3GD20 *L3GD20_data)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	603a      	str	r2, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
 8001204:	460b      	mov	r3, r1
 8001206:	71bb      	strb	r3, [r7, #6]
	uint8_t transmit_data[2];
	transmit_data[0] = address;
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	733b      	strb	r3, [r7, #12]
	transmit_data[1] = data;
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	2102      	movs	r1, #2
 8001214:	480a      	ldr	r0, [pc, #40]	; (8001240 <L3GD20_send+0x48>)
 8001216:	f002 faef 	bl	80037f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(L3GD20_data->hspi_handle, transmit_data, 2, L3GD20_SPI_WAIT_TIME);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	6818      	ldr	r0, [r3, #0]
 800121e:	f107 010c 	add.w	r1, r7, #12
 8001222:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001226:	2202      	movs	r2, #2
 8001228:	f005 fa54 	bl	80066d4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	2102      	movs	r1, #2
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <L3GD20_send+0x48>)
 8001232:	f002 fae1 	bl	80037f8 <HAL_GPIO_WritePin>
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40020800 	.word	0x40020800

08001244 <L3GD20_recive>:

uint8_t L3GD20_recive(uint8_t addres, L3GD20 *L3GD20_data)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af02      	add	r7, sp, #8
 800124a:	4603      	mov	r3, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	71fb      	strb	r3, [r7, #7]
	uint8_t transmit_data[2];
	uint8_t recive_data[2];
	transmit_data[0] = addres | 0x80;
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001256:	b2db      	uxtb	r3, r3
 8001258:	733b      	strb	r3, [r7, #12]
	transmit_data[1] = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	737b      	strb	r3, [r7, #13]
	recive_data[1] = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	727b      	strb	r3, [r7, #9]
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	2102      	movs	r1, #2
 8001266:	480c      	ldr	r0, [pc, #48]	; (8001298 <L3GD20_recive+0x54>)
 8001268:	f002 fac6 	bl	80037f8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(L3GD20_data->hspi_handle, transmit_data, recive_data, 2, L3GD20_SPI_WAIT_TIME);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	6818      	ldr	r0, [r3, #0]
 8001270:	f107 0208 	add.w	r2, r7, #8
 8001274:	f107 010c 	add.w	r1, r7, #12
 8001278:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2302      	movs	r3, #2
 8001280:	f005 fb5c 	bl	800693c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8001284:	2201      	movs	r2, #1
 8001286:	2102      	movs	r1, #2
 8001288:	4803      	ldr	r0, [pc, #12]	; (8001298 <L3GD20_recive+0x54>)
 800128a:	f002 fab5 	bl	80037f8 <HAL_GPIO_WritePin>
	return recive_data[1];
 800128e:	7a7b      	ldrb	r3, [r7, #9]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40020800 	.word	0x40020800

0800129c <L3GD20_readRawData>:

void L3GD20_readRawData(L3GD20 *L3GD20_data)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	L3GD20_data->X_raw = L3GD20_recive(L3GD20_OUT_X_L, L3GD20_data);
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	2028      	movs	r0, #40	; 0x28
 80012a8:	f7ff ffcc 	bl	8001244 <L3GD20_recive>
 80012ac:	4603      	mov	r3, r0
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	809a      	strh	r2, [r3, #4]
	L3GD20_data->X_raw |= L3GD20_recive(L3GD20_OUT_X_H, L3GD20_data) << 8;
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	2029      	movs	r0, #41	; 0x29
 80012b8:	f7ff ffc4 	bl	8001244 <L3GD20_recive>
 80012bc:	4603      	mov	r3, r0
 80012be:	0219      	lsls	r1, r3, #8
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80012c6:	b20b      	sxth	r3, r1
 80012c8:	4313      	orrs	r3, r2
 80012ca:	b21a      	sxth	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	809a      	strh	r2, [r3, #4]

	L3GD20_data->Y_raw = L3GD20_recive(L3GD20_OUT_Y_L, L3GD20_data);
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	202a      	movs	r0, #42	; 0x2a
 80012d4:	f7ff ffb6 	bl	8001244 <L3GD20_recive>
 80012d8:	4603      	mov	r3, r0
 80012da:	b21a      	sxth	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	80da      	strh	r2, [r3, #6]
	L3GD20_data->Y_raw |= L3GD20_recive(L3GD20_OUT_Y_H, L3GD20_data) << 8;
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	202b      	movs	r0, #43	; 0x2b
 80012e4:	f7ff ffae 	bl	8001244 <L3GD20_recive>
 80012e8:	4603      	mov	r3, r0
 80012ea:	0219      	lsls	r1, r3, #8
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80012f2:	b20b      	sxth	r3, r1
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	80da      	strh	r2, [r3, #6]

	L3GD20_data->Z_raw = L3GD20_recive(L3GD20_OUT_Z_L, L3GD20_data);
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	202c      	movs	r0, #44	; 0x2c
 8001300:	f7ff ffa0 	bl	8001244 <L3GD20_recive>
 8001304:	4603      	mov	r3, r0
 8001306:	b21a      	sxth	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	811a      	strh	r2, [r3, #8]
	L3GD20_data->Z_raw |= L3GD20_recive(L3GD20_OUT_Z_H, L3GD20_data) << 8;
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	202d      	movs	r0, #45	; 0x2d
 8001310:	f7ff ff98 	bl	8001244 <L3GD20_recive>
 8001314:	4603      	mov	r3, r0
 8001316:	0219      	lsls	r1, r3, #8
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800131e:	b20b      	sxth	r3, r1
 8001320:	4313      	orrs	r3, r2
 8001322:	b21a      	sxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	811a      	strh	r2, [r3, #8]
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <L3GD20_convertRawData>:

void L3GD20_convertRawData(struct L3GD20 *L3GD20_data)
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	L3GD20_data->X_val = (L3GD20_data->X_raw + L3GD20_X_OFFSET) * SENSITIVITY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800133e:	3b1e      	subs	r3, #30
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f8a7 	bl	8000494 <__aeabi_i2d>
 8001346:	a31e      	add	r3, pc, #120	; (adr r3, 80013c0 <L3GD20_convertRawData+0x90>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	f7ff f90c 	bl	8000568 <__aeabi_dmul>
 8001350:	4603      	mov	r3, r0
 8001352:	460c      	mov	r4, r1
 8001354:	4618      	mov	r0, r3
 8001356:	4621      	mov	r1, r4
 8001358:	f7ff fb18 	bl	800098c <__aeabi_d2f>
 800135c:	4602      	mov	r2, r0
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	60da      	str	r2, [r3, #12]
	L3GD20_data->Y_val = (L3GD20_data->Y_raw + L3GD20_Y_OFFSET) * SENSITIVITY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001368:	3b05      	subs	r3, #5
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f892 	bl	8000494 <__aeabi_i2d>
 8001370:	a313      	add	r3, pc, #76	; (adr r3, 80013c0 <L3GD20_convertRawData+0x90>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7ff f8f7 	bl	8000568 <__aeabi_dmul>
 800137a:	4603      	mov	r3, r0
 800137c:	460c      	mov	r4, r1
 800137e:	4618      	mov	r0, r3
 8001380:	4621      	mov	r1, r4
 8001382:	f7ff fb03 	bl	800098c <__aeabi_d2f>
 8001386:	4602      	mov	r2, r0
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	611a      	str	r2, [r3, #16]
	L3GD20_data->Z_val = (L3GD20_data->Z_raw + L3GD20_Z_OFFSET) * SENSITIVITY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001392:	330d      	adds	r3, #13
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f87d 	bl	8000494 <__aeabi_i2d>
 800139a:	a309      	add	r3, pc, #36	; (adr r3, 80013c0 <L3GD20_convertRawData+0x90>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7ff f8e2 	bl	8000568 <__aeabi_dmul>
 80013a4:	4603      	mov	r3, r0
 80013a6:	460c      	mov	r4, r1
 80013a8:	4618      	mov	r0, r3
 80013aa:	4621      	mov	r1, r4
 80013ac:	f7ff faee 	bl	800098c <__aeabi_d2f>
 80013b0:	4602      	mov	r2, r0
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	615a      	str	r2, [r3, #20]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd90      	pop	{r4, r7, pc}
 80013be:	bf00      	nop
 80013c0:	70a3d70a 	.word	0x70a3d70a
 80013c4:	3fb70a3d 	.word	0x3fb70a3d

080013c8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80013cc:	f000 fe80 	bl	80020d0 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80013d0:	20ca      	movs	r0, #202	; 0xca
 80013d2:	f000 f943 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80013d6:	20c3      	movs	r0, #195	; 0xc3
 80013d8:	f000 f94d 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80013dc:	2008      	movs	r0, #8
 80013de:	f000 f94a 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80013e2:	2050      	movs	r0, #80	; 0x50
 80013e4:	f000 f947 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80013e8:	20cf      	movs	r0, #207	; 0xcf
 80013ea:	f000 f937 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f000 f941 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80013f4:	20c1      	movs	r0, #193	; 0xc1
 80013f6:	f000 f93e 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80013fa:	2030      	movs	r0, #48	; 0x30
 80013fc:	f000 f93b 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001400:	20ed      	movs	r0, #237	; 0xed
 8001402:	f000 f92b 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001406:	2064      	movs	r0, #100	; 0x64
 8001408:	f000 f935 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800140c:	2003      	movs	r0, #3
 800140e:	f000 f932 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001412:	2012      	movs	r0, #18
 8001414:	f000 f92f 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001418:	2081      	movs	r0, #129	; 0x81
 800141a:	f000 f92c 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800141e:	20e8      	movs	r0, #232	; 0xe8
 8001420:	f000 f91c 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001424:	2085      	movs	r0, #133	; 0x85
 8001426:	f000 f926 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800142a:	2000      	movs	r0, #0
 800142c:	f000 f923 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001430:	2078      	movs	r0, #120	; 0x78
 8001432:	f000 f920 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001436:	20cb      	movs	r0, #203	; 0xcb
 8001438:	f000 f910 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800143c:	2039      	movs	r0, #57	; 0x39
 800143e:	f000 f91a 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001442:	202c      	movs	r0, #44	; 0x2c
 8001444:	f000 f917 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001448:	2000      	movs	r0, #0
 800144a:	f000 f914 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800144e:	2034      	movs	r0, #52	; 0x34
 8001450:	f000 f911 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001454:	2002      	movs	r0, #2
 8001456:	f000 f90e 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800145a:	20f7      	movs	r0, #247	; 0xf7
 800145c:	f000 f8fe 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001460:	2020      	movs	r0, #32
 8001462:	f000 f908 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001466:	20ea      	movs	r0, #234	; 0xea
 8001468:	f000 f8f8 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800146c:	2000      	movs	r0, #0
 800146e:	f000 f902 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001472:	2000      	movs	r0, #0
 8001474:	f000 f8ff 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001478:	20b1      	movs	r0, #177	; 0xb1
 800147a:	f000 f8ef 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800147e:	2000      	movs	r0, #0
 8001480:	f000 f8f9 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001484:	201b      	movs	r0, #27
 8001486:	f000 f8f6 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800148a:	20b6      	movs	r0, #182	; 0xb6
 800148c:	f000 f8e6 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001490:	200a      	movs	r0, #10
 8001492:	f000 f8f0 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001496:	20a2      	movs	r0, #162	; 0xa2
 8001498:	f000 f8ed 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800149c:	20c0      	movs	r0, #192	; 0xc0
 800149e:	f000 f8dd 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80014a2:	2010      	movs	r0, #16
 80014a4:	f000 f8e7 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80014a8:	20c1      	movs	r0, #193	; 0xc1
 80014aa:	f000 f8d7 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80014ae:	2010      	movs	r0, #16
 80014b0:	f000 f8e1 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80014b4:	20c5      	movs	r0, #197	; 0xc5
 80014b6:	f000 f8d1 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80014ba:	2045      	movs	r0, #69	; 0x45
 80014bc:	f000 f8db 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80014c0:	2015      	movs	r0, #21
 80014c2:	f000 f8d8 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80014c6:	20c7      	movs	r0, #199	; 0xc7
 80014c8:	f000 f8c8 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80014cc:	2090      	movs	r0, #144	; 0x90
 80014ce:	f000 f8d2 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80014d2:	2036      	movs	r0, #54	; 0x36
 80014d4:	f000 f8c2 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80014d8:	20c8      	movs	r0, #200	; 0xc8
 80014da:	f000 f8cc 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80014de:	20f2      	movs	r0, #242	; 0xf2
 80014e0:	f000 f8bc 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80014e4:	2000      	movs	r0, #0
 80014e6:	f000 f8c6 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80014ea:	20b0      	movs	r0, #176	; 0xb0
 80014ec:	f000 f8b6 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80014f0:	20c2      	movs	r0, #194	; 0xc2
 80014f2:	f000 f8c0 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80014f6:	20b6      	movs	r0, #182	; 0xb6
 80014f8:	f000 f8b0 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80014fc:	200a      	movs	r0, #10
 80014fe:	f000 f8ba 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001502:	20a7      	movs	r0, #167	; 0xa7
 8001504:	f000 f8b7 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001508:	2027      	movs	r0, #39	; 0x27
 800150a:	f000 f8b4 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800150e:	2004      	movs	r0, #4
 8001510:	f000 f8b1 	bl	8001676 <ili9341_WriteData>

  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001514:	202a      	movs	r0, #42	; 0x2a
 8001516:	f000 f8a1 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800151a:	2000      	movs	r0, #0
 800151c:	f000 f8ab 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001520:	2000      	movs	r0, #0
 8001522:	f000 f8a8 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001526:	2000      	movs	r0, #0
 8001528:	f000 f8a5 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800152c:	20ef      	movs	r0, #239	; 0xef
 800152e:	f000 f8a2 	bl	8001676 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001532:	202b      	movs	r0, #43	; 0x2b
 8001534:	f000 f892 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001538:	2000      	movs	r0, #0
 800153a:	f000 f89c 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800153e:	2000      	movs	r0, #0
 8001540:	f000 f899 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001544:	2001      	movs	r0, #1
 8001546:	f000 f896 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800154a:	203f      	movs	r0, #63	; 0x3f
 800154c:	f000 f893 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001550:	20f6      	movs	r0, #246	; 0xf6
 8001552:	f000 f883 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001556:	2001      	movs	r0, #1
 8001558:	f000 f88d 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800155c:	2000      	movs	r0, #0
 800155e:	f000 f88a 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001562:	2006      	movs	r0, #6
 8001564:	f000 f887 	bl	8001676 <ili9341_WriteData>

  ili9341_WriteReg(LCD_GRAM);
 8001568:	202c      	movs	r0, #44	; 0x2c
 800156a:	f000 f877 	bl	800165c <ili9341_WriteReg>
  LCD_Delay(200);
 800156e:	20c8      	movs	r0, #200	; 0xc8
 8001570:	f000 fe6a 	bl	8002248 <LCD_Delay>

  ili9341_WriteReg(LCD_GAMMA);
 8001574:	2026      	movs	r0, #38	; 0x26
 8001576:	f000 f871 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800157a:	2001      	movs	r0, #1
 800157c:	f000 f87b 	bl	8001676 <ili9341_WriteData>

  ili9341_WriteReg(LCD_PGAMMA);
 8001580:	20e0      	movs	r0, #224	; 0xe0
 8001582:	f000 f86b 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001586:	200f      	movs	r0, #15
 8001588:	f000 f875 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800158c:	2029      	movs	r0, #41	; 0x29
 800158e:	f000 f872 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001592:	2024      	movs	r0, #36	; 0x24
 8001594:	f000 f86f 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001598:	200c      	movs	r0, #12
 800159a:	f000 f86c 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800159e:	200e      	movs	r0, #14
 80015a0:	f000 f869 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80015a4:	2009      	movs	r0, #9
 80015a6:	f000 f866 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80015aa:	204e      	movs	r0, #78	; 0x4e
 80015ac:	f000 f863 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80015b0:	2078      	movs	r0, #120	; 0x78
 80015b2:	f000 f860 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80015b6:	203c      	movs	r0, #60	; 0x3c
 80015b8:	f000 f85d 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80015bc:	2009      	movs	r0, #9
 80015be:	f000 f85a 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80015c2:	2013      	movs	r0, #19
 80015c4:	f000 f857 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80015c8:	2005      	movs	r0, #5
 80015ca:	f000 f854 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80015ce:	2017      	movs	r0, #23
 80015d0:	f000 f851 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80015d4:	2011      	movs	r0, #17
 80015d6:	f000 f84e 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80015da:	2000      	movs	r0, #0
 80015dc:	f000 f84b 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80015e0:	20e1      	movs	r0, #225	; 0xe1
 80015e2:	f000 f83b 	bl	800165c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f000 f845 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80015ec:	2016      	movs	r0, #22
 80015ee:	f000 f842 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80015f2:	201b      	movs	r0, #27
 80015f4:	f000 f83f 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80015f8:	2004      	movs	r0, #4
 80015fa:	f000 f83c 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80015fe:	2011      	movs	r0, #17
 8001600:	f000 f839 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001604:	2007      	movs	r0, #7
 8001606:	f000 f836 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800160a:	2031      	movs	r0, #49	; 0x31
 800160c:	f000 f833 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001610:	2033      	movs	r0, #51	; 0x33
 8001612:	f000 f830 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001616:	2042      	movs	r0, #66	; 0x42
 8001618:	f000 f82d 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800161c:	2005      	movs	r0, #5
 800161e:	f000 f82a 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001622:	200c      	movs	r0, #12
 8001624:	f000 f827 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001628:	200a      	movs	r0, #10
 800162a:	f000 f824 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800162e:	2028      	movs	r0, #40	; 0x28
 8001630:	f000 f821 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001634:	202f      	movs	r0, #47	; 0x2f
 8001636:	f000 f81e 	bl	8001676 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800163a:	200f      	movs	r0, #15
 800163c:	f000 f81b 	bl	8001676 <ili9341_WriteData>

  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001640:	2011      	movs	r0, #17
 8001642:	f000 f80b 	bl	800165c <ili9341_WriteReg>
  LCD_Delay(200);
 8001646:	20c8      	movs	r0, #200	; 0xc8
 8001648:	f000 fdfe 	bl	8002248 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800164c:	2029      	movs	r0, #41	; 0x29
 800164e:	f000 f805 	bl	800165c <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001652:	202c      	movs	r0, #44	; 0x2c
 8001654:	f000 f802 	bl	800165c <ili9341_WriteReg>
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}

0800165c <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fdcb 	bl	8002204 <LCD_IO_WriteReg>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	4618      	mov	r0, r3
 8001684:	f000 fd9c 	bl	80021c0 <LCD_IO_WriteData>
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b090      	sub	sp, #64	; 0x40
 8001694:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint32_t index = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	637b      	str	r3, [r7, #52]	; 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800169a:	f001 fa93 	bl	8002bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800169e:	f000 f871 	bl	8001784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //BSP_LED_Init(LED3);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a2:	f000 fb3d 	bl	8001d20 <MX_GPIO_Init>
  MX_CRC_Init();
 80016a6:	f000 f8cf 	bl	8001848 <MX_CRC_Init>
  MX_DMA2D_Init();
 80016aa:	f000 f8e1 	bl	8001870 <MX_DMA2D_Init>
  MX_FMC_Init();
 80016ae:	f000 fae7 	bl	8001c80 <MX_FMC_Init>
  MX_I2C3_Init();
 80016b2:	f000 f90f 	bl	80018d4 <MX_I2C3_Init>
  MX_LTDC_Init();
 80016b6:	f000 f94d 	bl	8001954 <MX_LTDC_Init>
  MX_SPI5_Init();
 80016ba:	f000 fa05 	bl	8001ac8 <MX_SPI5_Init>
  MX_TIM1_Init();
 80016be:	f000 fa39 	bl	8001b34 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80016c2:	f000 fa87 	bl	8001bd4 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 80016c6:	f000 faaf 	bl	8001c28 <MX_USB_OTG_HS_HCD_Init>
  /* USER CODE BEGIN 2 */

  L3GD20 m_gyro;
  Ball_control_data m_ball;
  L3GD20_init(&hspi5, &m_gyro);
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	4619      	mov	r1, r3
 80016d0:	4828      	ldr	r0, [pc, #160]	; (8001774 <main+0xe4>)
 80016d2:	f7ff fd5f 	bl	8001194 <L3GD20_init>
  ball_ctrl_init(&m_ball, 100, 100);
 80016d6:	463b      	mov	r3, r7
 80016d8:	2264      	movs	r2, #100	; 0x64
 80016da:	2164      	movs	r1, #100	; 0x64
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fb25 	bl	8000d2c <ball_ctrl_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  L3GD20_readRawData(&m_gyro);
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fdd8 	bl	800129c <L3GD20_readRawData>
	  L3GD20_convertRawData(&m_gyro);
 80016ec:	f107 031c 	add.w	r3, r7, #28
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fe1d 	bl	8001330 <L3GD20_convertRawData>
	  ball_update_ctrl_angles(&m_ball, &m_gyro, 10);
 80016f6:	f107 011c 	add.w	r1, r7, #28
 80016fa:	463b      	mov	r3, r7
 80016fc:	220a      	movs	r2, #10
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fb52 	bl	8000da8 <ball_update_ctrl_angles>
	  ball_update_pos(&m_ball, 10);
 8001704:	463b      	mov	r3, r7
 8001706:	210a      	movs	r1, #10
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fb99 	bl	8000e40 <ball_update_pos>
	  ball_handle_collision(&m_ball, 250, 0, 150, 0);
 800170e:	4638      	mov	r0, r7
 8001710:	2300      	movs	r3, #0
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2396      	movs	r3, #150	; 0x96
 8001716:	2200      	movs	r2, #0
 8001718:	21fa      	movs	r1, #250	; 0xfa
 800171a:	f7ff fc85 	bl	8001028 <ball_handle_collision>

	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 800171e:	2101      	movs	r1, #1
 8001720:	4815      	ldr	r0, [pc, #84]	; (8001778 <main+0xe8>)
 8001722:	f002 f851 	bl	80037c8 <HAL_GPIO_ReadPin>
 8001726:	4603      	mov	r3, r0
 8001728:	2b01      	cmp	r3, #1
 800172a:	d103      	bne.n	8001734 <main+0xa4>
	  {
	  	  ball_ctrl_restetDrift(&m_ball);
 800172c:	463b      	mov	r3, r7
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fb23 	bl	8000d7a <ball_ctrl_restetDrift>
	  }

	  HAL_LTDC_SetWindowPosition_NoReload(&hltdc, m_ball.Y_screen_pos, m_ball.X_screen_pos, 1);
 8001734:	edd7 7a04 	vldr	s15, [r7, #16]
 8001738:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800173c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001744:	2301      	movs	r3, #1
 8001746:	ee17 2a90 	vmov	r2, s15
 800174a:	ee17 1a10 	vmov	r1, s14
 800174e:	480b      	ldr	r0, [pc, #44]	; (800177c <main+0xec>)
 8001750:	f003 fe85 	bl	800545e <HAL_LTDC_SetWindowPosition_NoReload>
	  /* Ask for LTDC reload within next vertical blanking*/
	  ReloadFlag = 0;
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <main+0xf0>)
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
	  HAL_LTDC_Reload(&hltdc,LTDC_SRCR_VBR);
 800175a:	2102      	movs	r1, #2
 800175c:	4807      	ldr	r0, [pc, #28]	; (800177c <main+0xec>)
 800175e:	f003 fe4f 	bl	8005400 <HAL_LTDC_Reload>

	  while(ReloadFlag == 0) { }
 8001762:	bf00      	nop
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <main+0xf0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0fb      	beq.n	8001764 <main+0xd4>

	  HAL_Delay(10);
 800176c:	200a      	movs	r0, #10
 800176e:	f001 fa6b 	bl	8002c48 <HAL_Delay>
	  L3GD20_readRawData(&m_gyro);
 8001772:	e7b6      	b.n	80016e2 <main+0x52>
 8001774:	200000e4 	.word	0x200000e4
 8001778:	40020000 	.word	0x40020000
 800177c:	20000144 	.word	0x20000144
 8001780:	2000002c 	.word	0x2000002c

08001784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b0a0      	sub	sp, #128	; 0x80
 8001788:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

	  /* Enable Power Control clock */
	  __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	4b2c      	ldr	r3, [pc, #176]	; (8001840 <SystemClock_Config+0xbc>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a2b      	ldr	r2, [pc, #172]	; (8001840 <SystemClock_Config+0xbc>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b29      	ldr	r3, [pc, #164]	; (8001840 <SystemClock_Config+0xbc>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]

	  /* The voltage scaling allows optimizing the power consumption when the device is
	     clocked below the maximum system frequency, to update the voltage scaling value
	     regarding system frequency refer to product datasheet.  */
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	4b26      	ldr	r3, [pc, #152]	; (8001844 <SystemClock_Config+0xc0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a25      	ldr	r2, [pc, #148]	; (8001844 <SystemClock_Config+0xc0>)
 80017b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	4b23      	ldr	r3, [pc, #140]	; (8001844 <SystemClock_Config+0xc0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]

	  /*##-1- System Clock Configuration #########################################*/
	  /* Enable HSE Oscillator and activate PLL with HSE as source */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017c2:	2301      	movs	r3, #1
 80017c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ca:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017cc:	2302      	movs	r3, #2
 80017ce:	657b      	str	r3, [r7, #84]	; 0x54
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017d4:	65bb      	str	r3, [r7, #88]	; 0x58
	  RCC_OscInitStruct.PLL.PLLM = 8;
 80017d6:	2308      	movs	r3, #8
 80017d8:	65fb      	str	r3, [r7, #92]	; 0x5c
	  RCC_OscInitStruct.PLL.PLLN = 360;
 80017da:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80017de:	663b      	str	r3, [r7, #96]	; 0x60
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017e0:	2302      	movs	r3, #2
 80017e2:	667b      	str	r3, [r7, #100]	; 0x64
	  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017e4:	2307      	movs	r3, #7
 80017e6:	66bb      	str	r3, [r7, #104]	; 0x68
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80017e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017ec:	4618      	mov	r0, r3
 80017ee:	f004 f85f 	bl	80058b0 <HAL_RCC_OscConfig>

	  /* Activate the Over-Drive mode */
	  HAL_PWREx_EnableOverDrive();
 80017f2:	f004 f80d 	bl	8005810 <HAL_PWREx_EnableOverDrive>

	  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	     clocks dividers */
	  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80017f6:	230f      	movs	r3, #15
 80017f8:	66fb      	str	r3, [r7, #108]	; 0x6c
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fa:	2302      	movs	r3, #2
 80017fc:	673b      	str	r3, [r7, #112]	; 0x70
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fe:	2300      	movs	r3, #0
 8001800:	677b      	str	r3, [r7, #116]	; 0x74
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001802:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001806:	67bb      	str	r3, [r7, #120]	; 0x78
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180c:	67fb      	str	r3, [r7, #124]	; 0x7c
	  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800180e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001812:	2105      	movs	r1, #5
 8001814:	4618      	mov	r0, r3
 8001816:	f004 fabb 	bl	8005d90 <HAL_RCC_ClockConfig>
	  /* LCD clock configuration */
	  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 MHz */
	  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 MHz */
	  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 MHz */
	  /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDIVR_8 = 48/8 = 6 MHz */
	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800181a:	2308      	movs	r3, #8
 800181c:	60fb      	str	r3, [r7, #12]
	  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800181e:	23c0      	movs	r3, #192	; 0xc0
 8001820:	61fb      	str	r3, [r7, #28]
	  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001822:	2304      	movs	r3, #4
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
	  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001826:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800182a:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	4618      	mov	r0, r3
 8001832:	f004 fcd1 	bl	80061d8 <HAL_RCCEx_PeriphCLKConfig>
}
 8001836:	bf00      	nop
 8001838:	3780      	adds	r7, #128	; 0x80
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	40007000 	.word	0x40007000

08001848 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <MX_CRC_Init+0x20>)
 800184e:	4a07      	ldr	r2, [pc, #28]	; (800186c <MX_CRC_Init+0x24>)
 8001850:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <MX_CRC_Init+0x20>)
 8001854:	f001 fafc 	bl	8002e50 <HAL_CRC_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800185e:	f000 fb91 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2000013c 	.word	0x2000013c
 800186c:	40023000 	.word	0x40023000

08001870 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001874:	4b15      	ldr	r3, [pc, #84]	; (80018cc <MX_DMA2D_Init+0x5c>)
 8001876:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <MX_DMA2D_Init+0x60>)
 8001878:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800187a:	4b14      	ldr	r3, [pc, #80]	; (80018cc <MX_DMA2D_Init+0x5c>)
 800187c:	2200      	movs	r2, #0
 800187e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <MX_DMA2D_Init+0x5c>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_DMA2D_Init+0x5c>)
 8001888:	2200      	movs	r2, #0
 800188a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <MX_DMA2D_Init+0x5c>)
 800188e:	2200      	movs	r2, #0
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <MX_DMA2D_Init+0x5c>)
 8001894:	2200      	movs	r2, #0
 8001896:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_DMA2D_Init+0x5c>)
 800189a:	2200      	movs	r2, #0
 800189c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <MX_DMA2D_Init+0x5c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80018a4:	4809      	ldr	r0, [pc, #36]	; (80018cc <MX_DMA2D_Init+0x5c>)
 80018a6:	f001 faef 	bl	8002e88 <HAL_DMA2D_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80018b0:	f000 fb68 	bl	8001f84 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80018b4:	2101      	movs	r1, #1
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_DMA2D_Init+0x5c>)
 80018b8:	f001 fc40 	bl	800313c <HAL_DMA2D_ConfigLayer>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80018c2:	f000 fb5f 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000530 	.word	0x20000530
 80018d0:	4002b000 	.word	0x4002b000

080018d4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018d8:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <MX_I2C3_Init+0x74>)
 80018da:	4a1c      	ldr	r2, [pc, #112]	; (800194c <MX_I2C3_Init+0x78>)
 80018dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80018de:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <MX_I2C3_Init+0x74>)
 80018e0:	4a1b      	ldr	r2, [pc, #108]	; (8001950 <MX_I2C3_Init+0x7c>)
 80018e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018e4:	4b18      	ldr	r3, [pc, #96]	; (8001948 <MX_I2C3_Init+0x74>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <MX_I2C3_Init+0x74>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <MX_I2C3_Init+0x74>)
 80018f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018f6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f8:	4b13      	ldr	r3, [pc, #76]	; (8001948 <MX_I2C3_Init+0x74>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MX_I2C3_Init+0x74>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001904:	4b10      	ldr	r3, [pc, #64]	; (8001948 <MX_I2C3_Init+0x74>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800190a:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_I2C3_Init+0x74>)
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001910:	480d      	ldr	r0, [pc, #52]	; (8001948 <MX_I2C3_Init+0x74>)
 8001912:	f003 f9fb 	bl	8004d0c <HAL_I2C_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800191c:	f000 fb32 	bl	8001f84 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001920:	2100      	movs	r1, #0
 8001922:	4809      	ldr	r0, [pc, #36]	; (8001948 <MX_I2C3_Init+0x74>)
 8001924:	f003 fb2a 	bl	8004f7c <HAL_I2CEx_ConfigAnalogFilter>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800192e:	f000 fb29 	bl	8001f84 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001932:	2100      	movs	r1, #0
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <MX_I2C3_Init+0x74>)
 8001936:	f003 fb5d 	bl	8004ff4 <HAL_I2CEx_ConfigDigitalFilter>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001940:	f000 fb20 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000090 	.word	0x20000090
 800194c:	40005c00 	.word	0x40005c00
 8001950:	000186a0 	.word	0x000186a0

08001954 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b09a      	sub	sp, #104	; 0x68
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800195a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800195e:	2234      	movs	r2, #52	; 0x34
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f006 fec8 	bl	80086f8 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001968:	463b      	mov	r3, r7
 800196a:	2234      	movs	r2, #52	; 0x34
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f006 fec2 	bl	80086f8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */
  ili9341_Init();
 8001974:	f7ff fd28 	bl	80013c8 <ili9341_Init>
  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001978:	4b50      	ldr	r3, [pc, #320]	; (8001abc <MX_LTDC_Init+0x168>)
 800197a:	4a51      	ldr	r2, [pc, #324]	; (8001ac0 <MX_LTDC_Init+0x16c>)
 800197c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800197e:	4b4f      	ldr	r3, [pc, #316]	; (8001abc <MX_LTDC_Init+0x168>)
 8001980:	2200      	movs	r2, #0
 8001982:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001984:	4b4d      	ldr	r3, [pc, #308]	; (8001abc <MX_LTDC_Init+0x168>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800198a:	4b4c      	ldr	r3, [pc, #304]	; (8001abc <MX_LTDC_Init+0x168>)
 800198c:	2200      	movs	r2, #0
 800198e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001990:	4b4a      	ldr	r3, [pc, #296]	; (8001abc <MX_LTDC_Init+0x168>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001996:	4b49      	ldr	r3, [pc, #292]	; (8001abc <MX_LTDC_Init+0x168>)
 8001998:	2209      	movs	r2, #9
 800199a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800199c:	4b47      	ldr	r3, [pc, #284]	; (8001abc <MX_LTDC_Init+0x168>)
 800199e:	2201      	movs	r2, #1
 80019a0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80019a2:	4b46      	ldr	r3, [pc, #280]	; (8001abc <MX_LTDC_Init+0x168>)
 80019a4:	221d      	movs	r2, #29
 80019a6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80019a8:	4b44      	ldr	r3, [pc, #272]	; (8001abc <MX_LTDC_Init+0x168>)
 80019aa:	2203      	movs	r2, #3
 80019ac:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80019ae:	4b43      	ldr	r3, [pc, #268]	; (8001abc <MX_LTDC_Init+0x168>)
 80019b0:	f240 120d 	movw	r2, #269	; 0x10d
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80019b6:	4b41      	ldr	r3, [pc, #260]	; (8001abc <MX_LTDC_Init+0x168>)
 80019b8:	f240 1243 	movw	r2, #323	; 0x143
 80019bc:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80019be:	4b3f      	ldr	r3, [pc, #252]	; (8001abc <MX_LTDC_Init+0x168>)
 80019c0:	f240 1217 	movw	r2, #279	; 0x117
 80019c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80019c6:	4b3d      	ldr	r3, [pc, #244]	; (8001abc <MX_LTDC_Init+0x168>)
 80019c8:	f240 1247 	movw	r2, #327	; 0x147
 80019cc:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80019ce:	4b3b      	ldr	r3, [pc, #236]	; (8001abc <MX_LTDC_Init+0x168>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80019d6:	4b39      	ldr	r3, [pc, #228]	; (8001abc <MX_LTDC_Init+0x168>)
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80019de:	4b37      	ldr	r3, [pc, #220]	; (8001abc <MX_LTDC_Init+0x168>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80019e6:	4835      	ldr	r0, [pc, #212]	; (8001abc <MX_LTDC_Init+0x168>)
 80019e8:	f003 fb44 	bl	8005074 <HAL_LTDC_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_LTDC_Init+0xa2>
  {
    Error_Handler();
 80019f2:	f000 fac7 	bl	8001f84 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 80019fa:	23f0      	movs	r3, #240	; 0xf0
 80019fc:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 8001a02:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001a06:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8001a0c:	23ff      	movs	r3, #255	; 0xff
 8001a0e:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001a14:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a18:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0x0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8001a22:	23f0      	movs	r3, #240	; 0xf0
 8001a24:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8001a26:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001a2a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 255;
 8001a32:	23ff      	movs	r3, #255	; 0xff
 8001a34:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001a3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a42:	2200      	movs	r2, #0
 8001a44:	4619      	mov	r1, r3
 8001a46:	481d      	ldr	r0, [pc, #116]	; (8001abc <MX_LTDC_Init+0x168>)
 8001a48:	f003 fc9c 	bl	8005384 <HAL_LTDC_ConfigLayer>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_LTDC_Init+0x102>
  {
    Error_Handler();
 8001a52:	f000 fa97 	bl	8001f84 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 60;
 8001a5a:	233c      	movs	r3, #60	; 0x3c
 8001a5c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 60;
 8001a62:	233c      	movs	r3, #60	; 0x3c
 8001a64:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001a66:	2302      	movs	r3, #2
 8001a68:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 255;
 8001a6a:	23ff      	movs	r3, #255	; 0xff
 8001a6c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 255;
 8001a6e:	23ff      	movs	r3, #255	; 0xff
 8001a70:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001a72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a76:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001a78:	2307      	movs	r3, #7
 8001a7a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = (uint32_t)&ball2;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_LTDC_Init+0x170>)
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 56;
 8001a80:	2338      	movs	r3, #56	; 0x38
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 57;
 8001a84:	2339      	movs	r3, #57	; 0x39
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4806      	ldr	r0, [pc, #24]	; (8001abc <MX_LTDC_Init+0x168>)
 8001aa2:	f003 fc6f 	bl	8005384 <HAL_LTDC_ConfigLayer>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_LTDC_Init+0x15c>
  {
    Error_Handler();
 8001aac:	f000 fa6a 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  pLayerCfg1.FBStartAdress = (uint32_t)&ball2;
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <MX_LTDC_Init+0x170>)
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END LTDC_Init 2 */

}
 8001ab4:	bf00      	nop
 8001ab6:	3768      	adds	r7, #104	; 0x68
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000144 	.word	0x20000144
 8001ac0:	40016800 	.word	0x40016800
 8001ac4:	080091b8 	.word	0x080091b8

08001ac8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001acc:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <MX_SPI5_Init+0x64>)
 8001ace:	4a18      	ldr	r2, [pc, #96]	; (8001b30 <MX_SPI5_Init+0x68>)
 8001ad0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001ad2:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <MX_SPI5_Init+0x64>)
 8001ad4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ad8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001ada:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <MX_SPI5_Init+0x64>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <MX_SPI5_Init+0x64>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <MX_SPI5_Init+0x64>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <MX_SPI5_Init+0x64>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <MX_SPI5_Init+0x64>)
 8001af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <MX_SPI5_Init+0x64>)
 8001afc:	2218      	movs	r2, #24
 8001afe:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b00:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <MX_SPI5_Init+0x64>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <MX_SPI5_Init+0x64>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <MX_SPI5_Init+0x64>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <MX_SPI5_Init+0x64>)
 8001b14:	220a      	movs	r2, #10
 8001b16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001b18:	4804      	ldr	r0, [pc, #16]	; (8001b2c <MX_SPI5_Init+0x64>)
 8001b1a:	f004 fd4f 	bl	80065bc <HAL_SPI_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001b24:	f000 fa2e 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200000e4 	.word	0x200000e4
 8001b30:	40015000 	.word	0x40015000

08001b34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3a:	f107 0308 	add.w	r3, r7, #8
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b48:	463b      	mov	r3, r7
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b50:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <MX_TIM1_Init+0x98>)
 8001b52:	4a1f      	ldr	r2, [pc, #124]	; (8001bd0 <MX_TIM1_Init+0x9c>)
 8001b54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b56:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <MX_TIM1_Init+0x98>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <MX_TIM1_Init+0x98>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b62:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <MX_TIM1_Init+0x98>)
 8001b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <MX_TIM1_Init+0x98>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b70:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <MX_TIM1_Init+0x98>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <MX_TIM1_Init+0x98>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b7c:	4813      	ldr	r0, [pc, #76]	; (8001bcc <MX_TIM1_Init+0x98>)
 8001b7e:	f005 f939 	bl	8006df4 <HAL_TIM_Base_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b88:	f000 f9fc 	bl	8001f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b92:	f107 0308 	add.w	r3, r7, #8
 8001b96:	4619      	mov	r1, r3
 8001b98:	480c      	ldr	r0, [pc, #48]	; (8001bcc <MX_TIM1_Init+0x98>)
 8001b9a:	f005 fa82 	bl	80070a2 <HAL_TIM_ConfigClockSource>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001ba4:	f000 f9ee 	bl	8001f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_TIM1_Init+0x98>)
 8001bb6:	f005 fc8d 	bl	80074d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001bc0:	f000 f9e0 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200004f0 	.word	0x200004f0
 8001bd0:	40010000 	.word	0x40010000

08001bd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <MX_USART1_UART_Init+0x50>)
 8001bdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001be4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001c0c:	f005 fcf2 	bl	80075f4 <HAL_UART_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c16:	f000 f9b5 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200001ec 	.word	0x200001ec
 8001c24:	40011000 	.word	0x40011000

08001c28 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001c2e:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <MX_USB_OTG_HS_HCD_Init+0x54>)
 8001c30:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001c34:	220c      	movs	r2, #12
 8001c36:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001c46:	2202      	movs	r2, #2
 8001c48:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001c64:	f001 fde1 	bl	800382a <HAL_HCD_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8001c6e:	f000 f989 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	2000022c 	.word	0x2000022c
 8001c7c:	40040000 	.word	0x40040000

08001c80 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
 8001c94:	615a      	str	r2, [r3, #20]
 8001c96:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001c98:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <MX_FMC_Init+0x98>)
 8001c9a:	4a20      	ldr	r2, [pc, #128]	; (8001d1c <MX_FMC_Init+0x9c>)
 8001c9c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <MX_FMC_Init+0x98>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001ca4:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <MX_FMC_Init+0x98>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001caa:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <MX_FMC_Init+0x98>)
 8001cac:	2204      	movs	r2, #4
 8001cae:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001cb0:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <MX_FMC_Init+0x98>)
 8001cb2:	2210      	movs	r2, #16
 8001cb4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001cb6:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <MX_FMC_Init+0x98>)
 8001cb8:	2240      	movs	r2, #64	; 0x40
 8001cba:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <MX_FMC_Init+0x98>)
 8001cbe:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001cc2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001cc4:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <MX_FMC_Init+0x98>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001cca:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <MX_FMC_Init+0x98>)
 8001ccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cd0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <MX_FMC_Init+0x98>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <MX_FMC_Init+0x98>)
 8001cda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001ce4:	2307      	movs	r3, #7
 8001ce6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001ce8:	2304      	movs	r3, #4
 8001cea:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001cec:	2307      	movs	r3, #7
 8001cee:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4805      	ldr	r0, [pc, #20]	; (8001d18 <MX_FMC_Init+0x98>)
 8001d02:	f004 fc27 	bl	8006554 <HAL_SDRAM_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001d0c:	f000 f93a 	bl	8001f84 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001d10:	bf00      	nop
 8001d12:	3720      	adds	r7, #32
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000570 	.word	0x20000570
 8001d1c:	a0000140 	.word	0xa0000140

08001d20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08e      	sub	sp, #56	; 0x38
 8001d24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
 8001d34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
 8001d3a:	4b7a      	ldr	r3, [pc, #488]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a79      	ldr	r2, [pc, #484]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b77      	ldr	r3, [pc, #476]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	623b      	str	r3, [r7, #32]
 8001d50:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	4b73      	ldr	r3, [pc, #460]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a72      	ldr	r2, [pc, #456]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001d5c:	f043 0320 	orr.w	r3, r3, #32
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b70      	ldr	r3, [pc, #448]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	61fb      	str	r3, [r7, #28]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	4b6c      	ldr	r3, [pc, #432]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a6b      	ldr	r2, [pc, #428]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b69      	ldr	r3, [pc, #420]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	4b65      	ldr	r3, [pc, #404]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a64      	ldr	r2, [pc, #400]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b62      	ldr	r3, [pc, #392]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	4b5e      	ldr	r3, [pc, #376]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a5d      	ldr	r2, [pc, #372]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b5b      	ldr	r3, [pc, #364]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b57      	ldr	r3, [pc, #348]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a56      	ldr	r2, [pc, #344]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b54      	ldr	r3, [pc, #336]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	4b50      	ldr	r3, [pc, #320]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a4f      	ldr	r2, [pc, #316]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001de8:	f043 0310 	orr.w	r3, r3, #16
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b4d      	ldr	r3, [pc, #308]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0310 	and.w	r3, r3, #16
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	4b49      	ldr	r3, [pc, #292]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a48      	ldr	r2, [pc, #288]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001e04:	f043 0308 	orr.w	r3, r3, #8
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b46      	ldr	r3, [pc, #280]	; (8001f24 <MX_GPIO_Init+0x204>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2116      	movs	r1, #22
 8001e1a:	4843      	ldr	r0, [pc, #268]	; (8001f28 <MX_GPIO_Init+0x208>)
 8001e1c:	f001 fcec 	bl	80037f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2180      	movs	r1, #128	; 0x80
 8001e24:	4841      	ldr	r0, [pc, #260]	; (8001f2c <MX_GPIO_Init+0x20c>)
 8001e26:	f001 fce7 	bl	80037f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001e30:	483f      	ldr	r0, [pc, #252]	; (8001f30 <MX_GPIO_Init+0x210>)
 8001e32:	f001 fce1 	bl	80037f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001e36:	2200      	movs	r2, #0
 8001e38:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001e3c:	483d      	ldr	r0, [pc, #244]	; (8001f34 <MX_GPIO_Init+0x214>)
 8001e3e:	f001 fcdb 	bl	80037f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001e42:	2316      	movs	r3, #22
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e46:	2301      	movs	r3, #1
 8001e48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e56:	4619      	mov	r1, r3
 8001e58:	4833      	ldr	r0, [pc, #204]	; (8001f28 <MX_GPIO_Init+0x208>)
 8001e5a:	f001 fa01 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001e5e:	f248 0307 	movw	r3, #32775	; 0x8007
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e64:	4b34      	ldr	r3, [pc, #208]	; (8001f38 <MX_GPIO_Init+0x218>)
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e70:	4619      	mov	r1, r3
 8001e72:	482e      	ldr	r0, [pc, #184]	; (8001f2c <MX_GPIO_Init+0x20c>)
 8001e74:	f001 f9f4 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4827      	ldr	r0, [pc, #156]	; (8001f2c <MX_GPIO_Init+0x20c>)
 8001e90:	f001 f9e6 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001e94:	2320      	movs	r3, #32
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e98:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <MX_GPIO_Init+0x218>)
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4820      	ldr	r0, [pc, #128]	; (8001f28 <MX_GPIO_Init+0x208>)
 8001ea8:	f001 f9da 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001eac:	2304      	movs	r3, #4
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	481f      	ldr	r0, [pc, #124]	; (8001f3c <MX_GPIO_Init+0x21c>)
 8001ec0:	f001 f9ce 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001ec4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4815      	ldr	r0, [pc, #84]	; (8001f30 <MX_GPIO_Init+0x210>)
 8001eda:	f001 f9c1 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001ede:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	2300      	movs	r3, #0
 8001eee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	480e      	ldr	r0, [pc, #56]	; (8001f30 <MX_GPIO_Init+0x210>)
 8001ef8:	f001 f9b2 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001efc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f02:	2301      	movs	r3, #1
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f12:	4619      	mov	r1, r3
 8001f14:	4807      	ldr	r0, [pc, #28]	; (8001f34 <MX_GPIO_Init+0x214>)
 8001f16:	f001 f9a3 	bl	8003260 <HAL_GPIO_Init>

}
 8001f1a:	bf00      	nop
 8001f1c:	3738      	adds	r7, #56	; 0x38
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40020800 	.word	0x40020800
 8001f2c:	40020000 	.word	0x40020000
 8001f30:	40020c00 	.word	0x40020c00
 8001f34:	40021800 	.word	0x40021800
 8001f38:	10120000 	.word	0x10120000
 8001f3c:	40020400 	.word	0x40020400

08001f40 <HAL_LTDC_ReloadEventCallback>:
  *x2 = 0;
  *y2 = 160 - index*4;
}

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  ReloadFlag = 1;
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <HAL_LTDC_ReloadEventCallback+0x1c>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	2000002c 	.word	0x2000002c

08001f60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d101      	bne.n	8001f76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f72:	f000 fe49 	bl	8002c08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40001000 	.word	0x40001000

08001f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001f98:	4819      	ldr	r0, [pc, #100]	; (8002000 <SPIx_Init+0x6c>)
 8001f9a:	f004 fe71 	bl	8006c80 <HAL_SPI_GetState>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d12b      	bne.n	8001ffc <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001fa4:	4b16      	ldr	r3, [pc, #88]	; (8002000 <SPIx_Init+0x6c>)
 8001fa6:	4a17      	ldr	r2, [pc, #92]	; (8002004 <SPIx_Init+0x70>)
 8001fa8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <SPIx_Init+0x6c>)
 8001fac:	2218      	movs	r2, #24
 8001fae:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001fb0:	4b13      	ldr	r3, [pc, #76]	; (8002000 <SPIx_Init+0x6c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001fb6:	4b12      	ldr	r3, [pc, #72]	; (8002000 <SPIx_Init+0x6c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001fbc:	4b10      	ldr	r3, [pc, #64]	; (8002000 <SPIx_Init+0x6c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001fc2:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <SPIx_Init+0x6c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001fc8:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <SPIx_Init+0x6c>)
 8001fca:	2207      	movs	r2, #7
 8001fcc:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001fce:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <SPIx_Init+0x6c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <SPIx_Init+0x6c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <SPIx_Init+0x6c>)
 8001fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fe0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <SPIx_Init+0x6c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <SPIx_Init+0x6c>)
 8001fea:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fee:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001ff0:	4803      	ldr	r0, [pc, #12]	; (8002000 <SPIx_Init+0x6c>)
 8001ff2:	f000 f833 	bl	800205c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001ff6:	4802      	ldr	r0, [pc, #8]	; (8002000 <SPIx_Init+0x6c>)
 8001ff8:	f004 fae0 	bl	80065bc <HAL_SPI_Init>
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000030 	.word	0x20000030
 8002004:	40015000 	.word	0x40015000

08002008 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <SPIx_Write+0x34>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	1db9      	adds	r1, r7, #6
 800201c:	2201      	movs	r2, #1
 800201e:	4808      	ldr	r0, [pc, #32]	; (8002040 <SPIx_Write+0x38>)
 8002020:	f004 fb58 	bl	80066d4 <HAL_SPI_Transmit>
 8002024:	4603      	mov	r3, r0
 8002026:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800202e:	f000 f809 	bl	8002044 <SPIx_Error>
  }
}
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000000 	.word	0x20000000
 8002040:	20000030 	.word	0x20000030

08002044 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002048:	4803      	ldr	r0, [pc, #12]	; (8002058 <SPIx_Error+0x14>)
 800204a:	f004 fb1b 	bl	8006684 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800204e:	f7ff ffa1 	bl	8001f94 <SPIx_Init>
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000030 	.word	0x20000030

0800205c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002064:	2300      	movs	r3, #0
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <SPIx_MspInit+0x6c>)
 800206a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206c:	4a16      	ldr	r2, [pc, #88]	; (80020c8 <SPIx_MspInit+0x6c>)
 800206e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002072:	6453      	str	r3, [r2, #68]	; 0x44
 8002074:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <SPIx_MspInit+0x6c>)
 8002076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <SPIx_MspInit+0x6c>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	4a0f      	ldr	r2, [pc, #60]	; (80020c8 <SPIx_MspInit+0x6c>)
 800208a:	f043 0320 	orr.w	r3, r3, #32
 800208e:	6313      	str	r3, [r2, #48]	; 0x30
 8002090:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <SPIx_MspInit+0x6c>)
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	f003 0320 	and.w	r3, r3, #32
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800209c:	f44f 7360 	mov.w	r3, #896	; 0x380
 80020a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80020a6:	2302      	movs	r3, #2
 80020a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80020aa:	2301      	movs	r3, #1
 80020ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80020ae:	2305      	movs	r3, #5
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	4619      	mov	r1, r3
 80020b8:	4804      	ldr	r0, [pc, #16]	; (80020cc <SPIx_MspInit+0x70>)
 80020ba:	f001 f8d1 	bl	8003260 <HAL_GPIO_Init>
}
 80020be:	bf00      	nop
 80020c0:	3728      	adds	r7, #40	; 0x28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40021400 	.word	0x40021400

080020d0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80020d6:	4b36      	ldr	r3, [pc, #216]	; (80021b0 <LCD_IO_Init+0xe0>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d164      	bne.n	80021a8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80020de:	4b34      	ldr	r3, [pc, #208]	; (80021b0 <LCD_IO_Init+0xe0>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80020e4:	2300      	movs	r3, #0
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	4b32      	ldr	r3, [pc, #200]	; (80021b4 <LCD_IO_Init+0xe4>)
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	4a31      	ldr	r2, [pc, #196]	; (80021b4 <LCD_IO_Init+0xe4>)
 80020ee:	f043 0308 	orr.w	r3, r3, #8
 80020f2:	6313      	str	r3, [r2, #48]	; 0x30
 80020f4:	4b2f      	ldr	r3, [pc, #188]	; (80021b4 <LCD_IO_Init+0xe4>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002100:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002104:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002106:	2301      	movs	r3, #1
 8002108:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800210e:	2302      	movs	r3, #2
 8002110:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002112:	f107 030c 	add.w	r3, r7, #12
 8002116:	4619      	mov	r1, r3
 8002118:	4827      	ldr	r0, [pc, #156]	; (80021b8 <LCD_IO_Init+0xe8>)
 800211a:	f001 f8a1 	bl	8003260 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <LCD_IO_Init+0xe4>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a23      	ldr	r2, [pc, #140]	; (80021b4 <LCD_IO_Init+0xe4>)
 8002128:	f043 0308 	orr.w	r3, r3, #8
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <LCD_IO_Init+0xe4>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800213a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800213e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002140:	2301      	movs	r3, #1
 8002142:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002148:	2302      	movs	r3, #2
 800214a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800214c:	f107 030c 	add.w	r3, r7, #12
 8002150:	4619      	mov	r1, r3
 8002152:	4819      	ldr	r0, [pc, #100]	; (80021b8 <LCD_IO_Init+0xe8>)
 8002154:	f001 f884 	bl	8003260 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002158:	2300      	movs	r3, #0
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <LCD_IO_Init+0xe4>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	4a14      	ldr	r2, [pc, #80]	; (80021b4 <LCD_IO_Init+0xe4>)
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6313      	str	r3, [r2, #48]	; 0x30
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <LCD_IO_Init+0xe4>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	603b      	str	r3, [r7, #0]
 8002172:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002174:	2304      	movs	r3, #4
 8002176:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002178:	2301      	movs	r3, #1
 800217a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002180:	2302      	movs	r3, #2
 8002182:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002184:	f107 030c 	add.w	r3, r7, #12
 8002188:	4619      	mov	r1, r3
 800218a:	480c      	ldr	r0, [pc, #48]	; (80021bc <LCD_IO_Init+0xec>)
 800218c:	f001 f868 	bl	8003260 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002190:	2200      	movs	r2, #0
 8002192:	2104      	movs	r1, #4
 8002194:	4809      	ldr	r0, [pc, #36]	; (80021bc <LCD_IO_Init+0xec>)
 8002196:	f001 fb2f 	bl	80037f8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800219a:	2201      	movs	r2, #1
 800219c:	2104      	movs	r1, #4
 800219e:	4807      	ldr	r0, [pc, #28]	; (80021bc <LCD_IO_Init+0xec>)
 80021a0:	f001 fb2a 	bl	80037f8 <HAL_GPIO_WritePin>

    SPIx_Init();
 80021a4:	f7ff fef6 	bl	8001f94 <SPIx_Init>
  }
}
 80021a8:	bf00      	nop
 80021aa:	3720      	adds	r7, #32
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000088 	.word	0x20000088
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020c00 	.word	0x40020c00
 80021bc:	40020800 	.word	0x40020800

080021c0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80021ca:	2201      	movs	r2, #1
 80021cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021d0:	480a      	ldr	r0, [pc, #40]	; (80021fc <LCD_IO_WriteData+0x3c>)
 80021d2:	f001 fb11 	bl	80037f8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80021d6:	2200      	movs	r2, #0
 80021d8:	2104      	movs	r1, #4
 80021da:	4809      	ldr	r0, [pc, #36]	; (8002200 <LCD_IO_WriteData+0x40>)
 80021dc:	f001 fb0c 	bl	80037f8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff ff10 	bl	8002008 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80021e8:	2201      	movs	r2, #1
 80021ea:	2104      	movs	r1, #4
 80021ec:	4804      	ldr	r0, [pc, #16]	; (8002200 <LCD_IO_WriteData+0x40>)
 80021ee:	f001 fb03 	bl	80037f8 <HAL_GPIO_WritePin>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40020c00 	.word	0x40020c00
 8002200:	40020800 	.word	0x40020800

08002204 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800220e:	2200      	movs	r2, #0
 8002210:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002214:	480a      	ldr	r0, [pc, #40]	; (8002240 <LCD_IO_WriteReg+0x3c>)
 8002216:	f001 faef 	bl	80037f8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800221a:	2200      	movs	r2, #0
 800221c:	2104      	movs	r1, #4
 800221e:	4809      	ldr	r0, [pc, #36]	; (8002244 <LCD_IO_WriteReg+0x40>)
 8002220:	f001 faea 	bl	80037f8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	b29b      	uxth	r3, r3
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff feed 	bl	8002008 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800222e:	2201      	movs	r2, #1
 8002230:	2104      	movs	r1, #4
 8002232:	4804      	ldr	r0, [pc, #16]	; (8002244 <LCD_IO_WriteReg+0x40>)
 8002234:	f001 fae0 	bl	80037f8 <HAL_GPIO_WritePin>
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40020c00 	.word	0x40020c00
 8002244:	40020800 	.word	0x40020800

08002248 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 fcf9 	bl	8002c48 <HAL_Delay>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_MspInit+0x54>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	4a11      	ldr	r2, [pc, #68]	; (80022b4 <HAL_MspInit+0x54>)
 8002270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002274:	6453      	str	r3, [r2, #68]	; 0x44
 8002276:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <HAL_MspInit+0x54>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	603b      	str	r3, [r7, #0]
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_MspInit+0x54>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <HAL_MspInit+0x54>)
 800228c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002290:	6413      	str	r3, [r2, #64]	; 0x40
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_MspInit+0x54>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	210f      	movs	r1, #15
 80022a2:	f06f 0001 	mvn.w	r0, #1
 80022a6:	f000 fda9 	bl	8002dfc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800

080022b8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <HAL_CRC_MspInit+0x3c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d10d      	bne.n	80022e6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <HAL_CRC_MspInit+0x40>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a09      	ldr	r2, [pc, #36]	; (80022f8 <HAL_CRC_MspInit+0x40>)
 80022d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <HAL_CRC_MspInit+0x40>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40023000 	.word	0x40023000
 80022f8:	40023800 	.word	0x40023800

080022fc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0e      	ldr	r2, [pc, #56]	; (8002344 <HAL_DMA2D_MspInit+0x48>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d115      	bne.n	800233a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <HAL_DMA2D_MspInit+0x4c>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a0c      	ldr	r2, [pc, #48]	; (8002348 <HAL_DMA2D_MspInit+0x4c>)
 8002318:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <HAL_DMA2D_MspInit+0x4c>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800232a:	2200      	movs	r2, #0
 800232c:	2105      	movs	r1, #5
 800232e:	205a      	movs	r0, #90	; 0x5a
 8002330:	f000 fd64 	bl	8002dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002334:	205a      	movs	r0, #90	; 0x5a
 8002336:	f000 fd7d 	bl	8002e34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	4002b000 	.word	0x4002b000
 8002348:	40023800 	.word	0x40023800

0800234c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	; 0x28
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a29      	ldr	r2, [pc, #164]	; (8002410 <HAL_I2C_MspInit+0xc4>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d14b      	bne.n	8002406 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	4b28      	ldr	r3, [pc, #160]	; (8002414 <HAL_I2C_MspInit+0xc8>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a27      	ldr	r2, [pc, #156]	; (8002414 <HAL_I2C_MspInit+0xc8>)
 8002378:	f043 0304 	orr.w	r3, r3, #4
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b25      	ldr	r3, [pc, #148]	; (8002414 <HAL_I2C_MspInit+0xc8>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	4b21      	ldr	r3, [pc, #132]	; (8002414 <HAL_I2C_MspInit+0xc8>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a20      	ldr	r2, [pc, #128]	; (8002414 <HAL_I2C_MspInit+0xc8>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <HAL_I2C_MspInit+0xc8>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80023a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ac:	2312      	movs	r3, #18
 80023ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023b0:	2301      	movs	r3, #1
 80023b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b4:	2300      	movs	r3, #0
 80023b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023b8:	2304      	movs	r3, #4
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	4619      	mov	r1, r3
 80023c2:	4815      	ldr	r0, [pc, #84]	; (8002418 <HAL_I2C_MspInit+0xcc>)
 80023c4:	f000 ff4c 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80023c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ce:	2312      	movs	r3, #18
 80023d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023d2:	2301      	movs	r3, #1
 80023d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023da:	2304      	movs	r3, #4
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	4619      	mov	r1, r3
 80023e4:	480d      	ldr	r0, [pc, #52]	; (800241c <HAL_I2C_MspInit+0xd0>)
 80023e6:	f000 ff3b 	bl	8003260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <HAL_I2C_MspInit+0xc8>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	4a08      	ldr	r2, [pc, #32]	; (8002414 <HAL_I2C_MspInit+0xc8>)
 80023f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023f8:	6413      	str	r3, [r2, #64]	; 0x40
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_I2C_MspInit+0xc8>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002406:	bf00      	nop
 8002408:	3728      	adds	r7, #40	; 0x28
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40005c00 	.word	0x40005c00
 8002414:	40023800 	.word	0x40023800
 8002418:	40020800 	.word	0x40020800
 800241c:	40020000 	.word	0x40020000

08002420 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08e      	sub	sp, #56	; 0x38
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a7b      	ldr	r2, [pc, #492]	; (800262c <HAL_LTDC_MspInit+0x20c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	f040 80f0 	bne.w	8002624 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002444:	2300      	movs	r3, #0
 8002446:	623b      	str	r3, [r7, #32]
 8002448:	4b79      	ldr	r3, [pc, #484]	; (8002630 <HAL_LTDC_MspInit+0x210>)
 800244a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244c:	4a78      	ldr	r2, [pc, #480]	; (8002630 <HAL_LTDC_MspInit+0x210>)
 800244e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002452:	6453      	str	r3, [r2, #68]	; 0x44
 8002454:	4b76      	ldr	r3, [pc, #472]	; (8002630 <HAL_LTDC_MspInit+0x210>)
 8002456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002458:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800245c:	623b      	str	r3, [r7, #32]
 800245e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
 8002464:	4b72      	ldr	r3, [pc, #456]	; (8002630 <HAL_LTDC_MspInit+0x210>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	4a71      	ldr	r2, [pc, #452]	; (8002630 <HAL_LTDC_MspInit+0x210>)
 800246a:	f043 0320 	orr.w	r3, r3, #32
 800246e:	6313      	str	r3, [r2, #48]	; 0x30
 8002470:	4b6f      	ldr	r3, [pc, #444]	; (8002630 <HAL_LTDC_MspInit+0x210>)
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247c:	2300      	movs	r3, #0
 800247e:	61bb      	str	r3, [r7, #24]
 8002480:	4b6b      	ldr	r3, [pc, #428]	; (8002630 <HAL_LTDC_MspInit+0x210>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	4a6a      	ldr	r2, [pc, #424]	; (8002630 <HAL_LTDC_MspInit+0x210>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6313      	str	r3, [r2, #48]	; 0x30
 800248c:	4b68      	ldr	r3, [pc, #416]	; (8002630 <HAL_LTDC_MspInit+0x210>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	4b64      	ldr	r3, [pc, #400]	; (8002630 <HAL_LTDC_MspInit+0x210>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	4a63      	ldr	r2, [pc, #396]	; (8002630 <HAL_LTDC_MspInit+0x210>)
 80024a2:	f043 0302 	orr.w	r3, r3, #2
 80024a6:	6313      	str	r3, [r2, #48]	; 0x30
 80024a8:	4b61      	ldr	r3, [pc, #388]	; (8002630 <HAL_LTDC_MspInit+0x210>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	4b5d      	ldr	r3, [pc, #372]	; (8002630 <HAL_LTDC_MspInit+0x210>)
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	4a5c      	ldr	r2, [pc, #368]	; (8002630 <HAL_LTDC_MspInit+0x210>)
 80024be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024c2:	6313      	str	r3, [r2, #48]	; 0x30
 80024c4:	4b5a      	ldr	r3, [pc, #360]	; (8002630 <HAL_LTDC_MspInit+0x210>)
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d0:	2300      	movs	r3, #0
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	4b56      	ldr	r3, [pc, #344]	; (8002630 <HAL_LTDC_MspInit+0x210>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	4a55      	ldr	r2, [pc, #340]	; (8002630 <HAL_LTDC_MspInit+0x210>)
 80024da:	f043 0304 	orr.w	r3, r3, #4
 80024de:	6313      	str	r3, [r2, #48]	; 0x30
 80024e0:	4b53      	ldr	r3, [pc, #332]	; (8002630 <HAL_LTDC_MspInit+0x210>)
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ec:	2300      	movs	r3, #0
 80024ee:	60bb      	str	r3, [r7, #8]
 80024f0:	4b4f      	ldr	r3, [pc, #316]	; (8002630 <HAL_LTDC_MspInit+0x210>)
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	4a4e      	ldr	r2, [pc, #312]	; (8002630 <HAL_LTDC_MspInit+0x210>)
 80024f6:	f043 0308 	orr.w	r3, r3, #8
 80024fa:	6313      	str	r3, [r2, #48]	; 0x30
 80024fc:	4b4c      	ldr	r3, [pc, #304]	; (8002630 <HAL_LTDC_MspInit+0x210>)
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	2302      	movs	r3, #2
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002516:	2300      	movs	r3, #0
 8002518:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800251a:	230e      	movs	r3, #14
 800251c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800251e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002522:	4619      	mov	r1, r3
 8002524:	4843      	ldr	r0, [pc, #268]	; (8002634 <HAL_LTDC_MspInit+0x214>)
 8002526:	f000 fe9b 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800252a:	f641 0358 	movw	r3, #6232	; 0x1858
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002538:	2300      	movs	r3, #0
 800253a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800253c:	230e      	movs	r3, #14
 800253e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002544:	4619      	mov	r1, r3
 8002546:	483c      	ldr	r0, [pc, #240]	; (8002638 <HAL_LTDC_MspInit+0x218>)
 8002548:	f000 fe8a 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800254c:	2303      	movs	r3, #3
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002558:	2300      	movs	r3, #0
 800255a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800255c:	2309      	movs	r3, #9
 800255e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002564:	4619      	mov	r1, r3
 8002566:	4835      	ldr	r0, [pc, #212]	; (800263c <HAL_LTDC_MspInit+0x21c>)
 8002568:	f000 fe7a 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800256c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2300      	movs	r3, #0
 800257c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800257e:	230e      	movs	r3, #14
 8002580:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002586:	4619      	mov	r1, r3
 8002588:	482c      	ldr	r0, [pc, #176]	; (800263c <HAL_LTDC_MspInit+0x21c>)
 800258a:	f000 fe69 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800258e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259c:	2300      	movs	r3, #0
 800259e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025a0:	230e      	movs	r3, #14
 80025a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a8:	4619      	mov	r1, r3
 80025aa:	4825      	ldr	r0, [pc, #148]	; (8002640 <HAL_LTDC_MspInit+0x220>)
 80025ac:	f000 fe58 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80025b0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	2300      	movs	r3, #0
 80025c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025c2:	230e      	movs	r3, #14
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ca:	4619      	mov	r1, r3
 80025cc:	481d      	ldr	r0, [pc, #116]	; (8002644 <HAL_LTDC_MspInit+0x224>)
 80025ce:	f000 fe47 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80025d2:	2348      	movs	r3, #72	; 0x48
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025de:	2300      	movs	r3, #0
 80025e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025e2:	230e      	movs	r3, #14
 80025e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ea:	4619      	mov	r1, r3
 80025ec:	4816      	ldr	r0, [pc, #88]	; (8002648 <HAL_LTDC_MspInit+0x228>)
 80025ee:	f000 fe37 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80025f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	2300      	movs	r3, #0
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002604:	2309      	movs	r3, #9
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800260c:	4619      	mov	r1, r3
 800260e:	480c      	ldr	r0, [pc, #48]	; (8002640 <HAL_LTDC_MspInit+0x220>)
 8002610:	f000 fe26 	bl	8003260 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002614:	2200      	movs	r2, #0
 8002616:	2105      	movs	r1, #5
 8002618:	2058      	movs	r0, #88	; 0x58
 800261a:	f000 fbef 	bl	8002dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800261e:	2058      	movs	r0, #88	; 0x58
 8002620:	f000 fc08 	bl	8002e34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002624:	bf00      	nop
 8002626:	3738      	adds	r7, #56	; 0x38
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40016800 	.word	0x40016800
 8002630:	40023800 	.word	0x40023800
 8002634:	40021400 	.word	0x40021400
 8002638:	40020000 	.word	0x40020000
 800263c:	40020400 	.word	0x40020400
 8002640:	40021800 	.word	0x40021800
 8002644:	40020800 	.word	0x40020800
 8002648:	40020c00 	.word	0x40020c00

0800264c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a19      	ldr	r2, [pc, #100]	; (80026d0 <HAL_SPI_MspInit+0x84>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d12c      	bne.n	80026c8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <HAL_SPI_MspInit+0x88>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	4a17      	ldr	r2, [pc, #92]	; (80026d4 <HAL_SPI_MspInit+0x88>)
 8002678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800267c:	6453      	str	r3, [r2, #68]	; 0x44
 800267e:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <HAL_SPI_MspInit+0x88>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <HAL_SPI_MspInit+0x88>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4a10      	ldr	r2, [pc, #64]	; (80026d4 <HAL_SPI_MspInit+0x88>)
 8002694:	f043 0320 	orr.w	r3, r3, #32
 8002698:	6313      	str	r3, [r2, #48]	; 0x30
 800269a:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <HAL_SPI_MspInit+0x88>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80026a6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80026aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ac:	2302      	movs	r3, #2
 80026ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b4:	2300      	movs	r3, #0
 80026b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80026b8:	2305      	movs	r3, #5
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	4619      	mov	r1, r3
 80026c2:	4805      	ldr	r0, [pc, #20]	; (80026d8 <HAL_SPI_MspInit+0x8c>)
 80026c4:	f000 fdcc 	bl	8003260 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80026c8:	bf00      	nop
 80026ca:	3728      	adds	r7, #40	; 0x28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40015000 	.word	0x40015000
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40021400 	.word	0x40021400

080026dc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a08      	ldr	r2, [pc, #32]	; (800270c <HAL_SPI_MspDeInit+0x30>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d10a      	bne.n	8002704 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <HAL_SPI_MspDeInit+0x34>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	4a07      	ldr	r2, [pc, #28]	; (8002710 <HAL_SPI_MspDeInit+0x34>)
 80026f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80026f8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80026fa:	f44f 7160 	mov.w	r1, #896	; 0x380
 80026fe:	4805      	ldr	r0, [pc, #20]	; (8002714 <HAL_SPI_MspDeInit+0x38>)
 8002700:	f000 ff58 	bl	80035b4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40015000 	.word	0x40015000
 8002710:	40023800 	.word	0x40023800
 8002714:	40021400 	.word	0x40021400

08002718 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0b      	ldr	r2, [pc, #44]	; (8002754 <HAL_TIM_Base_MspInit+0x3c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d10d      	bne.n	8002746 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_TIM_Base_MspInit+0x40>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4a09      	ldr	r2, [pc, #36]	; (8002758 <HAL_TIM_Base_MspInit+0x40>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6453      	str	r3, [r2, #68]	; 0x44
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <HAL_TIM_Base_MspInit+0x40>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40010000 	.word	0x40010000
 8002758:	40023800 	.word	0x40023800

0800275c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	; 0x28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <HAL_UART_MspInit+0x84>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d12c      	bne.n	80027d8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <HAL_UART_MspInit+0x88>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	4a17      	ldr	r2, [pc, #92]	; (80027e4 <HAL_UART_MspInit+0x88>)
 8002788:	f043 0310 	orr.w	r3, r3, #16
 800278c:	6453      	str	r3, [r2, #68]	; 0x44
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <HAL_UART_MspInit+0x88>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_UART_MspInit+0x88>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a10      	ldr	r2, [pc, #64]	; (80027e4 <HAL_UART_MspInit+0x88>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <HAL_UART_MspInit+0x88>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80027b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027bc:	2302      	movs	r3, #2
 80027be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c4:	2303      	movs	r3, #3
 80027c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027c8:	2307      	movs	r3, #7
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	4619      	mov	r1, r3
 80027d2:	4805      	ldr	r0, [pc, #20]	; (80027e8 <HAL_UART_MspInit+0x8c>)
 80027d4:	f000 fd44 	bl	8003260 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027d8:	bf00      	nop
 80027da:	3728      	adds	r7, #40	; 0x28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40011000 	.word	0x40011000
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40020000 	.word	0x40020000

080027ec <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08a      	sub	sp, #40	; 0x28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_HS)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a24      	ldr	r2, [pc, #144]	; (800289c <HAL_HCD_MspInit+0xb0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d141      	bne.n	8002892 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	4b23      	ldr	r3, [pc, #140]	; (80028a0 <HAL_HCD_MspInit+0xb4>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a22      	ldr	r2, [pc, #136]	; (80028a0 <HAL_HCD_MspInit+0xb4>)
 8002818:	f043 0302 	orr.w	r3, r3, #2
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b20      	ldr	r3, [pc, #128]	; (80028a0 <HAL_HCD_MspInit+0xb4>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800282a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800282e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002830:	2302      	movs	r3, #2
 8002832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002834:	2300      	movs	r3, #0
 8002836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002838:	2300      	movs	r3, #0
 800283a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800283c:	230c      	movs	r3, #12
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	4619      	mov	r1, r3
 8002846:	4817      	ldr	r0, [pc, #92]	; (80028a4 <HAL_HCD_MspInit+0xb8>)
 8002848:	f000 fd0a 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800284c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800285a:	f107 0314 	add.w	r3, r7, #20
 800285e:	4619      	mov	r1, r3
 8002860:	4810      	ldr	r0, [pc, #64]	; (80028a4 <HAL_HCD_MspInit+0xb8>)
 8002862:	f000 fcfd 	bl	8003260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <HAL_HCD_MspInit+0xb4>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	4a0c      	ldr	r2, [pc, #48]	; (80028a0 <HAL_HCD_MspInit+0xb4>)
 8002870:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002874:	6313      	str	r3, [r2, #48]	; 0x30
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <HAL_HCD_MspInit+0xb4>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8002882:	2200      	movs	r2, #0
 8002884:	2100      	movs	r1, #0
 8002886:	204d      	movs	r0, #77	; 0x4d
 8002888:	f000 fab8 	bl	8002dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800288c:	204d      	movs	r0, #77	; 0x4d
 800288e:	f000 fad1 	bl	8002e34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8002892:	bf00      	nop
 8002894:	3728      	adds	r7, #40	; 0x28
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40040000 	.word	0x40040000
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40020400 	.word	0x40020400

080028a8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80028bc:	4b3b      	ldr	r3, [pc, #236]	; (80029ac <HAL_FMC_MspInit+0x104>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d16f      	bne.n	80029a4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80028c4:	4b39      	ldr	r3, [pc, #228]	; (80029ac <HAL_FMC_MspInit+0x104>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	4b38      	ldr	r3, [pc, #224]	; (80029b0 <HAL_FMC_MspInit+0x108>)
 80028d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d2:	4a37      	ldr	r2, [pc, #220]	; (80029b0 <HAL_FMC_MspInit+0x108>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	6393      	str	r3, [r2, #56]	; 0x38
 80028da:	4b35      	ldr	r3, [pc, #212]	; (80029b0 <HAL_FMC_MspInit+0x108>)
 80028dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80028e6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80028ea:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ec:	2302      	movs	r3, #2
 80028ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f4:	2303      	movs	r3, #3
 80028f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028f8:	230c      	movs	r3, #12
 80028fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028fc:	1d3b      	adds	r3, r7, #4
 80028fe:	4619      	mov	r1, r3
 8002900:	482c      	ldr	r0, [pc, #176]	; (80029b4 <HAL_FMC_MspInit+0x10c>)
 8002902:	f000 fcad 	bl	8003260 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002906:	2301      	movs	r3, #1
 8002908:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	2302      	movs	r3, #2
 800290c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002912:	2303      	movs	r3, #3
 8002914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002916:	230c      	movs	r3, #12
 8002918:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800291a:	1d3b      	adds	r3, r7, #4
 800291c:	4619      	mov	r1, r3
 800291e:	4826      	ldr	r0, [pc, #152]	; (80029b8 <HAL_FMC_MspInit+0x110>)
 8002920:	f000 fc9e 	bl	8003260 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002924:	f248 1333 	movw	r3, #33075	; 0x8133
 8002928:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002932:	2303      	movs	r3, #3
 8002934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002936:	230c      	movs	r3, #12
 8002938:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800293a:	1d3b      	adds	r3, r7, #4
 800293c:	4619      	mov	r1, r3
 800293e:	481f      	ldr	r0, [pc, #124]	; (80029bc <HAL_FMC_MspInit+0x114>)
 8002940:	f000 fc8e 	bl	8003260 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002944:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002948:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294a:	2302      	movs	r3, #2
 800294c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002952:	2303      	movs	r3, #3
 8002954:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002956:	230c      	movs	r3, #12
 8002958:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	4619      	mov	r1, r3
 800295e:	4818      	ldr	r0, [pc, #96]	; (80029c0 <HAL_FMC_MspInit+0x118>)
 8002960:	f000 fc7e 	bl	8003260 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002964:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002968:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002972:	2303      	movs	r3, #3
 8002974:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002976:	230c      	movs	r3, #12
 8002978:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800297a:	1d3b      	adds	r3, r7, #4
 800297c:	4619      	mov	r1, r3
 800297e:	4811      	ldr	r0, [pc, #68]	; (80029c4 <HAL_FMC_MspInit+0x11c>)
 8002980:	f000 fc6e 	bl	8003260 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002984:	2360      	movs	r3, #96	; 0x60
 8002986:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002988:	2302      	movs	r3, #2
 800298a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002990:	2303      	movs	r3, #3
 8002992:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002994:	230c      	movs	r3, #12
 8002996:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002998:	1d3b      	adds	r3, r7, #4
 800299a:	4619      	mov	r1, r3
 800299c:	480a      	ldr	r0, [pc, #40]	; (80029c8 <HAL_FMC_MspInit+0x120>)
 800299e:	f000 fc5f 	bl	8003260 <HAL_GPIO_Init>
 80029a2:	e000      	b.n	80029a6 <HAL_FMC_MspInit+0xfe>
    return;
 80029a4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	2000008c 	.word	0x2000008c
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40021400 	.word	0x40021400
 80029b8:	40020800 	.word	0x40020800
 80029bc:	40021800 	.word	0x40021800
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40020c00 	.word	0x40020c00
 80029c8:	40020400 	.word	0x40020400

080029cc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80029d4:	f7ff ff68 	bl	80028a8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08c      	sub	sp, #48	; 0x30
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80029f0:	2200      	movs	r2, #0
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	2036      	movs	r0, #54	; 0x36
 80029f6:	f000 fa01 	bl	8002dfc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029fa:	2036      	movs	r0, #54	; 0x36
 80029fc:	f000 fa1a 	bl	8002e34 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	4b1f      	ldr	r3, [pc, #124]	; (8002a84 <HAL_InitTick+0xa4>)
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	4a1e      	ldr	r2, [pc, #120]	; (8002a84 <HAL_InitTick+0xa4>)
 8002a0a:	f043 0310 	orr.w	r3, r3, #16
 8002a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a10:	4b1c      	ldr	r3, [pc, #112]	; (8002a84 <HAL_InitTick+0xa4>)
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a1c:	f107 0210 	add.w	r2, r7, #16
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f003 fba4 	bl	8006174 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002a2c:	f003 fb7a 	bl	8006124 <HAL_RCC_GetPCLK1Freq>
 8002a30:	4603      	mov	r3, r0
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a38:	4a13      	ldr	r2, [pc, #76]	; (8002a88 <HAL_InitTick+0xa8>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	0c9b      	lsrs	r3, r3, #18
 8002a40:	3b01      	subs	r3, #1
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a44:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <HAL_InitTick+0xac>)
 8002a46:	4a12      	ldr	r2, [pc, #72]	; (8002a90 <HAL_InitTick+0xb0>)
 8002a48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HAL_InitTick+0xac>)
 8002a4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a50:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002a52:	4a0e      	ldr	r2, [pc, #56]	; (8002a8c <HAL_InitTick+0xac>)
 8002a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a56:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002a58:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <HAL_InitTick+0xac>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <HAL_InitTick+0xac>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002a64:	4809      	ldr	r0, [pc, #36]	; (8002a8c <HAL_InitTick+0xac>)
 8002a66:	f004 f9c5 	bl	8006df4 <HAL_TIM_Base_Init>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d104      	bne.n	8002a7a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002a70:	4806      	ldr	r0, [pc, #24]	; (8002a8c <HAL_InitTick+0xac>)
 8002a72:	f004 f9ea 	bl	8006e4a <HAL_TIM_Base_Start_IT>
 8002a76:	4603      	mov	r3, r0
 8002a78:	e000      	b.n	8002a7c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3730      	adds	r7, #48	; 0x30
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40023800 	.word	0x40023800
 8002a88:	431bde83 	.word	0x431bde83
 8002a8c:	200005a4 	.word	0x200005a4
 8002a90:	40001000 	.word	0x40001000

08002a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa6:	e7fe      	b.n	8002aa6 <HardFault_Handler+0x4>

08002aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aac:	e7fe      	b.n	8002aac <MemManage_Handler+0x4>

08002aae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab2:	e7fe      	b.n	8002ab2 <BusFault_Handler+0x4>

08002ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab8:	e7fe      	b.n	8002ab8 <UsageFault_Handler+0x4>

08002aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ae8:	bf00      	nop
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002af8:	4802      	ldr	r0, [pc, #8]	; (8002b04 <TIM6_DAC_IRQHandler+0x10>)
 8002afa:	f004 f9ca 	bl	8006e92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	200005a4 	.word	0x200005a4

08002b08 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002b0c:	4802      	ldr	r0, [pc, #8]	; (8002b18 <OTG_HS_IRQHandler+0x10>)
 8002b0e:	f000 feee 	bl	80038ee <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	2000022c 	.word	0x2000022c

08002b1c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002b20:	4802      	ldr	r0, [pc, #8]	; (8002b2c <LTDC_IRQHandler+0x10>)
 8002b22:	f002 fb77 	bl	8005214 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000144 	.word	0x20000144

08002b30 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002b34:	4802      	ldr	r0, [pc, #8]	; (8002b40 <DMA2D_IRQHandler+0x10>)
 8002b36:	f000 f9f0 	bl	8002f1a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000530 	.word	0x20000530

08002b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b48:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <SystemInit+0x28>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4e:	4a07      	ldr	r2, [pc, #28]	; (8002b6c <SystemInit+0x28>)
 8002b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <SystemInit+0x28>)
 8002b5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b5e:	609a      	str	r2, [r3, #8]
#endif
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ba8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b76:	e003      	b.n	8002b80 <LoopCopyDataInit>

08002b78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b7e:	3104      	adds	r1, #4

08002b80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b80:	480b      	ldr	r0, [pc, #44]	; (8002bb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b82:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b88:	d3f6      	bcc.n	8002b78 <CopyDataInit>
  ldr  r2, =_sbss
 8002b8a:	4a0b      	ldr	r2, [pc, #44]	; (8002bb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b8c:	e002      	b.n	8002b94 <LoopFillZerobss>

08002b8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b90:	f842 3b04 	str.w	r3, [r2], #4

08002b94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b94:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b98:	d3f9      	bcc.n	8002b8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b9a:	f7ff ffd3 	bl	8002b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b9e:	f005 fd87 	bl	80086b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ba2:	f7fe fd75 	bl	8001690 <main>
  bx  lr    
 8002ba6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002ba8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002bac:	0800aea0 	.word	0x0800aea0
  ldr  r0, =_sdata
 8002bb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002bb4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002bb8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002bbc:	200005e8 	.word	0x200005e8

08002bc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bc0:	e7fe      	b.n	8002bc0 <ADC_IRQHandler>
	...

08002bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bc8:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <HAL_Init+0x40>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a0d      	ldr	r2, [pc, #52]	; (8002c04 <HAL_Init+0x40>)
 8002bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_Init+0x40>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a0a      	ldr	r2, [pc, #40]	; (8002c04 <HAL_Init+0x40>)
 8002bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002be0:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <HAL_Init+0x40>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a07      	ldr	r2, [pc, #28]	; (8002c04 <HAL_Init+0x40>)
 8002be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bec:	2003      	movs	r0, #3
 8002bee:	f000 f8fa 	bl	8002de6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f7ff fef4 	bl	80029e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bf8:	f7ff fb32 	bl	8002260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40023c00 	.word	0x40023c00

08002c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_IncTick+0x20>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_IncTick+0x24>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4413      	add	r3, r2
 8002c18:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <HAL_IncTick+0x24>)
 8002c1a:	6013      	str	r3, [r2, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	2000000c 	.word	0x2000000c
 8002c2c:	200005e4 	.word	0x200005e4

08002c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return uwTick;
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <HAL_GetTick+0x14>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	200005e4 	.word	0x200005e4

08002c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c50:	f7ff ffee 	bl	8002c30 <HAL_GetTick>
 8002c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c60:	d005      	beq.n	8002c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <HAL_Delay+0x40>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c6e:	bf00      	nop
 8002c70:	f7ff ffde 	bl	8002c30 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d8f7      	bhi.n	8002c70 <HAL_Delay+0x28>
  {
  }
}
 8002c80:	bf00      	nop
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	2000000c 	.word	0x2000000c

08002c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c9c:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cbe:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	60d3      	str	r3, [r2, #12]
}
 8002cc4:	bf00      	nop
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cd8:	4b04      	ldr	r3, [pc, #16]	; (8002cec <__NVIC_GetPriorityGrouping+0x18>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	0a1b      	lsrs	r3, r3, #8
 8002cde:	f003 0307 	and.w	r3, r3, #7
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	db0b      	blt.n	8002d1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	f003 021f 	and.w	r2, r3, #31
 8002d08:	4907      	ldr	r1, [pc, #28]	; (8002d28 <__NVIC_EnableIRQ+0x38>)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	2001      	movs	r0, #1
 8002d12:	fa00 f202 	lsl.w	r2, r0, r2
 8002d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	e000e100 	.word	0xe000e100

08002d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	6039      	str	r1, [r7, #0]
 8002d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	db0a      	blt.n	8002d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	490c      	ldr	r1, [pc, #48]	; (8002d78 <__NVIC_SetPriority+0x4c>)
 8002d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4a:	0112      	lsls	r2, r2, #4
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	440b      	add	r3, r1
 8002d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d54:	e00a      	b.n	8002d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	4908      	ldr	r1, [pc, #32]	; (8002d7c <__NVIC_SetPriority+0x50>)
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	3b04      	subs	r3, #4
 8002d64:	0112      	lsls	r2, r2, #4
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	440b      	add	r3, r1
 8002d6a:	761a      	strb	r2, [r3, #24]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	e000e100 	.word	0xe000e100
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b089      	sub	sp, #36	; 0x24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f1c3 0307 	rsb	r3, r3, #7
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	bf28      	it	cs
 8002d9e:	2304      	movcs	r3, #4
 8002da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3304      	adds	r3, #4
 8002da6:	2b06      	cmp	r3, #6
 8002da8:	d902      	bls.n	8002db0 <NVIC_EncodePriority+0x30>
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3b03      	subs	r3, #3
 8002dae:	e000      	b.n	8002db2 <NVIC_EncodePriority+0x32>
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	f04f 32ff 	mov.w	r2, #4294967295
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43da      	mvns	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd2:	43d9      	mvns	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd8:	4313      	orrs	r3, r2
         );
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3724      	adds	r7, #36	; 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff ff4c 	bl	8002c8c <__NVIC_SetPriorityGrouping>
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e0e:	f7ff ff61 	bl	8002cd4 <__NVIC_GetPriorityGrouping>
 8002e12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	6978      	ldr	r0, [r7, #20]
 8002e1a:	f7ff ffb1 	bl	8002d80 <NVIC_EncodePriority>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e24:	4611      	mov	r1, r2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff ff80 	bl	8002d2c <__NVIC_SetPriority>
}
 8002e2c:	bf00      	nop
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff54 	bl	8002cf0 <__NVIC_EnableIRQ>
}
 8002e48:	bf00      	nop
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e00e      	b.n	8002e80 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	795b      	ldrb	r3, [r3, #5]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d105      	bne.n	8002e78 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff fa20 	bl	80022b8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e03b      	b.n	8002f12 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff fa24 	bl	80022fc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed8:	f023 0107 	bic.w	r1, r3, #7
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ef2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	68d1      	ldr	r1, [r2, #12]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	430b      	orrs	r3, r1
 8002f00:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d026      	beq.n	8002f8a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d021      	beq.n	8002f8a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f54:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5a:	f043 0201 	orr.w	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2201      	movs	r2, #1
 8002f68:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d026      	beq.n	8002fe2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d021      	beq.n	8002fe2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fac:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fba:	f043 0202 	orr.w	r2, r3, #2
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d026      	beq.n	800303a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d021      	beq.n	800303a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003004:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2208      	movs	r2, #8
 800300c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003012:	f043 0204 	orr.w	r2, r3, #4
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2204      	movs	r2, #4
 800301e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d013      	beq.n	800306c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00e      	beq.n	800306c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800305c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2204      	movs	r2, #4
 8003064:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f853 	bl	8003112 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d024      	beq.n	80030c0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01f      	beq.n	80030c0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800308e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2202      	movs	r2, #2
 8003096:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d01f      	beq.n	800310a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01a      	beq.n	800310a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030e2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2210      	movs	r2, #16
 80030ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f80e 	bl	8003126 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800310a:	bf00      	nop
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_DMA2D_ConfigLayer+0x20>
 8003158:	2302      	movs	r3, #2
 800315a:	e079      	b.n	8003250 <HAL_DMA2D_ConfigLayer+0x114>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	3318      	adds	r3, #24
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	041b      	lsls	r3, r3, #16
 8003182:	4313      	orrs	r3, r2
 8003184:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003186:	4b35      	ldr	r3, [pc, #212]	; (800325c <HAL_DMA2D_ConfigLayer+0x120>)
 8003188:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b0a      	cmp	r3, #10
 8003190:	d003      	beq.n	800319a <HAL_DMA2D_ConfigLayer+0x5e>
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b09      	cmp	r3, #9
 8003198:	d107      	bne.n	80031aa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	e005      	b.n	80031b6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	061b      	lsls	r3, r3, #24
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d120      	bne.n	80031fe <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	ea02 0103 	and.w	r1, r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b0a      	cmp	r3, #10
 80031e4:	d003      	beq.n	80031ee <HAL_DMA2D_ConfigLayer+0xb2>
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b09      	cmp	r3, #9
 80031ec:	d127      	bne.n	800323e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80031fa:	629a      	str	r2, [r3, #40]	; 0x28
 80031fc:	e01f      	b.n	800323e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	43db      	mvns	r3, r3
 8003208:	ea02 0103 	and.w	r1, r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	430a      	orrs	r2, r1
 8003214:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	6812      	ldr	r2, [r2, #0]
 800321e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b0a      	cmp	r3, #10
 8003226:	d003      	beq.n	8003230 <HAL_DMA2D_ConfigLayer+0xf4>
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b09      	cmp	r3, #9
 800322e:	d106      	bne.n	800323e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800323c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	371c      	adds	r7, #28
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	ff03000f 	.word	0xff03000f

08003260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003260:	b480      	push	{r7}
 8003262:	b089      	sub	sp, #36	; 0x24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003272:	2300      	movs	r3, #0
 8003274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	e177      	b.n	800356c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800327c:	2201      	movs	r2, #1
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	429a      	cmp	r2, r3
 8003296:	f040 8166 	bne.w	8003566 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d00b      	beq.n	80032ba <HAL_GPIO_Init+0x5a>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d007      	beq.n	80032ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032ae:	2b11      	cmp	r3, #17
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b12      	cmp	r3, #18
 80032b8:	d130      	bne.n	800331c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	2203      	movs	r2, #3
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032f0:	2201      	movs	r2, #1
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	091b      	lsrs	r3, r3, #4
 8003306:	f003 0201 	and.w	r2, r3, #1
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	2203      	movs	r2, #3
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4013      	ands	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b02      	cmp	r3, #2
 8003352:	d003      	beq.n	800335c <HAL_GPIO_Init+0xfc>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2b12      	cmp	r3, #18
 800335a:	d123      	bne.n	80033a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	08da      	lsrs	r2, r3, #3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3208      	adds	r2, #8
 8003364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003368:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	220f      	movs	r2, #15
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	08da      	lsrs	r2, r3, #3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3208      	adds	r2, #8
 800339e:	69b9      	ldr	r1, [r7, #24]
 80033a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	2203      	movs	r2, #3
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0203 	and.w	r2, r3, #3
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80c0 	beq.w	8003566 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	4b65      	ldr	r3, [pc, #404]	; (8003580 <HAL_GPIO_Init+0x320>)
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	4a64      	ldr	r2, [pc, #400]	; (8003580 <HAL_GPIO_Init+0x320>)
 80033f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033f4:	6453      	str	r3, [r2, #68]	; 0x44
 80033f6:	4b62      	ldr	r3, [pc, #392]	; (8003580 <HAL_GPIO_Init+0x320>)
 80033f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003402:	4a60      	ldr	r2, [pc, #384]	; (8003584 <HAL_GPIO_Init+0x324>)
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	3302      	adds	r3, #2
 800340a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	220f      	movs	r2, #15
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4013      	ands	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a57      	ldr	r2, [pc, #348]	; (8003588 <HAL_GPIO_Init+0x328>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d037      	beq.n	800349e <HAL_GPIO_Init+0x23e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a56      	ldr	r2, [pc, #344]	; (800358c <HAL_GPIO_Init+0x32c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d031      	beq.n	800349a <HAL_GPIO_Init+0x23a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a55      	ldr	r2, [pc, #340]	; (8003590 <HAL_GPIO_Init+0x330>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d02b      	beq.n	8003496 <HAL_GPIO_Init+0x236>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a54      	ldr	r2, [pc, #336]	; (8003594 <HAL_GPIO_Init+0x334>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d025      	beq.n	8003492 <HAL_GPIO_Init+0x232>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a53      	ldr	r2, [pc, #332]	; (8003598 <HAL_GPIO_Init+0x338>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d01f      	beq.n	800348e <HAL_GPIO_Init+0x22e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a52      	ldr	r2, [pc, #328]	; (800359c <HAL_GPIO_Init+0x33c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d019      	beq.n	800348a <HAL_GPIO_Init+0x22a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a51      	ldr	r2, [pc, #324]	; (80035a0 <HAL_GPIO_Init+0x340>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d013      	beq.n	8003486 <HAL_GPIO_Init+0x226>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a50      	ldr	r2, [pc, #320]	; (80035a4 <HAL_GPIO_Init+0x344>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d00d      	beq.n	8003482 <HAL_GPIO_Init+0x222>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a4f      	ldr	r2, [pc, #316]	; (80035a8 <HAL_GPIO_Init+0x348>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d007      	beq.n	800347e <HAL_GPIO_Init+0x21e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a4e      	ldr	r2, [pc, #312]	; (80035ac <HAL_GPIO_Init+0x34c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d101      	bne.n	800347a <HAL_GPIO_Init+0x21a>
 8003476:	2309      	movs	r3, #9
 8003478:	e012      	b.n	80034a0 <HAL_GPIO_Init+0x240>
 800347a:	230a      	movs	r3, #10
 800347c:	e010      	b.n	80034a0 <HAL_GPIO_Init+0x240>
 800347e:	2308      	movs	r3, #8
 8003480:	e00e      	b.n	80034a0 <HAL_GPIO_Init+0x240>
 8003482:	2307      	movs	r3, #7
 8003484:	e00c      	b.n	80034a0 <HAL_GPIO_Init+0x240>
 8003486:	2306      	movs	r3, #6
 8003488:	e00a      	b.n	80034a0 <HAL_GPIO_Init+0x240>
 800348a:	2305      	movs	r3, #5
 800348c:	e008      	b.n	80034a0 <HAL_GPIO_Init+0x240>
 800348e:	2304      	movs	r3, #4
 8003490:	e006      	b.n	80034a0 <HAL_GPIO_Init+0x240>
 8003492:	2303      	movs	r3, #3
 8003494:	e004      	b.n	80034a0 <HAL_GPIO_Init+0x240>
 8003496:	2302      	movs	r3, #2
 8003498:	e002      	b.n	80034a0 <HAL_GPIO_Init+0x240>
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <HAL_GPIO_Init+0x240>
 800349e:	2300      	movs	r3, #0
 80034a0:	69fa      	ldr	r2, [r7, #28]
 80034a2:	f002 0203 	and.w	r2, r2, #3
 80034a6:	0092      	lsls	r2, r2, #2
 80034a8:	4093      	lsls	r3, r2
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034b0:	4934      	ldr	r1, [pc, #208]	; (8003584 <HAL_GPIO_Init+0x324>)
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	089b      	lsrs	r3, r3, #2
 80034b6:	3302      	adds	r3, #2
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034be:	4b3c      	ldr	r3, [pc, #240]	; (80035b0 <HAL_GPIO_Init+0x350>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034e2:	4a33      	ldr	r2, [pc, #204]	; (80035b0 <HAL_GPIO_Init+0x350>)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034e8:	4b31      	ldr	r3, [pc, #196]	; (80035b0 <HAL_GPIO_Init+0x350>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800350c:	4a28      	ldr	r2, [pc, #160]	; (80035b0 <HAL_GPIO_Init+0x350>)
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003512:	4b27      	ldr	r3, [pc, #156]	; (80035b0 <HAL_GPIO_Init+0x350>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	43db      	mvns	r3, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4013      	ands	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003536:	4a1e      	ldr	r2, [pc, #120]	; (80035b0 <HAL_GPIO_Init+0x350>)
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800353c:	4b1c      	ldr	r3, [pc, #112]	; (80035b0 <HAL_GPIO_Init+0x350>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003560:	4a13      	ldr	r2, [pc, #76]	; (80035b0 <HAL_GPIO_Init+0x350>)
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3301      	adds	r3, #1
 800356a:	61fb      	str	r3, [r7, #28]
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	2b0f      	cmp	r3, #15
 8003570:	f67f ae84 	bls.w	800327c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003574:	bf00      	nop
 8003576:	3724      	adds	r7, #36	; 0x24
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	40023800 	.word	0x40023800
 8003584:	40013800 	.word	0x40013800
 8003588:	40020000 	.word	0x40020000
 800358c:	40020400 	.word	0x40020400
 8003590:	40020800 	.word	0x40020800
 8003594:	40020c00 	.word	0x40020c00
 8003598:	40021000 	.word	0x40021000
 800359c:	40021400 	.word	0x40021400
 80035a0:	40021800 	.word	0x40021800
 80035a4:	40021c00 	.word	0x40021c00
 80035a8:	40022000 	.word	0x40022000
 80035ac:	40022400 	.word	0x40022400
 80035b0:	40013c00 	.word	0x40013c00

080035b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	e0d9      	b.n	8003784 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035d0:	2201      	movs	r2, #1
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4013      	ands	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	f040 80c9 	bne.w	800377e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80035ec:	4a6a      	ldr	r2, [pc, #424]	; (8003798 <HAL_GPIO_DeInit+0x1e4>)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	089b      	lsrs	r3, r3, #2
 80035f2:	3302      	adds	r3, #2
 80035f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	220f      	movs	r2, #15
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	4013      	ands	r3, r2
 800360c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a62      	ldr	r2, [pc, #392]	; (800379c <HAL_GPIO_DeInit+0x1e8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d037      	beq.n	8003686 <HAL_GPIO_DeInit+0xd2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a61      	ldr	r2, [pc, #388]	; (80037a0 <HAL_GPIO_DeInit+0x1ec>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d031      	beq.n	8003682 <HAL_GPIO_DeInit+0xce>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a60      	ldr	r2, [pc, #384]	; (80037a4 <HAL_GPIO_DeInit+0x1f0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d02b      	beq.n	800367e <HAL_GPIO_DeInit+0xca>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a5f      	ldr	r2, [pc, #380]	; (80037a8 <HAL_GPIO_DeInit+0x1f4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d025      	beq.n	800367a <HAL_GPIO_DeInit+0xc6>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a5e      	ldr	r2, [pc, #376]	; (80037ac <HAL_GPIO_DeInit+0x1f8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d01f      	beq.n	8003676 <HAL_GPIO_DeInit+0xc2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a5d      	ldr	r2, [pc, #372]	; (80037b0 <HAL_GPIO_DeInit+0x1fc>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d019      	beq.n	8003672 <HAL_GPIO_DeInit+0xbe>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a5c      	ldr	r2, [pc, #368]	; (80037b4 <HAL_GPIO_DeInit+0x200>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d013      	beq.n	800366e <HAL_GPIO_DeInit+0xba>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a5b      	ldr	r2, [pc, #364]	; (80037b8 <HAL_GPIO_DeInit+0x204>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00d      	beq.n	800366a <HAL_GPIO_DeInit+0xb6>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a5a      	ldr	r2, [pc, #360]	; (80037bc <HAL_GPIO_DeInit+0x208>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d007      	beq.n	8003666 <HAL_GPIO_DeInit+0xb2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a59      	ldr	r2, [pc, #356]	; (80037c0 <HAL_GPIO_DeInit+0x20c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d101      	bne.n	8003662 <HAL_GPIO_DeInit+0xae>
 800365e:	2309      	movs	r3, #9
 8003660:	e012      	b.n	8003688 <HAL_GPIO_DeInit+0xd4>
 8003662:	230a      	movs	r3, #10
 8003664:	e010      	b.n	8003688 <HAL_GPIO_DeInit+0xd4>
 8003666:	2308      	movs	r3, #8
 8003668:	e00e      	b.n	8003688 <HAL_GPIO_DeInit+0xd4>
 800366a:	2307      	movs	r3, #7
 800366c:	e00c      	b.n	8003688 <HAL_GPIO_DeInit+0xd4>
 800366e:	2306      	movs	r3, #6
 8003670:	e00a      	b.n	8003688 <HAL_GPIO_DeInit+0xd4>
 8003672:	2305      	movs	r3, #5
 8003674:	e008      	b.n	8003688 <HAL_GPIO_DeInit+0xd4>
 8003676:	2304      	movs	r3, #4
 8003678:	e006      	b.n	8003688 <HAL_GPIO_DeInit+0xd4>
 800367a:	2303      	movs	r3, #3
 800367c:	e004      	b.n	8003688 <HAL_GPIO_DeInit+0xd4>
 800367e:	2302      	movs	r3, #2
 8003680:	e002      	b.n	8003688 <HAL_GPIO_DeInit+0xd4>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <HAL_GPIO_DeInit+0xd4>
 8003686:	2300      	movs	r3, #0
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	f002 0203 	and.w	r2, r2, #3
 800368e:	0092      	lsls	r2, r2, #2
 8003690:	4093      	lsls	r3, r2
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	429a      	cmp	r2, r3
 8003696:	d132      	bne.n	80036fe <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003698:	4b4a      	ldr	r3, [pc, #296]	; (80037c4 <HAL_GPIO_DeInit+0x210>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	43db      	mvns	r3, r3
 80036a0:	4948      	ldr	r1, [pc, #288]	; (80037c4 <HAL_GPIO_DeInit+0x210>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80036a6:	4b47      	ldr	r3, [pc, #284]	; (80037c4 <HAL_GPIO_DeInit+0x210>)
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	43db      	mvns	r3, r3
 80036ae:	4945      	ldr	r1, [pc, #276]	; (80037c4 <HAL_GPIO_DeInit+0x210>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80036b4:	4b43      	ldr	r3, [pc, #268]	; (80037c4 <HAL_GPIO_DeInit+0x210>)
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	43db      	mvns	r3, r3
 80036bc:	4941      	ldr	r1, [pc, #260]	; (80037c4 <HAL_GPIO_DeInit+0x210>)
 80036be:	4013      	ands	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80036c2:	4b40      	ldr	r3, [pc, #256]	; (80037c4 <HAL_GPIO_DeInit+0x210>)
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	43db      	mvns	r3, r3
 80036ca:	493e      	ldr	r1, [pc, #248]	; (80037c4 <HAL_GPIO_DeInit+0x210>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	220f      	movs	r2, #15
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80036e0:	4a2d      	ldr	r2, [pc, #180]	; (8003798 <HAL_GPIO_DeInit+0x1e4>)
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	089b      	lsrs	r3, r3, #2
 80036e6:	3302      	adds	r3, #2
 80036e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	43da      	mvns	r2, r3
 80036f0:	4829      	ldr	r0, [pc, #164]	; (8003798 <HAL_GPIO_DeInit+0x1e4>)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	089b      	lsrs	r3, r3, #2
 80036f6:	400a      	ands	r2, r1
 80036f8:	3302      	adds	r3, #2
 80036fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	2103      	movs	r1, #3
 8003708:	fa01 f303 	lsl.w	r3, r1, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	401a      	ands	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	08da      	lsrs	r2, r3, #3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3208      	adds	r2, #8
 800371c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	220f      	movs	r2, #15
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43db      	mvns	r3, r3
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	08d2      	lsrs	r2, r2, #3
 8003734:	4019      	ands	r1, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3208      	adds	r2, #8
 800373a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	2103      	movs	r1, #3
 8003748:	fa01 f303 	lsl.w	r3, r1, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	401a      	ands	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	2101      	movs	r1, #1
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	fa01 f303 	lsl.w	r3, r1, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	401a      	ands	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	2103      	movs	r1, #3
 8003772:	fa01 f303 	lsl.w	r3, r1, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	401a      	ands	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	3301      	adds	r3, #1
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2b0f      	cmp	r3, #15
 8003788:	f67f af22 	bls.w	80035d0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800378c:	bf00      	nop
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	40013800 	.word	0x40013800
 800379c:	40020000 	.word	0x40020000
 80037a0:	40020400 	.word	0x40020400
 80037a4:	40020800 	.word	0x40020800
 80037a8:	40020c00 	.word	0x40020c00
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40021400 	.word	0x40021400
 80037b4:	40021800 	.word	0x40021800
 80037b8:	40021c00 	.word	0x40021c00
 80037bc:	40022000 	.word	0x40022000
 80037c0:	40022400 	.word	0x40022400
 80037c4:	40013c00 	.word	0x40013c00

080037c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	460b      	mov	r3, r1
 80037d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	887b      	ldrh	r3, [r7, #2]
 80037da:	4013      	ands	r3, r2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
 80037e4:	e001      	b.n	80037ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037e6:	2300      	movs	r3, #0
 80037e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	807b      	strh	r3, [r7, #2]
 8003804:	4613      	mov	r3, r2
 8003806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003808:	787b      	ldrb	r3, [r7, #1]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800380e:	887a      	ldrh	r2, [r7, #2]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003814:	e003      	b.n	800381e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003816:	887b      	ldrh	r3, [r7, #2]
 8003818:	041a      	lsls	r2, r3, #16
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	619a      	str	r2, [r3, #24]
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800382a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800382c:	b08f      	sub	sp, #60	; 0x3c
 800382e:	af0a      	add	r7, sp, #40	; 0x28
 8003830:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e054      	b.n	80038e6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fe ffc8 	bl	80027ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2203      	movs	r2, #3
 8003860:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386c:	2b00      	cmp	r3, #0
 800386e:	d102      	bne.n	8003876 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f004 fbd7 	bl	800802e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	603b      	str	r3, [r7, #0]
 8003886:	687e      	ldr	r6, [r7, #4]
 8003888:	466d      	mov	r5, sp
 800388a:	f106 0410 	add.w	r4, r6, #16
 800388e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003890:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003896:	e894 0003 	ldmia.w	r4, {r0, r1}
 800389a:	e885 0003 	stmia.w	r5, {r0, r1}
 800389e:	1d33      	adds	r3, r6, #4
 80038a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038a2:	6838      	ldr	r0, [r7, #0]
 80038a4:	f004 fb62 	bl	8007f6c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2101      	movs	r1, #1
 80038ae:	4618      	mov	r0, r3
 80038b0:	f004 fbce 	bl	8008050 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	687e      	ldr	r6, [r7, #4]
 80038bc:	466d      	mov	r5, sp
 80038be:	f106 0410 	add.w	r4, r6, #16
 80038c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80038d2:	1d33      	adds	r3, r6, #4
 80038d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038d6:	6838      	ldr	r0, [r7, #0]
 80038d8:	f004 fcaa 	bl	8008230 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038ee <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b086      	sub	sp, #24
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f004 fc51 	bl	80081ac <USB_GetMode>
 800390a:	4603      	mov	r3, r0
 800390c:	2b01      	cmp	r3, #1
 800390e:	f040 80ef 	bne.w	8003af0 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f004 fc35 	bl	8008186 <USB_ReadInterrupts>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 80e5 	beq.w	8003aee <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f004 fc2c 	bl	8008186 <USB_ReadInterrupts>
 800392e:	4603      	mov	r3, r0
 8003930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003934:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003938:	d104      	bne.n	8003944 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003942:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f004 fc1c 	bl	8008186 <USB_ReadInterrupts>
 800394e:	4603      	mov	r3, r0
 8003950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003958:	d104      	bne.n	8003964 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003962:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f004 fc0c 	bl	8008186 <USB_ReadInterrupts>
 800396e:	4603      	mov	r3, r0
 8003970:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003974:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003978:	d104      	bne.n	8003984 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003982:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f004 fbfc 	bl	8008186 <USB_ReadInterrupts>
 800398e:	4603      	mov	r3, r0
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b02      	cmp	r3, #2
 8003996:	d103      	bne.n	80039a0 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2202      	movs	r2, #2
 800399e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f004 fbee 	bl	8008186 <USB_ReadInterrupts>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039b4:	d115      	bne.n	80039e2 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80039be:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d108      	bne.n	80039e2 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f8a4 	bl	8003b1e <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2101      	movs	r1, #1
 80039dc:	4618      	mov	r0, r3
 80039de:	f004 fce3 	bl	80083a8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f004 fbcd 	bl	8008186 <USB_ReadInterrupts>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039f6:	d102      	bne.n	80039fe <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f001 f913 	bl	8004c24 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f004 fbbf 	bl	8008186 <USB_ReadInterrupts>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d106      	bne.n	8003a20 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f86f 	bl	8003af6 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f004 fbae 	bl	8008186 <USB_ReadInterrupts>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a34:	d138      	bne.n	8003aa8 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f004 fd27 	bl	800848e <USB_HC_ReadInterrupt>
 8003a40:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	e025      	b.n	8003a94 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	fa22 f303 	lsr.w	r3, r2, r3
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d018      	beq.n	8003a8e <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a72:	d106      	bne.n	8003a82 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	4619      	mov	r1, r3
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f87b 	bl	8003b76 <HCD_HC_IN_IRQHandler>
 8003a80:	e005      	b.n	8003a8e <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	4619      	mov	r1, r3
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fca9 	bl	80043e0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	3301      	adds	r3, #1
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d3d4      	bcc.n	8003a48 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003aa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f004 fb6a 	bl	8008186 <USB_ReadInterrupts>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f003 0310 	and.w	r3, r3, #16
 8003ab8:	2b10      	cmp	r3, #16
 8003aba:	d101      	bne.n	8003ac0 <HAL_HCD_IRQHandler+0x1d2>
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <HAL_HCD_IRQHandler+0x1d4>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d014      	beq.n	8003af0 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699a      	ldr	r2, [r3, #24]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0210 	bic.w	r2, r2, #16
 8003ad4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fff8 	bl	8004acc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0210 	orr.w	r2, r2, #16
 8003aea:	619a      	str	r2, [r3, #24]
 8003aec:	e000      	b.n	8003af0 <HAL_HCD_IRQHandler+0x202>
      return;
 8003aee:	bf00      	nop
    }
  }
}
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	460b      	mov	r3, r1
 8003b64:	70fb      	strb	r3, [r7, #3]
 8003b66:	4613      	mov	r3, r2
 8003b68:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b086      	sub	sp, #24
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	460b      	mov	r3, r1
 8003b80:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003b8c:	78fb      	ldrb	r3, [r7, #3]
 8003b8e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d119      	bne.n	8003bda <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	0151      	lsls	r1, r2, #5
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	440a      	add	r2, r1
 8003bce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bd2:	f043 0302 	orr.w	r3, r3, #2
 8003bd6:	60d3      	str	r3, [r2, #12]
 8003bd8:	e0ce      	b.n	8003d78 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf0:	d12c      	bne.n	8003c4c <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c04:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	440b      	add	r3, r1
 8003c14:	335d      	adds	r3, #93	; 0x5d
 8003c16:	2207      	movs	r2, #7
 8003c18:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	0151      	lsls	r1, r2, #5
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	440a      	add	r2, r1
 8003c30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c34:	f043 0302 	orr.w	r3, r3, #2
 8003c38:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	4611      	mov	r1, r2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f004 fc33 	bl	80084b0 <USB_HC_Halt>
 8003c4a:	e095      	b.n	8003d78 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d109      	bne.n	8003c76 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c6e:	461a      	mov	r2, r3
 8003c70:	2320      	movs	r3, #32
 8003c72:	6093      	str	r3, [r2, #8]
 8003c74:	e080      	b.n	8003d78 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d134      	bne.n	8003cf6 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	0151      	lsls	r1, r2, #5
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	440a      	add	r2, r1
 8003ca2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ca6:	f043 0302 	orr.w	r3, r3, #2
 8003caa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	440b      	add	r3, r1
 8003cba:	335d      	adds	r3, #93	; 0x5d
 8003cbc:	2205      	movs	r2, #5
 8003cbe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2310      	movs	r3, #16
 8003cd0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cde:	461a      	mov	r2, r3
 8003ce0:	2308      	movs	r3, #8
 8003ce2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	4611      	mov	r1, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f004 fbde 	bl	80084b0 <USB_HC_Halt>
 8003cf4:	e040      	b.n	8003d78 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0c:	d134      	bne.n	8003d78 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	0151      	lsls	r1, r2, #5
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	440a      	add	r2, r1
 8003d24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d28:	f043 0302 	orr.w	r3, r3, #2
 8003d2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	4611      	mov	r1, r2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f004 fbb9 	bl	80084b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	440b      	add	r3, r1
 8003d5e:	335d      	adds	r3, #93	; 0x5d
 8003d60:	2208      	movs	r2, #8
 8003d62:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d70:	461a      	mov	r2, r3
 8003d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d76:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d8e:	d122      	bne.n	8003dd6 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	0151      	lsls	r1, r2, #5
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	440a      	add	r2, r1
 8003da6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003daa:	f043 0302 	orr.w	r3, r3, #2
 8003dae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	4611      	mov	r1, r2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f004 fb78 	bl	80084b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dcc:	461a      	mov	r2, r3
 8003dce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dd2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003dd4:	e300      	b.n	80043d8 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	f040 80fd 	bne.w	8003fe8 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d01b      	beq.n	8003e2e <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	440b      	add	r3, r1
 8003e04:	3348      	adds	r3, #72	; 0x48
 8003e06:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	0159      	lsls	r1, r3, #5
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	440b      	add	r3, r1
 8003e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003e1a:	1ad1      	subs	r1, r2, r3
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4403      	add	r3, r0
 8003e2a:	334c      	adds	r3, #76	; 0x4c
 8003e2c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4613      	mov	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	440b      	add	r3, r1
 8003e3c:	335d      	adds	r3, #93	; 0x5d
 8003e3e:	2201      	movs	r2, #1
 8003e40:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	440b      	add	r3, r1
 8003e50:	3358      	adds	r3, #88	; 0x58
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e62:	461a      	mov	r2, r3
 8003e64:	2301      	movs	r3, #1
 8003e66:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	440b      	add	r3, r1
 8003e76:	333f      	adds	r3, #63	; 0x3f
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4613      	mov	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	440b      	add	r3, r1
 8003e8c:	333f      	adds	r3, #63	; 0x3f
 8003e8e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d121      	bne.n	8003ed8 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	0151      	lsls	r1, r2, #5
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	440a      	add	r2, r1
 8003eaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003eae:	f043 0302 	orr.w	r3, r3, #2
 8003eb2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f004 faf6 	bl	80084b0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	2310      	movs	r3, #16
 8003ed4:	6093      	str	r3, [r2, #8]
 8003ed6:	e070      	b.n	8003fba <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	440b      	add	r3, r1
 8003ee6:	333f      	adds	r3, #63	; 0x3f
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b03      	cmp	r3, #3
 8003eec:	d12a      	bne.n	8003f44 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	0151      	lsls	r1, r2, #5
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	440a      	add	r2, r1
 8003f04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f0c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4613      	mov	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	440b      	add	r3, r1
 8003f1c:	335c      	adds	r3, #92	; 0x5c
 8003f1e:	2201      	movs	r2, #1
 8003f20:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	b2d8      	uxtb	r0, r3
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	440b      	add	r3, r1
 8003f34:	335c      	adds	r3, #92	; 0x5c
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4601      	mov	r1, r0
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff fe0c 	bl	8003b5a <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f42:	e03a      	b.n	8003fba <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	440b      	add	r3, r1
 8003f52:	333f      	adds	r3, #63	; 0x3f
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d12f      	bne.n	8003fba <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	440b      	add	r3, r1
 8003f68:	335c      	adds	r3, #92	; 0x5c
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	440b      	add	r3, r1
 8003f7c:	3350      	adds	r3, #80	; 0x50
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	f083 0301 	eor.w	r3, r3, #1
 8003f84:	b2d8      	uxtb	r0, r3
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	440b      	add	r3, r1
 8003f94:	3350      	adds	r3, #80	; 0x50
 8003f96:	4602      	mov	r2, r0
 8003f98:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	b2d8      	uxtb	r0, r3
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	440b      	add	r3, r1
 8003fac:	335c      	adds	r3, #92	; 0x5c
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4601      	mov	r1, r0
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff fdd0 	bl	8003b5a <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	440b      	add	r3, r1
 8003fc8:	3350      	adds	r3, #80	; 0x50
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	f083 0301 	eor.w	r3, r3, #1
 8003fd0:	b2d8      	uxtb	r0, r3
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	440b      	add	r3, r1
 8003fe0:	3350      	adds	r3, #80	; 0x50
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	701a      	strb	r2, [r3, #0]
}
 8003fe6:	e1f7      	b.n	80043d8 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	f040 811a 	bne.w	8004234 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	4413      	add	r3, r2
 8004008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	0151      	lsls	r1, r2, #5
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	440a      	add	r2, r1
 8004016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800401a:	f023 0302 	bic.w	r3, r3, #2
 800401e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	440b      	add	r3, r1
 800402e:	335d      	adds	r3, #93	; 0x5d
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d10a      	bne.n	800404c <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	440b      	add	r3, r1
 8004044:	335c      	adds	r3, #92	; 0x5c
 8004046:	2201      	movs	r2, #1
 8004048:	701a      	strb	r2, [r3, #0]
 800404a:	e0d9      	b.n	8004200 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	440b      	add	r3, r1
 800405a:	335d      	adds	r3, #93	; 0x5d
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b05      	cmp	r3, #5
 8004060:	d10a      	bne.n	8004078 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4613      	mov	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	440b      	add	r3, r1
 8004070:	335c      	adds	r3, #92	; 0x5c
 8004072:	2205      	movs	r2, #5
 8004074:	701a      	strb	r2, [r3, #0]
 8004076:	e0c3      	b.n	8004200 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4613      	mov	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	440b      	add	r3, r1
 8004086:	335d      	adds	r3, #93	; 0x5d
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b06      	cmp	r3, #6
 800408c:	d00a      	beq.n	80040a4 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4613      	mov	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	440b      	add	r3, r1
 800409c:	335d      	adds	r3, #93	; 0x5d
 800409e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d156      	bne.n	8004152 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	440b      	add	r3, r1
 80040b2:	3358      	adds	r3, #88	; 0x58
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	1c59      	adds	r1, r3, #1
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4613      	mov	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	4403      	add	r3, r0
 80040c6:	3358      	adds	r3, #88	; 0x58
 80040c8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	440b      	add	r3, r1
 80040d8:	3358      	adds	r3, #88	; 0x58
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b03      	cmp	r3, #3
 80040de:	d914      	bls.n	800410a <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	440b      	add	r3, r1
 80040ee:	3358      	adds	r3, #88	; 0x58
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	440b      	add	r3, r1
 8004102:	335c      	adds	r3, #92	; 0x5c
 8004104:	2204      	movs	r2, #4
 8004106:	701a      	strb	r2, [r3, #0]
 8004108:	e009      	b.n	800411e <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	440b      	add	r3, r1
 8004118:	335c      	adds	r3, #92	; 0x5c
 800411a:	2202      	movs	r2, #2
 800411c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4413      	add	r3, r2
 8004126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004134:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800413c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	4413      	add	r3, r2
 8004146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414a:	461a      	mov	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	e056      	b.n	8004200 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	440b      	add	r3, r1
 8004160:	335d      	adds	r3, #93	; 0x5d
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b03      	cmp	r3, #3
 8004166:	d123      	bne.n	80041b0 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	440b      	add	r3, r1
 8004176:	335c      	adds	r3, #92	; 0x5c
 8004178:	2202      	movs	r2, #2
 800417a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	4413      	add	r3, r2
 8004184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004192:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800419a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a8:	461a      	mov	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	e027      	b.n	8004200 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	440b      	add	r3, r1
 80041be:	335d      	adds	r3, #93	; 0x5d
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b07      	cmp	r3, #7
 80041c4:	d11c      	bne.n	8004200 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	440b      	add	r3, r1
 80041d4:	3358      	adds	r3, #88	; 0x58
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	1c59      	adds	r1, r3, #1
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	4403      	add	r3, r0
 80041e8:	3358      	adds	r3, #88	; 0x58
 80041ea:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4613      	mov	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	440b      	add	r3, r1
 80041fa:	335c      	adds	r3, #92	; 0x5c
 80041fc:	2204      	movs	r2, #4
 80041fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4413      	add	r3, r2
 8004208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420c:	461a      	mov	r2, r3
 800420e:	2302      	movs	r3, #2
 8004210:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	b2d8      	uxtb	r0, r3
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	440b      	add	r3, r1
 8004224:	335c      	adds	r3, #92	; 0x5c
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	4601      	mov	r1, r0
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff fc94 	bl	8003b5a <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004232:	e0d1      	b.n	80043d8 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	4413      	add	r3, r2
 800423c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004246:	2b80      	cmp	r3, #128	; 0x80
 8004248:	d13e      	bne.n	80042c8 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	4413      	add	r3, r2
 8004252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	0151      	lsls	r1, r2, #5
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	440a      	add	r2, r1
 8004260:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004264:	f043 0302 	orr.w	r3, r3, #2
 8004268:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	440b      	add	r3, r1
 8004278:	3358      	adds	r3, #88	; 0x58
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	1c59      	adds	r1, r3, #1
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	4613      	mov	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	4403      	add	r3, r0
 800428c:	3358      	adds	r3, #88	; 0x58
 800428e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4613      	mov	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	440b      	add	r3, r1
 800429e:	335d      	adds	r3, #93	; 0x5d
 80042a0:	2206      	movs	r2, #6
 80042a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	4611      	mov	r1, r2
 80042ae:	4618      	mov	r0, r3
 80042b0:	f004 f8fe 	bl	80084b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c0:	461a      	mov	r2, r3
 80042c2:	2380      	movs	r3, #128	; 0x80
 80042c4:	6093      	str	r3, [r2, #8]
}
 80042c6:	e087      	b.n	80043d8 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 0310 	and.w	r3, r3, #16
 80042da:	2b10      	cmp	r3, #16
 80042dc:	d17c      	bne.n	80043d8 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	440b      	add	r3, r1
 80042ec:	333f      	adds	r3, #63	; 0x3f
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d122      	bne.n	800433a <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	440b      	add	r3, r1
 8004302:	3358      	adds	r3, #88	; 0x58
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	4413      	add	r3, r2
 8004310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	0151      	lsls	r1, r2, #5
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	440a      	add	r2, r1
 800431e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004322:	f043 0302 	orr.w	r3, r3, #2
 8004326:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	4611      	mov	r1, r2
 8004332:	4618      	mov	r0, r3
 8004334:	f004 f8bc 	bl	80084b0 <USB_HC_Halt>
 8004338:	e045      	b.n	80043c6 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4613      	mov	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	440b      	add	r3, r1
 8004348:	333f      	adds	r3, #63	; 0x3f
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	440b      	add	r3, r1
 800435e:	333f      	adds	r3, #63	; 0x3f
 8004360:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004362:	2b02      	cmp	r3, #2
 8004364:	d12f      	bne.n	80043c6 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4613      	mov	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	440b      	add	r3, r1
 8004374:	3358      	adds	r3, #88	; 0x58
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d121      	bne.n	80043c6 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	440b      	add	r3, r1
 8004390:	335d      	adds	r3, #93	; 0x5d
 8004392:	2203      	movs	r2, #3
 8004394:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	4413      	add	r3, r2
 800439e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	0151      	lsls	r1, r2, #5
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	440a      	add	r2, r1
 80043ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043b0:	f043 0302 	orr.w	r3, r3, #2
 80043b4:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	4611      	mov	r1, r2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f004 f875 	bl	80084b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d2:	461a      	mov	r2, r3
 80043d4:	2310      	movs	r3, #16
 80043d6:	6093      	str	r3, [r2, #8]
}
 80043d8:	bf00      	nop
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4413      	add	r3, r2
 8004402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b04      	cmp	r3, #4
 800440e:	d119      	bne.n	8004444 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	4413      	add	r3, r2
 8004418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800441c:	461a      	mov	r2, r3
 800441e:	2304      	movs	r3, #4
 8004420:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4413      	add	r3, r2
 800442a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	0151      	lsls	r1, r2, #5
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	440a      	add	r2, r1
 8004438:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800443c:	f043 0302 	orr.w	r3, r3, #2
 8004440:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004442:	e33e      	b.n	8004ac2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	4413      	add	r3, r2
 800444c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	2b20      	cmp	r3, #32
 8004458:	d141      	bne.n	80044de <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4413      	add	r3, r2
 8004462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004466:	461a      	mov	r2, r3
 8004468:	2320      	movs	r3, #32
 800446a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	440b      	add	r3, r1
 800447a:	333d      	adds	r3, #61	; 0x3d
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b01      	cmp	r3, #1
 8004480:	f040 831f 	bne.w	8004ac2 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	4613      	mov	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	440b      	add	r3, r1
 8004492:	333d      	adds	r3, #61	; 0x3d
 8004494:	2200      	movs	r2, #0
 8004496:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	440b      	add	r3, r1
 80044a6:	335c      	adds	r3, #92	; 0x5c
 80044a8:	2202      	movs	r2, #2
 80044aa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	0151      	lsls	r1, r2, #5
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	440a      	add	r2, r1
 80044c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044c6:	f043 0302 	orr.w	r3, r3, #2
 80044ca:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	4611      	mov	r1, r2
 80044d6:	4618      	mov	r0, r3
 80044d8:	f003 ffea 	bl	80084b0 <USB_HC_Halt>
}
 80044dc:	e2f1      	b.n	8004ac2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f0:	2b40      	cmp	r3, #64	; 0x40
 80044f2:	d13f      	bne.n	8004574 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	440b      	add	r3, r1
 8004502:	335d      	adds	r3, #93	; 0x5d
 8004504:	2204      	movs	r2, #4
 8004506:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	440b      	add	r3, r1
 8004516:	333d      	adds	r3, #61	; 0x3d
 8004518:	2201      	movs	r2, #1
 800451a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	440b      	add	r3, r1
 800452a:	3358      	adds	r3, #88	; 0x58
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4413      	add	r3, r2
 8004538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	0151      	lsls	r1, r2, #5
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	440a      	add	r2, r1
 8004546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800454a:	f043 0302 	orr.w	r3, r3, #2
 800454e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	4611      	mov	r1, r2
 800455a:	4618      	mov	r0, r3
 800455c:	f003 ffa8 	bl	80084b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4413      	add	r3, r2
 8004568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800456c:	461a      	mov	r2, r3
 800456e:	2340      	movs	r3, #64	; 0x40
 8004570:	6093      	str	r3, [r2, #8]
}
 8004572:	e2a6      	b.n	8004ac2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	4413      	add	r3, r2
 800457c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800458a:	d122      	bne.n	80045d2 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	4413      	add	r3, r2
 8004594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	0151      	lsls	r1, r2, #5
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	440a      	add	r2, r1
 80045a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045a6:	f043 0302 	orr.w	r3, r3, #2
 80045aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	4611      	mov	r1, r2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f003 ff7a 	bl	80084b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c8:	461a      	mov	r2, r3
 80045ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045ce:	6093      	str	r3, [r2, #8]
}
 80045d0:	e277      	b.n	8004ac2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d135      	bne.n	8004654 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	440b      	add	r3, r1
 80045f6:	3358      	adds	r3, #88	; 0x58
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	4413      	add	r3, r2
 8004604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	0151      	lsls	r1, r2, #5
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	440a      	add	r2, r1
 8004612:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004616:	f043 0302 	orr.w	r3, r3, #2
 800461a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	4611      	mov	r1, r2
 8004626:	4618      	mov	r0, r3
 8004628:	f003 ff42 	bl	80084b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4413      	add	r3, r2
 8004634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004638:	461a      	mov	r2, r3
 800463a:	2301      	movs	r3, #1
 800463c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4613      	mov	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	440b      	add	r3, r1
 800464c:	335d      	adds	r3, #93	; 0x5d
 800464e:	2201      	movs	r2, #1
 8004650:	701a      	strb	r2, [r3, #0]
}
 8004652:	e236      	b.n	8004ac2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	4413      	add	r3, r2
 800465c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b08      	cmp	r3, #8
 8004668:	d12b      	bne.n	80046c2 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	4413      	add	r3, r2
 8004672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004676:	461a      	mov	r2, r3
 8004678:	2308      	movs	r3, #8
 800467a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	4413      	add	r3, r2
 8004684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	0151      	lsls	r1, r2, #5
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	440a      	add	r2, r1
 8004692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004696:	f043 0302 	orr.w	r3, r3, #2
 800469a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	4611      	mov	r1, r2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f003 ff02 	bl	80084b0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	440b      	add	r3, r1
 80046ba:	335d      	adds	r3, #93	; 0x5d
 80046bc:	2205      	movs	r2, #5
 80046be:	701a      	strb	r2, [r3, #0]
}
 80046c0:	e1ff      	b.n	8004ac2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b10      	cmp	r3, #16
 80046d6:	d155      	bne.n	8004784 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	4613      	mov	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	440b      	add	r3, r1
 80046e6:	3358      	adds	r3, #88	; 0x58
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	4613      	mov	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	440b      	add	r3, r1
 80046fa:	335d      	adds	r3, #93	; 0x5d
 80046fc:	2203      	movs	r2, #3
 80046fe:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4613      	mov	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	440b      	add	r3, r1
 800470e:	333d      	adds	r3, #61	; 0x3d
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d114      	bne.n	8004740 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	440b      	add	r3, r1
 8004724:	333c      	adds	r3, #60	; 0x3c
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d109      	bne.n	8004740 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4613      	mov	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	440b      	add	r3, r1
 800473a:	333d      	adds	r3, #61	; 0x3d
 800473c:	2201      	movs	r2, #1
 800473e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4413      	add	r3, r2
 8004748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	0151      	lsls	r1, r2, #5
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	440a      	add	r2, r1
 8004756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800475a:	f043 0302 	orr.w	r3, r3, #2
 800475e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	4611      	mov	r1, r2
 800476a:	4618      	mov	r0, r3
 800476c:	f003 fea0 	bl	80084b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	4413      	add	r3, r2
 8004778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800477c:	461a      	mov	r2, r3
 800477e:	2310      	movs	r3, #16
 8004780:	6093      	str	r3, [r2, #8]
}
 8004782:	e19e      	b.n	8004ac2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4413      	add	r3, r2
 800478c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004796:	2b80      	cmp	r3, #128	; 0x80
 8004798:	d12b      	bne.n	80047f2 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	0151      	lsls	r1, r2, #5
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	440a      	add	r2, r1
 80047b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047b4:	f043 0302 	orr.w	r3, r3, #2
 80047b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	4611      	mov	r1, r2
 80047c4:	4618      	mov	r0, r3
 80047c6:	f003 fe73 	bl	80084b0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	440b      	add	r3, r1
 80047d8:	335d      	adds	r3, #93	; 0x5d
 80047da:	2206      	movs	r2, #6
 80047dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ea:	461a      	mov	r2, r3
 80047ec:	2380      	movs	r3, #128	; 0x80
 80047ee:	6093      	str	r3, [r2, #8]
}
 80047f0:	e167      	b.n	8004ac2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004808:	d135      	bne.n	8004876 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4413      	add	r3, r2
 8004812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	0151      	lsls	r1, r2, #5
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	440a      	add	r2, r1
 8004820:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004824:	f043 0302 	orr.w	r3, r3, #2
 8004828:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	4611      	mov	r1, r2
 8004834:	4618      	mov	r0, r3
 8004836:	f003 fe3b 	bl	80084b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	4413      	add	r3, r2
 8004842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004846:	461a      	mov	r2, r3
 8004848:	2310      	movs	r3, #16
 800484a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	4413      	add	r3, r2
 8004854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004858:	461a      	mov	r2, r3
 800485a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800485e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	4613      	mov	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	440b      	add	r3, r1
 800486e:	335d      	adds	r3, #93	; 0x5d
 8004870:	2208      	movs	r2, #8
 8004872:	701a      	strb	r2, [r3, #0]
}
 8004874:	e125      	b.n	8004ac2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	4413      	add	r3, r2
 800487e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b02      	cmp	r3, #2
 800488a:	f040 811a 	bne.w	8004ac2 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	4413      	add	r3, r2
 8004896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	0151      	lsls	r1, r2, #5
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	440a      	add	r2, r1
 80048a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048a8:	f023 0302 	bic.w	r3, r3, #2
 80048ac:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	440b      	add	r3, r1
 80048bc:	335d      	adds	r3, #93	; 0x5d
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d137      	bne.n	8004934 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80048c4:	6879      	ldr	r1, [r7, #4]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4613      	mov	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	440b      	add	r3, r1
 80048d2:	335c      	adds	r3, #92	; 0x5c
 80048d4:	2201      	movs	r2, #1
 80048d6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	440b      	add	r3, r1
 80048e6:	333f      	adds	r3, #63	; 0x3f
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d00b      	beq.n	8004906 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4613      	mov	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	440b      	add	r3, r1
 80048fc:	333f      	adds	r3, #63	; 0x3f
 80048fe:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004900:	2b03      	cmp	r3, #3
 8004902:	f040 80c5 	bne.w	8004a90 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4613      	mov	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	440b      	add	r3, r1
 8004914:	3351      	adds	r3, #81	; 0x51
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	f083 0301 	eor.w	r3, r3, #1
 800491c:	b2d8      	uxtb	r0, r3
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4613      	mov	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	440b      	add	r3, r1
 800492c:	3351      	adds	r3, #81	; 0x51
 800492e:	4602      	mov	r2, r0
 8004930:	701a      	strb	r2, [r3, #0]
 8004932:	e0ad      	b.n	8004a90 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004934:	6879      	ldr	r1, [r7, #4]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	440b      	add	r3, r1
 8004942:	335d      	adds	r3, #93	; 0x5d
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b03      	cmp	r3, #3
 8004948:	d10a      	bne.n	8004960 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	440b      	add	r3, r1
 8004958:	335c      	adds	r3, #92	; 0x5c
 800495a:	2202      	movs	r2, #2
 800495c:	701a      	strb	r2, [r3, #0]
 800495e:	e097      	b.n	8004a90 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4613      	mov	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	440b      	add	r3, r1
 800496e:	335d      	adds	r3, #93	; 0x5d
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b04      	cmp	r3, #4
 8004974:	d10a      	bne.n	800498c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4613      	mov	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	440b      	add	r3, r1
 8004984:	335c      	adds	r3, #92	; 0x5c
 8004986:	2202      	movs	r2, #2
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	e081      	b.n	8004a90 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4613      	mov	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	440b      	add	r3, r1
 800499a:	335d      	adds	r3, #93	; 0x5d
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	2b05      	cmp	r3, #5
 80049a0:	d10a      	bne.n	80049b8 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	4613      	mov	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	440b      	add	r3, r1
 80049b0:	335c      	adds	r3, #92	; 0x5c
 80049b2:	2205      	movs	r2, #5
 80049b4:	701a      	strb	r2, [r3, #0]
 80049b6:	e06b      	b.n	8004a90 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	440b      	add	r3, r1
 80049c6:	335d      	adds	r3, #93	; 0x5d
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2b06      	cmp	r3, #6
 80049cc:	d00a      	beq.n	80049e4 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	440b      	add	r3, r1
 80049dc:	335d      	adds	r3, #93	; 0x5d
 80049de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d155      	bne.n	8004a90 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4613      	mov	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	440b      	add	r3, r1
 80049f2:	3358      	adds	r3, #88	; 0x58
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	1c59      	adds	r1, r3, #1
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4403      	add	r3, r0
 8004a06:	3358      	adds	r3, #88	; 0x58
 8004a08:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	440b      	add	r3, r1
 8004a18:	3358      	adds	r3, #88	; 0x58
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d914      	bls.n	8004a4a <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	440b      	add	r3, r1
 8004a2e:	3358      	adds	r3, #88	; 0x58
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	440b      	add	r3, r1
 8004a42:	335c      	adds	r3, #92	; 0x5c
 8004a44:	2204      	movs	r2, #4
 8004a46:	701a      	strb	r2, [r3, #0]
 8004a48:	e009      	b.n	8004a5e <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a4a:	6879      	ldr	r1, [r7, #4]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	440b      	add	r3, r1
 8004a58:	335c      	adds	r3, #92	; 0x5c
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a74:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a7c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	b2d8      	uxtb	r0, r3
 8004aa6:	6879      	ldr	r1, [r7, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	440b      	add	r3, r1
 8004ab4:	335c      	adds	r3, #92	; 0x5c
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4601      	mov	r1, r0
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7ff f84c 	bl	8003b5a <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004ac2:	bf00      	nop
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08a      	sub	sp, #40	; 0x28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	0c5b      	lsrs	r3, r3, #17
 8004af2:	f003 030f 	and.w	r3, r3, #15
 8004af6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	091b      	lsrs	r3, r3, #4
 8004afc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b00:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d003      	beq.n	8004b10 <HCD_RXQLVL_IRQHandler+0x44>
 8004b08:	2b05      	cmp	r3, #5
 8004b0a:	f000 8082 	beq.w	8004c12 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004b0e:	e083      	b.n	8004c18 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d07f      	beq.n	8004c16 <HCD_RXQLVL_IRQHandler+0x14a>
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	440b      	add	r3, r1
 8004b24:	3344      	adds	r3, #68	; 0x44
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d074      	beq.n	8004c16 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6818      	ldr	r0, [r3, #0]
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	440b      	add	r3, r1
 8004b3e:	3344      	adds	r3, #68	; 0x44
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	b292      	uxth	r2, r2
 8004b46:	4619      	mov	r1, r3
 8004b48:	f003 faf4 	bl	8008134 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	440b      	add	r3, r1
 8004b5a:	3344      	adds	r3, #68	; 0x44
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	18d1      	adds	r1, r2, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	4403      	add	r3, r0
 8004b70:	3344      	adds	r3, #68	; 0x44
 8004b72:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	440b      	add	r3, r1
 8004b82:	334c      	adds	r3, #76	; 0x4c
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	18d1      	adds	r1, r2, r3
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	4403      	add	r3, r0
 8004b98:	334c      	adds	r3, #76	; 0x4c
 8004b9a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba8:	691a      	ldr	r2, [r3, #16]
 8004baa:	4b1d      	ldr	r3, [pc, #116]	; (8004c20 <HCD_RXQLVL_IRQHandler+0x154>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d031      	beq.n	8004c16 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004bc8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bd0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bde:	461a      	mov	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	4613      	mov	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	440b      	add	r3, r1
 8004bf2:	3350      	adds	r3, #80	; 0x50
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	f083 0301 	eor.w	r3, r3, #1
 8004bfa:	b2d8      	uxtb	r0, r3
 8004bfc:	6879      	ldr	r1, [r7, #4]
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	440b      	add	r3, r1
 8004c0a:	3350      	adds	r3, #80	; 0x50
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	701a      	strb	r2, [r3, #0]
      break;
 8004c10:	e001      	b.n	8004c16 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8004c12:	bf00      	nop
 8004c14:	e000      	b.n	8004c18 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8004c16:	bf00      	nop
  }
}
 8004c18:	bf00      	nop
 8004c1a:	3728      	adds	r7, #40	; 0x28
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	1ff80000 	.word	0x1ff80000

08004c24 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c50:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d10b      	bne.n	8004c74 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d102      	bne.n	8004c6c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fe ff4f 	bl	8003b0a <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f043 0302 	orr.w	r3, r3, #2
 8004c72:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d132      	bne.n	8004ce4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f043 0308 	orr.w	r3, r3, #8
 8004c84:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d126      	bne.n	8004cde <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d113      	bne.n	8004cc0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004c9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ca2:	d106      	bne.n	8004cb2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2102      	movs	r1, #2
 8004caa:	4618      	mov	r0, r3
 8004cac:	f003 fb7c 	bl	80083a8 <USB_InitFSLSPClkSel>
 8004cb0:	e011      	b.n	8004cd6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f003 fb75 	bl	80083a8 <USB_InitFSLSPClkSel>
 8004cbe:	e00a      	b.n	8004cd6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d106      	bne.n	8004cd6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004cd4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7fe ff2b 	bl	8003b32 <HAL_HCD_PortEnabled_Callback>
 8004cdc:	e002      	b.n	8004ce4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fe ff31 	bl	8003b46 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f003 0320 	and.w	r3, r3, #32
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	d103      	bne.n	8004cf6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f043 0320 	orr.w	r3, r3, #32
 8004cf4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	6013      	str	r3, [r2, #0]
}
 8004d02:	bf00      	nop
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e11f      	b.n	8004f5e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d106      	bne.n	8004d38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fd fb0a 	bl	800234c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2224      	movs	r2, #36	; 0x24
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0201 	bic.w	r2, r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d70:	f001 f9d8 	bl	8006124 <HAL_RCC_GetPCLK1Freq>
 8004d74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	4a7b      	ldr	r2, [pc, #492]	; (8004f68 <HAL_I2C_Init+0x25c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d807      	bhi.n	8004d90 <HAL_I2C_Init+0x84>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4a7a      	ldr	r2, [pc, #488]	; (8004f6c <HAL_I2C_Init+0x260>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	bf94      	ite	ls
 8004d88:	2301      	movls	r3, #1
 8004d8a:	2300      	movhi	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	e006      	b.n	8004d9e <HAL_I2C_Init+0x92>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4a77      	ldr	r2, [pc, #476]	; (8004f70 <HAL_I2C_Init+0x264>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	bf94      	ite	ls
 8004d98:	2301      	movls	r3, #1
 8004d9a:	2300      	movhi	r3, #0
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e0db      	b.n	8004f5e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	4a72      	ldr	r2, [pc, #456]	; (8004f74 <HAL_I2C_Init+0x268>)
 8004daa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dae:	0c9b      	lsrs	r3, r3, #18
 8004db0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	4a64      	ldr	r2, [pc, #400]	; (8004f68 <HAL_I2C_Init+0x25c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d802      	bhi.n	8004de0 <HAL_I2C_Init+0xd4>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	e009      	b.n	8004df4 <HAL_I2C_Init+0xe8>
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004de6:	fb02 f303 	mul.w	r3, r2, r3
 8004dea:	4a63      	ldr	r2, [pc, #396]	; (8004f78 <HAL_I2C_Init+0x26c>)
 8004dec:	fba2 2303 	umull	r2, r3, r2, r3
 8004df0:	099b      	lsrs	r3, r3, #6
 8004df2:	3301      	adds	r3, #1
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6812      	ldr	r2, [r2, #0]
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	4956      	ldr	r1, [pc, #344]	; (8004f68 <HAL_I2C_Init+0x25c>)
 8004e10:	428b      	cmp	r3, r1
 8004e12:	d80d      	bhi.n	8004e30 <HAL_I2C_Init+0x124>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	1e59      	subs	r1, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e22:	3301      	adds	r3, #1
 8004e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	bf38      	it	cc
 8004e2c:	2304      	movcc	r3, #4
 8004e2e:	e04f      	b.n	8004ed0 <HAL_I2C_Init+0x1c4>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d111      	bne.n	8004e5c <HAL_I2C_Init+0x150>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	1e58      	subs	r0, r3, #1
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6859      	ldr	r1, [r3, #4]
 8004e40:	460b      	mov	r3, r1
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	440b      	add	r3, r1
 8004e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	bf0c      	ite	eq
 8004e54:	2301      	moveq	r3, #1
 8004e56:	2300      	movne	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	e012      	b.n	8004e82 <HAL_I2C_Init+0x176>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	1e58      	subs	r0, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6859      	ldr	r1, [r3, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	0099      	lsls	r1, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e72:	3301      	adds	r3, #1
 8004e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	bf0c      	ite	eq
 8004e7c:	2301      	moveq	r3, #1
 8004e7e:	2300      	movne	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <HAL_I2C_Init+0x17e>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e022      	b.n	8004ed0 <HAL_I2C_Init+0x1c4>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10e      	bne.n	8004eb0 <HAL_I2C_Init+0x1a4>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	1e58      	subs	r0, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6859      	ldr	r1, [r3, #4]
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	440b      	add	r3, r1
 8004ea0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eae:	e00f      	b.n	8004ed0 <HAL_I2C_Init+0x1c4>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	1e58      	subs	r0, r3, #1
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6859      	ldr	r1, [r3, #4]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	0099      	lsls	r1, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ecc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	6809      	ldr	r1, [r1, #0]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69da      	ldr	r2, [r3, #28]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004efe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6911      	ldr	r1, [r2, #16]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	68d2      	ldr	r2, [r2, #12]
 8004f0a:	4311      	orrs	r1, r2
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	430b      	orrs	r3, r1
 8004f12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695a      	ldr	r2, [r3, #20]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	000186a0 	.word	0x000186a0
 8004f6c:	001e847f 	.word	0x001e847f
 8004f70:	003d08ff 	.word	0x003d08ff
 8004f74:	431bde83 	.word	0x431bde83
 8004f78:	10624dd3 	.word	0x10624dd3

08004f7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b20      	cmp	r3, #32
 8004f90:	d129      	bne.n	8004fe6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2224      	movs	r2, #36	; 0x24
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0201 	bic.w	r2, r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0210 	bic.w	r2, r2, #16
 8004fb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0201 	orr.w	r2, r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e000      	b.n	8004fe8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004fe6:	2302      	movs	r3, #2
  }
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004ffe:	2300      	movs	r3, #0
 8005000:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b20      	cmp	r3, #32
 800500c:	d12a      	bne.n	8005064 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2224      	movs	r2, #36	; 0x24
 8005012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0201 	bic.w	r2, r2, #1
 8005024:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800502e:	89fb      	ldrh	r3, [r7, #14]
 8005030:	f023 030f 	bic.w	r3, r3, #15
 8005034:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	b29a      	uxth	r2, r3
 800503a:	89fb      	ldrh	r3, [r7, #14]
 800503c:	4313      	orrs	r3, r2
 800503e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	89fa      	ldrh	r2, [r7, #14]
 8005046:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0201 	orr.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	e000      	b.n	8005066 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005064:	2302      	movs	r3, #2
  }
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
	...

08005074 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e0bf      	b.n	8005206 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fd f9c0 	bl	8002420 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80050b6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6999      	ldr	r1, [r3, #24]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80050cc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6899      	ldr	r1, [r3, #8]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	4b4a      	ldr	r3, [pc, #296]	; (8005210 <HAL_LTDC_Init+0x19c>)
 80050e8:	400b      	ands	r3, r1
 80050ea:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	041b      	lsls	r3, r3, #16
 80050f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6899      	ldr	r1, [r3, #8]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699a      	ldr	r2, [r3, #24]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	431a      	orrs	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68d9      	ldr	r1, [r3, #12]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	4b3e      	ldr	r3, [pc, #248]	; (8005210 <HAL_LTDC_Init+0x19c>)
 8005116:	400b      	ands	r3, r1
 8005118:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	041b      	lsls	r3, r3, #16
 8005120:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68d9      	ldr	r1, [r3, #12]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1a      	ldr	r2, [r3, #32]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6919      	ldr	r1, [r3, #16]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	4b33      	ldr	r3, [pc, #204]	; (8005210 <HAL_LTDC_Init+0x19c>)
 8005144:	400b      	ands	r3, r1
 8005146:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	041b      	lsls	r3, r3, #16
 800514e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6919      	ldr	r1, [r3, #16]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6959      	ldr	r1, [r3, #20]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	4b27      	ldr	r3, [pc, #156]	; (8005210 <HAL_LTDC_Init+0x19c>)
 8005172:	400b      	ands	r3, r1
 8005174:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517a:	041b      	lsls	r3, r3, #16
 800517c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6959      	ldr	r1, [r3, #20]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80051a4:	041b      	lsls	r3, r3, #16
 80051a6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80051b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0206 	orr.w	r2, r2, #6
 80051e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699a      	ldr	r2, [r3, #24]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0201 	orr.w	r2, r2, #1
 80051f2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	f000f800 	.word	0xf000f800

08005214 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005222:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b00      	cmp	r3, #0
 8005234:	d023      	beq.n	800527e <HAL_LTDC_IRQHandler+0x6a>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01e      	beq.n	800527e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0204 	bic.w	r2, r2, #4
 800524e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2204      	movs	r2, #4
 8005256:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800525e:	f043 0201 	orr.w	r2, r3, #1
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2204      	movs	r2, #4
 800526c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f86f 	bl	800535c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d023      	beq.n	80052d0 <HAL_LTDC_IRQHandler+0xbc>
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d01e      	beq.n	80052d0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0202 	bic.w	r2, r2, #2
 80052a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2202      	movs	r2, #2
 80052a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80052b0:	f043 0202 	orr.w	r2, r3, #2
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2204      	movs	r2, #4
 80052be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f846 	bl	800535c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d01b      	beq.n	8005312 <HAL_LTDC_IRQHandler+0xfe>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d016      	beq.n	8005312 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0201 	bic.w	r2, r2, #1
 80052f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2201      	movs	r2, #1
 80052fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f82f 	bl	8005370 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f003 0308 	and.w	r3, r3, #8
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01b      	beq.n	8005354 <HAL_LTDC_IRQHandler+0x140>
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f003 0308 	and.w	r3, r3, #8
 8005322:	2b00      	cmp	r3, #0
 8005324:	d016      	beq.n	8005354 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0208 	bic.w	r2, r2, #8
 8005334:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2208      	movs	r2, #8
 800533c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fc fdf6 	bl	8001f40 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005354:	bf00      	nop
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005384:	b5b0      	push	{r4, r5, r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005396:	2b01      	cmp	r3, #1
 8005398:	d101      	bne.n	800539e <HAL_LTDC_ConfigLayer+0x1a>
 800539a:	2302      	movs	r3, #2
 800539c:	e02c      	b.n	80053f8 <HAL_LTDC_ConfigLayer+0x74>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2202      	movs	r2, #2
 80053aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2134      	movs	r1, #52	; 0x34
 80053b4:	fb01 f303 	mul.w	r3, r1, r3
 80053b8:	4413      	add	r3, r2
 80053ba:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	4614      	mov	r4, r2
 80053c2:	461d      	mov	r5, r3
 80053c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053d0:	682b      	ldr	r3, [r5, #0]
 80053d2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	68b9      	ldr	r1, [r7, #8]
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 f882 	bl	80054e2 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2201      	movs	r2, #1
 80053e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bdb0      	pop	{r4, r5, r7, pc}

08005400 <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005410:	2b01      	cmp	r3, #1
 8005412:	d101      	bne.n	8005418 <HAL_LTDC_Reload+0x18>
 8005414:	2302      	movs	r3, #2
 8005416:	e01c      	b.n	8005452 <HAL_LTDC_Reload+0x52>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0208 	orr.w	r2, r2, #8
 8005436:	635a      	str	r2, [r3, #52]	; 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <HAL_LTDC_SetWindowPosition_NoReload>:
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b086      	sub	sp, #24
 8005462:	af00      	add	r7, sp, #0
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	60b9      	str	r1, [r7, #8]
 8005468:	607a      	str	r2, [r7, #4]
 800546a:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(X0));
  assert_param(IS_LTDC_CFBLNBR(Y0));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005472:	2b01      	cmp	r3, #1
 8005474:	d101      	bne.n	800547a <HAL_LTDC_SetWindowPosition_NoReload+0x1c>
 8005476:	2302      	movs	r3, #2
 8005478:	e02f      	b.n	80054da <HAL_LTDC_SetWindowPosition_NoReload+0x7c>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2202      	movs	r2, #2
 8005486:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2234      	movs	r2, #52	; 0x34
 800548e:	fb02 f303 	mul.w	r3, r2, r3
 8005492:	3338      	adds	r3, #56	; 0x38
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4413      	add	r3, r2
 8005498:	617b      	str	r3, [r7, #20]

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	441a      	add	r2, r3
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	441a      	add	r2, r3
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	6979      	ldr	r1, [r7, #20]
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 f80d 	bl	80054e2 <LTDC_SetConfig>

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b089      	sub	sp, #36	; 0x24
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	60f8      	str	r0, [r7, #12]
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	0c1b      	lsrs	r3, r3, #16
 80054fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054fe:	4413      	add	r3, r2
 8005500:	041b      	lsls	r3, r3, #16
 8005502:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	461a      	mov	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	01db      	lsls	r3, r3, #7
 800550e:	4413      	add	r3, r2
 8005510:	3384      	adds	r3, #132	; 0x84
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	6812      	ldr	r2, [r2, #0]
 8005518:	4611      	mov	r1, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	01d2      	lsls	r2, r2, #7
 800551e:	440a      	add	r2, r1
 8005520:	3284      	adds	r2, #132	; 0x84
 8005522:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005526:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	0c1b      	lsrs	r3, r3, #16
 8005534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005538:	4413      	add	r3, r2
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4619      	mov	r1, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	01db      	lsls	r3, r3, #7
 8005546:	440b      	add	r3, r1
 8005548:	3384      	adds	r3, #132	; 0x84
 800554a:	4619      	mov	r1, r3
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	4313      	orrs	r3, r2
 8005550:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005560:	4413      	add	r3, r2
 8005562:	041b      	lsls	r3, r3, #16
 8005564:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	01db      	lsls	r3, r3, #7
 8005570:	4413      	add	r3, r2
 8005572:	3384      	adds	r3, #132	; 0x84
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	6812      	ldr	r2, [r2, #0]
 800557a:	4611      	mov	r1, r2
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	01d2      	lsls	r2, r2, #7
 8005580:	440a      	add	r2, r1
 8005582:	3284      	adds	r2, #132	; 0x84
 8005584:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005588:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	689a      	ldr	r2, [r3, #8]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005598:	4413      	add	r3, r2
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4619      	mov	r1, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	01db      	lsls	r3, r3, #7
 80055a6:	440b      	add	r3, r1
 80055a8:	3384      	adds	r3, #132	; 0x84
 80055aa:	4619      	mov	r1, r3
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	461a      	mov	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	01db      	lsls	r3, r3, #7
 80055bc:	4413      	add	r3, r2
 80055be:	3384      	adds	r3, #132	; 0x84
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	6812      	ldr	r2, [r2, #0]
 80055c6:	4611      	mov	r1, r2
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	01d2      	lsls	r2, r2, #7
 80055cc:	440a      	add	r2, r1
 80055ce:	3284      	adds	r2, #132	; 0x84
 80055d0:	f023 0307 	bic.w	r3, r3, #7
 80055d4:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	01db      	lsls	r3, r3, #7
 80055e0:	4413      	add	r3, r2
 80055e2:	3384      	adds	r3, #132	; 0x84
 80055e4:	461a      	mov	r2, r3
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80055f2:	021b      	lsls	r3, r3, #8
 80055f4:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80055fc:	041b      	lsls	r3, r3, #16
 80055fe:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	061b      	lsls	r3, r3, #24
 8005606:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	461a      	mov	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	01db      	lsls	r3, r3, #7
 8005612:	4413      	add	r3, r2
 8005614:	3384      	adds	r3, #132	; 0x84
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	461a      	mov	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	01db      	lsls	r3, r3, #7
 8005622:	4413      	add	r3, r2
 8005624:	3384      	adds	r3, #132	; 0x84
 8005626:	461a      	mov	r2, r3
 8005628:	2300      	movs	r3, #0
 800562a:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005632:	461a      	mov	r2, r3
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	431a      	orrs	r2, r3
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	431a      	orrs	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4619      	mov	r1, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	01db      	lsls	r3, r3, #7
 8005646:	440b      	add	r3, r1
 8005648:	3384      	adds	r3, #132	; 0x84
 800564a:	4619      	mov	r1, r3
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	4313      	orrs	r3, r2
 8005650:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	461a      	mov	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	01db      	lsls	r3, r3, #7
 800565c:	4413      	add	r3, r2
 800565e:	3384      	adds	r3, #132	; 0x84
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	6812      	ldr	r2, [r2, #0]
 8005666:	4611      	mov	r1, r2
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	01d2      	lsls	r2, r2, #7
 800566c:	440a      	add	r2, r1
 800566e:	3284      	adds	r2, #132	; 0x84
 8005670:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005674:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	01db      	lsls	r3, r3, #7
 8005680:	4413      	add	r3, r2
 8005682:	3384      	adds	r3, #132	; 0x84
 8005684:	461a      	mov	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	461a      	mov	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	01db      	lsls	r3, r3, #7
 8005696:	4413      	add	r3, r2
 8005698:	3384      	adds	r3, #132	; 0x84
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	6812      	ldr	r2, [r2, #0]
 80056a0:	4611      	mov	r1, r2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	01d2      	lsls	r2, r2, #7
 80056a6:	440a      	add	r2, r1
 80056a8:	3284      	adds	r2, #132	; 0x84
 80056aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80056ae:	f023 0307 	bic.w	r3, r3, #7
 80056b2:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	69da      	ldr	r2, [r3, #28]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	68f9      	ldr	r1, [r7, #12]
 80056be:	6809      	ldr	r1, [r1, #0]
 80056c0:	4608      	mov	r0, r1
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	01c9      	lsls	r1, r1, #7
 80056c6:	4401      	add	r1, r0
 80056c8:	3184      	adds	r1, #132	; 0x84
 80056ca:	4313      	orrs	r3, r2
 80056cc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	01db      	lsls	r3, r3, #7
 80056d8:	4413      	add	r3, r2
 80056da:	3384      	adds	r3, #132	; 0x84
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	01db      	lsls	r3, r3, #7
 80056e8:	4413      	add	r3, r2
 80056ea:	3384      	adds	r3, #132	; 0x84
 80056ec:	461a      	mov	r2, r3
 80056ee:	2300      	movs	r3, #0
 80056f0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	01db      	lsls	r3, r3, #7
 80056fc:	4413      	add	r3, r2
 80056fe:	3384      	adds	r3, #132	; 0x84
 8005700:	461a      	mov	r2, r3
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d102      	bne.n	8005716 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005710:	2304      	movs	r3, #4
 8005712:	61fb      	str	r3, [r7, #28]
 8005714:	e01b      	b.n	800574e <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d102      	bne.n	8005724 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800571e:	2303      	movs	r3, #3
 8005720:	61fb      	str	r3, [r7, #28]
 8005722:	e014      	b.n	800574e <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	2b04      	cmp	r3, #4
 800572a:	d00b      	beq.n	8005744 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005730:	2b02      	cmp	r3, #2
 8005732:	d007      	beq.n	8005744 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005738:	2b03      	cmp	r3, #3
 800573a:	d003      	beq.n	8005744 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005740:	2b07      	cmp	r3, #7
 8005742:	d102      	bne.n	800574a <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005744:	2302      	movs	r3, #2
 8005746:	61fb      	str	r3, [r7, #28]
 8005748:	e001      	b.n	800574e <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800574a:	2301      	movs	r3, #1
 800574c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	01db      	lsls	r3, r3, #7
 8005758:	4413      	add	r3, r2
 800575a:	3384      	adds	r3, #132	; 0x84
 800575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	6812      	ldr	r2, [r2, #0]
 8005762:	4611      	mov	r1, r2
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	01d2      	lsls	r2, r2, #7
 8005768:	440a      	add	r2, r1
 800576a:	3284      	adds	r2, #132	; 0x84
 800576c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005770:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	69fa      	ldr	r2, [r7, #28]
 8005778:	fb02 f303 	mul.w	r3, r2, r3
 800577c:	041a      	lsls	r2, r3, #16
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	6859      	ldr	r1, [r3, #4]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	1acb      	subs	r3, r1, r3
 8005788:	69f9      	ldr	r1, [r7, #28]
 800578a:	fb01 f303 	mul.w	r3, r1, r3
 800578e:	3303      	adds	r3, #3
 8005790:	68f9      	ldr	r1, [r7, #12]
 8005792:	6809      	ldr	r1, [r1, #0]
 8005794:	4608      	mov	r0, r1
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	01c9      	lsls	r1, r1, #7
 800579a:	4401      	add	r1, r0
 800579c:	3184      	adds	r1, #132	; 0x84
 800579e:	4313      	orrs	r3, r2
 80057a0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	461a      	mov	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	01db      	lsls	r3, r3, #7
 80057ac:	4413      	add	r3, r2
 80057ae:	3384      	adds	r3, #132	; 0x84
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	6812      	ldr	r2, [r2, #0]
 80057b6:	4611      	mov	r1, r2
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	01d2      	lsls	r2, r2, #7
 80057bc:	440a      	add	r2, r1
 80057be:	3284      	adds	r2, #132	; 0x84
 80057c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80057c4:	f023 0307 	bic.w	r3, r3, #7
 80057c8:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	01db      	lsls	r3, r3, #7
 80057d4:	4413      	add	r3, r2
 80057d6:	3384      	adds	r3, #132	; 0x84
 80057d8:	461a      	mov	r2, r3
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057de:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	461a      	mov	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	01db      	lsls	r3, r3, #7
 80057ea:	4413      	add	r3, r2
 80057ec:	3384      	adds	r3, #132	; 0x84
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	6812      	ldr	r2, [r2, #0]
 80057f4:	4611      	mov	r1, r2
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	01d2      	lsls	r2, r2, #7
 80057fa:	440a      	add	r2, r1
 80057fc:	3284      	adds	r2, #132	; 0x84
 80057fe:	f043 0301 	orr.w	r3, r3, #1
 8005802:	6013      	str	r3, [r2, #0]
}
 8005804:	bf00      	nop
 8005806:	3724      	adds	r7, #36	; 0x24
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800581a:	2300      	movs	r3, #0
 800581c:	603b      	str	r3, [r7, #0]
 800581e:	4b20      	ldr	r3, [pc, #128]	; (80058a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	4a1f      	ldr	r2, [pc, #124]	; (80058a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005828:	6413      	str	r3, [r2, #64]	; 0x40
 800582a:	4b1d      	ldr	r3, [pc, #116]	; (80058a0 <HAL_PWREx_EnableOverDrive+0x90>)
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005832:	603b      	str	r3, [r7, #0]
 8005834:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005836:	4b1b      	ldr	r3, [pc, #108]	; (80058a4 <HAL_PWREx_EnableOverDrive+0x94>)
 8005838:	2201      	movs	r2, #1
 800583a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800583c:	f7fd f9f8 	bl	8002c30 <HAL_GetTick>
 8005840:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005842:	e009      	b.n	8005858 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005844:	f7fd f9f4 	bl	8002c30 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005852:	d901      	bls.n	8005858 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e01f      	b.n	8005898 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005858:	4b13      	ldr	r3, [pc, #76]	; (80058a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005864:	d1ee      	bne.n	8005844 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005866:	4b11      	ldr	r3, [pc, #68]	; (80058ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005868:	2201      	movs	r2, #1
 800586a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800586c:	f7fd f9e0 	bl	8002c30 <HAL_GetTick>
 8005870:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005872:	e009      	b.n	8005888 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005874:	f7fd f9dc 	bl	8002c30 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005882:	d901      	bls.n	8005888 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e007      	b.n	8005898 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005888:	4b07      	ldr	r3, [pc, #28]	; (80058a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005890:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005894:	d1ee      	bne.n	8005874 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40023800 	.word	0x40023800
 80058a4:	420e0040 	.word	0x420e0040
 80058a8:	40007000 	.word	0x40007000
 80058ac:	420e0044 	.word	0x420e0044

080058b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e25b      	b.n	8005d7a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d075      	beq.n	80059ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058ce:	4ba3      	ldr	r3, [pc, #652]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 030c 	and.w	r3, r3, #12
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d00c      	beq.n	80058f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058da:	4ba0      	ldr	r3, [pc, #640]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058e2:	2b08      	cmp	r3, #8
 80058e4:	d112      	bne.n	800590c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058e6:	4b9d      	ldr	r3, [pc, #628]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058f2:	d10b      	bne.n	800590c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058f4:	4b99      	ldr	r3, [pc, #612]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d05b      	beq.n	80059b8 <HAL_RCC_OscConfig+0x108>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d157      	bne.n	80059b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e236      	b.n	8005d7a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005914:	d106      	bne.n	8005924 <HAL_RCC_OscConfig+0x74>
 8005916:	4b91      	ldr	r3, [pc, #580]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a90      	ldr	r2, [pc, #576]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 800591c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	e01d      	b.n	8005960 <HAL_RCC_OscConfig+0xb0>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800592c:	d10c      	bne.n	8005948 <HAL_RCC_OscConfig+0x98>
 800592e:	4b8b      	ldr	r3, [pc, #556]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a8a      	ldr	r2, [pc, #552]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 8005934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005938:	6013      	str	r3, [r2, #0]
 800593a:	4b88      	ldr	r3, [pc, #544]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a87      	ldr	r2, [pc, #540]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 8005940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005944:	6013      	str	r3, [r2, #0]
 8005946:	e00b      	b.n	8005960 <HAL_RCC_OscConfig+0xb0>
 8005948:	4b84      	ldr	r3, [pc, #528]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a83      	ldr	r2, [pc, #524]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 800594e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	4b81      	ldr	r3, [pc, #516]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a80      	ldr	r2, [pc, #512]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 800595a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800595e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d013      	beq.n	8005990 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005968:	f7fd f962 	bl	8002c30 <HAL_GetTick>
 800596c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005970:	f7fd f95e 	bl	8002c30 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b64      	cmp	r3, #100	; 0x64
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e1fb      	b.n	8005d7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005982:	4b76      	ldr	r3, [pc, #472]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d0f0      	beq.n	8005970 <HAL_RCC_OscConfig+0xc0>
 800598e:	e014      	b.n	80059ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005990:	f7fd f94e 	bl	8002c30 <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005998:	f7fd f94a 	bl	8002c30 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b64      	cmp	r3, #100	; 0x64
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e1e7      	b.n	8005d7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059aa:	4b6c      	ldr	r3, [pc, #432]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0xe8>
 80059b6:	e000      	b.n	80059ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d063      	beq.n	8005a8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059c6:	4b65      	ldr	r3, [pc, #404]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 030c 	and.w	r3, r3, #12
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00b      	beq.n	80059ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059d2:	4b62      	ldr	r3, [pc, #392]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059da:	2b08      	cmp	r3, #8
 80059dc:	d11c      	bne.n	8005a18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059de:	4b5f      	ldr	r3, [pc, #380]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d116      	bne.n	8005a18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ea:	4b5c      	ldr	r3, [pc, #368]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d005      	beq.n	8005a02 <HAL_RCC_OscConfig+0x152>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d001      	beq.n	8005a02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e1bb      	b.n	8005d7a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a02:	4b56      	ldr	r3, [pc, #344]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	4952      	ldr	r1, [pc, #328]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a16:	e03a      	b.n	8005a8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d020      	beq.n	8005a62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a20:	4b4f      	ldr	r3, [pc, #316]	; (8005b60 <HAL_RCC_OscConfig+0x2b0>)
 8005a22:	2201      	movs	r2, #1
 8005a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a26:	f7fd f903 	bl	8002c30 <HAL_GetTick>
 8005a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a2c:	e008      	b.n	8005a40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a2e:	f7fd f8ff 	bl	8002c30 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e19c      	b.n	8005d7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a40:	4b46      	ldr	r3, [pc, #280]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f0      	beq.n	8005a2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a4c:	4b43      	ldr	r3, [pc, #268]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	4940      	ldr	r1, [pc, #256]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	600b      	str	r3, [r1, #0]
 8005a60:	e015      	b.n	8005a8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a62:	4b3f      	ldr	r3, [pc, #252]	; (8005b60 <HAL_RCC_OscConfig+0x2b0>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a68:	f7fd f8e2 	bl	8002c30 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a70:	f7fd f8de 	bl	8002c30 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e17b      	b.n	8005d7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a82:	4b36      	ldr	r3, [pc, #216]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f0      	bne.n	8005a70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d030      	beq.n	8005afc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d016      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aa2:	4b30      	ldr	r3, [pc, #192]	; (8005b64 <HAL_RCC_OscConfig+0x2b4>)
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa8:	f7fd f8c2 	bl	8002c30 <HAL_GetTick>
 8005aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ab0:	f7fd f8be 	bl	8002c30 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e15b      	b.n	8005d7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ac2:	4b26      	ldr	r3, [pc, #152]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 8005ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0f0      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x200>
 8005ace:	e015      	b.n	8005afc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ad0:	4b24      	ldr	r3, [pc, #144]	; (8005b64 <HAL_RCC_OscConfig+0x2b4>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ad6:	f7fd f8ab 	bl	8002c30 <HAL_GetTick>
 8005ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005adc:	e008      	b.n	8005af0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ade:	f7fd f8a7 	bl	8002c30 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d901      	bls.n	8005af0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e144      	b.n	8005d7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005af0:	4b1a      	ldr	r3, [pc, #104]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 8005af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1f0      	bne.n	8005ade <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 80a0 	beq.w	8005c4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b0e:	4b13      	ldr	r3, [pc, #76]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10f      	bne.n	8005b3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60bb      	str	r3, [r7, #8]
 8005b1e:	4b0f      	ldr	r3, [pc, #60]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	4a0e      	ldr	r2, [pc, #56]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 8005b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b28:	6413      	str	r3, [r2, #64]	; 0x40
 8005b2a:	4b0c      	ldr	r3, [pc, #48]	; (8005b5c <HAL_RCC_OscConfig+0x2ac>)
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b32:	60bb      	str	r3, [r7, #8]
 8005b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b36:	2301      	movs	r3, #1
 8005b38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b3a:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <HAL_RCC_OscConfig+0x2b8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d121      	bne.n	8005b8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b46:	4b08      	ldr	r3, [pc, #32]	; (8005b68 <HAL_RCC_OscConfig+0x2b8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a07      	ldr	r2, [pc, #28]	; (8005b68 <HAL_RCC_OscConfig+0x2b8>)
 8005b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b52:	f7fd f86d 	bl	8002c30 <HAL_GetTick>
 8005b56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b58:	e011      	b.n	8005b7e <HAL_RCC_OscConfig+0x2ce>
 8005b5a:	bf00      	nop
 8005b5c:	40023800 	.word	0x40023800
 8005b60:	42470000 	.word	0x42470000
 8005b64:	42470e80 	.word	0x42470e80
 8005b68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b6c:	f7fd f860 	bl	8002c30 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e0fd      	b.n	8005d7a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b7e:	4b81      	ldr	r3, [pc, #516]	; (8005d84 <HAL_RCC_OscConfig+0x4d4>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0f0      	beq.n	8005b6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d106      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x2f0>
 8005b92:	4b7d      	ldr	r3, [pc, #500]	; (8005d88 <HAL_RCC_OscConfig+0x4d8>)
 8005b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b96:	4a7c      	ldr	r2, [pc, #496]	; (8005d88 <HAL_RCC_OscConfig+0x4d8>)
 8005b98:	f043 0301 	orr.w	r3, r3, #1
 8005b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b9e:	e01c      	b.n	8005bda <HAL_RCC_OscConfig+0x32a>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	2b05      	cmp	r3, #5
 8005ba6:	d10c      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x312>
 8005ba8:	4b77      	ldr	r3, [pc, #476]	; (8005d88 <HAL_RCC_OscConfig+0x4d8>)
 8005baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bac:	4a76      	ldr	r2, [pc, #472]	; (8005d88 <HAL_RCC_OscConfig+0x4d8>)
 8005bae:	f043 0304 	orr.w	r3, r3, #4
 8005bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8005bb4:	4b74      	ldr	r3, [pc, #464]	; (8005d88 <HAL_RCC_OscConfig+0x4d8>)
 8005bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb8:	4a73      	ldr	r2, [pc, #460]	; (8005d88 <HAL_RCC_OscConfig+0x4d8>)
 8005bba:	f043 0301 	orr.w	r3, r3, #1
 8005bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8005bc0:	e00b      	b.n	8005bda <HAL_RCC_OscConfig+0x32a>
 8005bc2:	4b71      	ldr	r3, [pc, #452]	; (8005d88 <HAL_RCC_OscConfig+0x4d8>)
 8005bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc6:	4a70      	ldr	r2, [pc, #448]	; (8005d88 <HAL_RCC_OscConfig+0x4d8>)
 8005bc8:	f023 0301 	bic.w	r3, r3, #1
 8005bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8005bce:	4b6e      	ldr	r3, [pc, #440]	; (8005d88 <HAL_RCC_OscConfig+0x4d8>)
 8005bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd2:	4a6d      	ldr	r2, [pc, #436]	; (8005d88 <HAL_RCC_OscConfig+0x4d8>)
 8005bd4:	f023 0304 	bic.w	r3, r3, #4
 8005bd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d015      	beq.n	8005c0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be2:	f7fd f825 	bl	8002c30 <HAL_GetTick>
 8005be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005be8:	e00a      	b.n	8005c00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bea:	f7fd f821 	bl	8002c30 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e0bc      	b.n	8005d7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c00:	4b61      	ldr	r3, [pc, #388]	; (8005d88 <HAL_RCC_OscConfig+0x4d8>)
 8005c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0ee      	beq.n	8005bea <HAL_RCC_OscConfig+0x33a>
 8005c0c:	e014      	b.n	8005c38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c0e:	f7fd f80f 	bl	8002c30 <HAL_GetTick>
 8005c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c14:	e00a      	b.n	8005c2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c16:	f7fd f80b 	bl	8002c30 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d901      	bls.n	8005c2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e0a6      	b.n	8005d7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c2c:	4b56      	ldr	r3, [pc, #344]	; (8005d88 <HAL_RCC_OscConfig+0x4d8>)
 8005c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1ee      	bne.n	8005c16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d105      	bne.n	8005c4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c3e:	4b52      	ldr	r3, [pc, #328]	; (8005d88 <HAL_RCC_OscConfig+0x4d8>)
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	4a51      	ldr	r2, [pc, #324]	; (8005d88 <HAL_RCC_OscConfig+0x4d8>)
 8005c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 8092 	beq.w	8005d78 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c54:	4b4c      	ldr	r3, [pc, #304]	; (8005d88 <HAL_RCC_OscConfig+0x4d8>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f003 030c 	and.w	r3, r3, #12
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d05c      	beq.n	8005d1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d141      	bne.n	8005cec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c68:	4b48      	ldr	r3, [pc, #288]	; (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c6e:	f7fc ffdf 	bl	8002c30 <HAL_GetTick>
 8005c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c74:	e008      	b.n	8005c88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c76:	f7fc ffdb 	bl	8002c30 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d901      	bls.n	8005c88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e078      	b.n	8005d7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c88:	4b3f      	ldr	r3, [pc, #252]	; (8005d88 <HAL_RCC_OscConfig+0x4d8>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1f0      	bne.n	8005c76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	69da      	ldr	r2, [r3, #28]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca2:	019b      	lsls	r3, r3, #6
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	085b      	lsrs	r3, r3, #1
 8005cac:	3b01      	subs	r3, #1
 8005cae:	041b      	lsls	r3, r3, #16
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb6:	061b      	lsls	r3, r3, #24
 8005cb8:	4933      	ldr	r1, [pc, #204]	; (8005d88 <HAL_RCC_OscConfig+0x4d8>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cbe:	4b33      	ldr	r3, [pc, #204]	; (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cc4:	f7fc ffb4 	bl	8002c30 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ccc:	f7fc ffb0 	bl	8002c30 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e04d      	b.n	8005d7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cde:	4b2a      	ldr	r3, [pc, #168]	; (8005d88 <HAL_RCC_OscConfig+0x4d8>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f0      	beq.n	8005ccc <HAL_RCC_OscConfig+0x41c>
 8005cea:	e045      	b.n	8005d78 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cec:	4b27      	ldr	r3, [pc, #156]	; (8005d8c <HAL_RCC_OscConfig+0x4dc>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf2:	f7fc ff9d 	bl	8002c30 <HAL_GetTick>
 8005cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cf8:	e008      	b.n	8005d0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cfa:	f7fc ff99 	bl	8002c30 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d901      	bls.n	8005d0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e036      	b.n	8005d7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d0c:	4b1e      	ldr	r3, [pc, #120]	; (8005d88 <HAL_RCC_OscConfig+0x4d8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1f0      	bne.n	8005cfa <HAL_RCC_OscConfig+0x44a>
 8005d18:	e02e      	b.n	8005d78 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d101      	bne.n	8005d26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e029      	b.n	8005d7a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d26:	4b18      	ldr	r3, [pc, #96]	; (8005d88 <HAL_RCC_OscConfig+0x4d8>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d11c      	bne.n	8005d74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d115      	bne.n	8005d74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d4e:	4013      	ands	r3, r2
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d10d      	bne.n	8005d74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d106      	bne.n	8005d74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d001      	beq.n	8005d78 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e000      	b.n	8005d7a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	40007000 	.word	0x40007000
 8005d88:	40023800 	.word	0x40023800
 8005d8c:	42470060 	.word	0x42470060

08005d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e0cc      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005da4:	4b68      	ldr	r3, [pc, #416]	; (8005f48 <HAL_RCC_ClockConfig+0x1b8>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 030f 	and.w	r3, r3, #15
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d90c      	bls.n	8005dcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005db2:	4b65      	ldr	r3, [pc, #404]	; (8005f48 <HAL_RCC_ClockConfig+0x1b8>)
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dba:	4b63      	ldr	r3, [pc, #396]	; (8005f48 <HAL_RCC_ClockConfig+0x1b8>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d001      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e0b8      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d020      	beq.n	8005e1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d005      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005de4:	4b59      	ldr	r3, [pc, #356]	; (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	4a58      	ldr	r2, [pc, #352]	; (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005dea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dfc:	4b53      	ldr	r3, [pc, #332]	; (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	4a52      	ldr	r2, [pc, #328]	; (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e08:	4b50      	ldr	r3, [pc, #320]	; (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	494d      	ldr	r1, [pc, #308]	; (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d044      	beq.n	8005eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d107      	bne.n	8005e3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e2e:	4b47      	ldr	r3, [pc, #284]	; (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d119      	bne.n	8005e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e07f      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d003      	beq.n	8005e4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	d107      	bne.n	8005e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e4e:	4b3f      	ldr	r3, [pc, #252]	; (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d109      	bne.n	8005e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e06f      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e5e:	4b3b      	ldr	r3, [pc, #236]	; (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e067      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e6e:	4b37      	ldr	r3, [pc, #220]	; (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f023 0203 	bic.w	r2, r3, #3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	4934      	ldr	r1, [pc, #208]	; (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e80:	f7fc fed6 	bl	8002c30 <HAL_GetTick>
 8005e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e86:	e00a      	b.n	8005e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e88:	f7fc fed2 	bl	8002c30 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e04f      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e9e:	4b2b      	ldr	r3, [pc, #172]	; (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 020c 	and.w	r2, r3, #12
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d1eb      	bne.n	8005e88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005eb0:	4b25      	ldr	r3, [pc, #148]	; (8005f48 <HAL_RCC_ClockConfig+0x1b8>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 030f 	and.w	r3, r3, #15
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d20c      	bcs.n	8005ed8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ebe:	4b22      	ldr	r3, [pc, #136]	; (8005f48 <HAL_RCC_ClockConfig+0x1b8>)
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ec6:	4b20      	ldr	r3, [pc, #128]	; (8005f48 <HAL_RCC_ClockConfig+0x1b8>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d001      	beq.n	8005ed8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e032      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d008      	beq.n	8005ef6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ee4:	4b19      	ldr	r3, [pc, #100]	; (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	4916      	ldr	r1, [pc, #88]	; (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d009      	beq.n	8005f16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f02:	4b12      	ldr	r3, [pc, #72]	; (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	490e      	ldr	r1, [pc, #56]	; (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f16:	f000 f821 	bl	8005f5c <HAL_RCC_GetSysClockFreq>
 8005f1a:	4601      	mov	r1, r0
 8005f1c:	4b0b      	ldr	r3, [pc, #44]	; (8005f4c <HAL_RCC_ClockConfig+0x1bc>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	091b      	lsrs	r3, r3, #4
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	4a0a      	ldr	r2, [pc, #40]	; (8005f50 <HAL_RCC_ClockConfig+0x1c0>)
 8005f28:	5cd3      	ldrb	r3, [r2, r3]
 8005f2a:	fa21 f303 	lsr.w	r3, r1, r3
 8005f2e:	4a09      	ldr	r2, [pc, #36]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f32:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <HAL_RCC_ClockConfig+0x1c8>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fc fd52 	bl	80029e0 <HAL_InitTick>

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	40023c00 	.word	0x40023c00
 8005f4c:	40023800 	.word	0x40023800
 8005f50:	0800aaa8 	.word	0x0800aaa8
 8005f54:	20000004 	.word	0x20000004
 8005f58:	20000008 	.word	0x20000008

08005f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f62:	2300      	movs	r3, #0
 8005f64:	607b      	str	r3, [r7, #4]
 8005f66:	2300      	movs	r3, #0
 8005f68:	60fb      	str	r3, [r7, #12]
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f72:	4b63      	ldr	r3, [pc, #396]	; (8006100 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f003 030c 	and.w	r3, r3, #12
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	d007      	beq.n	8005f8e <HAL_RCC_GetSysClockFreq+0x32>
 8005f7e:	2b08      	cmp	r3, #8
 8005f80:	d008      	beq.n	8005f94 <HAL_RCC_GetSysClockFreq+0x38>
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f040 80b4 	bne.w	80060f0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f88:	4b5e      	ldr	r3, [pc, #376]	; (8006104 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005f8a:	60bb      	str	r3, [r7, #8]
       break;
 8005f8c:	e0b3      	b.n	80060f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f8e:	4b5e      	ldr	r3, [pc, #376]	; (8006108 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005f90:	60bb      	str	r3, [r7, #8]
      break;
 8005f92:	e0b0      	b.n	80060f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f94:	4b5a      	ldr	r3, [pc, #360]	; (8006100 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f9e:	4b58      	ldr	r3, [pc, #352]	; (8006100 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d04a      	beq.n	8006040 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005faa:	4b55      	ldr	r3, [pc, #340]	; (8006100 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	099b      	lsrs	r3, r3, #6
 8005fb0:	f04f 0400 	mov.w	r4, #0
 8005fb4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005fb8:	f04f 0200 	mov.w	r2, #0
 8005fbc:	ea03 0501 	and.w	r5, r3, r1
 8005fc0:	ea04 0602 	and.w	r6, r4, r2
 8005fc4:	4629      	mov	r1, r5
 8005fc6:	4632      	mov	r2, r6
 8005fc8:	f04f 0300 	mov.w	r3, #0
 8005fcc:	f04f 0400 	mov.w	r4, #0
 8005fd0:	0154      	lsls	r4, r2, #5
 8005fd2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005fd6:	014b      	lsls	r3, r1, #5
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4622      	mov	r2, r4
 8005fdc:	1b49      	subs	r1, r1, r5
 8005fde:	eb62 0206 	sbc.w	r2, r2, r6
 8005fe2:	f04f 0300 	mov.w	r3, #0
 8005fe6:	f04f 0400 	mov.w	r4, #0
 8005fea:	0194      	lsls	r4, r2, #6
 8005fec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ff0:	018b      	lsls	r3, r1, #6
 8005ff2:	1a5b      	subs	r3, r3, r1
 8005ff4:	eb64 0402 	sbc.w	r4, r4, r2
 8005ff8:	f04f 0100 	mov.w	r1, #0
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	00e2      	lsls	r2, r4, #3
 8006002:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006006:	00d9      	lsls	r1, r3, #3
 8006008:	460b      	mov	r3, r1
 800600a:	4614      	mov	r4, r2
 800600c:	195b      	adds	r3, r3, r5
 800600e:	eb44 0406 	adc.w	r4, r4, r6
 8006012:	f04f 0100 	mov.w	r1, #0
 8006016:	f04f 0200 	mov.w	r2, #0
 800601a:	0262      	lsls	r2, r4, #9
 800601c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006020:	0259      	lsls	r1, r3, #9
 8006022:	460b      	mov	r3, r1
 8006024:	4614      	mov	r4, r2
 8006026:	4618      	mov	r0, r3
 8006028:	4621      	mov	r1, r4
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f04f 0400 	mov.w	r4, #0
 8006030:	461a      	mov	r2, r3
 8006032:	4623      	mov	r3, r4
 8006034:	f7fa fcfa 	bl	8000a2c <__aeabi_uldivmod>
 8006038:	4603      	mov	r3, r0
 800603a:	460c      	mov	r4, r1
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	e049      	b.n	80060d4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006040:	4b2f      	ldr	r3, [pc, #188]	; (8006100 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	099b      	lsrs	r3, r3, #6
 8006046:	f04f 0400 	mov.w	r4, #0
 800604a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800604e:	f04f 0200 	mov.w	r2, #0
 8006052:	ea03 0501 	and.w	r5, r3, r1
 8006056:	ea04 0602 	and.w	r6, r4, r2
 800605a:	4629      	mov	r1, r5
 800605c:	4632      	mov	r2, r6
 800605e:	f04f 0300 	mov.w	r3, #0
 8006062:	f04f 0400 	mov.w	r4, #0
 8006066:	0154      	lsls	r4, r2, #5
 8006068:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800606c:	014b      	lsls	r3, r1, #5
 800606e:	4619      	mov	r1, r3
 8006070:	4622      	mov	r2, r4
 8006072:	1b49      	subs	r1, r1, r5
 8006074:	eb62 0206 	sbc.w	r2, r2, r6
 8006078:	f04f 0300 	mov.w	r3, #0
 800607c:	f04f 0400 	mov.w	r4, #0
 8006080:	0194      	lsls	r4, r2, #6
 8006082:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006086:	018b      	lsls	r3, r1, #6
 8006088:	1a5b      	subs	r3, r3, r1
 800608a:	eb64 0402 	sbc.w	r4, r4, r2
 800608e:	f04f 0100 	mov.w	r1, #0
 8006092:	f04f 0200 	mov.w	r2, #0
 8006096:	00e2      	lsls	r2, r4, #3
 8006098:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800609c:	00d9      	lsls	r1, r3, #3
 800609e:	460b      	mov	r3, r1
 80060a0:	4614      	mov	r4, r2
 80060a2:	195b      	adds	r3, r3, r5
 80060a4:	eb44 0406 	adc.w	r4, r4, r6
 80060a8:	f04f 0100 	mov.w	r1, #0
 80060ac:	f04f 0200 	mov.w	r2, #0
 80060b0:	02a2      	lsls	r2, r4, #10
 80060b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80060b6:	0299      	lsls	r1, r3, #10
 80060b8:	460b      	mov	r3, r1
 80060ba:	4614      	mov	r4, r2
 80060bc:	4618      	mov	r0, r3
 80060be:	4621      	mov	r1, r4
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f04f 0400 	mov.w	r4, #0
 80060c6:	461a      	mov	r2, r3
 80060c8:	4623      	mov	r3, r4
 80060ca:	f7fa fcaf 	bl	8000a2c <__aeabi_uldivmod>
 80060ce:	4603      	mov	r3, r0
 80060d0:	460c      	mov	r4, r1
 80060d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060d4:	4b0a      	ldr	r3, [pc, #40]	; (8006100 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	0c1b      	lsrs	r3, r3, #16
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	3301      	adds	r3, #1
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ec:	60bb      	str	r3, [r7, #8]
      break;
 80060ee:	e002      	b.n	80060f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060f0:	4b04      	ldr	r3, [pc, #16]	; (8006104 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80060f2:	60bb      	str	r3, [r7, #8]
      break;
 80060f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060f6:	68bb      	ldr	r3, [r7, #8]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006100:	40023800 	.word	0x40023800
 8006104:	00f42400 	.word	0x00f42400
 8006108:	007a1200 	.word	0x007a1200

0800610c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006110:	4b03      	ldr	r3, [pc, #12]	; (8006120 <HAL_RCC_GetHCLKFreq+0x14>)
 8006112:	681b      	ldr	r3, [r3, #0]
}
 8006114:	4618      	mov	r0, r3
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	20000004 	.word	0x20000004

08006124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006128:	f7ff fff0 	bl	800610c <HAL_RCC_GetHCLKFreq>
 800612c:	4601      	mov	r1, r0
 800612e:	4b05      	ldr	r3, [pc, #20]	; (8006144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	0a9b      	lsrs	r3, r3, #10
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	4a03      	ldr	r2, [pc, #12]	; (8006148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800613a:	5cd3      	ldrb	r3, [r2, r3]
 800613c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006140:	4618      	mov	r0, r3
 8006142:	bd80      	pop	{r7, pc}
 8006144:	40023800 	.word	0x40023800
 8006148:	0800aab8 	.word	0x0800aab8

0800614c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006150:	f7ff ffdc 	bl	800610c <HAL_RCC_GetHCLKFreq>
 8006154:	4601      	mov	r1, r0
 8006156:	4b05      	ldr	r3, [pc, #20]	; (800616c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	0b5b      	lsrs	r3, r3, #13
 800615c:	f003 0307 	and.w	r3, r3, #7
 8006160:	4a03      	ldr	r2, [pc, #12]	; (8006170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006162:	5cd3      	ldrb	r3, [r2, r3]
 8006164:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006168:	4618      	mov	r0, r3
 800616a:	bd80      	pop	{r7, pc}
 800616c:	40023800 	.word	0x40023800
 8006170:	0800aab8 	.word	0x0800aab8

08006174 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	220f      	movs	r2, #15
 8006182:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006184:	4b12      	ldr	r3, [pc, #72]	; (80061d0 <HAL_RCC_GetClockConfig+0x5c>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f003 0203 	and.w	r2, r3, #3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006190:	4b0f      	ldr	r3, [pc, #60]	; (80061d0 <HAL_RCC_GetClockConfig+0x5c>)
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800619c:	4b0c      	ldr	r3, [pc, #48]	; (80061d0 <HAL_RCC_GetClockConfig+0x5c>)
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80061a8:	4b09      	ldr	r3, [pc, #36]	; (80061d0 <HAL_RCC_GetClockConfig+0x5c>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	08db      	lsrs	r3, r3, #3
 80061ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80061b6:	4b07      	ldr	r3, [pc, #28]	; (80061d4 <HAL_RCC_GetClockConfig+0x60>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 020f 	and.w	r2, r3, #15
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	601a      	str	r2, [r3, #0]
}
 80061c2:	bf00      	nop
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	40023800 	.word	0x40023800
 80061d4:	40023c00 	.word	0x40023c00

080061d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10b      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d105      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006208:	2b00      	cmp	r3, #0
 800620a:	d075      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800620c:	4bad      	ldr	r3, [pc, #692]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800620e:	2200      	movs	r2, #0
 8006210:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006212:	f7fc fd0d 	bl	8002c30 <HAL_GetTick>
 8006216:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006218:	e008      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800621a:	f7fc fd09 	bl	8002c30 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	2b02      	cmp	r3, #2
 8006226:	d901      	bls.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e18b      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800622c:	4ba6      	ldr	r3, [pc, #664]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1f0      	bne.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b00      	cmp	r3, #0
 8006242:	d009      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	019a      	lsls	r2, r3, #6
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	071b      	lsls	r3, r3, #28
 8006250:	499d      	ldr	r1, [pc, #628]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006252:	4313      	orrs	r3, r2
 8006254:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01f      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006264:	4b98      	ldr	r3, [pc, #608]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800626a:	0f1b      	lsrs	r3, r3, #28
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	019a      	lsls	r2, r3, #6
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	061b      	lsls	r3, r3, #24
 800627e:	431a      	orrs	r2, r3
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	071b      	lsls	r3, r3, #28
 8006284:	4990      	ldr	r1, [pc, #576]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006286:	4313      	orrs	r3, r2
 8006288:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800628c:	4b8e      	ldr	r3, [pc, #568]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800628e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006292:	f023 021f 	bic.w	r2, r3, #31
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	3b01      	subs	r3, #1
 800629c:	498a      	ldr	r1, [pc, #552]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00d      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	019a      	lsls	r2, r3, #6
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	061b      	lsls	r3, r3, #24
 80062bc:	431a      	orrs	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	071b      	lsls	r3, r3, #28
 80062c4:	4980      	ldr	r1, [pc, #512]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80062cc:	4b7d      	ldr	r3, [pc, #500]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80062ce:	2201      	movs	r2, #1
 80062d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062d2:	f7fc fcad 	bl	8002c30 <HAL_GetTick>
 80062d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062d8:	e008      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80062da:	f7fc fca9 	bl	8002c30 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d901      	bls.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e12b      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062ec:	4b76      	ldr	r3, [pc, #472]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0f0      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0304 	and.w	r3, r3, #4
 8006300:	2b00      	cmp	r3, #0
 8006302:	d105      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800630c:	2b00      	cmp	r3, #0
 800630e:	d079      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006310:	4b6e      	ldr	r3, [pc, #440]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006316:	f7fc fc8b 	bl	8002c30 <HAL_GetTick>
 800631a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800631c:	e008      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800631e:	f7fc fc87 	bl	8002c30 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d901      	bls.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e109      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006330:	4b65      	ldr	r3, [pc, #404]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800633c:	d0ef      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0304 	and.w	r3, r3, #4
 8006346:	2b00      	cmp	r3, #0
 8006348:	d020      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800634a:	4b5f      	ldr	r3, [pc, #380]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800634c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006350:	0f1b      	lsrs	r3, r3, #28
 8006352:	f003 0307 	and.w	r3, r3, #7
 8006356:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	019a      	lsls	r2, r3, #6
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	061b      	lsls	r3, r3, #24
 8006364:	431a      	orrs	r2, r3
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	071b      	lsls	r3, r3, #28
 800636a:	4957      	ldr	r1, [pc, #348]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800636c:	4313      	orrs	r3, r2
 800636e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006372:	4b55      	ldr	r3, [pc, #340]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006378:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	3b01      	subs	r3, #1
 8006382:	021b      	lsls	r3, r3, #8
 8006384:	4950      	ldr	r1, [pc, #320]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006386:	4313      	orrs	r3, r2
 8006388:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0308 	and.w	r3, r3, #8
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01e      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006398:	4b4b      	ldr	r3, [pc, #300]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800639a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639e:	0e1b      	lsrs	r3, r3, #24
 80063a0:	f003 030f 	and.w	r3, r3, #15
 80063a4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	019a      	lsls	r2, r3, #6
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	061b      	lsls	r3, r3, #24
 80063b0:	431a      	orrs	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	071b      	lsls	r3, r3, #28
 80063b8:	4943      	ldr	r1, [pc, #268]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80063c0:	4b41      	ldr	r3, [pc, #260]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80063c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	493e      	ldr	r1, [pc, #248]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80063d6:	4b3d      	ldr	r3, [pc, #244]	; (80064cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063d8:	2201      	movs	r2, #1
 80063da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063dc:	f7fc fc28 	bl	8002c30 <HAL_GetTick>
 80063e0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80063e2:	e008      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80063e4:	f7fc fc24 	bl	8002c30 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d901      	bls.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e0a6      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80063f6:	4b34      	ldr	r3, [pc, #208]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006402:	d1ef      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0320 	and.w	r3, r3, #32
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 808d 	beq.w	800652c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006412:	2300      	movs	r3, #0
 8006414:	60fb      	str	r3, [r7, #12]
 8006416:	4b2c      	ldr	r3, [pc, #176]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641a:	4a2b      	ldr	r2, [pc, #172]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800641c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006420:	6413      	str	r3, [r2, #64]	; 0x40
 8006422:	4b29      	ldr	r3, [pc, #164]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800642e:	4b28      	ldr	r3, [pc, #160]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a27      	ldr	r2, [pc, #156]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006438:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800643a:	f7fc fbf9 	bl	8002c30 <HAL_GetTick>
 800643e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006440:	e008      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006442:	f7fc fbf5 	bl	8002c30 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	2b02      	cmp	r3, #2
 800644e:	d901      	bls.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e077      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006454:	4b1e      	ldr	r3, [pc, #120]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645c:	2b00      	cmp	r3, #0
 800645e:	d0f0      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006460:	4b19      	ldr	r3, [pc, #100]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006468:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d039      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	429a      	cmp	r2, r3
 800647c:	d032      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800647e:	4b12      	ldr	r3, [pc, #72]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006486:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006488:	4b12      	ldr	r3, [pc, #72]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800648a:	2201      	movs	r2, #1
 800648c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800648e:	4b11      	ldr	r3, [pc, #68]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006494:	4a0c      	ldr	r2, [pc, #48]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800649a:	4b0b      	ldr	r3, [pc, #44]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800649c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d11e      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80064a6:	f7fc fbc3 	bl	8002c30 <HAL_GetTick>
 80064aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064ac:	e014      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064ae:	f7fc fbbf 	bl	8002c30 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064bc:	4293      	cmp	r3, r2
 80064be:	d90b      	bls.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e03f      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80064c4:	42470068 	.word	0x42470068
 80064c8:	40023800 	.word	0x40023800
 80064cc:	42470070 	.word	0x42470070
 80064d0:	40007000 	.word	0x40007000
 80064d4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064d8:	4b1c      	ldr	r3, [pc, #112]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d0e4      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064f0:	d10d      	bne.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x336>
 80064f2:	4b16      	ldr	r3, [pc, #88]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006506:	4911      	ldr	r1, [pc, #68]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006508:	4313      	orrs	r3, r2
 800650a:	608b      	str	r3, [r1, #8]
 800650c:	e005      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800650e:	4b0f      	ldr	r3, [pc, #60]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	4a0e      	ldr	r2, [pc, #56]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006514:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006518:	6093      	str	r3, [r2, #8]
 800651a:	4b0c      	ldr	r3, [pc, #48]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800651c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006526:	4909      	ldr	r1, [pc, #36]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006528:	4313      	orrs	r3, r2
 800652a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0310 	and.w	r3, r3, #16
 8006534:	2b00      	cmp	r3, #0
 8006536:	d004      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800653e:	4b04      	ldr	r3, [pc, #16]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006540:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3718      	adds	r7, #24
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	40023800 	.word	0x40023800
 8006550:	424711e0 	.word	0x424711e0

08006554 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e025      	b.n	80065b4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d106      	bne.n	8006582 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7fc fa25 	bl	80029cc <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2202      	movs	r2, #2
 8006586:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	3304      	adds	r3, #4
 8006592:	4619      	mov	r1, r3
 8006594:	4610      	mov	r0, r2
 8006596:	f001 fbf7 	bl	8007d88 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6818      	ldr	r0, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	461a      	mov	r2, r3
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	f001 fc62 	bl	8007e6e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e056      	b.n	800667c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d106      	bne.n	80065ee <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7fc f82f 	bl	800264c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2202      	movs	r2, #2
 80065f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006604:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	431a      	orrs	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	431a      	orrs	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	431a      	orrs	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	431a      	orrs	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800662a:	431a      	orrs	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	431a      	orrs	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	ea42 0103 	orr.w	r1, r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	0c1b      	lsrs	r3, r3, #16
 800664c:	f003 0104 	and.w	r1, r3, #4
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	430a      	orrs	r2, r1
 800665a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	69da      	ldr	r2, [r3, #28]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800666a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e01a      	b.n	80066cc <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2202      	movs	r2, #2
 800669a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7fc f814 	bl	80026dc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	603b      	str	r3, [r7, #0]
 80066e0:	4613      	mov	r3, r2
 80066e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066e4:	2300      	movs	r3, #0
 80066e6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d101      	bne.n	80066f6 <HAL_SPI_Transmit+0x22>
 80066f2:	2302      	movs	r3, #2
 80066f4:	e11e      	b.n	8006934 <HAL_SPI_Transmit+0x260>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066fe:	f7fc fa97 	bl	8002c30 <HAL_GetTick>
 8006702:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006704:	88fb      	ldrh	r3, [r7, #6]
 8006706:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b01      	cmp	r3, #1
 8006712:	d002      	beq.n	800671a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006714:	2302      	movs	r3, #2
 8006716:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006718:	e103      	b.n	8006922 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <HAL_SPI_Transmit+0x52>
 8006720:	88fb      	ldrh	r3, [r7, #6]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d102      	bne.n	800672c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	77fb      	strb	r3, [r7, #31]
    goto error;
 800672a:	e0fa      	b.n	8006922 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2203      	movs	r2, #3
 8006730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	88fa      	ldrh	r2, [r7, #6]
 8006744:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	88fa      	ldrh	r2, [r7, #6]
 800674a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006772:	d107      	bne.n	8006784 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006782:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678e:	2b40      	cmp	r3, #64	; 0x40
 8006790:	d007      	beq.n	80067a2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067aa:	d14b      	bne.n	8006844 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <HAL_SPI_Transmit+0xe6>
 80067b4:	8afb      	ldrh	r3, [r7, #22]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d13e      	bne.n	8006838 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067be:	881a      	ldrh	r2, [r3, #0]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	1c9a      	adds	r2, r3, #2
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29a      	uxth	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80067de:	e02b      	b.n	8006838 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d112      	bne.n	8006814 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f2:	881a      	ldrh	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fe:	1c9a      	adds	r2, r3, #2
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006808:	b29b      	uxth	r3, r3
 800680a:	3b01      	subs	r3, #1
 800680c:	b29a      	uxth	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	86da      	strh	r2, [r3, #54]	; 0x36
 8006812:	e011      	b.n	8006838 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006814:	f7fc fa0c 	bl	8002c30 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	429a      	cmp	r2, r3
 8006822:	d803      	bhi.n	800682c <HAL_SPI_Transmit+0x158>
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800682a:	d102      	bne.n	8006832 <HAL_SPI_Transmit+0x15e>
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d102      	bne.n	8006838 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006836:	e074      	b.n	8006922 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1ce      	bne.n	80067e0 <HAL_SPI_Transmit+0x10c>
 8006842:	e04c      	b.n	80068de <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <HAL_SPI_Transmit+0x17e>
 800684c:	8afb      	ldrh	r3, [r7, #22]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d140      	bne.n	80068d4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	330c      	adds	r3, #12
 800685c:	7812      	ldrb	r2, [r2, #0]
 800685e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800686e:	b29b      	uxth	r3, r3
 8006870:	3b01      	subs	r3, #1
 8006872:	b29a      	uxth	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006878:	e02c      	b.n	80068d4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b02      	cmp	r3, #2
 8006886:	d113      	bne.n	80068b0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	330c      	adds	r3, #12
 8006892:	7812      	ldrb	r2, [r2, #0]
 8006894:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	3b01      	subs	r3, #1
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80068ae:	e011      	b.n	80068d4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068b0:	f7fc f9be 	bl	8002c30 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d803      	bhi.n	80068c8 <HAL_SPI_Transmit+0x1f4>
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c6:	d102      	bne.n	80068ce <HAL_SPI_Transmit+0x1fa>
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d102      	bne.n	80068d4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80068d2:	e026      	b.n	8006922 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068d8:	b29b      	uxth	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1cd      	bne.n	800687a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 fa44 	bl	8006d70 <SPI_EndRxTxTransaction>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d002      	beq.n	80068f4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2220      	movs	r2, #32
 80068f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10a      	bne.n	8006912 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068fc:	2300      	movs	r3, #0
 80068fe:	613b      	str	r3, [r7, #16]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	613b      	str	r3, [r7, #16]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	613b      	str	r3, [r7, #16]
 8006910:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006916:	2b00      	cmp	r3, #0
 8006918:	d002      	beq.n	8006920 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	77fb      	strb	r3, [r7, #31]
 800691e:	e000      	b.n	8006922 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006920:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006932:	7ffb      	ldrb	r3, [r7, #31]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3720      	adds	r7, #32
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b08c      	sub	sp, #48	; 0x30
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800694a:	2301      	movs	r3, #1
 800694c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800694e:	2300      	movs	r3, #0
 8006950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800695a:	2b01      	cmp	r3, #1
 800695c:	d101      	bne.n	8006962 <HAL_SPI_TransmitReceive+0x26>
 800695e:	2302      	movs	r3, #2
 8006960:	e18a      	b.n	8006c78 <HAL_SPI_TransmitReceive+0x33c>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800696a:	f7fc f961 	bl	8002c30 <HAL_GetTick>
 800696e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006980:	887b      	ldrh	r3, [r7, #2]
 8006982:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006984:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006988:	2b01      	cmp	r3, #1
 800698a:	d00f      	beq.n	80069ac <HAL_SPI_TransmitReceive+0x70>
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006992:	d107      	bne.n	80069a4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d103      	bne.n	80069a4 <HAL_SPI_TransmitReceive+0x68>
 800699c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069a0:	2b04      	cmp	r3, #4
 80069a2:	d003      	beq.n	80069ac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80069a4:	2302      	movs	r3, #2
 80069a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80069aa:	e15b      	b.n	8006c64 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d005      	beq.n	80069be <HAL_SPI_TransmitReceive+0x82>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d002      	beq.n	80069be <HAL_SPI_TransmitReceive+0x82>
 80069b8:	887b      	ldrh	r3, [r7, #2]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d103      	bne.n	80069c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80069c4:	e14e      	b.n	8006c64 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b04      	cmp	r3, #4
 80069d0:	d003      	beq.n	80069da <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2205      	movs	r2, #5
 80069d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	887a      	ldrh	r2, [r7, #2]
 80069ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	887a      	ldrh	r2, [r7, #2]
 80069f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	887a      	ldrh	r2, [r7, #2]
 80069fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	887a      	ldrh	r2, [r7, #2]
 8006a02:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1a:	2b40      	cmp	r3, #64	; 0x40
 8006a1c:	d007      	beq.n	8006a2e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a36:	d178      	bne.n	8006b2a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <HAL_SPI_TransmitReceive+0x10a>
 8006a40:	8b7b      	ldrh	r3, [r7, #26]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d166      	bne.n	8006b14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4a:	881a      	ldrh	r2, [r3, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a56:	1c9a      	adds	r2, r3, #2
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	3b01      	subs	r3, #1
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a6a:	e053      	b.n	8006b14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d11b      	bne.n	8006ab2 <HAL_SPI_TransmitReceive+0x176>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d016      	beq.n	8006ab2 <HAL_SPI_TransmitReceive+0x176>
 8006a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d113      	bne.n	8006ab2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8e:	881a      	ldrh	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9a:	1c9a      	adds	r2, r3, #2
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d119      	bne.n	8006af4 <HAL_SPI_TransmitReceive+0x1b8>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d014      	beq.n	8006af4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68da      	ldr	r2, [r3, #12]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	b292      	uxth	r2, r2
 8006ad6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006adc:	1c9a      	adds	r2, r3, #2
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006af0:	2301      	movs	r3, #1
 8006af2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006af4:	f7fc f89c 	bl	8002c30 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d807      	bhi.n	8006b14 <HAL_SPI_TransmitReceive+0x1d8>
 8006b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0a:	d003      	beq.n	8006b14 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006b12:	e0a7      	b.n	8006c64 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1a6      	bne.n	8006a6c <HAL_SPI_TransmitReceive+0x130>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1a1      	bne.n	8006a6c <HAL_SPI_TransmitReceive+0x130>
 8006b28:	e07c      	b.n	8006c24 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d002      	beq.n	8006b38 <HAL_SPI_TransmitReceive+0x1fc>
 8006b32:	8b7b      	ldrh	r3, [r7, #26]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d16b      	bne.n	8006c10 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	330c      	adds	r3, #12
 8006b42:	7812      	ldrb	r2, [r2, #0]
 8006b44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	3b01      	subs	r3, #1
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b5e:	e057      	b.n	8006c10 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d11c      	bne.n	8006ba8 <HAL_SPI_TransmitReceive+0x26c>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d017      	beq.n	8006ba8 <HAL_SPI_TransmitReceive+0x26c>
 8006b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d114      	bne.n	8006ba8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	330c      	adds	r3, #12
 8006b88:	7812      	ldrb	r2, [r2, #0]
 8006b8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d119      	bne.n	8006bea <HAL_SPI_TransmitReceive+0x2ae>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d014      	beq.n	8006bea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68da      	ldr	r2, [r3, #12]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bca:	b2d2      	uxtb	r2, r2
 8006bcc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	3b01      	subs	r3, #1
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006be6:	2301      	movs	r3, #1
 8006be8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bea:	f7fc f821 	bl	8002c30 <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d803      	bhi.n	8006c02 <HAL_SPI_TransmitReceive+0x2c6>
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c00:	d102      	bne.n	8006c08 <HAL_SPI_TransmitReceive+0x2cc>
 8006c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d103      	bne.n	8006c10 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006c0e:	e029      	b.n	8006c64 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1a2      	bne.n	8006b60 <HAL_SPI_TransmitReceive+0x224>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d19d      	bne.n	8006b60 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 f8a1 	bl	8006d70 <SPI_EndRxTxTransaction>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d006      	beq.n	8006c42 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006c40:	e010      	b.n	8006c64 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10b      	bne.n	8006c62 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	617b      	str	r3, [r7, #20]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	617b      	str	r3, [r7, #20]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	617b      	str	r3, [r7, #20]
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	e000      	b.n	8006c64 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006c62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3730      	adds	r7, #48	; 0x30
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c8e:	b2db      	uxtb	r3, r3
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	603b      	str	r3, [r7, #0]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cac:	e04c      	b.n	8006d48 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb4:	d048      	beq.n	8006d48 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006cb6:	f7fb ffbb 	bl	8002c30 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d902      	bls.n	8006ccc <SPI_WaitFlagStateUntilTimeout+0x30>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d13d      	bne.n	8006d48 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ce4:	d111      	bne.n	8006d0a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cee:	d004      	beq.n	8006cfa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cf8:	d107      	bne.n	8006d0a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d12:	d10f      	bne.n	8006d34 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e00f      	b.n	8006d68 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689a      	ldr	r2, [r3, #8]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	4013      	ands	r3, r2
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	bf0c      	ite	eq
 8006d58:	2301      	moveq	r3, #1
 8006d5a:	2300      	movne	r3, #0
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	461a      	mov	r2, r3
 8006d60:	79fb      	ldrb	r3, [r7, #7]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d1a3      	bne.n	8006cae <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b088      	sub	sp, #32
 8006d74:	af02      	add	r7, sp, #8
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d7c:	4b1b      	ldr	r3, [pc, #108]	; (8006dec <SPI_EndRxTxTransaction+0x7c>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a1b      	ldr	r2, [pc, #108]	; (8006df0 <SPI_EndRxTxTransaction+0x80>)
 8006d82:	fba2 2303 	umull	r2, r3, r2, r3
 8006d86:	0d5b      	lsrs	r3, r3, #21
 8006d88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d8c:	fb02 f303 	mul.w	r3, r2, r3
 8006d90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d9a:	d112      	bne.n	8006dc2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2200      	movs	r2, #0
 8006da4:	2180      	movs	r1, #128	; 0x80
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f7ff ff78 	bl	8006c9c <SPI_WaitFlagStateUntilTimeout>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d016      	beq.n	8006de0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db6:	f043 0220 	orr.w	r2, r3, #32
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e00f      	b.n	8006de2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00a      	beq.n	8006dde <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd8:	2b80      	cmp	r3, #128	; 0x80
 8006dda:	d0f2      	beq.n	8006dc2 <SPI_EndRxTxTransaction+0x52>
 8006ddc:	e000      	b.n	8006de0 <SPI_EndRxTxTransaction+0x70>
        break;
 8006dde:	bf00      	nop
  }

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	20000004 	.word	0x20000004
 8006df0:	165e9f81 	.word	0x165e9f81

08006df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e01d      	b.n	8006e42 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d106      	bne.n	8006e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7fb fc7c 	bl	8002718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	3304      	adds	r3, #4
 8006e30:	4619      	mov	r1, r3
 8006e32:	4610      	mov	r0, r2
 8006e34:	f000 fa14 	bl	8007260 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b085      	sub	sp, #20
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f042 0201 	orr.w	r2, r2, #1
 8006e60:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b06      	cmp	r3, #6
 8006e72:	d007      	beq.n	8006e84 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0201 	orr.w	r2, r2, #1
 8006e82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b082      	sub	sp, #8
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d122      	bne.n	8006eee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	f003 0302 	and.w	r3, r3, #2
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d11b      	bne.n	8006eee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f06f 0202 	mvn.w	r2, #2
 8006ebe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	f003 0303 	and.w	r3, r3, #3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f9a5 	bl	8007224 <HAL_TIM_IC_CaptureCallback>
 8006eda:	e005      	b.n	8006ee8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f997 	bl	8007210 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f9a8 	bl	8007238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	f003 0304 	and.w	r3, r3, #4
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d122      	bne.n	8006f42 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f003 0304 	and.w	r3, r3, #4
 8006f06:	2b04      	cmp	r3, #4
 8006f08:	d11b      	bne.n	8006f42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f06f 0204 	mvn.w	r2, #4
 8006f12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2202      	movs	r2, #2
 8006f18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d003      	beq.n	8006f30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 f97b 	bl	8007224 <HAL_TIM_IC_CaptureCallback>
 8006f2e:	e005      	b.n	8006f3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f96d 	bl	8007210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f97e 	bl	8007238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	f003 0308 	and.w	r3, r3, #8
 8006f4c:	2b08      	cmp	r3, #8
 8006f4e:	d122      	bne.n	8006f96 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	f003 0308 	and.w	r3, r3, #8
 8006f5a:	2b08      	cmp	r3, #8
 8006f5c:	d11b      	bne.n	8006f96 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f06f 0208 	mvn.w	r2, #8
 8006f66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2204      	movs	r2, #4
 8006f6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	69db      	ldr	r3, [r3, #28]
 8006f74:	f003 0303 	and.w	r3, r3, #3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d003      	beq.n	8006f84 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f951 	bl	8007224 <HAL_TIM_IC_CaptureCallback>
 8006f82:	e005      	b.n	8006f90 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f943 	bl	8007210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f954 	bl	8007238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	f003 0310 	and.w	r3, r3, #16
 8006fa0:	2b10      	cmp	r3, #16
 8006fa2:	d122      	bne.n	8006fea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f003 0310 	and.w	r3, r3, #16
 8006fae:	2b10      	cmp	r3, #16
 8006fb0:	d11b      	bne.n	8006fea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f06f 0210 	mvn.w	r2, #16
 8006fba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2208      	movs	r2, #8
 8006fc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	69db      	ldr	r3, [r3, #28]
 8006fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d003      	beq.n	8006fd8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f927 	bl	8007224 <HAL_TIM_IC_CaptureCallback>
 8006fd6:	e005      	b.n	8006fe4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f919 	bl	8007210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f92a 	bl	8007238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d10e      	bne.n	8007016 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b01      	cmp	r3, #1
 8007004:	d107      	bne.n	8007016 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f06f 0201 	mvn.w	r2, #1
 800700e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7fa ffa5 	bl	8001f60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007020:	2b80      	cmp	r3, #128	; 0x80
 8007022:	d10e      	bne.n	8007042 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800702e:	2b80      	cmp	r3, #128	; 0x80
 8007030:	d107      	bne.n	8007042 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800703a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 facf 	bl	80075e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800704c:	2b40      	cmp	r3, #64	; 0x40
 800704e:	d10e      	bne.n	800706e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705a:	2b40      	cmp	r3, #64	; 0x40
 800705c:	d107      	bne.n	800706e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f8ef 	bl	800724c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	f003 0320 	and.w	r3, r3, #32
 8007078:	2b20      	cmp	r3, #32
 800707a:	d10e      	bne.n	800709a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	f003 0320 	and.w	r3, r3, #32
 8007086:	2b20      	cmp	r3, #32
 8007088:	d107      	bne.n	800709a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f06f 0220 	mvn.w	r2, #32
 8007092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fa99 	bl	80075cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800709a:	bf00      	nop
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d101      	bne.n	80070ba <HAL_TIM_ConfigClockSource+0x18>
 80070b6:	2302      	movs	r3, #2
 80070b8:	e0a6      	b.n	8007208 <HAL_TIM_ConfigClockSource+0x166>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2202      	movs	r2, #2
 80070c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070d8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070e0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b40      	cmp	r3, #64	; 0x40
 80070f0:	d067      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0x120>
 80070f2:	2b40      	cmp	r3, #64	; 0x40
 80070f4:	d80b      	bhi.n	800710e <HAL_TIM_ConfigClockSource+0x6c>
 80070f6:	2b10      	cmp	r3, #16
 80070f8:	d073      	beq.n	80071e2 <HAL_TIM_ConfigClockSource+0x140>
 80070fa:	2b10      	cmp	r3, #16
 80070fc:	d802      	bhi.n	8007104 <HAL_TIM_ConfigClockSource+0x62>
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d06f      	beq.n	80071e2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007102:	e078      	b.n	80071f6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007104:	2b20      	cmp	r3, #32
 8007106:	d06c      	beq.n	80071e2 <HAL_TIM_ConfigClockSource+0x140>
 8007108:	2b30      	cmp	r3, #48	; 0x30
 800710a:	d06a      	beq.n	80071e2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800710c:	e073      	b.n	80071f6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800710e:	2b70      	cmp	r3, #112	; 0x70
 8007110:	d00d      	beq.n	800712e <HAL_TIM_ConfigClockSource+0x8c>
 8007112:	2b70      	cmp	r3, #112	; 0x70
 8007114:	d804      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x7e>
 8007116:	2b50      	cmp	r3, #80	; 0x50
 8007118:	d033      	beq.n	8007182 <HAL_TIM_ConfigClockSource+0xe0>
 800711a:	2b60      	cmp	r3, #96	; 0x60
 800711c:	d041      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800711e:	e06a      	b.n	80071f6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007124:	d066      	beq.n	80071f4 <HAL_TIM_ConfigClockSource+0x152>
 8007126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800712a:	d017      	beq.n	800715c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800712c:	e063      	b.n	80071f6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6818      	ldr	r0, [r3, #0]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	6899      	ldr	r1, [r3, #8]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	685a      	ldr	r2, [r3, #4]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	f000 f9a9 	bl	8007494 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007150:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	609a      	str	r2, [r3, #8]
      break;
 800715a:	e04c      	b.n	80071f6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6818      	ldr	r0, [r3, #0]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	6899      	ldr	r1, [r3, #8]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	f000 f992 	bl	8007494 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689a      	ldr	r2, [r3, #8]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800717e:	609a      	str	r2, [r3, #8]
      break;
 8007180:	e039      	b.n	80071f6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6818      	ldr	r0, [r3, #0]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	6859      	ldr	r1, [r3, #4]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	461a      	mov	r2, r3
 8007190:	f000 f906 	bl	80073a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2150      	movs	r1, #80	; 0x50
 800719a:	4618      	mov	r0, r3
 800719c:	f000 f95f 	bl	800745e <TIM_ITRx_SetConfig>
      break;
 80071a0:	e029      	b.n	80071f6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6818      	ldr	r0, [r3, #0]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	6859      	ldr	r1, [r3, #4]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	461a      	mov	r2, r3
 80071b0:	f000 f925 	bl	80073fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2160      	movs	r1, #96	; 0x60
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 f94f 	bl	800745e <TIM_ITRx_SetConfig>
      break;
 80071c0:	e019      	b.n	80071f6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6818      	ldr	r0, [r3, #0]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	6859      	ldr	r1, [r3, #4]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	461a      	mov	r2, r3
 80071d0:	f000 f8e6 	bl	80073a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2140      	movs	r1, #64	; 0x40
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 f93f 	bl	800745e <TIM_ITRx_SetConfig>
      break;
 80071e0:	e009      	b.n	80071f6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4619      	mov	r1, r3
 80071ec:	4610      	mov	r0, r2
 80071ee:	f000 f936 	bl	800745e <TIM_ITRx_SetConfig>
      break;
 80071f2:	e000      	b.n	80071f6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80071f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a40      	ldr	r2, [pc, #256]	; (8007374 <TIM_Base_SetConfig+0x114>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d013      	beq.n	80072a0 <TIM_Base_SetConfig+0x40>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800727e:	d00f      	beq.n	80072a0 <TIM_Base_SetConfig+0x40>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a3d      	ldr	r2, [pc, #244]	; (8007378 <TIM_Base_SetConfig+0x118>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d00b      	beq.n	80072a0 <TIM_Base_SetConfig+0x40>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a3c      	ldr	r2, [pc, #240]	; (800737c <TIM_Base_SetConfig+0x11c>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d007      	beq.n	80072a0 <TIM_Base_SetConfig+0x40>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a3b      	ldr	r2, [pc, #236]	; (8007380 <TIM_Base_SetConfig+0x120>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d003      	beq.n	80072a0 <TIM_Base_SetConfig+0x40>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a3a      	ldr	r2, [pc, #232]	; (8007384 <TIM_Base_SetConfig+0x124>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d108      	bne.n	80072b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a2f      	ldr	r2, [pc, #188]	; (8007374 <TIM_Base_SetConfig+0x114>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d02b      	beq.n	8007312 <TIM_Base_SetConfig+0xb2>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072c0:	d027      	beq.n	8007312 <TIM_Base_SetConfig+0xb2>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a2c      	ldr	r2, [pc, #176]	; (8007378 <TIM_Base_SetConfig+0x118>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d023      	beq.n	8007312 <TIM_Base_SetConfig+0xb2>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a2b      	ldr	r2, [pc, #172]	; (800737c <TIM_Base_SetConfig+0x11c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d01f      	beq.n	8007312 <TIM_Base_SetConfig+0xb2>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a2a      	ldr	r2, [pc, #168]	; (8007380 <TIM_Base_SetConfig+0x120>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d01b      	beq.n	8007312 <TIM_Base_SetConfig+0xb2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a29      	ldr	r2, [pc, #164]	; (8007384 <TIM_Base_SetConfig+0x124>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d017      	beq.n	8007312 <TIM_Base_SetConfig+0xb2>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a28      	ldr	r2, [pc, #160]	; (8007388 <TIM_Base_SetConfig+0x128>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d013      	beq.n	8007312 <TIM_Base_SetConfig+0xb2>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a27      	ldr	r2, [pc, #156]	; (800738c <TIM_Base_SetConfig+0x12c>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d00f      	beq.n	8007312 <TIM_Base_SetConfig+0xb2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a26      	ldr	r2, [pc, #152]	; (8007390 <TIM_Base_SetConfig+0x130>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d00b      	beq.n	8007312 <TIM_Base_SetConfig+0xb2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a25      	ldr	r2, [pc, #148]	; (8007394 <TIM_Base_SetConfig+0x134>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d007      	beq.n	8007312 <TIM_Base_SetConfig+0xb2>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a24      	ldr	r2, [pc, #144]	; (8007398 <TIM_Base_SetConfig+0x138>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d003      	beq.n	8007312 <TIM_Base_SetConfig+0xb2>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a23      	ldr	r2, [pc, #140]	; (800739c <TIM_Base_SetConfig+0x13c>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d108      	bne.n	8007324 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4313      	orrs	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a0a      	ldr	r2, [pc, #40]	; (8007374 <TIM_Base_SetConfig+0x114>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d003      	beq.n	8007358 <TIM_Base_SetConfig+0xf8>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a0c      	ldr	r2, [pc, #48]	; (8007384 <TIM_Base_SetConfig+0x124>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d103      	bne.n	8007360 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	691a      	ldr	r2, [r3, #16]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	615a      	str	r2, [r3, #20]
}
 8007366:	bf00      	nop
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	40010000 	.word	0x40010000
 8007378:	40000400 	.word	0x40000400
 800737c:	40000800 	.word	0x40000800
 8007380:	40000c00 	.word	0x40000c00
 8007384:	40010400 	.word	0x40010400
 8007388:	40014000 	.word	0x40014000
 800738c:	40014400 	.word	0x40014400
 8007390:	40014800 	.word	0x40014800
 8007394:	40001800 	.word	0x40001800
 8007398:	40001c00 	.word	0x40001c00
 800739c:	40002000 	.word	0x40002000

080073a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6a1b      	ldr	r3, [r3, #32]
 80073b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	f023 0201 	bic.w	r2, r3, #1
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	011b      	lsls	r3, r3, #4
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f023 030a 	bic.w	r3, r3, #10
 80073dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	621a      	str	r2, [r3, #32]
}
 80073f2:	bf00      	nop
 80073f4:	371c      	adds	r7, #28
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073fe:	b480      	push	{r7}
 8007400:	b087      	sub	sp, #28
 8007402:	af00      	add	r7, sp, #0
 8007404:	60f8      	str	r0, [r7, #12]
 8007406:	60b9      	str	r1, [r7, #8]
 8007408:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	f023 0210 	bic.w	r2, r3, #16
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6a1b      	ldr	r3, [r3, #32]
 8007420:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007428:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	031b      	lsls	r3, r3, #12
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	4313      	orrs	r3, r2
 8007432:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800743a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	011b      	lsls	r3, r3, #4
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	4313      	orrs	r3, r2
 8007444:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	621a      	str	r2, [r3, #32]
}
 8007452:	bf00      	nop
 8007454:	371c      	adds	r7, #28
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800745e:	b480      	push	{r7}
 8007460:	b085      	sub	sp, #20
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007474:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4313      	orrs	r3, r2
 800747c:	f043 0307 	orr.w	r3, r3, #7
 8007480:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	609a      	str	r2, [r3, #8]
}
 8007488:	bf00      	nop
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
 80074a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	021a      	lsls	r2, r3, #8
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	431a      	orrs	r2, r3
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	4313      	orrs	r3, r2
 80074c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	609a      	str	r2, [r3, #8]
}
 80074c8:	bf00      	nop
 80074ca:	371c      	adds	r7, #28
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d101      	bne.n	80074ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074e8:	2302      	movs	r3, #2
 80074ea:	e05a      	b.n	80075a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007512:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	4313      	orrs	r3, r2
 800751c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a21      	ldr	r2, [pc, #132]	; (80075b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d022      	beq.n	8007576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007538:	d01d      	beq.n	8007576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a1d      	ldr	r2, [pc, #116]	; (80075b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d018      	beq.n	8007576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a1b      	ldr	r2, [pc, #108]	; (80075b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d013      	beq.n	8007576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a1a      	ldr	r2, [pc, #104]	; (80075bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d00e      	beq.n	8007576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a18      	ldr	r2, [pc, #96]	; (80075c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d009      	beq.n	8007576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a17      	ldr	r2, [pc, #92]	; (80075c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d004      	beq.n	8007576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a15      	ldr	r2, [pc, #84]	; (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d10c      	bne.n	8007590 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800757c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	4313      	orrs	r3, r2
 8007586:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	40010000 	.word	0x40010000
 80075b4:	40000400 	.word	0x40000400
 80075b8:	40000800 	.word	0x40000800
 80075bc:	40000c00 	.word	0x40000c00
 80075c0:	40010400 	.word	0x40010400
 80075c4:	40014000 	.word	0x40014000
 80075c8:	40001800 	.word	0x40001800

080075cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e03f      	b.n	8007686 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d106      	bne.n	8007620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7fb f89e 	bl	800275c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2224      	movs	r2, #36	; 0x24
 8007624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68da      	ldr	r2, [r3, #12]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 f829 	bl	8007690 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	691a      	ldr	r2, [r3, #16]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800764c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	695a      	ldr	r2, [r3, #20]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800765c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68da      	ldr	r2, [r3, #12]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800766c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2220      	movs	r2, #32
 8007678:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2220      	movs	r2, #32
 8007680:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
	...

08007690 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007694:	b085      	sub	sp, #20
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68da      	ldr	r2, [r3, #12]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	431a      	orrs	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	431a      	orrs	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80076d2:	f023 030c 	bic.w	r3, r3, #12
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	6812      	ldr	r2, [r2, #0]
 80076da:	68f9      	ldr	r1, [r7, #12]
 80076dc:	430b      	orrs	r3, r1
 80076de:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	699a      	ldr	r2, [r3, #24]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076fe:	f040 818b 	bne.w	8007a18 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4ac1      	ldr	r2, [pc, #772]	; (8007a0c <UART_SetConfig+0x37c>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d005      	beq.n	8007718 <UART_SetConfig+0x88>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4abf      	ldr	r2, [pc, #764]	; (8007a10 <UART_SetConfig+0x380>)
 8007712:	4293      	cmp	r3, r2
 8007714:	f040 80bd 	bne.w	8007892 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007718:	f7fe fd18 	bl	800614c <HAL_RCC_GetPCLK2Freq>
 800771c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	461d      	mov	r5, r3
 8007722:	f04f 0600 	mov.w	r6, #0
 8007726:	46a8      	mov	r8, r5
 8007728:	46b1      	mov	r9, r6
 800772a:	eb18 0308 	adds.w	r3, r8, r8
 800772e:	eb49 0409 	adc.w	r4, r9, r9
 8007732:	4698      	mov	r8, r3
 8007734:	46a1      	mov	r9, r4
 8007736:	eb18 0805 	adds.w	r8, r8, r5
 800773a:	eb49 0906 	adc.w	r9, r9, r6
 800773e:	f04f 0100 	mov.w	r1, #0
 8007742:	f04f 0200 	mov.w	r2, #0
 8007746:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800774a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800774e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007752:	4688      	mov	r8, r1
 8007754:	4691      	mov	r9, r2
 8007756:	eb18 0005 	adds.w	r0, r8, r5
 800775a:	eb49 0106 	adc.w	r1, r9, r6
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	461d      	mov	r5, r3
 8007764:	f04f 0600 	mov.w	r6, #0
 8007768:	196b      	adds	r3, r5, r5
 800776a:	eb46 0406 	adc.w	r4, r6, r6
 800776e:	461a      	mov	r2, r3
 8007770:	4623      	mov	r3, r4
 8007772:	f7f9 f95b 	bl	8000a2c <__aeabi_uldivmod>
 8007776:	4603      	mov	r3, r0
 8007778:	460c      	mov	r4, r1
 800777a:	461a      	mov	r2, r3
 800777c:	4ba5      	ldr	r3, [pc, #660]	; (8007a14 <UART_SetConfig+0x384>)
 800777e:	fba3 2302 	umull	r2, r3, r3, r2
 8007782:	095b      	lsrs	r3, r3, #5
 8007784:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	461d      	mov	r5, r3
 800778c:	f04f 0600 	mov.w	r6, #0
 8007790:	46a9      	mov	r9, r5
 8007792:	46b2      	mov	sl, r6
 8007794:	eb19 0309 	adds.w	r3, r9, r9
 8007798:	eb4a 040a 	adc.w	r4, sl, sl
 800779c:	4699      	mov	r9, r3
 800779e:	46a2      	mov	sl, r4
 80077a0:	eb19 0905 	adds.w	r9, r9, r5
 80077a4:	eb4a 0a06 	adc.w	sl, sl, r6
 80077a8:	f04f 0100 	mov.w	r1, #0
 80077ac:	f04f 0200 	mov.w	r2, #0
 80077b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077bc:	4689      	mov	r9, r1
 80077be:	4692      	mov	sl, r2
 80077c0:	eb19 0005 	adds.w	r0, r9, r5
 80077c4:	eb4a 0106 	adc.w	r1, sl, r6
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	461d      	mov	r5, r3
 80077ce:	f04f 0600 	mov.w	r6, #0
 80077d2:	196b      	adds	r3, r5, r5
 80077d4:	eb46 0406 	adc.w	r4, r6, r6
 80077d8:	461a      	mov	r2, r3
 80077da:	4623      	mov	r3, r4
 80077dc:	f7f9 f926 	bl	8000a2c <__aeabi_uldivmod>
 80077e0:	4603      	mov	r3, r0
 80077e2:	460c      	mov	r4, r1
 80077e4:	461a      	mov	r2, r3
 80077e6:	4b8b      	ldr	r3, [pc, #556]	; (8007a14 <UART_SetConfig+0x384>)
 80077e8:	fba3 1302 	umull	r1, r3, r3, r2
 80077ec:	095b      	lsrs	r3, r3, #5
 80077ee:	2164      	movs	r1, #100	; 0x64
 80077f0:	fb01 f303 	mul.w	r3, r1, r3
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	00db      	lsls	r3, r3, #3
 80077f8:	3332      	adds	r3, #50	; 0x32
 80077fa:	4a86      	ldr	r2, [pc, #536]	; (8007a14 <UART_SetConfig+0x384>)
 80077fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007800:	095b      	lsrs	r3, r3, #5
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007808:	4498      	add	r8, r3
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	461d      	mov	r5, r3
 800780e:	f04f 0600 	mov.w	r6, #0
 8007812:	46a9      	mov	r9, r5
 8007814:	46b2      	mov	sl, r6
 8007816:	eb19 0309 	adds.w	r3, r9, r9
 800781a:	eb4a 040a 	adc.w	r4, sl, sl
 800781e:	4699      	mov	r9, r3
 8007820:	46a2      	mov	sl, r4
 8007822:	eb19 0905 	adds.w	r9, r9, r5
 8007826:	eb4a 0a06 	adc.w	sl, sl, r6
 800782a:	f04f 0100 	mov.w	r1, #0
 800782e:	f04f 0200 	mov.w	r2, #0
 8007832:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007836:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800783a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800783e:	4689      	mov	r9, r1
 8007840:	4692      	mov	sl, r2
 8007842:	eb19 0005 	adds.w	r0, r9, r5
 8007846:	eb4a 0106 	adc.w	r1, sl, r6
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	461d      	mov	r5, r3
 8007850:	f04f 0600 	mov.w	r6, #0
 8007854:	196b      	adds	r3, r5, r5
 8007856:	eb46 0406 	adc.w	r4, r6, r6
 800785a:	461a      	mov	r2, r3
 800785c:	4623      	mov	r3, r4
 800785e:	f7f9 f8e5 	bl	8000a2c <__aeabi_uldivmod>
 8007862:	4603      	mov	r3, r0
 8007864:	460c      	mov	r4, r1
 8007866:	461a      	mov	r2, r3
 8007868:	4b6a      	ldr	r3, [pc, #424]	; (8007a14 <UART_SetConfig+0x384>)
 800786a:	fba3 1302 	umull	r1, r3, r3, r2
 800786e:	095b      	lsrs	r3, r3, #5
 8007870:	2164      	movs	r1, #100	; 0x64
 8007872:	fb01 f303 	mul.w	r3, r1, r3
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	00db      	lsls	r3, r3, #3
 800787a:	3332      	adds	r3, #50	; 0x32
 800787c:	4a65      	ldr	r2, [pc, #404]	; (8007a14 <UART_SetConfig+0x384>)
 800787e:	fba2 2303 	umull	r2, r3, r2, r3
 8007882:	095b      	lsrs	r3, r3, #5
 8007884:	f003 0207 	and.w	r2, r3, #7
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4442      	add	r2, r8
 800788e:	609a      	str	r2, [r3, #8]
 8007890:	e26f      	b.n	8007d72 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007892:	f7fe fc47 	bl	8006124 <HAL_RCC_GetPCLK1Freq>
 8007896:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	461d      	mov	r5, r3
 800789c:	f04f 0600 	mov.w	r6, #0
 80078a0:	46a8      	mov	r8, r5
 80078a2:	46b1      	mov	r9, r6
 80078a4:	eb18 0308 	adds.w	r3, r8, r8
 80078a8:	eb49 0409 	adc.w	r4, r9, r9
 80078ac:	4698      	mov	r8, r3
 80078ae:	46a1      	mov	r9, r4
 80078b0:	eb18 0805 	adds.w	r8, r8, r5
 80078b4:	eb49 0906 	adc.w	r9, r9, r6
 80078b8:	f04f 0100 	mov.w	r1, #0
 80078bc:	f04f 0200 	mov.w	r2, #0
 80078c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80078c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80078c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80078cc:	4688      	mov	r8, r1
 80078ce:	4691      	mov	r9, r2
 80078d0:	eb18 0005 	adds.w	r0, r8, r5
 80078d4:	eb49 0106 	adc.w	r1, r9, r6
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	461d      	mov	r5, r3
 80078de:	f04f 0600 	mov.w	r6, #0
 80078e2:	196b      	adds	r3, r5, r5
 80078e4:	eb46 0406 	adc.w	r4, r6, r6
 80078e8:	461a      	mov	r2, r3
 80078ea:	4623      	mov	r3, r4
 80078ec:	f7f9 f89e 	bl	8000a2c <__aeabi_uldivmod>
 80078f0:	4603      	mov	r3, r0
 80078f2:	460c      	mov	r4, r1
 80078f4:	461a      	mov	r2, r3
 80078f6:	4b47      	ldr	r3, [pc, #284]	; (8007a14 <UART_SetConfig+0x384>)
 80078f8:	fba3 2302 	umull	r2, r3, r3, r2
 80078fc:	095b      	lsrs	r3, r3, #5
 80078fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	461d      	mov	r5, r3
 8007906:	f04f 0600 	mov.w	r6, #0
 800790a:	46a9      	mov	r9, r5
 800790c:	46b2      	mov	sl, r6
 800790e:	eb19 0309 	adds.w	r3, r9, r9
 8007912:	eb4a 040a 	adc.w	r4, sl, sl
 8007916:	4699      	mov	r9, r3
 8007918:	46a2      	mov	sl, r4
 800791a:	eb19 0905 	adds.w	r9, r9, r5
 800791e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007922:	f04f 0100 	mov.w	r1, #0
 8007926:	f04f 0200 	mov.w	r2, #0
 800792a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800792e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007932:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007936:	4689      	mov	r9, r1
 8007938:	4692      	mov	sl, r2
 800793a:	eb19 0005 	adds.w	r0, r9, r5
 800793e:	eb4a 0106 	adc.w	r1, sl, r6
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	461d      	mov	r5, r3
 8007948:	f04f 0600 	mov.w	r6, #0
 800794c:	196b      	adds	r3, r5, r5
 800794e:	eb46 0406 	adc.w	r4, r6, r6
 8007952:	461a      	mov	r2, r3
 8007954:	4623      	mov	r3, r4
 8007956:	f7f9 f869 	bl	8000a2c <__aeabi_uldivmod>
 800795a:	4603      	mov	r3, r0
 800795c:	460c      	mov	r4, r1
 800795e:	461a      	mov	r2, r3
 8007960:	4b2c      	ldr	r3, [pc, #176]	; (8007a14 <UART_SetConfig+0x384>)
 8007962:	fba3 1302 	umull	r1, r3, r3, r2
 8007966:	095b      	lsrs	r3, r3, #5
 8007968:	2164      	movs	r1, #100	; 0x64
 800796a:	fb01 f303 	mul.w	r3, r1, r3
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	00db      	lsls	r3, r3, #3
 8007972:	3332      	adds	r3, #50	; 0x32
 8007974:	4a27      	ldr	r2, [pc, #156]	; (8007a14 <UART_SetConfig+0x384>)
 8007976:	fba2 2303 	umull	r2, r3, r2, r3
 800797a:	095b      	lsrs	r3, r3, #5
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007982:	4498      	add	r8, r3
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	461d      	mov	r5, r3
 8007988:	f04f 0600 	mov.w	r6, #0
 800798c:	46a9      	mov	r9, r5
 800798e:	46b2      	mov	sl, r6
 8007990:	eb19 0309 	adds.w	r3, r9, r9
 8007994:	eb4a 040a 	adc.w	r4, sl, sl
 8007998:	4699      	mov	r9, r3
 800799a:	46a2      	mov	sl, r4
 800799c:	eb19 0905 	adds.w	r9, r9, r5
 80079a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80079a4:	f04f 0100 	mov.w	r1, #0
 80079a8:	f04f 0200 	mov.w	r2, #0
 80079ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079b8:	4689      	mov	r9, r1
 80079ba:	4692      	mov	sl, r2
 80079bc:	eb19 0005 	adds.w	r0, r9, r5
 80079c0:	eb4a 0106 	adc.w	r1, sl, r6
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	461d      	mov	r5, r3
 80079ca:	f04f 0600 	mov.w	r6, #0
 80079ce:	196b      	adds	r3, r5, r5
 80079d0:	eb46 0406 	adc.w	r4, r6, r6
 80079d4:	461a      	mov	r2, r3
 80079d6:	4623      	mov	r3, r4
 80079d8:	f7f9 f828 	bl	8000a2c <__aeabi_uldivmod>
 80079dc:	4603      	mov	r3, r0
 80079de:	460c      	mov	r4, r1
 80079e0:	461a      	mov	r2, r3
 80079e2:	4b0c      	ldr	r3, [pc, #48]	; (8007a14 <UART_SetConfig+0x384>)
 80079e4:	fba3 1302 	umull	r1, r3, r3, r2
 80079e8:	095b      	lsrs	r3, r3, #5
 80079ea:	2164      	movs	r1, #100	; 0x64
 80079ec:	fb01 f303 	mul.w	r3, r1, r3
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	00db      	lsls	r3, r3, #3
 80079f4:	3332      	adds	r3, #50	; 0x32
 80079f6:	4a07      	ldr	r2, [pc, #28]	; (8007a14 <UART_SetConfig+0x384>)
 80079f8:	fba2 2303 	umull	r2, r3, r2, r3
 80079fc:	095b      	lsrs	r3, r3, #5
 80079fe:	f003 0207 	and.w	r2, r3, #7
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4442      	add	r2, r8
 8007a08:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007a0a:	e1b2      	b.n	8007d72 <UART_SetConfig+0x6e2>
 8007a0c:	40011000 	.word	0x40011000
 8007a10:	40011400 	.word	0x40011400
 8007a14:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4ad7      	ldr	r2, [pc, #860]	; (8007d7c <UART_SetConfig+0x6ec>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d005      	beq.n	8007a2e <UART_SetConfig+0x39e>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4ad6      	ldr	r2, [pc, #856]	; (8007d80 <UART_SetConfig+0x6f0>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	f040 80d1 	bne.w	8007bd0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a2e:	f7fe fb8d 	bl	800614c <HAL_RCC_GetPCLK2Freq>
 8007a32:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	469a      	mov	sl, r3
 8007a38:	f04f 0b00 	mov.w	fp, #0
 8007a3c:	46d0      	mov	r8, sl
 8007a3e:	46d9      	mov	r9, fp
 8007a40:	eb18 0308 	adds.w	r3, r8, r8
 8007a44:	eb49 0409 	adc.w	r4, r9, r9
 8007a48:	4698      	mov	r8, r3
 8007a4a:	46a1      	mov	r9, r4
 8007a4c:	eb18 080a 	adds.w	r8, r8, sl
 8007a50:	eb49 090b 	adc.w	r9, r9, fp
 8007a54:	f04f 0100 	mov.w	r1, #0
 8007a58:	f04f 0200 	mov.w	r2, #0
 8007a5c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a60:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a64:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a68:	4688      	mov	r8, r1
 8007a6a:	4691      	mov	r9, r2
 8007a6c:	eb1a 0508 	adds.w	r5, sl, r8
 8007a70:	eb4b 0609 	adc.w	r6, fp, r9
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	4619      	mov	r1, r3
 8007a7a:	f04f 0200 	mov.w	r2, #0
 8007a7e:	f04f 0300 	mov.w	r3, #0
 8007a82:	f04f 0400 	mov.w	r4, #0
 8007a86:	0094      	lsls	r4, r2, #2
 8007a88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a8c:	008b      	lsls	r3, r1, #2
 8007a8e:	461a      	mov	r2, r3
 8007a90:	4623      	mov	r3, r4
 8007a92:	4628      	mov	r0, r5
 8007a94:	4631      	mov	r1, r6
 8007a96:	f7f8 ffc9 	bl	8000a2c <__aeabi_uldivmod>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	460c      	mov	r4, r1
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	4bb8      	ldr	r3, [pc, #736]	; (8007d84 <UART_SetConfig+0x6f4>)
 8007aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8007aa6:	095b      	lsrs	r3, r3, #5
 8007aa8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	469b      	mov	fp, r3
 8007ab0:	f04f 0c00 	mov.w	ip, #0
 8007ab4:	46d9      	mov	r9, fp
 8007ab6:	46e2      	mov	sl, ip
 8007ab8:	eb19 0309 	adds.w	r3, r9, r9
 8007abc:	eb4a 040a 	adc.w	r4, sl, sl
 8007ac0:	4699      	mov	r9, r3
 8007ac2:	46a2      	mov	sl, r4
 8007ac4:	eb19 090b 	adds.w	r9, r9, fp
 8007ac8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007acc:	f04f 0100 	mov.w	r1, #0
 8007ad0:	f04f 0200 	mov.w	r2, #0
 8007ad4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ad8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007adc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007ae0:	4689      	mov	r9, r1
 8007ae2:	4692      	mov	sl, r2
 8007ae4:	eb1b 0509 	adds.w	r5, fp, r9
 8007ae8:	eb4c 060a 	adc.w	r6, ip, sl
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	4619      	mov	r1, r3
 8007af2:	f04f 0200 	mov.w	r2, #0
 8007af6:	f04f 0300 	mov.w	r3, #0
 8007afa:	f04f 0400 	mov.w	r4, #0
 8007afe:	0094      	lsls	r4, r2, #2
 8007b00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b04:	008b      	lsls	r3, r1, #2
 8007b06:	461a      	mov	r2, r3
 8007b08:	4623      	mov	r3, r4
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	4631      	mov	r1, r6
 8007b0e:	f7f8 ff8d 	bl	8000a2c <__aeabi_uldivmod>
 8007b12:	4603      	mov	r3, r0
 8007b14:	460c      	mov	r4, r1
 8007b16:	461a      	mov	r2, r3
 8007b18:	4b9a      	ldr	r3, [pc, #616]	; (8007d84 <UART_SetConfig+0x6f4>)
 8007b1a:	fba3 1302 	umull	r1, r3, r3, r2
 8007b1e:	095b      	lsrs	r3, r3, #5
 8007b20:	2164      	movs	r1, #100	; 0x64
 8007b22:	fb01 f303 	mul.w	r3, r1, r3
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	011b      	lsls	r3, r3, #4
 8007b2a:	3332      	adds	r3, #50	; 0x32
 8007b2c:	4a95      	ldr	r2, [pc, #596]	; (8007d84 <UART_SetConfig+0x6f4>)
 8007b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b32:	095b      	lsrs	r3, r3, #5
 8007b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b38:	4498      	add	r8, r3
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	469b      	mov	fp, r3
 8007b3e:	f04f 0c00 	mov.w	ip, #0
 8007b42:	46d9      	mov	r9, fp
 8007b44:	46e2      	mov	sl, ip
 8007b46:	eb19 0309 	adds.w	r3, r9, r9
 8007b4a:	eb4a 040a 	adc.w	r4, sl, sl
 8007b4e:	4699      	mov	r9, r3
 8007b50:	46a2      	mov	sl, r4
 8007b52:	eb19 090b 	adds.w	r9, r9, fp
 8007b56:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b5a:	f04f 0100 	mov.w	r1, #0
 8007b5e:	f04f 0200 	mov.w	r2, #0
 8007b62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b6e:	4689      	mov	r9, r1
 8007b70:	4692      	mov	sl, r2
 8007b72:	eb1b 0509 	adds.w	r5, fp, r9
 8007b76:	eb4c 060a 	adc.w	r6, ip, sl
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	4619      	mov	r1, r3
 8007b80:	f04f 0200 	mov.w	r2, #0
 8007b84:	f04f 0300 	mov.w	r3, #0
 8007b88:	f04f 0400 	mov.w	r4, #0
 8007b8c:	0094      	lsls	r4, r2, #2
 8007b8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b92:	008b      	lsls	r3, r1, #2
 8007b94:	461a      	mov	r2, r3
 8007b96:	4623      	mov	r3, r4
 8007b98:	4628      	mov	r0, r5
 8007b9a:	4631      	mov	r1, r6
 8007b9c:	f7f8 ff46 	bl	8000a2c <__aeabi_uldivmod>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	4b77      	ldr	r3, [pc, #476]	; (8007d84 <UART_SetConfig+0x6f4>)
 8007ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8007bac:	095b      	lsrs	r3, r3, #5
 8007bae:	2164      	movs	r1, #100	; 0x64
 8007bb0:	fb01 f303 	mul.w	r3, r1, r3
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	011b      	lsls	r3, r3, #4
 8007bb8:	3332      	adds	r3, #50	; 0x32
 8007bba:	4a72      	ldr	r2, [pc, #456]	; (8007d84 <UART_SetConfig+0x6f4>)
 8007bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc0:	095b      	lsrs	r3, r3, #5
 8007bc2:	f003 020f 	and.w	r2, r3, #15
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4442      	add	r2, r8
 8007bcc:	609a      	str	r2, [r3, #8]
 8007bce:	e0d0      	b.n	8007d72 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007bd0:	f7fe faa8 	bl	8006124 <HAL_RCC_GetPCLK1Freq>
 8007bd4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	469a      	mov	sl, r3
 8007bda:	f04f 0b00 	mov.w	fp, #0
 8007bde:	46d0      	mov	r8, sl
 8007be0:	46d9      	mov	r9, fp
 8007be2:	eb18 0308 	adds.w	r3, r8, r8
 8007be6:	eb49 0409 	adc.w	r4, r9, r9
 8007bea:	4698      	mov	r8, r3
 8007bec:	46a1      	mov	r9, r4
 8007bee:	eb18 080a 	adds.w	r8, r8, sl
 8007bf2:	eb49 090b 	adc.w	r9, r9, fp
 8007bf6:	f04f 0100 	mov.w	r1, #0
 8007bfa:	f04f 0200 	mov.w	r2, #0
 8007bfe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007c02:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007c06:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007c0a:	4688      	mov	r8, r1
 8007c0c:	4691      	mov	r9, r2
 8007c0e:	eb1a 0508 	adds.w	r5, sl, r8
 8007c12:	eb4b 0609 	adc.w	r6, fp, r9
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	f04f 0200 	mov.w	r2, #0
 8007c20:	f04f 0300 	mov.w	r3, #0
 8007c24:	f04f 0400 	mov.w	r4, #0
 8007c28:	0094      	lsls	r4, r2, #2
 8007c2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c2e:	008b      	lsls	r3, r1, #2
 8007c30:	461a      	mov	r2, r3
 8007c32:	4623      	mov	r3, r4
 8007c34:	4628      	mov	r0, r5
 8007c36:	4631      	mov	r1, r6
 8007c38:	f7f8 fef8 	bl	8000a2c <__aeabi_uldivmod>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	460c      	mov	r4, r1
 8007c40:	461a      	mov	r2, r3
 8007c42:	4b50      	ldr	r3, [pc, #320]	; (8007d84 <UART_SetConfig+0x6f4>)
 8007c44:	fba3 2302 	umull	r2, r3, r3, r2
 8007c48:	095b      	lsrs	r3, r3, #5
 8007c4a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	469b      	mov	fp, r3
 8007c52:	f04f 0c00 	mov.w	ip, #0
 8007c56:	46d9      	mov	r9, fp
 8007c58:	46e2      	mov	sl, ip
 8007c5a:	eb19 0309 	adds.w	r3, r9, r9
 8007c5e:	eb4a 040a 	adc.w	r4, sl, sl
 8007c62:	4699      	mov	r9, r3
 8007c64:	46a2      	mov	sl, r4
 8007c66:	eb19 090b 	adds.w	r9, r9, fp
 8007c6a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007c6e:	f04f 0100 	mov.w	r1, #0
 8007c72:	f04f 0200 	mov.w	r2, #0
 8007c76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c82:	4689      	mov	r9, r1
 8007c84:	4692      	mov	sl, r2
 8007c86:	eb1b 0509 	adds.w	r5, fp, r9
 8007c8a:	eb4c 060a 	adc.w	r6, ip, sl
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	4619      	mov	r1, r3
 8007c94:	f04f 0200 	mov.w	r2, #0
 8007c98:	f04f 0300 	mov.w	r3, #0
 8007c9c:	f04f 0400 	mov.w	r4, #0
 8007ca0:	0094      	lsls	r4, r2, #2
 8007ca2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ca6:	008b      	lsls	r3, r1, #2
 8007ca8:	461a      	mov	r2, r3
 8007caa:	4623      	mov	r3, r4
 8007cac:	4628      	mov	r0, r5
 8007cae:	4631      	mov	r1, r6
 8007cb0:	f7f8 febc 	bl	8000a2c <__aeabi_uldivmod>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	461a      	mov	r2, r3
 8007cba:	4b32      	ldr	r3, [pc, #200]	; (8007d84 <UART_SetConfig+0x6f4>)
 8007cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8007cc0:	095b      	lsrs	r3, r3, #5
 8007cc2:	2164      	movs	r1, #100	; 0x64
 8007cc4:	fb01 f303 	mul.w	r3, r1, r3
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	011b      	lsls	r3, r3, #4
 8007ccc:	3332      	adds	r3, #50	; 0x32
 8007cce:	4a2d      	ldr	r2, [pc, #180]	; (8007d84 <UART_SetConfig+0x6f4>)
 8007cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd4:	095b      	lsrs	r3, r3, #5
 8007cd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007cda:	4498      	add	r8, r3
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	469b      	mov	fp, r3
 8007ce0:	f04f 0c00 	mov.w	ip, #0
 8007ce4:	46d9      	mov	r9, fp
 8007ce6:	46e2      	mov	sl, ip
 8007ce8:	eb19 0309 	adds.w	r3, r9, r9
 8007cec:	eb4a 040a 	adc.w	r4, sl, sl
 8007cf0:	4699      	mov	r9, r3
 8007cf2:	46a2      	mov	sl, r4
 8007cf4:	eb19 090b 	adds.w	r9, r9, fp
 8007cf8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007cfc:	f04f 0100 	mov.w	r1, #0
 8007d00:	f04f 0200 	mov.w	r2, #0
 8007d04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d10:	4689      	mov	r9, r1
 8007d12:	4692      	mov	sl, r2
 8007d14:	eb1b 0509 	adds.w	r5, fp, r9
 8007d18:	eb4c 060a 	adc.w	r6, ip, sl
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	4619      	mov	r1, r3
 8007d22:	f04f 0200 	mov.w	r2, #0
 8007d26:	f04f 0300 	mov.w	r3, #0
 8007d2a:	f04f 0400 	mov.w	r4, #0
 8007d2e:	0094      	lsls	r4, r2, #2
 8007d30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d34:	008b      	lsls	r3, r1, #2
 8007d36:	461a      	mov	r2, r3
 8007d38:	4623      	mov	r3, r4
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	4631      	mov	r1, r6
 8007d3e:	f7f8 fe75 	bl	8000a2c <__aeabi_uldivmod>
 8007d42:	4603      	mov	r3, r0
 8007d44:	460c      	mov	r4, r1
 8007d46:	461a      	mov	r2, r3
 8007d48:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <UART_SetConfig+0x6f4>)
 8007d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8007d4e:	095b      	lsrs	r3, r3, #5
 8007d50:	2164      	movs	r1, #100	; 0x64
 8007d52:	fb01 f303 	mul.w	r3, r1, r3
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	011b      	lsls	r3, r3, #4
 8007d5a:	3332      	adds	r3, #50	; 0x32
 8007d5c:	4a09      	ldr	r2, [pc, #36]	; (8007d84 <UART_SetConfig+0x6f4>)
 8007d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d62:	095b      	lsrs	r3, r3, #5
 8007d64:	f003 020f 	and.w	r2, r3, #15
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4442      	add	r2, r8
 8007d6e:	609a      	str	r2, [r3, #8]
}
 8007d70:	e7ff      	b.n	8007d72 <UART_SetConfig+0x6e2>
 8007d72:	bf00      	nop
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7c:	40011000 	.word	0x40011000
 8007d80:	40011400 	.word	0x40011400
 8007d84:	51eb851f 	.word	0x51eb851f

08007d88 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8007d92:	2300      	movs	r3, #0
 8007d94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d029      	beq.n	8007df6 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007dae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007db2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007dbc:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8007dc2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8007dc8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8007dce:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8007dd4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8007dda:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8007de0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8007de6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	e034      	b.n	8007e60 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e02:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007e0c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007e12:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007e26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e2a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e34:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8007e3a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8007e40:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8007e46:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007e4c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3714      	adds	r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b087      	sub	sp, #28
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	60f8      	str	r0, [r7, #12]
 8007e76:	60b9      	str	r1, [r7, #8]
 8007e78:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d02e      	beq.n	8007ee6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007e94:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007ea4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007eae:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007eb8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007ec2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007ecc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	697a      	ldr	r2, [r7, #20]
 8007ee2:	609a      	str	r2, [r3, #8]
 8007ee4:	e03b      	b.n	8007f5e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ef2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ef6:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	3b01      	subs	r3, #1
 8007efe:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	3b01      	subs	r3, #1
 8007f06:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007f1c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007f2c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	3b01      	subs	r3, #1
 8007f34:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007f36:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007f40:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	699b      	ldr	r3, [r3, #24]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	371c      	adds	r7, #28
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f6c:	b084      	sub	sp, #16
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	f107 001c 	add.w	r0, r7, #28
 8007f7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d122      	bne.n	8007fca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d105      	bne.n	8007fbe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f902 	bl	80081c8 <USB_CoreReset>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	73fb      	strb	r3, [r7, #15]
 8007fc8:	e01a      	b.n	8008000 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f8f6 	bl	80081c8 <USB_CoreReset>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d106      	bne.n	8007ff4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	639a      	str	r2, [r3, #56]	; 0x38
 8007ff2:	e005      	b.n	8008000 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008002:	2b01      	cmp	r3, #1
 8008004:	d10b      	bne.n	800801e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f043 0206 	orr.w	r2, r3, #6
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	f043 0220 	orr.w	r2, r3, #32
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800801e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800802a:	b004      	add	sp, #16
 800802c:	4770      	bx	lr

0800802e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800802e:	b480      	push	{r7}
 8008030:	b083      	sub	sp, #12
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f023 0201 	bic.w	r2, r3, #1
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	460b      	mov	r3, r1
 800805a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008068:	78fb      	ldrb	r3, [r7, #3]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d106      	bne.n	800807c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	60da      	str	r2, [r3, #12]
 800807a:	e00b      	b.n	8008094 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800807c:	78fb      	ldrb	r3, [r7, #3]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d106      	bne.n	8008090 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	60da      	str	r2, [r3, #12]
 800808e:	e001      	b.n	8008094 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e003      	b.n	800809c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008094:	2032      	movs	r0, #50	; 0x32
 8008096:	f7fa fdd7 	bl	8002c48 <HAL_Delay>

  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	019b      	lsls	r3, r3, #6
 80080b6:	f043 0220 	orr.w	r2, r3, #32
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	3301      	adds	r3, #1
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	4a09      	ldr	r2, [pc, #36]	; (80080ec <USB_FlushTxFifo+0x48>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d901      	bls.n	80080d0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e006      	b.n	80080de <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	f003 0320 	and.w	r3, r3, #32
 80080d8:	2b20      	cmp	r3, #32
 80080da:	d0f0      	beq.n	80080be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	00030d40 	.word	0x00030d40

080080f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80080f8:	2300      	movs	r3, #0
 80080fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2210      	movs	r2, #16
 8008100:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3301      	adds	r3, #1
 8008106:	60fb      	str	r3, [r7, #12]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	4a09      	ldr	r2, [pc, #36]	; (8008130 <USB_FlushRxFifo+0x40>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d901      	bls.n	8008114 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e006      	b.n	8008122 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	f003 0310 	and.w	r3, r3, #16
 800811c:	2b10      	cmp	r3, #16
 800811e:	d0f0      	beq.n	8008102 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	00030d40 	.word	0x00030d40

08008134 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008134:	b480      	push	{r7}
 8008136:	b089      	sub	sp, #36	; 0x24
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	4613      	mov	r3, r2
 8008140:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800814a:	88fb      	ldrh	r3, [r7, #6]
 800814c:	3303      	adds	r3, #3
 800814e:	089b      	lsrs	r3, r3, #2
 8008150:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008152:	2300      	movs	r3, #0
 8008154:	61bb      	str	r3, [r7, #24]
 8008156:	e00b      	b.n	8008170 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	601a      	str	r2, [r3, #0]
    pDest++;
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	3304      	adds	r3, #4
 8008168:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	3301      	adds	r3, #1
 800816e:	61bb      	str	r3, [r7, #24]
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	429a      	cmp	r2, r3
 8008176:	d3ef      	bcc.n	8008158 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008178:	69fb      	ldr	r3, [r7, #28]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3724      	adds	r7, #36	; 0x24
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008186:	b480      	push	{r7}
 8008188:	b085      	sub	sp, #20
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	4013      	ands	r3, r2
 800819c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800819e:	68fb      	ldr	r3, [r7, #12]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	695b      	ldr	r3, [r3, #20]
 80081b8:	f003 0301 	and.w	r3, r3, #1
}
 80081bc:	4618      	mov	r0, r3
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80081d0:	2300      	movs	r3, #0
 80081d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	3301      	adds	r3, #1
 80081d8:	60fb      	str	r3, [r7, #12]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	4a13      	ldr	r2, [pc, #76]	; (800822c <USB_CoreReset+0x64>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d901      	bls.n	80081e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	e01b      	b.n	800821e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	daf2      	bge.n	80081d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	f043 0201 	orr.w	r2, r3, #1
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3301      	adds	r3, #1
 8008202:	60fb      	str	r3, [r7, #12]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	4a09      	ldr	r2, [pc, #36]	; (800822c <USB_CoreReset+0x64>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d901      	bls.n	8008210 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	e006      	b.n	800821e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	2b01      	cmp	r3, #1
 800821a:	d0f0      	beq.n	80081fe <USB_CoreReset+0x36>

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	00030d40 	.word	0x00030d40

08008230 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008230:	b084      	sub	sp, #16
 8008232:	b580      	push	{r7, lr}
 8008234:	b084      	sub	sp, #16
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	f107 001c 	add.w	r0, r7, #28
 800823e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800824c:	461a      	mov	r2, r3
 800824e:	2300      	movs	r3, #0
 8008250:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008256:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008262:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800827a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800827e:	2b00      	cmp	r3, #0
 8008280:	d018      	beq.n	80082b4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008284:	2b01      	cmp	r3, #1
 8008286:	d10a      	bne.n	800829e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008296:	f043 0304 	orr.w	r3, r3, #4
 800829a:	6013      	str	r3, [r2, #0]
 800829c:	e014      	b.n	80082c8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80082ac:	f023 0304 	bic.w	r3, r3, #4
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	e009      	b.n	80082c8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80082c2:	f023 0304 	bic.w	r3, r3, #4
 80082c6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80082c8:	2110      	movs	r1, #16
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7ff feea 	bl	80080a4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7ff ff0d 	bl	80080f0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80082d6:	2300      	movs	r3, #0
 80082d8:	60fb      	str	r3, [r7, #12]
 80082da:	e015      	b.n	8008308 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082e8:	461a      	mov	r2, r3
 80082ea:	f04f 33ff 	mov.w	r3, #4294967295
 80082ee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	015a      	lsls	r2, r3, #5
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	4413      	add	r3, r2
 80082f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082fc:	461a      	mov	r2, r3
 80082fe:	2300      	movs	r3, #0
 8008300:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	3301      	adds	r3, #1
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	429a      	cmp	r2, r3
 800830e:	d3e5      	bcc.n	80082dc <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008310:	2101      	movs	r1, #1
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f882 	bl	800841c <USB_DriveVbus>

  HAL_Delay(200U);
 8008318:	20c8      	movs	r0, #200	; 0xc8
 800831a:	f7fa fc95 	bl	8002c48 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f04f 32ff 	mov.w	r2, #4294967295
 800832a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00b      	beq.n	8008350 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800833e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a14      	ldr	r2, [pc, #80]	; (8008394 <USB_HostInit+0x164>)
 8008344:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a13      	ldr	r2, [pc, #76]	; (8008398 <USB_HostInit+0x168>)
 800834a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800834e:	e009      	b.n	8008364 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2280      	movs	r2, #128	; 0x80
 8008354:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a10      	ldr	r2, [pc, #64]	; (800839c <USB_HostInit+0x16c>)
 800835a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a10      	ldr	r2, [pc, #64]	; (80083a0 <USB_HostInit+0x170>)
 8008360:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008366:	2b00      	cmp	r3, #0
 8008368:	d105      	bne.n	8008376 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	f043 0210 	orr.w	r2, r3, #16
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	699a      	ldr	r2, [r3, #24]
 800837a:	4b0a      	ldr	r3, [pc, #40]	; (80083a4 <USB_HostInit+0x174>)
 800837c:	4313      	orrs	r3, r2
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800838e:	b004      	add	sp, #16
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	01000200 	.word	0x01000200
 8008398:	00e00300 	.word	0x00e00300
 800839c:	00600080 	.word	0x00600080
 80083a0:	004000e0 	.word	0x004000e0
 80083a4:	a3200008 	.word	0xa3200008

080083a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80083c6:	f023 0303 	bic.w	r3, r3, #3
 80083ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	78fb      	ldrb	r3, [r7, #3]
 80083d6:	f003 0303 	and.w	r3, r3, #3
 80083da:	68f9      	ldr	r1, [r7, #12]
 80083dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80083e0:	4313      	orrs	r3, r2
 80083e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80083e4:	78fb      	ldrb	r3, [r7, #3]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d107      	bne.n	80083fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083f0:	461a      	mov	r2, r3
 80083f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80083f6:	6053      	str	r3, [r2, #4]
 80083f8:	e009      	b.n	800840e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80083fa:	78fb      	ldrb	r3, [r7, #3]
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d106      	bne.n	800840e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008406:	461a      	mov	r2, r3
 8008408:	f241 7370 	movw	r3, #6000	; 0x1770
 800840c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	460b      	mov	r3, r1
 8008426:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800842c:	2300      	movs	r3, #0
 800842e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008440:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d109      	bne.n	8008460 <USB_DriveVbus+0x44>
 800844c:	78fb      	ldrb	r3, [r7, #3]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d106      	bne.n	8008460 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800845a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800845e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800846a:	d109      	bne.n	8008480 <USB_DriveVbus+0x64>
 800846c:	78fb      	ldrb	r3, [r7, #3]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d106      	bne.n	8008480 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800847a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800847e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800848e:	b480      	push	{r7}
 8008490:	b085      	sub	sp, #20
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	b29b      	uxth	r3, r3
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b087      	sub	sp, #28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80084c0:	78fb      	ldrb	r3, [r7, #3]
 80084c2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	0c9b      	lsrs	r3, r3, #18
 80084d8:	f003 0303 	and.w	r3, r3, #3
 80084dc:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d002      	beq.n	80084ea <USB_HC_Halt+0x3a>
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d16c      	bne.n	80085c4 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	0151      	lsls	r1, r2, #5
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	440a      	add	r2, r1
 8008500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008504:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008508:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d143      	bne.n	800859e <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	4413      	add	r3, r2
 800851e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	0151      	lsls	r1, r2, #5
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	440a      	add	r2, r1
 800852c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008530:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008534:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	4413      	add	r3, r2
 800853e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	0151      	lsls	r1, r2, #5
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	440a      	add	r2, r1
 800854c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008550:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008554:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	015a      	lsls	r2, r3, #5
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	4413      	add	r3, r2
 800855e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	0151      	lsls	r1, r2, #5
 8008568:	693a      	ldr	r2, [r7, #16]
 800856a:	440a      	add	r2, r1
 800856c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008570:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008574:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	3301      	adds	r3, #1
 800857a:	617b      	str	r3, [r7, #20]
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008582:	d81d      	bhi.n	80085c0 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	4413      	add	r3, r2
 800858c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008596:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800859a:	d0ec      	beq.n	8008576 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800859c:	e080      	b.n	80086a0 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	0151      	lsls	r1, r2, #5
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	440a      	add	r2, r1
 80085b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085bc:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80085be:	e06f      	b.n	80086a0 <USB_HC_Halt+0x1f0>
          break;
 80085c0:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80085c2:	e06d      	b.n	80086a0 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	015a      	lsls	r2, r3, #5
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	4413      	add	r3, r2
 80085cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	0151      	lsls	r1, r2, #5
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	440a      	add	r2, r1
 80085da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085e2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d143      	bne.n	800867c <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	0151      	lsls	r1, r2, #5
 8008606:	693a      	ldr	r2, [r7, #16]
 8008608:	440a      	add	r2, r1
 800860a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800860e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008612:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	015a      	lsls	r2, r3, #5
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	4413      	add	r3, r2
 800861c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	0151      	lsls	r1, r2, #5
 8008626:	693a      	ldr	r2, [r7, #16]
 8008628:	440a      	add	r2, r1
 800862a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800862e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008632:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	4413      	add	r3, r2
 800863c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	0151      	lsls	r1, r2, #5
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	440a      	add	r2, r1
 800864a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800864e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008652:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	3301      	adds	r3, #1
 8008658:	617b      	str	r3, [r7, #20]
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008660:	d81d      	bhi.n	800869e <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	015a      	lsls	r2, r3, #5
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	4413      	add	r3, r2
 800866a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008674:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008678:	d0ec      	beq.n	8008654 <USB_HC_Halt+0x1a4>
 800867a:	e011      	b.n	80086a0 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	015a      	lsls	r2, r3, #5
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	4413      	add	r3, r2
 8008684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	0151      	lsls	r1, r2, #5
 800868e:	693a      	ldr	r2, [r7, #16]
 8008690:	440a      	add	r2, r1
 8008692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008696:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800869a:	6013      	str	r3, [r2, #0]
 800869c:	e000      	b.n	80086a0 <USB_HC_Halt+0x1f0>
          break;
 800869e:	bf00      	nop
    }
  }

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	371c      	adds	r7, #28
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
	...

080086b0 <__libc_init_array>:
 80086b0:	b570      	push	{r4, r5, r6, lr}
 80086b2:	4e0d      	ldr	r6, [pc, #52]	; (80086e8 <__libc_init_array+0x38>)
 80086b4:	4c0d      	ldr	r4, [pc, #52]	; (80086ec <__libc_init_array+0x3c>)
 80086b6:	1ba4      	subs	r4, r4, r6
 80086b8:	10a4      	asrs	r4, r4, #2
 80086ba:	2500      	movs	r5, #0
 80086bc:	42a5      	cmp	r5, r4
 80086be:	d109      	bne.n	80086d4 <__libc_init_array+0x24>
 80086c0:	4e0b      	ldr	r6, [pc, #44]	; (80086f0 <__libc_init_array+0x40>)
 80086c2:	4c0c      	ldr	r4, [pc, #48]	; (80086f4 <__libc_init_array+0x44>)
 80086c4:	f000 fd6c 	bl	80091a0 <_init>
 80086c8:	1ba4      	subs	r4, r4, r6
 80086ca:	10a4      	asrs	r4, r4, #2
 80086cc:	2500      	movs	r5, #0
 80086ce:	42a5      	cmp	r5, r4
 80086d0:	d105      	bne.n	80086de <__libc_init_array+0x2e>
 80086d2:	bd70      	pop	{r4, r5, r6, pc}
 80086d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086d8:	4798      	blx	r3
 80086da:	3501      	adds	r5, #1
 80086dc:	e7ee      	b.n	80086bc <__libc_init_array+0xc>
 80086de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086e2:	4798      	blx	r3
 80086e4:	3501      	adds	r5, #1
 80086e6:	e7f2      	b.n	80086ce <__libc_init_array+0x1e>
 80086e8:	0800ae98 	.word	0x0800ae98
 80086ec:	0800ae98 	.word	0x0800ae98
 80086f0:	0800ae98 	.word	0x0800ae98
 80086f4:	0800ae9c 	.word	0x0800ae9c

080086f8 <memset>:
 80086f8:	4402      	add	r2, r0
 80086fa:	4603      	mov	r3, r0
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d100      	bne.n	8008702 <memset+0xa>
 8008700:	4770      	bx	lr
 8008702:	f803 1b01 	strb.w	r1, [r3], #1
 8008706:	e7f9      	b.n	80086fc <memset+0x4>

08008708 <sinf>:
 8008708:	ee10 3a10 	vmov	r3, s0
 800870c:	b507      	push	{r0, r1, r2, lr}
 800870e:	4a1d      	ldr	r2, [pc, #116]	; (8008784 <sinf+0x7c>)
 8008710:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008714:	4293      	cmp	r3, r2
 8008716:	dc05      	bgt.n	8008724 <sinf+0x1c>
 8008718:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8008788 <sinf+0x80>
 800871c:	2000      	movs	r0, #0
 800871e:	f000 fc41 	bl	8008fa4 <__kernel_sinf>
 8008722:	e004      	b.n	800872e <sinf+0x26>
 8008724:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008728:	db04      	blt.n	8008734 <sinf+0x2c>
 800872a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800872e:	b003      	add	sp, #12
 8008730:	f85d fb04 	ldr.w	pc, [sp], #4
 8008734:	4668      	mov	r0, sp
 8008736:	f000 f829 	bl	800878c <__ieee754_rem_pio2f>
 800873a:	f000 0003 	and.w	r0, r0, #3
 800873e:	2801      	cmp	r0, #1
 8008740:	d008      	beq.n	8008754 <sinf+0x4c>
 8008742:	2802      	cmp	r0, #2
 8008744:	d00d      	beq.n	8008762 <sinf+0x5a>
 8008746:	b9b0      	cbnz	r0, 8008776 <sinf+0x6e>
 8008748:	2001      	movs	r0, #1
 800874a:	eddd 0a01 	vldr	s1, [sp, #4]
 800874e:	ed9d 0a00 	vldr	s0, [sp]
 8008752:	e7e4      	b.n	800871e <sinf+0x16>
 8008754:	eddd 0a01 	vldr	s1, [sp, #4]
 8008758:	ed9d 0a00 	vldr	s0, [sp]
 800875c:	f000 f942 	bl	80089e4 <__kernel_cosf>
 8008760:	e7e5      	b.n	800872e <sinf+0x26>
 8008762:	2001      	movs	r0, #1
 8008764:	eddd 0a01 	vldr	s1, [sp, #4]
 8008768:	ed9d 0a00 	vldr	s0, [sp]
 800876c:	f000 fc1a 	bl	8008fa4 <__kernel_sinf>
 8008770:	eeb1 0a40 	vneg.f32	s0, s0
 8008774:	e7db      	b.n	800872e <sinf+0x26>
 8008776:	eddd 0a01 	vldr	s1, [sp, #4]
 800877a:	ed9d 0a00 	vldr	s0, [sp]
 800877e:	f000 f931 	bl	80089e4 <__kernel_cosf>
 8008782:	e7f5      	b.n	8008770 <sinf+0x68>
 8008784:	3f490fd8 	.word	0x3f490fd8
 8008788:	00000000 	.word	0x00000000

0800878c <__ieee754_rem_pio2f>:
 800878c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800878e:	ee10 6a10 	vmov	r6, s0
 8008792:	4b86      	ldr	r3, [pc, #536]	; (80089ac <__ieee754_rem_pio2f+0x220>)
 8008794:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8008798:	429c      	cmp	r4, r3
 800879a:	b087      	sub	sp, #28
 800879c:	4605      	mov	r5, r0
 800879e:	dc05      	bgt.n	80087ac <__ieee754_rem_pio2f+0x20>
 80087a0:	2300      	movs	r3, #0
 80087a2:	ed85 0a00 	vstr	s0, [r5]
 80087a6:	6043      	str	r3, [r0, #4]
 80087a8:	2000      	movs	r0, #0
 80087aa:	e020      	b.n	80087ee <__ieee754_rem_pio2f+0x62>
 80087ac:	4b80      	ldr	r3, [pc, #512]	; (80089b0 <__ieee754_rem_pio2f+0x224>)
 80087ae:	429c      	cmp	r4, r3
 80087b0:	dc38      	bgt.n	8008824 <__ieee754_rem_pio2f+0x98>
 80087b2:	2e00      	cmp	r6, #0
 80087b4:	f024 040f 	bic.w	r4, r4, #15
 80087b8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80089b4 <__ieee754_rem_pio2f+0x228>
 80087bc:	4b7e      	ldr	r3, [pc, #504]	; (80089b8 <__ieee754_rem_pio2f+0x22c>)
 80087be:	dd18      	ble.n	80087f2 <__ieee754_rem_pio2f+0x66>
 80087c0:	429c      	cmp	r4, r3
 80087c2:	ee70 7a47 	vsub.f32	s15, s0, s14
 80087c6:	bf09      	itett	eq
 80087c8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80089bc <__ieee754_rem_pio2f+0x230>
 80087cc:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80089c0 <__ieee754_rem_pio2f+0x234>
 80087d0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80087d4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80089c4 <__ieee754_rem_pio2f+0x238>
 80087d8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80087dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80087e0:	edc0 6a00 	vstr	s13, [r0]
 80087e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80087e8:	edc0 7a01 	vstr	s15, [r0, #4]
 80087ec:	2001      	movs	r0, #1
 80087ee:	b007      	add	sp, #28
 80087f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087f2:	429c      	cmp	r4, r3
 80087f4:	ee70 7a07 	vadd.f32	s15, s0, s14
 80087f8:	bf09      	itett	eq
 80087fa:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80089bc <__ieee754_rem_pio2f+0x230>
 80087fe:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80089c0 <__ieee754_rem_pio2f+0x234>
 8008802:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8008806:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80089c4 <__ieee754_rem_pio2f+0x238>
 800880a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800880e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008812:	edc0 6a00 	vstr	s13, [r0]
 8008816:	ee77 7a87 	vadd.f32	s15, s15, s14
 800881a:	edc0 7a01 	vstr	s15, [r0, #4]
 800881e:	f04f 30ff 	mov.w	r0, #4294967295
 8008822:	e7e4      	b.n	80087ee <__ieee754_rem_pio2f+0x62>
 8008824:	4b68      	ldr	r3, [pc, #416]	; (80089c8 <__ieee754_rem_pio2f+0x23c>)
 8008826:	429c      	cmp	r4, r3
 8008828:	dc71      	bgt.n	800890e <__ieee754_rem_pio2f+0x182>
 800882a:	f000 fc03 	bl	8009034 <fabsf>
 800882e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80089cc <__ieee754_rem_pio2f+0x240>
 8008832:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008836:	eee0 7a07 	vfma.f32	s15, s0, s14
 800883a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800883e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8008842:	ee17 0a90 	vmov	r0, s15
 8008846:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80089b4 <__ieee754_rem_pio2f+0x228>
 800884a:	eeb1 7a46 	vneg.f32	s14, s12
 800884e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8008852:	281f      	cmp	r0, #31
 8008854:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80089c0 <__ieee754_rem_pio2f+0x234>
 8008858:	ee66 7a27 	vmul.f32	s15, s12, s15
 800885c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008860:	ee16 3a90 	vmov	r3, s13
 8008864:	dc1c      	bgt.n	80088a0 <__ieee754_rem_pio2f+0x114>
 8008866:	1e47      	subs	r7, r0, #1
 8008868:	4959      	ldr	r1, [pc, #356]	; (80089d0 <__ieee754_rem_pio2f+0x244>)
 800886a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800886e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8008872:	428a      	cmp	r2, r1
 8008874:	d014      	beq.n	80088a0 <__ieee754_rem_pio2f+0x114>
 8008876:	602b      	str	r3, [r5, #0]
 8008878:	ed95 7a00 	vldr	s14, [r5]
 800887c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008880:	2e00      	cmp	r6, #0
 8008882:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008886:	ed85 0a01 	vstr	s0, [r5, #4]
 800888a:	dab0      	bge.n	80087ee <__ieee754_rem_pio2f+0x62>
 800888c:	eeb1 7a47 	vneg.f32	s14, s14
 8008890:	eeb1 0a40 	vneg.f32	s0, s0
 8008894:	ed85 7a00 	vstr	s14, [r5]
 8008898:	ed85 0a01 	vstr	s0, [r5, #4]
 800889c:	4240      	negs	r0, r0
 800889e:	e7a6      	b.n	80087ee <__ieee754_rem_pio2f+0x62>
 80088a0:	15e4      	asrs	r4, r4, #23
 80088a2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80088a6:	1aa2      	subs	r2, r4, r2
 80088a8:	2a08      	cmp	r2, #8
 80088aa:	dde4      	ble.n	8008876 <__ieee754_rem_pio2f+0xea>
 80088ac:	eddf 7a43 	vldr	s15, [pc, #268]	; 80089bc <__ieee754_rem_pio2f+0x230>
 80088b0:	eef0 6a40 	vmov.f32	s13, s0
 80088b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80088b8:	ee30 0a66 	vsub.f32	s0, s0, s13
 80088bc:	eea7 0a27 	vfma.f32	s0, s14, s15
 80088c0:	eddf 7a40 	vldr	s15, [pc, #256]	; 80089c4 <__ieee754_rem_pio2f+0x238>
 80088c4:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80088c8:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80088cc:	eef0 7a40 	vmov.f32	s15, s0
 80088d0:	ee15 3a90 	vmov	r3, s11
 80088d4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80088d8:	1aa4      	subs	r4, r4, r2
 80088da:	2c19      	cmp	r4, #25
 80088dc:	dc04      	bgt.n	80088e8 <__ieee754_rem_pio2f+0x15c>
 80088de:	edc5 5a00 	vstr	s11, [r5]
 80088e2:	eeb0 0a66 	vmov.f32	s0, s13
 80088e6:	e7c7      	b.n	8008878 <__ieee754_rem_pio2f+0xec>
 80088e8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80089d4 <__ieee754_rem_pio2f+0x248>
 80088ec:	eeb0 0a66 	vmov.f32	s0, s13
 80088f0:	eea7 0a25 	vfma.f32	s0, s14, s11
 80088f4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80088f8:	eee7 7a25 	vfma.f32	s15, s14, s11
 80088fc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80089d8 <__ieee754_rem_pio2f+0x24c>
 8008900:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8008904:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008908:	ed85 7a00 	vstr	s14, [r5]
 800890c:	e7b4      	b.n	8008878 <__ieee754_rem_pio2f+0xec>
 800890e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008912:	db06      	blt.n	8008922 <__ieee754_rem_pio2f+0x196>
 8008914:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008918:	edc0 7a01 	vstr	s15, [r0, #4]
 800891c:	edc0 7a00 	vstr	s15, [r0]
 8008920:	e742      	b.n	80087a8 <__ieee754_rem_pio2f+0x1c>
 8008922:	15e2      	asrs	r2, r4, #23
 8008924:	3a86      	subs	r2, #134	; 0x86
 8008926:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800892a:	ee07 3a90 	vmov	s15, r3
 800892e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008932:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80089dc <__ieee754_rem_pio2f+0x250>
 8008936:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800893a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800893e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008942:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008946:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800894a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800894e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008952:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008956:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800895a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800895e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008962:	edcd 7a05 	vstr	s15, [sp, #20]
 8008966:	d11e      	bne.n	80089a6 <__ieee754_rem_pio2f+0x21a>
 8008968:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800896c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008970:	bf0c      	ite	eq
 8008972:	2301      	moveq	r3, #1
 8008974:	2302      	movne	r3, #2
 8008976:	491a      	ldr	r1, [pc, #104]	; (80089e0 <__ieee754_rem_pio2f+0x254>)
 8008978:	9101      	str	r1, [sp, #4]
 800897a:	2102      	movs	r1, #2
 800897c:	9100      	str	r1, [sp, #0]
 800897e:	a803      	add	r0, sp, #12
 8008980:	4629      	mov	r1, r5
 8008982:	f000 f88d 	bl	8008aa0 <__kernel_rem_pio2f>
 8008986:	2e00      	cmp	r6, #0
 8008988:	f6bf af31 	bge.w	80087ee <__ieee754_rem_pio2f+0x62>
 800898c:	edd5 7a00 	vldr	s15, [r5]
 8008990:	eef1 7a67 	vneg.f32	s15, s15
 8008994:	edc5 7a00 	vstr	s15, [r5]
 8008998:	edd5 7a01 	vldr	s15, [r5, #4]
 800899c:	eef1 7a67 	vneg.f32	s15, s15
 80089a0:	edc5 7a01 	vstr	s15, [r5, #4]
 80089a4:	e77a      	b.n	800889c <__ieee754_rem_pio2f+0x110>
 80089a6:	2303      	movs	r3, #3
 80089a8:	e7e5      	b.n	8008976 <__ieee754_rem_pio2f+0x1ea>
 80089aa:	bf00      	nop
 80089ac:	3f490fd8 	.word	0x3f490fd8
 80089b0:	4016cbe3 	.word	0x4016cbe3
 80089b4:	3fc90f80 	.word	0x3fc90f80
 80089b8:	3fc90fd0 	.word	0x3fc90fd0
 80089bc:	37354400 	.word	0x37354400
 80089c0:	37354443 	.word	0x37354443
 80089c4:	2e85a308 	.word	0x2e85a308
 80089c8:	43490f80 	.word	0x43490f80
 80089cc:	3f22f984 	.word	0x3f22f984
 80089d0:	0800aac0 	.word	0x0800aac0
 80089d4:	2e85a300 	.word	0x2e85a300
 80089d8:	248d3132 	.word	0x248d3132
 80089dc:	43800000 	.word	0x43800000
 80089e0:	0800ab40 	.word	0x0800ab40

080089e4 <__kernel_cosf>:
 80089e4:	ee10 3a10 	vmov	r3, s0
 80089e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089ec:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80089f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089f4:	da05      	bge.n	8008a02 <__kernel_cosf+0x1e>
 80089f6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80089fa:	ee17 2a90 	vmov	r2, s15
 80089fe:	2a00      	cmp	r2, #0
 8008a00:	d03b      	beq.n	8008a7a <__kernel_cosf+0x96>
 8008a02:	ee20 6a00 	vmul.f32	s12, s0, s0
 8008a06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008a0a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008a80 <__kernel_cosf+0x9c>
 8008a0e:	4a1d      	ldr	r2, [pc, #116]	; (8008a84 <__kernel_cosf+0xa0>)
 8008a10:	ee66 7a07 	vmul.f32	s15, s12, s14
 8008a14:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8008a88 <__kernel_cosf+0xa4>
 8008a18:	eea6 7a25 	vfma.f32	s14, s12, s11
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8008a8c <__kernel_cosf+0xa8>
 8008a22:	eee7 5a06 	vfma.f32	s11, s14, s12
 8008a26:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008a90 <__kernel_cosf+0xac>
 8008a2a:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008a2e:	eddf 5a19 	vldr	s11, [pc, #100]	; 8008a94 <__kernel_cosf+0xb0>
 8008a32:	eee7 5a06 	vfma.f32	s11, s14, s12
 8008a36:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8008a98 <__kernel_cosf+0xb4>
 8008a3a:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008a3e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8008a42:	ee27 7a06 	vmul.f32	s14, s14, s12
 8008a46:	eee6 0a07 	vfma.f32	s1, s12, s14
 8008a4a:	dc04      	bgt.n	8008a56 <__kernel_cosf+0x72>
 8008a4c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8008a50:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8008a54:	4770      	bx	lr
 8008a56:	4a11      	ldr	r2, [pc, #68]	; (8008a9c <__kernel_cosf+0xb8>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	bfda      	itte	le
 8008a5c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8008a60:	ee07 3a10 	vmovle	s14, r3
 8008a64:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8008a68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a6c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8008a70:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008a74:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008a78:	4770      	bx	lr
 8008a7a:	eeb0 0a66 	vmov.f32	s0, s13
 8008a7e:	4770      	bx	lr
 8008a80:	ad47d74e 	.word	0xad47d74e
 8008a84:	3e999999 	.word	0x3e999999
 8008a88:	310f74f6 	.word	0x310f74f6
 8008a8c:	b493f27c 	.word	0xb493f27c
 8008a90:	37d00d01 	.word	0x37d00d01
 8008a94:	bab60b61 	.word	0xbab60b61
 8008a98:	3d2aaaab 	.word	0x3d2aaaab
 8008a9c:	3f480000 	.word	0x3f480000

08008aa0 <__kernel_rem_pio2f>:
 8008aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa4:	ed2d 8b04 	vpush	{d8-d9}
 8008aa8:	b0d7      	sub	sp, #348	; 0x15c
 8008aaa:	469b      	mov	fp, r3
 8008aac:	460e      	mov	r6, r1
 8008aae:	4bbe      	ldr	r3, [pc, #760]	; (8008da8 <__kernel_rem_pio2f+0x308>)
 8008ab0:	9964      	ldr	r1, [sp, #400]	; 0x190
 8008ab2:	9002      	str	r0, [sp, #8]
 8008ab4:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8008ab8:	9865      	ldr	r0, [sp, #404]	; 0x194
 8008aba:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8008db8 <__kernel_rem_pio2f+0x318>
 8008abe:	1ed1      	subs	r1, r2, #3
 8008ac0:	2308      	movs	r3, #8
 8008ac2:	fb91 f1f3 	sdiv	r1, r1, r3
 8008ac6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8008aca:	f10b 3aff 	add.w	sl, fp, #4294967295
 8008ace:	1c4c      	adds	r4, r1, #1
 8008ad0:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8008ad4:	eba1 050a 	sub.w	r5, r1, sl
 8008ad8:	aa1a      	add	r2, sp, #104	; 0x68
 8008ada:	eb09 070a 	add.w	r7, r9, sl
 8008ade:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8008ae2:	4696      	mov	lr, r2
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	42bb      	cmp	r3, r7
 8008ae8:	dd0f      	ble.n	8008b0a <__kernel_rem_pio2f+0x6a>
 8008aea:	af42      	add	r7, sp, #264	; 0x108
 8008aec:	2200      	movs	r2, #0
 8008aee:	454a      	cmp	r2, r9
 8008af0:	dc27      	bgt.n	8008b42 <__kernel_rem_pio2f+0xa2>
 8008af2:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8008af6:	eb0b 0302 	add.w	r3, fp, r2
 8008afa:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8008afe:	9d02      	ldr	r5, [sp, #8]
 8008b00:	eddf 7aad 	vldr	s15, [pc, #692]	; 8008db8 <__kernel_rem_pio2f+0x318>
 8008b04:	f04f 0c00 	mov.w	ip, #0
 8008b08:	e015      	b.n	8008b36 <__kernel_rem_pio2f+0x96>
 8008b0a:	42dd      	cmn	r5, r3
 8008b0c:	bf5d      	ittte	pl
 8008b0e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8008b12:	ee07 2a90 	vmovpl	s15, r2
 8008b16:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008b1a:	eef0 7a47 	vmovmi.f32	s15, s14
 8008b1e:	ecee 7a01 	vstmia	lr!, {s15}
 8008b22:	3301      	adds	r3, #1
 8008b24:	e7df      	b.n	8008ae6 <__kernel_rem_pio2f+0x46>
 8008b26:	ecf5 6a01 	vldmia	r5!, {s13}
 8008b2a:	ed33 7a01 	vldmdb	r3!, {s14}
 8008b2e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008b32:	f10c 0c01 	add.w	ip, ip, #1
 8008b36:	45d4      	cmp	ip, sl
 8008b38:	ddf5      	ble.n	8008b26 <__kernel_rem_pio2f+0x86>
 8008b3a:	ece7 7a01 	vstmia	r7!, {s15}
 8008b3e:	3201      	adds	r2, #1
 8008b40:	e7d5      	b.n	8008aee <__kernel_rem_pio2f+0x4e>
 8008b42:	ab06      	add	r3, sp, #24
 8008b44:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8008b48:	9304      	str	r3, [sp, #16]
 8008b4a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8008db4 <__kernel_rem_pio2f+0x314>
 8008b4e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8008db0 <__kernel_rem_pio2f+0x310>
 8008b52:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8008b56:	9303      	str	r3, [sp, #12]
 8008b58:	464d      	mov	r5, r9
 8008b5a:	ab56      	add	r3, sp, #344	; 0x158
 8008b5c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8008b60:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008b64:	3f01      	subs	r7, #1
 8008b66:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8008b6a:	00bf      	lsls	r7, r7, #2
 8008b6c:	ab56      	add	r3, sp, #344	; 0x158
 8008b6e:	19da      	adds	r2, r3, r7
 8008b70:	3a4c      	subs	r2, #76	; 0x4c
 8008b72:	2300      	movs	r3, #0
 8008b74:	1ae9      	subs	r1, r5, r3
 8008b76:	2900      	cmp	r1, #0
 8008b78:	dc4c      	bgt.n	8008c14 <__kernel_rem_pio2f+0x174>
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f000 faa4 	bl	80090c8 <scalbnf>
 8008b80:	eeb0 8a40 	vmov.f32	s16, s0
 8008b84:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008b88:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008b8c:	f000 fa5a 	bl	8009044 <floorf>
 8008b90:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008b94:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008b98:	2c00      	cmp	r4, #0
 8008b9a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008b9e:	edcd 7a01 	vstr	s15, [sp, #4]
 8008ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ba6:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008baa:	dd48      	ble.n	8008c3e <__kernel_rem_pio2f+0x19e>
 8008bac:	1e69      	subs	r1, r5, #1
 8008bae:	ab06      	add	r3, sp, #24
 8008bb0:	f1c4 0008 	rsb	r0, r4, #8
 8008bb4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8008bb8:	9a01      	ldr	r2, [sp, #4]
 8008bba:	fa4c f300 	asr.w	r3, ip, r0
 8008bbe:	441a      	add	r2, r3
 8008bc0:	4083      	lsls	r3, r0
 8008bc2:	9201      	str	r2, [sp, #4]
 8008bc4:	ebac 0203 	sub.w	r2, ip, r3
 8008bc8:	ab06      	add	r3, sp, #24
 8008bca:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8008bce:	f1c4 0307 	rsb	r3, r4, #7
 8008bd2:	fa42 f803 	asr.w	r8, r2, r3
 8008bd6:	f1b8 0f00 	cmp.w	r8, #0
 8008bda:	dd41      	ble.n	8008c60 <__kernel_rem_pio2f+0x1c0>
 8008bdc:	9b01      	ldr	r3, [sp, #4]
 8008bde:	2000      	movs	r0, #0
 8008be0:	3301      	adds	r3, #1
 8008be2:	9301      	str	r3, [sp, #4]
 8008be4:	4601      	mov	r1, r0
 8008be6:	4285      	cmp	r5, r0
 8008be8:	dc6d      	bgt.n	8008cc6 <__kernel_rem_pio2f+0x226>
 8008bea:	2c00      	cmp	r4, #0
 8008bec:	dd04      	ble.n	8008bf8 <__kernel_rem_pio2f+0x158>
 8008bee:	2c01      	cmp	r4, #1
 8008bf0:	d07e      	beq.n	8008cf0 <__kernel_rem_pio2f+0x250>
 8008bf2:	2c02      	cmp	r4, #2
 8008bf4:	f000 8086 	beq.w	8008d04 <__kernel_rem_pio2f+0x264>
 8008bf8:	f1b8 0f02 	cmp.w	r8, #2
 8008bfc:	d130      	bne.n	8008c60 <__kernel_rem_pio2f+0x1c0>
 8008bfe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008c02:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008c06:	b359      	cbz	r1, 8008c60 <__kernel_rem_pio2f+0x1c0>
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f000 fa5d 	bl	80090c8 <scalbnf>
 8008c0e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008c12:	e025      	b.n	8008c60 <__kernel_rem_pio2f+0x1c0>
 8008c14:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008c18:	a806      	add	r0, sp, #24
 8008c1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c22:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008c26:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008c2a:	ee10 1a10 	vmov	r1, s0
 8008c2e:	ed32 0a01 	vldmdb	r2!, {s0}
 8008c32:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8008c36:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	e79a      	b.n	8008b74 <__kernel_rem_pio2f+0xd4>
 8008c3e:	d106      	bne.n	8008c4e <__kernel_rem_pio2f+0x1ae>
 8008c40:	1e6b      	subs	r3, r5, #1
 8008c42:	aa06      	add	r2, sp, #24
 8008c44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008c48:	ea4f 2822 	mov.w	r8, r2, asr #8
 8008c4c:	e7c3      	b.n	8008bd6 <__kernel_rem_pio2f+0x136>
 8008c4e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008c52:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c5a:	da31      	bge.n	8008cc0 <__kernel_rem_pio2f+0x220>
 8008c5c:	f04f 0800 	mov.w	r8, #0
 8008c60:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c68:	f040 80a8 	bne.w	8008dbc <__kernel_rem_pio2f+0x31c>
 8008c6c:	1e6b      	subs	r3, r5, #1
 8008c6e:	4618      	mov	r0, r3
 8008c70:	2200      	movs	r2, #0
 8008c72:	4548      	cmp	r0, r9
 8008c74:	da4d      	bge.n	8008d12 <__kernel_rem_pio2f+0x272>
 8008c76:	2a00      	cmp	r2, #0
 8008c78:	f000 8087 	beq.w	8008d8a <__kernel_rem_pio2f+0x2ea>
 8008c7c:	aa06      	add	r2, sp, #24
 8008c7e:	3c08      	subs	r4, #8
 8008c80:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008c84:	2900      	cmp	r1, #0
 8008c86:	f000 808d 	beq.w	8008da4 <__kernel_rem_pio2f+0x304>
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008c90:	9302      	str	r3, [sp, #8]
 8008c92:	f000 fa19 	bl	80090c8 <scalbnf>
 8008c96:	9b02      	ldr	r3, [sp, #8]
 8008c98:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8008db4 <__kernel_rem_pio2f+0x314>
 8008c9c:	0099      	lsls	r1, r3, #2
 8008c9e:	aa42      	add	r2, sp, #264	; 0x108
 8008ca0:	1850      	adds	r0, r2, r1
 8008ca2:	1d05      	adds	r5, r0, #4
 8008ca4:	461c      	mov	r4, r3
 8008ca6:	2c00      	cmp	r4, #0
 8008ca8:	f280 80b8 	bge.w	8008e1c <__kernel_rem_pio2f+0x37c>
 8008cac:	2500      	movs	r5, #0
 8008cae:	1b5c      	subs	r4, r3, r5
 8008cb0:	2c00      	cmp	r4, #0
 8008cb2:	f2c0 80d8 	blt.w	8008e66 <__kernel_rem_pio2f+0x3c6>
 8008cb6:	4f3d      	ldr	r7, [pc, #244]	; (8008dac <__kernel_rem_pio2f+0x30c>)
 8008cb8:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8008db8 <__kernel_rem_pio2f+0x318>
 8008cbc:	2400      	movs	r4, #0
 8008cbe:	e0c6      	b.n	8008e4e <__kernel_rem_pio2f+0x3ae>
 8008cc0:	f04f 0802 	mov.w	r8, #2
 8008cc4:	e78a      	b.n	8008bdc <__kernel_rem_pio2f+0x13c>
 8008cc6:	ab06      	add	r3, sp, #24
 8008cc8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008ccc:	b949      	cbnz	r1, 8008ce2 <__kernel_rem_pio2f+0x242>
 8008cce:	b12b      	cbz	r3, 8008cdc <__kernel_rem_pio2f+0x23c>
 8008cd0:	aa06      	add	r2, sp, #24
 8008cd2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008cd6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008cda:	2301      	movs	r3, #1
 8008cdc:	3001      	adds	r0, #1
 8008cde:	4619      	mov	r1, r3
 8008ce0:	e781      	b.n	8008be6 <__kernel_rem_pio2f+0x146>
 8008ce2:	aa06      	add	r2, sp, #24
 8008ce4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8008ce8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008cec:	460b      	mov	r3, r1
 8008cee:	e7f5      	b.n	8008cdc <__kernel_rem_pio2f+0x23c>
 8008cf0:	1e68      	subs	r0, r5, #1
 8008cf2:	ab06      	add	r3, sp, #24
 8008cf4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cfc:	aa06      	add	r2, sp, #24
 8008cfe:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008d02:	e779      	b.n	8008bf8 <__kernel_rem_pio2f+0x158>
 8008d04:	1e68      	subs	r0, r5, #1
 8008d06:	ab06      	add	r3, sp, #24
 8008d08:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d10:	e7f4      	b.n	8008cfc <__kernel_rem_pio2f+0x25c>
 8008d12:	a906      	add	r1, sp, #24
 8008d14:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008d18:	3801      	subs	r0, #1
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	e7a9      	b.n	8008c72 <__kernel_rem_pio2f+0x1d2>
 8008d1e:	f10c 0c01 	add.w	ip, ip, #1
 8008d22:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008d26:	2a00      	cmp	r2, #0
 8008d28:	d0f9      	beq.n	8008d1e <__kernel_rem_pio2f+0x27e>
 8008d2a:	eb0b 0305 	add.w	r3, fp, r5
 8008d2e:	aa1a      	add	r2, sp, #104	; 0x68
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	1898      	adds	r0, r3, r2
 8008d34:	3004      	adds	r0, #4
 8008d36:	1c69      	adds	r1, r5, #1
 8008d38:	3704      	adds	r7, #4
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	4465      	add	r5, ip
 8008d3e:	9005      	str	r0, [sp, #20]
 8008d40:	428d      	cmp	r5, r1
 8008d42:	f6ff af0a 	blt.w	8008b5a <__kernel_rem_pio2f+0xba>
 8008d46:	a81a      	add	r0, sp, #104	; 0x68
 8008d48:	eb02 0c03 	add.w	ip, r2, r3
 8008d4c:	4484      	add	ip, r0
 8008d4e:	9803      	ldr	r0, [sp, #12]
 8008d50:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008d54:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8008d58:	9001      	str	r0, [sp, #4]
 8008d5a:	ee07 0a90 	vmov	s15, r0
 8008d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d62:	9805      	ldr	r0, [sp, #20]
 8008d64:	edcc 7a00 	vstr	s15, [ip]
 8008d68:	eddf 7a13 	vldr	s15, [pc, #76]	; 8008db8 <__kernel_rem_pio2f+0x318>
 8008d6c:	eb00 0802 	add.w	r8, r0, r2
 8008d70:	f04f 0c00 	mov.w	ip, #0
 8008d74:	45d4      	cmp	ip, sl
 8008d76:	dd0c      	ble.n	8008d92 <__kernel_rem_pio2f+0x2f2>
 8008d78:	eb02 0c07 	add.w	ip, r2, r7
 8008d7c:	a842      	add	r0, sp, #264	; 0x108
 8008d7e:	4484      	add	ip, r0
 8008d80:	edcc 7a01 	vstr	s15, [ip, #4]
 8008d84:	3101      	adds	r1, #1
 8008d86:	3204      	adds	r2, #4
 8008d88:	e7da      	b.n	8008d40 <__kernel_rem_pio2f+0x2a0>
 8008d8a:	9b04      	ldr	r3, [sp, #16]
 8008d8c:	f04f 0c01 	mov.w	ip, #1
 8008d90:	e7c7      	b.n	8008d22 <__kernel_rem_pio2f+0x282>
 8008d92:	ecfe 6a01 	vldmia	lr!, {s13}
 8008d96:	ed38 7a01 	vldmdb	r8!, {s14}
 8008d9a:	f10c 0c01 	add.w	ip, ip, #1
 8008d9e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008da2:	e7e7      	b.n	8008d74 <__kernel_rem_pio2f+0x2d4>
 8008da4:	3b01      	subs	r3, #1
 8008da6:	e769      	b.n	8008c7c <__kernel_rem_pio2f+0x1dc>
 8008da8:	0800ae84 	.word	0x0800ae84
 8008dac:	0800ae58 	.word	0x0800ae58
 8008db0:	43800000 	.word	0x43800000
 8008db4:	3b800000 	.word	0x3b800000
 8008db8:	00000000 	.word	0x00000000
 8008dbc:	4260      	negs	r0, r4
 8008dbe:	eeb0 0a48 	vmov.f32	s0, s16
 8008dc2:	f000 f981 	bl	80090c8 <scalbnf>
 8008dc6:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8008db0 <__kernel_rem_pio2f+0x310>
 8008dca:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd2:	db1a      	blt.n	8008e0a <__kernel_rem_pio2f+0x36a>
 8008dd4:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008db4 <__kernel_rem_pio2f+0x314>
 8008dd8:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008ddc:	aa06      	add	r2, sp, #24
 8008dde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008de2:	a906      	add	r1, sp, #24
 8008de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008de8:	3408      	adds	r4, #8
 8008dea:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008dee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008df2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008df6:	ee10 3a10 	vmov	r3, s0
 8008dfa:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008dfe:	1c6b      	adds	r3, r5, #1
 8008e00:	ee17 2a90 	vmov	r2, s15
 8008e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008e08:	e73f      	b.n	8008c8a <__kernel_rem_pio2f+0x1ea>
 8008e0a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008e0e:	aa06      	add	r2, sp, #24
 8008e10:	ee10 3a10 	vmov	r3, s0
 8008e14:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008e18:	462b      	mov	r3, r5
 8008e1a:	e736      	b.n	8008c8a <__kernel_rem_pio2f+0x1ea>
 8008e1c:	aa06      	add	r2, sp, #24
 8008e1e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8008e22:	9202      	str	r2, [sp, #8]
 8008e24:	ee07 2a90 	vmov	s15, r2
 8008e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e2c:	3c01      	subs	r4, #1
 8008e2e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008e32:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008e36:	ed65 7a01 	vstmdb	r5!, {s15}
 8008e3a:	e734      	b.n	8008ca6 <__kernel_rem_pio2f+0x206>
 8008e3c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8008e40:	ecf7 6a01 	vldmia	r7!, {s13}
 8008e44:	ed9c 7a00 	vldr	s14, [ip]
 8008e48:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008e4c:	3401      	adds	r4, #1
 8008e4e:	454c      	cmp	r4, r9
 8008e50:	dc01      	bgt.n	8008e56 <__kernel_rem_pio2f+0x3b6>
 8008e52:	42a5      	cmp	r5, r4
 8008e54:	daf2      	bge.n	8008e3c <__kernel_rem_pio2f+0x39c>
 8008e56:	aa56      	add	r2, sp, #344	; 0x158
 8008e58:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8008e5c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8008e60:	3501      	adds	r5, #1
 8008e62:	3804      	subs	r0, #4
 8008e64:	e723      	b.n	8008cae <__kernel_rem_pio2f+0x20e>
 8008e66:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8008e68:	2a03      	cmp	r2, #3
 8008e6a:	d84d      	bhi.n	8008f08 <__kernel_rem_pio2f+0x468>
 8008e6c:	e8df f002 	tbb	[pc, r2]
 8008e70:	021f1f3e 	.word	0x021f1f3e
 8008e74:	aa56      	add	r2, sp, #344	; 0x158
 8008e76:	4411      	add	r1, r2
 8008e78:	399c      	subs	r1, #156	; 0x9c
 8008e7a:	4608      	mov	r0, r1
 8008e7c:	461c      	mov	r4, r3
 8008e7e:	2c00      	cmp	r4, #0
 8008e80:	dc5f      	bgt.n	8008f42 <__kernel_rem_pio2f+0x4a2>
 8008e82:	4608      	mov	r0, r1
 8008e84:	461c      	mov	r4, r3
 8008e86:	2c01      	cmp	r4, #1
 8008e88:	dc6b      	bgt.n	8008f62 <__kernel_rem_pio2f+0x4c2>
 8008e8a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8008db8 <__kernel_rem_pio2f+0x318>
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	dc77      	bgt.n	8008f82 <__kernel_rem_pio2f+0x4e2>
 8008e92:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8008e96:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8008e9a:	f1b8 0f00 	cmp.w	r8, #0
 8008e9e:	d176      	bne.n	8008f8e <__kernel_rem_pio2f+0x4ee>
 8008ea0:	edc6 6a00 	vstr	s13, [r6]
 8008ea4:	ed86 7a01 	vstr	s14, [r6, #4]
 8008ea8:	edc6 7a02 	vstr	s15, [r6, #8]
 8008eac:	e02c      	b.n	8008f08 <__kernel_rem_pio2f+0x468>
 8008eae:	aa56      	add	r2, sp, #344	; 0x158
 8008eb0:	4411      	add	r1, r2
 8008eb2:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8008db8 <__kernel_rem_pio2f+0x318>
 8008eb6:	399c      	subs	r1, #156	; 0x9c
 8008eb8:	4618      	mov	r0, r3
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	da32      	bge.n	8008f24 <__kernel_rem_pio2f+0x484>
 8008ebe:	f1b8 0f00 	cmp.w	r8, #0
 8008ec2:	d035      	beq.n	8008f30 <__kernel_rem_pio2f+0x490>
 8008ec4:	eef1 7a47 	vneg.f32	s15, s14
 8008ec8:	edc6 7a00 	vstr	s15, [r6]
 8008ecc:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8008ed0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ed4:	a82f      	add	r0, sp, #188	; 0xbc
 8008ed6:	2101      	movs	r1, #1
 8008ed8:	428b      	cmp	r3, r1
 8008eda:	da2c      	bge.n	8008f36 <__kernel_rem_pio2f+0x496>
 8008edc:	f1b8 0f00 	cmp.w	r8, #0
 8008ee0:	d001      	beq.n	8008ee6 <__kernel_rem_pio2f+0x446>
 8008ee2:	eef1 7a67 	vneg.f32	s15, s15
 8008ee6:	edc6 7a01 	vstr	s15, [r6, #4]
 8008eea:	e00d      	b.n	8008f08 <__kernel_rem_pio2f+0x468>
 8008eec:	aa56      	add	r2, sp, #344	; 0x158
 8008eee:	4411      	add	r1, r2
 8008ef0:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8008db8 <__kernel_rem_pio2f+0x318>
 8008ef4:	399c      	subs	r1, #156	; 0x9c
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	da0e      	bge.n	8008f18 <__kernel_rem_pio2f+0x478>
 8008efa:	f1b8 0f00 	cmp.w	r8, #0
 8008efe:	d001      	beq.n	8008f04 <__kernel_rem_pio2f+0x464>
 8008f00:	eef1 7a67 	vneg.f32	s15, s15
 8008f04:	edc6 7a00 	vstr	s15, [r6]
 8008f08:	9b01      	ldr	r3, [sp, #4]
 8008f0a:	f003 0007 	and.w	r0, r3, #7
 8008f0e:	b057      	add	sp, #348	; 0x15c
 8008f10:	ecbd 8b04 	vpop	{d8-d9}
 8008f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f18:	ed31 7a01 	vldmdb	r1!, {s14}
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008f22:	e7e8      	b.n	8008ef6 <__kernel_rem_pio2f+0x456>
 8008f24:	ed71 7a01 	vldmdb	r1!, {s15}
 8008f28:	3801      	subs	r0, #1
 8008f2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008f2e:	e7c4      	b.n	8008eba <__kernel_rem_pio2f+0x41a>
 8008f30:	eef0 7a47 	vmov.f32	s15, s14
 8008f34:	e7c8      	b.n	8008ec8 <__kernel_rem_pio2f+0x428>
 8008f36:	ecb0 7a01 	vldmia	r0!, {s14}
 8008f3a:	3101      	adds	r1, #1
 8008f3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008f40:	e7ca      	b.n	8008ed8 <__kernel_rem_pio2f+0x438>
 8008f42:	ed50 7a02 	vldr	s15, [r0, #-8]
 8008f46:	ed70 6a01 	vldmdb	r0!, {s13}
 8008f4a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008f4e:	3c01      	subs	r4, #1
 8008f50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f54:	ed00 7a01 	vstr	s14, [r0, #-4]
 8008f58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f5c:	edc0 7a00 	vstr	s15, [r0]
 8008f60:	e78d      	b.n	8008e7e <__kernel_rem_pio2f+0x3de>
 8008f62:	ed50 7a02 	vldr	s15, [r0, #-8]
 8008f66:	ed70 6a01 	vldmdb	r0!, {s13}
 8008f6a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008f6e:	3c01      	subs	r4, #1
 8008f70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f74:	ed00 7a01 	vstr	s14, [r0, #-4]
 8008f78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f7c:	edc0 7a00 	vstr	s15, [r0]
 8008f80:	e781      	b.n	8008e86 <__kernel_rem_pio2f+0x3e6>
 8008f82:	ed31 7a01 	vldmdb	r1!, {s14}
 8008f86:	3b01      	subs	r3, #1
 8008f88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008f8c:	e77f      	b.n	8008e8e <__kernel_rem_pio2f+0x3ee>
 8008f8e:	eef1 6a66 	vneg.f32	s13, s13
 8008f92:	eeb1 7a47 	vneg.f32	s14, s14
 8008f96:	edc6 6a00 	vstr	s13, [r6]
 8008f9a:	ed86 7a01 	vstr	s14, [r6, #4]
 8008f9e:	eef1 7a67 	vneg.f32	s15, s15
 8008fa2:	e781      	b.n	8008ea8 <__kernel_rem_pio2f+0x408>

08008fa4 <__kernel_sinf>:
 8008fa4:	ee10 3a10 	vmov	r3, s0
 8008fa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008fb0:	da04      	bge.n	8008fbc <__kernel_sinf+0x18>
 8008fb2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008fb6:	ee17 3a90 	vmov	r3, s15
 8008fba:	b35b      	cbz	r3, 8009014 <__kernel_sinf+0x70>
 8008fbc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008fc0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009018 <__kernel_sinf+0x74>
 8008fc4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800901c <__kernel_sinf+0x78>
 8008fc8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008fcc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8009020 <__kernel_sinf+0x7c>
 8008fd0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008fd4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8009024 <__kernel_sinf+0x80>
 8008fd8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008fdc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8009028 <__kernel_sinf+0x84>
 8008fe0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008fe4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008fe8:	b930      	cbnz	r0, 8008ff8 <__kernel_sinf+0x54>
 8008fea:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800902c <__kernel_sinf+0x88>
 8008fee:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008ff2:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008ff6:	4770      	bx	lr
 8008ff8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008ffc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009000:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009004:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009008:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009030 <__kernel_sinf+0x8c>
 800900c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009010:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	2f2ec9d3 	.word	0x2f2ec9d3
 800901c:	b2d72f34 	.word	0xb2d72f34
 8009020:	3638ef1b 	.word	0x3638ef1b
 8009024:	b9500d01 	.word	0xb9500d01
 8009028:	3c088889 	.word	0x3c088889
 800902c:	be2aaaab 	.word	0xbe2aaaab
 8009030:	3e2aaaab 	.word	0x3e2aaaab

08009034 <fabsf>:
 8009034:	ee10 3a10 	vmov	r3, s0
 8009038:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800903c:	ee00 3a10 	vmov	s0, r3
 8009040:	4770      	bx	lr
	...

08009044 <floorf>:
 8009044:	ee10 3a10 	vmov	r3, s0
 8009048:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800904c:	0dca      	lsrs	r2, r1, #23
 800904e:	3a7f      	subs	r2, #127	; 0x7f
 8009050:	2a16      	cmp	r2, #22
 8009052:	dc2a      	bgt.n	80090aa <floorf+0x66>
 8009054:	2a00      	cmp	r2, #0
 8009056:	da11      	bge.n	800907c <floorf+0x38>
 8009058:	eddf 7a18 	vldr	s15, [pc, #96]	; 80090bc <floorf+0x78>
 800905c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009060:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009068:	dd05      	ble.n	8009076 <floorf+0x32>
 800906a:	2b00      	cmp	r3, #0
 800906c:	da23      	bge.n	80090b6 <floorf+0x72>
 800906e:	4a14      	ldr	r2, [pc, #80]	; (80090c0 <floorf+0x7c>)
 8009070:	2900      	cmp	r1, #0
 8009072:	bf18      	it	ne
 8009074:	4613      	movne	r3, r2
 8009076:	ee00 3a10 	vmov	s0, r3
 800907a:	4770      	bx	lr
 800907c:	4911      	ldr	r1, [pc, #68]	; (80090c4 <floorf+0x80>)
 800907e:	4111      	asrs	r1, r2
 8009080:	420b      	tst	r3, r1
 8009082:	d0fa      	beq.n	800907a <floorf+0x36>
 8009084:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80090bc <floorf+0x78>
 8009088:	ee30 0a27 	vadd.f32	s0, s0, s15
 800908c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009094:	ddef      	ble.n	8009076 <floorf+0x32>
 8009096:	2b00      	cmp	r3, #0
 8009098:	bfbe      	ittt	lt
 800909a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800909e:	fa40 f202 	asrlt.w	r2, r0, r2
 80090a2:	189b      	addlt	r3, r3, r2
 80090a4:	ea23 0301 	bic.w	r3, r3, r1
 80090a8:	e7e5      	b.n	8009076 <floorf+0x32>
 80090aa:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80090ae:	d3e4      	bcc.n	800907a <floorf+0x36>
 80090b0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80090b4:	4770      	bx	lr
 80090b6:	2300      	movs	r3, #0
 80090b8:	e7dd      	b.n	8009076 <floorf+0x32>
 80090ba:	bf00      	nop
 80090bc:	7149f2ca 	.word	0x7149f2ca
 80090c0:	bf800000 	.word	0xbf800000
 80090c4:	007fffff 	.word	0x007fffff

080090c8 <scalbnf>:
 80090c8:	b508      	push	{r3, lr}
 80090ca:	ee10 2a10 	vmov	r2, s0
 80090ce:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80090d2:	ed2d 8b02 	vpush	{d8}
 80090d6:	eef0 0a40 	vmov.f32	s1, s0
 80090da:	d004      	beq.n	80090e6 <scalbnf+0x1e>
 80090dc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80090e0:	d306      	bcc.n	80090f0 <scalbnf+0x28>
 80090e2:	ee70 0a00 	vadd.f32	s1, s0, s0
 80090e6:	ecbd 8b02 	vpop	{d8}
 80090ea:	eeb0 0a60 	vmov.f32	s0, s1
 80090ee:	bd08      	pop	{r3, pc}
 80090f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090f4:	d21c      	bcs.n	8009130 <scalbnf+0x68>
 80090f6:	4b1f      	ldr	r3, [pc, #124]	; (8009174 <scalbnf+0xac>)
 80090f8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009178 <scalbnf+0xb0>
 80090fc:	4298      	cmp	r0, r3
 80090fe:	ee60 0a27 	vmul.f32	s1, s0, s15
 8009102:	db10      	blt.n	8009126 <scalbnf+0x5e>
 8009104:	ee10 2a90 	vmov	r2, s1
 8009108:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800910c:	3b19      	subs	r3, #25
 800910e:	4403      	add	r3, r0
 8009110:	2bfe      	cmp	r3, #254	; 0xfe
 8009112:	dd0f      	ble.n	8009134 <scalbnf+0x6c>
 8009114:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800917c <scalbnf+0xb4>
 8009118:	eeb0 0a48 	vmov.f32	s0, s16
 800911c:	f000 f834 	bl	8009188 <copysignf>
 8009120:	ee60 0a08 	vmul.f32	s1, s0, s16
 8009124:	e7df      	b.n	80090e6 <scalbnf+0x1e>
 8009126:	eddf 7a16 	vldr	s15, [pc, #88]	; 8009180 <scalbnf+0xb8>
 800912a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800912e:	e7da      	b.n	80090e6 <scalbnf+0x1e>
 8009130:	0ddb      	lsrs	r3, r3, #23
 8009132:	e7ec      	b.n	800910e <scalbnf+0x46>
 8009134:	2b00      	cmp	r3, #0
 8009136:	dd06      	ble.n	8009146 <scalbnf+0x7e>
 8009138:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800913c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009140:	ee00 3a90 	vmov	s1, r3
 8009144:	e7cf      	b.n	80090e6 <scalbnf+0x1e>
 8009146:	f113 0f16 	cmn.w	r3, #22
 800914a:	da06      	bge.n	800915a <scalbnf+0x92>
 800914c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009150:	4298      	cmp	r0, r3
 8009152:	dcdf      	bgt.n	8009114 <scalbnf+0x4c>
 8009154:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8009180 <scalbnf+0xb8>
 8009158:	e7de      	b.n	8009118 <scalbnf+0x50>
 800915a:	3319      	adds	r3, #25
 800915c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8009160:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009164:	eddf 7a07 	vldr	s15, [pc, #28]	; 8009184 <scalbnf+0xbc>
 8009168:	ee07 3a10 	vmov	s14, r3
 800916c:	ee67 0a27 	vmul.f32	s1, s14, s15
 8009170:	e7b9      	b.n	80090e6 <scalbnf+0x1e>
 8009172:	bf00      	nop
 8009174:	ffff3cb0 	.word	0xffff3cb0
 8009178:	4c000000 	.word	0x4c000000
 800917c:	7149f2ca 	.word	0x7149f2ca
 8009180:	0da24260 	.word	0x0da24260
 8009184:	33000000 	.word	0x33000000

08009188 <copysignf>:
 8009188:	ee10 3a10 	vmov	r3, s0
 800918c:	ee10 2a90 	vmov	r2, s1
 8009190:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009194:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009198:	4313      	orrs	r3, r2
 800919a:	ee00 3a10 	vmov	s0, r3
 800919e:	4770      	bx	lr

080091a0 <_init>:
 80091a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a2:	bf00      	nop
 80091a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091a6:	bc08      	pop	{r3}
 80091a8:	469e      	mov	lr, r3
 80091aa:	4770      	bx	lr

080091ac <_fini>:
 80091ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ae:	bf00      	nop
 80091b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091b2:	bc08      	pop	{r3}
 80091b4:	469e      	mov	lr, r3
 80091b6:	4770      	bx	lr
