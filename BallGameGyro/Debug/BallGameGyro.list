
BallGameGyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072b0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001908  0800745c  0800745c  0001745c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d64  08008d64  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08008d64  08008d64  00018d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d6c  08008d6c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d6c  08008d6c  00018d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d70  08008d70  00018d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08008d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  20000018  08008d8c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  08008d8c  000205f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a93f  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003296  00000000  00000000  0003a987  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019b0  00000000  00000000  0003dc20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001840  00000000  00000000  0003f5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003ea5  00000000  00000000  00040e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013688  00000000  00000000  00044cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e45a5  00000000  00000000  0005833d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013c8e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e98  00000000  00000000  0013c960  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007444 	.word	0x08007444

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08007444 	.word	0x08007444

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80004f0:	f000 fe96 	bl	8001220 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80004f4:	20ca      	movs	r0, #202	; 0xca
 80004f6:	f000 f943 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80004fa:	20c3      	movs	r0, #195	; 0xc3
 80004fc:	f000 f94d 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000500:	2008      	movs	r0, #8
 8000502:	f000 f94a 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000506:	2050      	movs	r0, #80	; 0x50
 8000508:	f000 f947 	bl	800079a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800050c:	20cf      	movs	r0, #207	; 0xcf
 800050e:	f000 f937 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000512:	2000      	movs	r0, #0
 8000514:	f000 f941 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000518:	20c1      	movs	r0, #193	; 0xc1
 800051a:	f000 f93e 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800051e:	2030      	movs	r0, #48	; 0x30
 8000520:	f000 f93b 	bl	800079a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000524:	20ed      	movs	r0, #237	; 0xed
 8000526:	f000 f92b 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800052a:	2064      	movs	r0, #100	; 0x64
 800052c:	f000 f935 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000530:	2003      	movs	r0, #3
 8000532:	f000 f932 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000536:	2012      	movs	r0, #18
 8000538:	f000 f92f 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800053c:	2081      	movs	r0, #129	; 0x81
 800053e:	f000 f92c 	bl	800079a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000542:	20e8      	movs	r0, #232	; 0xe8
 8000544:	f000 f91c 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000548:	2085      	movs	r0, #133	; 0x85
 800054a:	f000 f926 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800054e:	2000      	movs	r0, #0
 8000550:	f000 f923 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000554:	2078      	movs	r0, #120	; 0x78
 8000556:	f000 f920 	bl	800079a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800055a:	20cb      	movs	r0, #203	; 0xcb
 800055c:	f000 f910 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000560:	2039      	movs	r0, #57	; 0x39
 8000562:	f000 f91a 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000566:	202c      	movs	r0, #44	; 0x2c
 8000568:	f000 f917 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800056c:	2000      	movs	r0, #0
 800056e:	f000 f914 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000572:	2034      	movs	r0, #52	; 0x34
 8000574:	f000 f911 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000578:	2002      	movs	r0, #2
 800057a:	f000 f90e 	bl	800079a <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800057e:	20f7      	movs	r0, #247	; 0xf7
 8000580:	f000 f8fe 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000584:	2020      	movs	r0, #32
 8000586:	f000 f908 	bl	800079a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800058a:	20ea      	movs	r0, #234	; 0xea
 800058c:	f000 f8f8 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000590:	2000      	movs	r0, #0
 8000592:	f000 f902 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000596:	2000      	movs	r0, #0
 8000598:	f000 f8ff 	bl	800079a <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800059c:	20b1      	movs	r0, #177	; 0xb1
 800059e:	f000 f8ef 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 f8f9 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80005a8:	201b      	movs	r0, #27
 80005aa:	f000 f8f6 	bl	800079a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80005ae:	20b6      	movs	r0, #182	; 0xb6
 80005b0:	f000 f8e6 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80005b4:	200a      	movs	r0, #10
 80005b6:	f000 f8f0 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80005ba:	20a2      	movs	r0, #162	; 0xa2
 80005bc:	f000 f8ed 	bl	800079a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80005c0:	20c0      	movs	r0, #192	; 0xc0
 80005c2:	f000 f8dd 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80005c6:	2010      	movs	r0, #16
 80005c8:	f000 f8e7 	bl	800079a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80005cc:	20c1      	movs	r0, #193	; 0xc1
 80005ce:	f000 f8d7 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80005d2:	2010      	movs	r0, #16
 80005d4:	f000 f8e1 	bl	800079a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80005d8:	20c5      	movs	r0, #197	; 0xc5
 80005da:	f000 f8d1 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80005de:	2045      	movs	r0, #69	; 0x45
 80005e0:	f000 f8db 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80005e4:	2015      	movs	r0, #21
 80005e6:	f000 f8d8 	bl	800079a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80005ea:	20c7      	movs	r0, #199	; 0xc7
 80005ec:	f000 f8c8 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80005f0:	2090      	movs	r0, #144	; 0x90
 80005f2:	f000 f8d2 	bl	800079a <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80005f6:	2036      	movs	r0, #54	; 0x36
 80005f8:	f000 f8c2 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80005fc:	20c8      	movs	r0, #200	; 0xc8
 80005fe:	f000 f8cc 	bl	800079a <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000602:	20f2      	movs	r0, #242	; 0xf2
 8000604:	f000 f8bc 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000608:	2000      	movs	r0, #0
 800060a:	f000 f8c6 	bl	800079a <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800060e:	20b0      	movs	r0, #176	; 0xb0
 8000610:	f000 f8b6 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000614:	20c2      	movs	r0, #194	; 0xc2
 8000616:	f000 f8c0 	bl	800079a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800061a:	20b6      	movs	r0, #182	; 0xb6
 800061c:	f000 f8b0 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000620:	200a      	movs	r0, #10
 8000622:	f000 f8ba 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000626:	20a7      	movs	r0, #167	; 0xa7
 8000628:	f000 f8b7 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800062c:	2027      	movs	r0, #39	; 0x27
 800062e:	f000 f8b4 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000632:	2004      	movs	r0, #4
 8000634:	f000 f8b1 	bl	800079a <ili9341_WriteData>

  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000638:	202a      	movs	r0, #42	; 0x2a
 800063a:	f000 f8a1 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800063e:	2000      	movs	r0, #0
 8000640:	f000 f8ab 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000644:	2000      	movs	r0, #0
 8000646:	f000 f8a8 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800064a:	2000      	movs	r0, #0
 800064c:	f000 f8a5 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000650:	20ef      	movs	r0, #239	; 0xef
 8000652:	f000 f8a2 	bl	800079a <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000656:	202b      	movs	r0, #43	; 0x2b
 8000658:	f000 f892 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800065c:	2000      	movs	r0, #0
 800065e:	f000 f89c 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000662:	2000      	movs	r0, #0
 8000664:	f000 f899 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000668:	2001      	movs	r0, #1
 800066a:	f000 f896 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800066e:	203f      	movs	r0, #63	; 0x3f
 8000670:	f000 f893 	bl	800079a <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000674:	20f6      	movs	r0, #246	; 0xf6
 8000676:	f000 f883 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800067a:	2001      	movs	r0, #1
 800067c:	f000 f88d 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000680:	2000      	movs	r0, #0
 8000682:	f000 f88a 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000686:	2006      	movs	r0, #6
 8000688:	f000 f887 	bl	800079a <ili9341_WriteData>

  ili9341_WriteReg(LCD_GRAM);
 800068c:	202c      	movs	r0, #44	; 0x2c
 800068e:	f000 f877 	bl	8000780 <ili9341_WriteReg>
  LCD_Delay(200);
 8000692:	20c8      	movs	r0, #200	; 0xc8
 8000694:	f000 fe80 	bl	8001398 <LCD_Delay>

  ili9341_WriteReg(LCD_GAMMA);
 8000698:	2026      	movs	r0, #38	; 0x26
 800069a:	f000 f871 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 f87b 	bl	800079a <ili9341_WriteData>

  ili9341_WriteReg(LCD_PGAMMA);
 80006a4:	20e0      	movs	r0, #224	; 0xe0
 80006a6:	f000 f86b 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80006aa:	200f      	movs	r0, #15
 80006ac:	f000 f875 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80006b0:	2029      	movs	r0, #41	; 0x29
 80006b2:	f000 f872 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80006b6:	2024      	movs	r0, #36	; 0x24
 80006b8:	f000 f86f 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80006bc:	200c      	movs	r0, #12
 80006be:	f000 f86c 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80006c2:	200e      	movs	r0, #14
 80006c4:	f000 f869 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80006c8:	2009      	movs	r0, #9
 80006ca:	f000 f866 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80006ce:	204e      	movs	r0, #78	; 0x4e
 80006d0:	f000 f863 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80006d4:	2078      	movs	r0, #120	; 0x78
 80006d6:	f000 f860 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80006da:	203c      	movs	r0, #60	; 0x3c
 80006dc:	f000 f85d 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80006e0:	2009      	movs	r0, #9
 80006e2:	f000 f85a 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80006e6:	2013      	movs	r0, #19
 80006e8:	f000 f857 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80006ec:	2005      	movs	r0, #5
 80006ee:	f000 f854 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80006f2:	2017      	movs	r0, #23
 80006f4:	f000 f851 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80006f8:	2011      	movs	r0, #17
 80006fa:	f000 f84e 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80006fe:	2000      	movs	r0, #0
 8000700:	f000 f84b 	bl	800079a <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000704:	20e1      	movs	r0, #225	; 0xe1
 8000706:	f000 f83b 	bl	8000780 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800070a:	2000      	movs	r0, #0
 800070c:	f000 f845 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8000710:	2016      	movs	r0, #22
 8000712:	f000 f842 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000716:	201b      	movs	r0, #27
 8000718:	f000 f83f 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800071c:	2004      	movs	r0, #4
 800071e:	f000 f83c 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000722:	2011      	movs	r0, #17
 8000724:	f000 f839 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000728:	2007      	movs	r0, #7
 800072a:	f000 f836 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800072e:	2031      	movs	r0, #49	; 0x31
 8000730:	f000 f833 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000734:	2033      	movs	r0, #51	; 0x33
 8000736:	f000 f830 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800073a:	2042      	movs	r0, #66	; 0x42
 800073c:	f000 f82d 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000740:	2005      	movs	r0, #5
 8000742:	f000 f82a 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000746:	200c      	movs	r0, #12
 8000748:	f000 f827 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800074c:	200a      	movs	r0, #10
 800074e:	f000 f824 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000752:	2028      	movs	r0, #40	; 0x28
 8000754:	f000 f821 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000758:	202f      	movs	r0, #47	; 0x2f
 800075a:	f000 f81e 	bl	800079a <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800075e:	200f      	movs	r0, #15
 8000760:	f000 f81b 	bl	800079a <ili9341_WriteData>

  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000764:	2011      	movs	r0, #17
 8000766:	f000 f80b 	bl	8000780 <ili9341_WriteReg>
  LCD_Delay(200);
 800076a:	20c8      	movs	r0, #200	; 0xc8
 800076c:	f000 fe14 	bl	8001398 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000770:	2029      	movs	r0, #41	; 0x29
 8000772:	f000 f805 	bl	8000780 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8000776:	202c      	movs	r0, #44	; 0x2c
 8000778:	f000 f802 	bl	8000780 <ili9341_WriteReg>
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	4618      	mov	r0, r3
 800078e:	f000 fde1 	bl	8001354 <LCD_IO_WriteReg>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4603      	mov	r3, r0
 80007a2:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80007a4:	88fb      	ldrh	r3, [r7, #6]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 fdb2 	bl	8001310 <LCD_IO_WriteData>
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t index = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007be:	f001 faa9 	bl	8001d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c2:	f000 f865 	bl	8000890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //BSP_LED_Init(LED3);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c6:	f000 fb53 	bl	8000e70 <MX_GPIO_Init>
  MX_CRC_Init();
 80007ca:	f000 f8e5 	bl	8000998 <MX_CRC_Init>
  MX_DMA2D_Init();
 80007ce:	f000 f8f7 	bl	80009c0 <MX_DMA2D_Init>
  MX_FMC_Init();
 80007d2:	f000 fafd 	bl	8000dd0 <MX_FMC_Init>
  MX_I2C3_Init();
 80007d6:	f000 f925 	bl	8000a24 <MX_I2C3_Init>
  MX_LTDC_Init();
 80007da:	f000 f963 	bl	8000aa4 <MX_LTDC_Init>
  MX_SPI5_Init();
 80007de:	f000 fa1b 	bl	8000c18 <MX_SPI5_Init>
  MX_TIM1_Init();
 80007e2:	f000 fa4f 	bl	8000c84 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80007e6:	f000 fa9d 	bl	8000d24 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 80007ea:	f000 fac5 	bl	8000d78 <MX_USB_OTG_HS_HCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(x == 0)
 80007ee:	4b22      	ldr	r3, [pc, #136]	; (8000878 <main+0xc4>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d102      	bne.n	80007fc <main+0x48>
	  		change_x = 3;
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <main+0xc8>)
 80007f8:	2203      	movs	r2, #3
 80007fa:	601a      	str	r2, [r3, #0]
	  	if(x >= 180)
 80007fc:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <main+0xc4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2bb3      	cmp	r3, #179	; 0xb3
 8000802:	d903      	bls.n	800080c <main+0x58>
	  		change_x = -3;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <main+0xc8>)
 8000806:	f06f 0202 	mvn.w	r2, #2
 800080a:	601a      	str	r2, [r3, #0]
	  	if(y == 0)
 800080c:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <main+0xcc>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d102      	bne.n	800081a <main+0x66>
	  		change_y = 3;
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <main+0xd0>)
 8000816:	2203      	movs	r2, #3
 8000818:	601a      	str	r2, [r3, #0]
	  	if(y >= 260)
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <main+0xcc>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000822:	d303      	bcc.n	800082c <main+0x78>
	  		change_y = -3;
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <main+0xd0>)
 8000826:	f06f 0202 	mvn.w	r2, #2
 800082a:	601a      	str	r2, [r3, #0]

	  	x += change_x;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <main+0xc4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a12      	ldr	r2, [pc, #72]	; (800087c <main+0xc8>)
 8000832:	6812      	ldr	r2, [r2, #0]
 8000834:	4413      	add	r3, r2
 8000836:	4a10      	ldr	r2, [pc, #64]	; (8000878 <main+0xc4>)
 8000838:	6013      	str	r3, [r2, #0]
	  	y += change_y;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <main+0xcc>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a11      	ldr	r2, [pc, #68]	; (8000884 <main+0xd0>)
 8000840:	6812      	ldr	r2, [r2, #0]
 8000842:	4413      	add	r3, r2
 8000844:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <main+0xcc>)
 8000846:	6013      	str	r3, [r2, #0]

	      HAL_LTDC_SetWindowPosition_NoReload(&hltdc, x, y, 1);
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <main+0xc4>)
 800084a:	6819      	ldr	r1, [r3, #0]
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <main+0xcc>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	2301      	movs	r3, #1
 8000852:	480d      	ldr	r0, [pc, #52]	; (8000888 <main+0xd4>)
 8000854:	f003 fe93 	bl	800457e <HAL_LTDC_SetWindowPosition_NoReload>
	      /* Ask for LTDC reload within next vertical blanking*/
	      ReloadFlag = 0;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <main+0xd8>)
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
	      HAL_LTDC_Reload(&hltdc,LTDC_SRCR_VBR);
 800085e:	2102      	movs	r1, #2
 8000860:	4809      	ldr	r0, [pc, #36]	; (8000888 <main+0xd4>)
 8000862:	f003 fe5d 	bl	8004520 <HAL_LTDC_Reload>

	      while(ReloadFlag == 0) { }
 8000866:	bf00      	nop
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <main+0xd8>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d0fb      	beq.n	8000868 <main+0xb4>

	      HAL_Delay(10);
 8000870:	200a      	movs	r0, #10
 8000872:	f001 fa91 	bl	8001d98 <HAL_Delay>
	  if(x == 0)
 8000876:	e7ba      	b.n	80007ee <main+0x3a>
 8000878:	20000034 	.word	0x20000034
 800087c:	20000000 	.word	0x20000000
 8000880:	20000038 	.word	0x20000038
 8000884:	20000004 	.word	0x20000004
 8000888:	20000154 	.word	0x20000154
 800088c:	2000003c 	.word	0x2000003c

08000890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b0a0      	sub	sp, #128	; 0x80
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800089a:	2230      	movs	r2, #48	; 0x30
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f006 fdc8 	bl	8007434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	2230      	movs	r2, #48	; 0x30
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f006 fdb9 	bl	8007434 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b32      	ldr	r3, [pc, #200]	; (8000990 <SystemClock_Config+0x100>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a31      	ldr	r2, [pc, #196]	; (8000990 <SystemClock_Config+0x100>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
 80008d2:	4b2f      	ldr	r3, [pc, #188]	; (8000990 <SystemClock_Config+0x100>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b2c      	ldr	r3, [pc, #176]	; (8000994 <SystemClock_Config+0x104>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008ea:	4a2a      	ldr	r2, [pc, #168]	; (8000994 <SystemClock_Config+0x104>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f0:	6013      	str	r3, [r2, #0]
 80008f2:	4b28      	ldr	r3, [pc, #160]	; (8000994 <SystemClock_Config+0x104>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008fe:	2301      	movs	r3, #1
 8000900:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000902:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000906:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000908:	2302      	movs	r3, #2
 800090a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000910:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000912:	2304      	movs	r3, #4
 8000914:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000916:	2348      	movs	r3, #72	; 0x48
 8000918:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800091a:	2302      	movs	r3, #2
 800091c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800091e:	2303      	movs	r3, #3
 8000920:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000922:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000926:	4618      	mov	r0, r3
 8000928:	f004 f802 	bl	8004930 <HAL_RCC_OscConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000932:	f000 fbcf 	bl	80010d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000936:	230f      	movs	r3, #15
 8000938:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093a:	2302      	movs	r3, #2
 800093c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000946:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800094c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000950:	2102      	movs	r1, #2
 8000952:	4618      	mov	r0, r3
 8000954:	f004 fa5c 	bl	8004e10 <HAL_RCC_ClockConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800095e:	f000 fbb9 	bl	80010d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000962:	2308      	movs	r3, #8
 8000964:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000966:	2332      	movs	r3, #50	; 0x32
 8000968:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800096a:	2302      	movs	r3, #2
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800096e:	2300      	movs	r3, #0
 8000970:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	4618      	mov	r0, r3
 8000978:	f004 fc6e 	bl	8005258 <HAL_RCCEx_PeriphCLKConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000982:	f000 fba7 	bl	80010d4 <Error_Handler>
  }
}
 8000986:	bf00      	nop
 8000988:	3780      	adds	r7, #128	; 0x80
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40007000 	.word	0x40007000

08000998 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_CRC_Init+0x20>)
 800099e:	4a07      	ldr	r2, [pc, #28]	; (80009bc <MX_CRC_Init+0x24>)
 80009a0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_CRC_Init+0x20>)
 80009a4:	f001 fafc 	bl	8001fa0 <HAL_CRC_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80009ae:	f000 fb91 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000014c 	.word	0x2000014c
 80009bc:	40023000 	.word	0x40023000

080009c0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_DMA2D_Init+0x5c>)
 80009c6:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <MX_DMA2D_Init+0x60>)
 80009c8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_DMA2D_Init+0x5c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_DMA2D_Init+0x5c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_DMA2D_Init+0x5c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_DMA2D_Init+0x5c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_DMA2D_Init+0x5c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_DMA2D_Init+0x5c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_DMA2D_Init+0x5c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009f4:	4809      	ldr	r0, [pc, #36]	; (8000a1c <MX_DMA2D_Init+0x5c>)
 80009f6:	f001 faef 	bl	8001fd8 <HAL_DMA2D_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a00:	f000 fb68 	bl	80010d4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a04:	2101      	movs	r1, #1
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_DMA2D_Init+0x5c>)
 8000a08:	f001 fc40 	bl	800228c <HAL_DMA2D_ConfigLayer>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a12:	f000 fb5f 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000540 	.word	0x20000540
 8000a20:	4002b000 	.word	0x4002b000

08000a24 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	; (8000a9c <MX_I2C3_Init+0x78>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a30:	4a1b      	ldr	r2, [pc, #108]	; (8000aa0 <MX_I2C3_Init+0x7c>)
 8000a32:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a46:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a62:	f003 f9e3 	bl	8003e2c <HAL_I2C_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a6c:	f000 fb32 	bl	80010d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a70:	2100      	movs	r1, #0
 8000a72:	4809      	ldr	r0, [pc, #36]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a74:	f003 fb12 	bl	800409c <HAL_I2CEx_ConfigAnalogFilter>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000a7e:	f000 fb29 	bl	80010d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a82:	2100      	movs	r1, #0
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a86:	f003 fb45 	bl	8004114 <HAL_I2CEx_ConfigDigitalFilter>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000a90:	f000 fb20 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200000a0 	.word	0x200000a0
 8000a9c:	40005c00 	.word	0x40005c00
 8000aa0:	000186a0 	.word	0x000186a0

08000aa4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b09a      	sub	sp, #104	; 0x68
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000aaa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000aae:	2234      	movs	r2, #52	; 0x34
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f006 fcbe 	bl	8007434 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000ab8:	463b      	mov	r3, r7
 8000aba:	2234      	movs	r2, #52	; 0x34
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f006 fcb8 	bl	8007434 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */
  ili9341_Init();
 8000ac4:	f7ff fd12 	bl	80004ec <ili9341_Init>
  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ac8:	4b50      	ldr	r3, [pc, #320]	; (8000c0c <MX_LTDC_Init+0x168>)
 8000aca:	4a51      	ldr	r2, [pc, #324]	; (8000c10 <MX_LTDC_Init+0x16c>)
 8000acc:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ace:	4b4f      	ldr	r3, [pc, #316]	; (8000c0c <MX_LTDC_Init+0x168>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ad4:	4b4d      	ldr	r3, [pc, #308]	; (8000c0c <MX_LTDC_Init+0x168>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ada:	4b4c      	ldr	r3, [pc, #304]	; (8000c0c <MX_LTDC_Init+0x168>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ae0:	4b4a      	ldr	r3, [pc, #296]	; (8000c0c <MX_LTDC_Init+0x168>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000ae6:	4b49      	ldr	r3, [pc, #292]	; (8000c0c <MX_LTDC_Init+0x168>)
 8000ae8:	2209      	movs	r2, #9
 8000aea:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000aec:	4b47      	ldr	r3, [pc, #284]	; (8000c0c <MX_LTDC_Init+0x168>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000af2:	4b46      	ldr	r3, [pc, #280]	; (8000c0c <MX_LTDC_Init+0x168>)
 8000af4:	221d      	movs	r2, #29
 8000af6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000af8:	4b44      	ldr	r3, [pc, #272]	; (8000c0c <MX_LTDC_Init+0x168>)
 8000afa:	2203      	movs	r2, #3
 8000afc:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000afe:	4b43      	ldr	r3, [pc, #268]	; (8000c0c <MX_LTDC_Init+0x168>)
 8000b00:	f240 120d 	movw	r2, #269	; 0x10d
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000b06:	4b41      	ldr	r3, [pc, #260]	; (8000c0c <MX_LTDC_Init+0x168>)
 8000b08:	f240 1243 	movw	r2, #323	; 0x143
 8000b0c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000b0e:	4b3f      	ldr	r3, [pc, #252]	; (8000c0c <MX_LTDC_Init+0x168>)
 8000b10:	f240 1217 	movw	r2, #279	; 0x117
 8000b14:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000b16:	4b3d      	ldr	r3, [pc, #244]	; (8000c0c <MX_LTDC_Init+0x168>)
 8000b18:	f240 1247 	movw	r2, #327	; 0x147
 8000b1c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b1e:	4b3b      	ldr	r3, [pc, #236]	; (8000c0c <MX_LTDC_Init+0x168>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b26:	4b39      	ldr	r3, [pc, #228]	; (8000c0c <MX_LTDC_Init+0x168>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b2e:	4b37      	ldr	r3, [pc, #220]	; (8000c0c <MX_LTDC_Init+0x168>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b36:	4835      	ldr	r0, [pc, #212]	; (8000c0c <MX_LTDC_Init+0x168>)
 8000b38:	f003 fb2c 	bl	8004194 <HAL_LTDC_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_LTDC_Init+0xa2>
  {
    Error_Handler();
 8000b42:	f000 fac7 	bl	80010d4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8000b4a:	23f0      	movs	r3, #240	; 0xf0
 8000b4c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 8000b52:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000b56:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000b5c:	23ff      	movs	r3, #255	; 0xff
 8000b5e:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b64:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b68:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b6a:	2307      	movs	r3, #7
 8000b6c:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0x0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8000b72:	23f0      	movs	r3, #240	; 0xf0
 8000b74:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8000b76:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000b7a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 255;
 8000b82:	23ff      	movs	r3, #255	; 0xff
 8000b84:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b92:	2200      	movs	r2, #0
 8000b94:	4619      	mov	r1, r3
 8000b96:	481d      	ldr	r0, [pc, #116]	; (8000c0c <MX_LTDC_Init+0x168>)
 8000b98:	f003 fc84 	bl	80044a4 <HAL_LTDC_ConfigLayer>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_LTDC_Init+0x102>
  {
    Error_Handler();
 8000ba2:	f000 fa97 	bl	80010d4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 60;
 8000baa:	233c      	movs	r3, #60	; 0x3c
 8000bac:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 60;
 8000bb2:	233c      	movs	r3, #60	; 0x3c
 8000bb4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 255;
 8000bba:	23ff      	movs	r3, #255	; 0xff
 8000bbc:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 255;
 8000bbe:	23ff      	movs	r3, #255	; 0xff
 8000bc0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000bc2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bc6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bc8:	2307      	movs	r3, #7
 8000bca:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 56;
 8000bd0:	2338      	movs	r3, #56	; 0x38
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 57;
 8000bd4:	2339      	movs	r3, #57	; 0x39
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000bea:	463b      	mov	r3, r7
 8000bec:	2201      	movs	r2, #1
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4806      	ldr	r0, [pc, #24]	; (8000c0c <MX_LTDC_Init+0x168>)
 8000bf2:	f003 fc57 	bl	80044a4 <HAL_LTDC_ConfigLayer>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_LTDC_Init+0x15c>
  {
    Error_Handler();
 8000bfc:	f000 fa6a 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  pLayerCfg1.FBStartAdress = (uint32_t)&ball2;
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <MX_LTDC_Init+0x170>)
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END LTDC_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	3768      	adds	r7, #104	; 0x68
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000154 	.word	0x20000154
 8000c10:	40016800 	.word	0x40016800
 8000c14:	0800745c 	.word	0x0800745c

08000c18 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <MX_SPI5_Init+0x64>)
 8000c1e:	4a18      	ldr	r2, [pc, #96]	; (8000c80 <MX_SPI5_Init+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <MX_SPI5_Init+0x64>)
 8000c24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c28:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000c2a:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <MX_SPI5_Init+0x64>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_SPI5_Init+0x64>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_SPI5_Init+0x64>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_SPI5_Init+0x64>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_SPI5_Init+0x64>)
 8000c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c48:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_SPI5_Init+0x64>)
 8000c4c:	2218      	movs	r2, #24
 8000c4e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <MX_SPI5_Init+0x64>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_SPI5_Init+0x64>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <MX_SPI5_Init+0x64>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_SPI5_Init+0x64>)
 8000c64:	220a      	movs	r2, #10
 8000c66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <MX_SPI5_Init+0x64>)
 8000c6a:	f004 fce7 	bl	800563c <HAL_SPI_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000c74:	f000 fa2e 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200000f4 	.word	0x200000f4
 8000c80:	40015000 	.word	0x40015000

08000c84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8a:	f107 0308 	add.w	r3, r7, #8
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <MX_TIM1_Init+0x98>)
 8000ca2:	4a1f      	ldr	r2, [pc, #124]	; (8000d20 <MX_TIM1_Init+0x9c>)
 8000ca4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_TIM1_Init+0x98>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <MX_TIM1_Init+0x98>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_TIM1_Init+0x98>)
 8000cb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_TIM1_Init+0x98>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <MX_TIM1_Init+0x98>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MX_TIM1_Init+0x98>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ccc:	4813      	ldr	r0, [pc, #76]	; (8000d1c <MX_TIM1_Init+0x98>)
 8000cce:	f004 ff2f 	bl	8005b30 <HAL_TIM_Base_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000cd8:	f000 f9fc 	bl	80010d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ce2:	f107 0308 	add.w	r3, r7, #8
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <MX_TIM1_Init+0x98>)
 8000cea:	f005 f878 	bl	8005dde <HAL_TIM_ConfigClockSource>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000cf4:	f000 f9ee 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_TIM1_Init+0x98>)
 8000d06:	f005 fa83 	bl	8006210 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d10:	f000 f9e0 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000500 	.word	0x20000500
 8000d20:	40010000 	.word	0x40010000

08000d24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_USART1_UART_Init+0x4c>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <MX_USART1_UART_Init+0x50>)
 8000d2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <MX_USART1_UART_Init+0x4c>)
 8000d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_USART1_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <MX_USART1_UART_Init+0x4c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <MX_USART1_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_USART1_UART_Init+0x4c>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <MX_USART1_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_USART1_UART_Init+0x4c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_USART1_UART_Init+0x4c>)
 8000d5c:	f005 fae8 	bl	8006330 <HAL_UART_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d66:	f000 f9b5 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200001fc 	.word	0x200001fc
 8000d74:	40011000 	.word	0x40011000

08000d78 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000d7e:	4a13      	ldr	r2, [pc, #76]	; (8000dcc <MX_USB_OTG_HS_HCD_Init+0x54>)
 8000d80:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000d84:	220c      	movs	r2, #12
 8000d86:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000d96:	2202      	movs	r2, #2
 8000d98:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000db4:	f001 fdc9 	bl	800294a <HAL_HCD_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8000dbe:	f000 f989 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000023c 	.word	0x2000023c
 8000dcc:	40040000 	.word	0x40040000

08000dd0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
 8000de4:	615a      	str	r2, [r3, #20]
 8000de6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000de8:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <MX_FMC_Init+0x98>)
 8000dea:	4a20      	ldr	r2, [pc, #128]	; (8000e6c <MX_FMC_Init+0x9c>)
 8000dec:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000dee:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <MX_FMC_Init+0x98>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000df4:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <MX_FMC_Init+0x98>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <MX_FMC_Init+0x98>)
 8000dfc:	2204      	movs	r2, #4
 8000dfe:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <MX_FMC_Init+0x98>)
 8000e02:	2210      	movs	r2, #16
 8000e04:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <MX_FMC_Init+0x98>)
 8000e08:	2240      	movs	r2, #64	; 0x40
 8000e0a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <MX_FMC_Init+0x98>)
 8000e0e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000e12:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <MX_FMC_Init+0x98>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <MX_FMC_Init+0x98>)
 8000e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e20:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <MX_FMC_Init+0x98>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <MX_FMC_Init+0x98>)
 8000e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000e34:	2307      	movs	r3, #7
 8000e36:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000e3c:	2307      	movs	r3, #7
 8000e3e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000e40:	2303      	movs	r3, #3
 8000e42:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000e44:	2302      	movs	r3, #2
 8000e46:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4805      	ldr	r0, [pc, #20]	; (8000e68 <MX_FMC_Init+0x98>)
 8000e52:	f004 fbbf 	bl	80055d4 <HAL_SDRAM_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000e5c:	f000 f93a 	bl	80010d4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e60:	bf00      	nop
 8000e62:	3720      	adds	r7, #32
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000580 	.word	0x20000580
 8000e6c:	a0000140 	.word	0xa0000140

08000e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08e      	sub	sp, #56	; 0x38
 8000e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
 8000e8a:	4b7a      	ldr	r3, [pc, #488]	; (8001074 <MX_GPIO_Init+0x204>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a79      	ldr	r2, [pc, #484]	; (8001074 <MX_GPIO_Init+0x204>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b77      	ldr	r3, [pc, #476]	; (8001074 <MX_GPIO_Init+0x204>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	623b      	str	r3, [r7, #32]
 8000ea0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
 8000ea6:	4b73      	ldr	r3, [pc, #460]	; (8001074 <MX_GPIO_Init+0x204>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a72      	ldr	r2, [pc, #456]	; (8001074 <MX_GPIO_Init+0x204>)
 8000eac:	f043 0320 	orr.w	r3, r3, #32
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b70      	ldr	r3, [pc, #448]	; (8001074 <MX_GPIO_Init+0x204>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0320 	and.w	r3, r3, #32
 8000eba:	61fb      	str	r3, [r7, #28]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
 8000ec2:	4b6c      	ldr	r3, [pc, #432]	; (8001074 <MX_GPIO_Init+0x204>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a6b      	ldr	r2, [pc, #428]	; (8001074 <MX_GPIO_Init+0x204>)
 8000ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b69      	ldr	r3, [pc, #420]	; (8001074 <MX_GPIO_Init+0x204>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed6:	61bb      	str	r3, [r7, #24]
 8000ed8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	4b65      	ldr	r3, [pc, #404]	; (8001074 <MX_GPIO_Init+0x204>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a64      	ldr	r2, [pc, #400]	; (8001074 <MX_GPIO_Init+0x204>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b62      	ldr	r3, [pc, #392]	; (8001074 <MX_GPIO_Init+0x204>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b5e      	ldr	r3, [pc, #376]	; (8001074 <MX_GPIO_Init+0x204>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a5d      	ldr	r2, [pc, #372]	; (8001074 <MX_GPIO_Init+0x204>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b5b      	ldr	r3, [pc, #364]	; (8001074 <MX_GPIO_Init+0x204>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b57      	ldr	r3, [pc, #348]	; (8001074 <MX_GPIO_Init+0x204>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a56      	ldr	r2, [pc, #344]	; (8001074 <MX_GPIO_Init+0x204>)
 8000f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b54      	ldr	r3, [pc, #336]	; (8001074 <MX_GPIO_Init+0x204>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	4b50      	ldr	r3, [pc, #320]	; (8001074 <MX_GPIO_Init+0x204>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a4f      	ldr	r2, [pc, #316]	; (8001074 <MX_GPIO_Init+0x204>)
 8000f38:	f043 0310 	orr.w	r3, r3, #16
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b4d      	ldr	r3, [pc, #308]	; (8001074 <MX_GPIO_Init+0x204>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0310 	and.w	r3, r3, #16
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	4b49      	ldr	r3, [pc, #292]	; (8001074 <MX_GPIO_Init+0x204>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a48      	ldr	r2, [pc, #288]	; (8001074 <MX_GPIO_Init+0x204>)
 8000f54:	f043 0308 	orr.w	r3, r3, #8
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b46      	ldr	r3, [pc, #280]	; (8001074 <MX_GPIO_Init+0x204>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2116      	movs	r1, #22
 8000f6a:	4843      	ldr	r0, [pc, #268]	; (8001078 <MX_GPIO_Init+0x208>)
 8000f6c:	f001 fcd4 	bl	8002918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	4841      	ldr	r0, [pc, #260]	; (800107c <MX_GPIO_Init+0x20c>)
 8000f76:	f001 fccf 	bl	8002918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000f80:	483f      	ldr	r0, [pc, #252]	; (8001080 <MX_GPIO_Init+0x210>)
 8000f82:	f001 fcc9 	bl	8002918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000f8c:	483d      	ldr	r0, [pc, #244]	; (8001084 <MX_GPIO_Init+0x214>)
 8000f8e:	f001 fcc3 	bl	8002918 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000f92:	2316      	movs	r3, #22
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4833      	ldr	r0, [pc, #204]	; (8001078 <MX_GPIO_Init+0x208>)
 8000faa:	f001 fa01 	bl	80023b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000fae:	f248 0307 	movw	r3, #32775	; 0x8007
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fb4:	4b34      	ldr	r3, [pc, #208]	; (8001088 <MX_GPIO_Init+0x218>)
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	482e      	ldr	r0, [pc, #184]	; (800107c <MX_GPIO_Init+0x20c>)
 8000fc4:	f001 f9f4 	bl	80023b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4827      	ldr	r0, [pc, #156]	; (800107c <MX_GPIO_Init+0x20c>)
 8000fe0:	f001 f9e6 	bl	80023b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000fe4:	2320      	movs	r3, #32
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fe8:	4b27      	ldr	r3, [pc, #156]	; (8001088 <MX_GPIO_Init+0x218>)
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4820      	ldr	r0, [pc, #128]	; (8001078 <MX_GPIO_Init+0x208>)
 8000ff8:	f001 f9da 	bl	80023b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001000:	2300      	movs	r3, #0
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100c:	4619      	mov	r1, r3
 800100e:	481f      	ldr	r0, [pc, #124]	; (800108c <MX_GPIO_Init+0x21c>)
 8001010:	f001 f9ce 	bl	80023b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001014:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101a:	2300      	movs	r3, #0
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001026:	4619      	mov	r1, r3
 8001028:	4815      	ldr	r0, [pc, #84]	; (8001080 <MX_GPIO_Init+0x210>)
 800102a:	f001 f9c1 	bl	80023b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800102e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001044:	4619      	mov	r1, r3
 8001046:	480e      	ldr	r0, [pc, #56]	; (8001080 <MX_GPIO_Init+0x210>)
 8001048:	f001 f9b2 	bl	80023b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800104c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800105e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001062:	4619      	mov	r1, r3
 8001064:	4807      	ldr	r0, [pc, #28]	; (8001084 <MX_GPIO_Init+0x214>)
 8001066:	f001 f9a3 	bl	80023b0 <HAL_GPIO_Init>

}
 800106a:	bf00      	nop
 800106c:	3738      	adds	r7, #56	; 0x38
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	40020800 	.word	0x40020800
 800107c:	40020000 	.word	0x40020000
 8001080:	40020c00 	.word	0x40020c00
 8001084:	40021800 	.word	0x40021800
 8001088:	10120000 	.word	0x10120000
 800108c:	40020400 	.word	0x40020400

08001090 <HAL_LTDC_ReloadEventCallback>:
  *x2 = 0;
  *y2 = 160 - index*4;
}

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  ReloadFlag = 1;
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <HAL_LTDC_ReloadEventCallback+0x1c>)
 800109a:	2201      	movs	r2, #1
 800109c:	601a      	str	r2, [r3, #0]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	2000003c 	.word	0x2000003c

080010b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d101      	bne.n	80010c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010c2:	f000 fe49 	bl	8001d58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40001000 	.word	0x40001000

080010d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80010e8:	4819      	ldr	r0, [pc, #100]	; (8001150 <SPIx_Init+0x6c>)
 80010ea:	f004 fc67 	bl	80059bc <HAL_SPI_GetState>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d12b      	bne.n	800114c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <SPIx_Init+0x6c>)
 80010f6:	4a17      	ldr	r2, [pc, #92]	; (8001154 <SPIx_Init+0x70>)
 80010f8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <SPIx_Init+0x6c>)
 80010fc:	2218      	movs	r2, #24
 80010fe:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <SPIx_Init+0x6c>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <SPIx_Init+0x6c>)
 8001108:	2200      	movs	r2, #0
 800110a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <SPIx_Init+0x6c>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <SPIx_Init+0x6c>)
 8001114:	2200      	movs	r2, #0
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <SPIx_Init+0x6c>)
 800111a:	2207      	movs	r2, #7
 800111c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <SPIx_Init+0x6c>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <SPIx_Init+0x6c>)
 8001126:	2200      	movs	r2, #0
 8001128:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <SPIx_Init+0x6c>)
 800112c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001130:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001132:	4b07      	ldr	r3, [pc, #28]	; (8001150 <SPIx_Init+0x6c>)
 8001134:	2200      	movs	r2, #0
 8001136:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <SPIx_Init+0x6c>)
 800113a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800113e:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001140:	4803      	ldr	r0, [pc, #12]	; (8001150 <SPIx_Init+0x6c>)
 8001142:	f000 f833 	bl	80011ac <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001146:	4802      	ldr	r0, [pc, #8]	; (8001150 <SPIx_Init+0x6c>)
 8001148:	f004 fa78 	bl	800563c <HAL_SPI_Init>
  }
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000040 	.word	0x20000040
 8001154:	40015000 	.word	0x40015000

08001158 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <SPIx_Write+0x34>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	1db9      	adds	r1, r7, #6
 800116c:	2201      	movs	r2, #1
 800116e:	4808      	ldr	r0, [pc, #32]	; (8001190 <SPIx_Write+0x38>)
 8001170:	f004 faf0 	bl	8005754 <HAL_SPI_Transmit>
 8001174:	4603      	mov	r3, r0
 8001176:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800117e:	f000 f809 	bl	8001194 <SPIx_Error>
  }
}
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008
 8001190:	20000040 	.word	0x20000040

08001194 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001198:	4803      	ldr	r0, [pc, #12]	; (80011a8 <SPIx_Error+0x14>)
 800119a:	f004 fab3 	bl	8005704 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800119e:	f7ff ffa1 	bl	80010e4 <SPIx_Init>
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000040 	.word	0x20000040

080011ac <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	4b17      	ldr	r3, [pc, #92]	; (8001218 <SPIx_MspInit+0x6c>)
 80011ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011bc:	4a16      	ldr	r2, [pc, #88]	; (8001218 <SPIx_MspInit+0x6c>)
 80011be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011c2:	6453      	str	r3, [r2, #68]	; 0x44
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <SPIx_MspInit+0x6c>)
 80011c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	4b10      	ldr	r3, [pc, #64]	; (8001218 <SPIx_MspInit+0x6c>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <SPIx_MspInit+0x6c>)
 80011da:	f043 0320 	orr.w	r3, r3, #32
 80011de:	6313      	str	r3, [r2, #48]	; 0x30
 80011e0:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <SPIx_MspInit+0x6c>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	f003 0320 	and.w	r3, r3, #32
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80011ec:	f44f 7360 	mov.w	r3, #896	; 0x380
 80011f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80011f6:	2302      	movs	r3, #2
 80011f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80011fa:	2301      	movs	r3, #1
 80011fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80011fe:	2305      	movs	r3, #5
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	4804      	ldr	r0, [pc, #16]	; (800121c <SPIx_MspInit+0x70>)
 800120a:	f001 f8d1 	bl	80023b0 <HAL_GPIO_Init>
}
 800120e:	bf00      	nop
 8001210:	3728      	adds	r7, #40	; 0x28
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40021400 	.word	0x40021400

08001220 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001226:	4b36      	ldr	r3, [pc, #216]	; (8001300 <LCD_IO_Init+0xe0>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d164      	bne.n	80012f8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800122e:	4b34      	ldr	r3, [pc, #208]	; (8001300 <LCD_IO_Init+0xe0>)
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	4b32      	ldr	r3, [pc, #200]	; (8001304 <LCD_IO_Init+0xe4>)
 800123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123c:	4a31      	ldr	r2, [pc, #196]	; (8001304 <LCD_IO_Init+0xe4>)
 800123e:	f043 0308 	orr.w	r3, r3, #8
 8001242:	6313      	str	r3, [r2, #48]	; 0x30
 8001244:	4b2f      	ldr	r3, [pc, #188]	; (8001304 <LCD_IO_Init+0xe4>)
 8001246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001248:	f003 0308 	and.w	r3, r3, #8
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001254:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001256:	2301      	movs	r3, #1
 8001258:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800125e:	2302      	movs	r3, #2
 8001260:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	4619      	mov	r1, r3
 8001268:	4827      	ldr	r0, [pc, #156]	; (8001308 <LCD_IO_Init+0xe8>)
 800126a:	f001 f8a1 	bl	80023b0 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b24      	ldr	r3, [pc, #144]	; (8001304 <LCD_IO_Init+0xe4>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a23      	ldr	r2, [pc, #140]	; (8001304 <LCD_IO_Init+0xe4>)
 8001278:	f043 0308 	orr.w	r3, r3, #8
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <LCD_IO_Init+0xe4>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800128a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001290:	2301      	movs	r3, #1
 8001292:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001298:	2302      	movs	r3, #2
 800129a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	4619      	mov	r1, r3
 80012a2:	4819      	ldr	r0, [pc, #100]	; (8001308 <LCD_IO_Init+0xe8>)
 80012a4:	f001 f884 	bl	80023b0 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80012a8:	2300      	movs	r3, #0
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	4b15      	ldr	r3, [pc, #84]	; (8001304 <LCD_IO_Init+0xe4>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	4a14      	ldr	r2, [pc, #80]	; (8001304 <LCD_IO_Init+0xe4>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	6313      	str	r3, [r2, #48]	; 0x30
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <LCD_IO_Init+0xe4>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80012c4:	2304      	movs	r3, #4
 80012c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80012d0:	2302      	movs	r3, #2
 80012d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	4619      	mov	r1, r3
 80012da:	480c      	ldr	r0, [pc, #48]	; (800130c <LCD_IO_Init+0xec>)
 80012dc:	f001 f868 	bl	80023b0 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80012e0:	2200      	movs	r2, #0
 80012e2:	2104      	movs	r1, #4
 80012e4:	4809      	ldr	r0, [pc, #36]	; (800130c <LCD_IO_Init+0xec>)
 80012e6:	f001 fb17 	bl	8002918 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80012ea:	2201      	movs	r2, #1
 80012ec:	2104      	movs	r1, #4
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <LCD_IO_Init+0xec>)
 80012f0:	f001 fb12 	bl	8002918 <HAL_GPIO_WritePin>

    SPIx_Init();
 80012f4:	f7ff fef6 	bl	80010e4 <SPIx_Init>
  }
}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000098 	.word	0x20000098
 8001304:	40023800 	.word	0x40023800
 8001308:	40020c00 	.word	0x40020c00
 800130c:	40020800 	.word	0x40020800

08001310 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800131a:	2201      	movs	r2, #1
 800131c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001320:	480a      	ldr	r0, [pc, #40]	; (800134c <LCD_IO_WriteData+0x3c>)
 8001322:	f001 faf9 	bl	8002918 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001326:	2200      	movs	r2, #0
 8001328:	2104      	movs	r1, #4
 800132a:	4809      	ldr	r0, [pc, #36]	; (8001350 <LCD_IO_WriteData+0x40>)
 800132c:	f001 faf4 	bl	8002918 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ff10 	bl	8001158 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001338:	2201      	movs	r2, #1
 800133a:	2104      	movs	r1, #4
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <LCD_IO_WriteData+0x40>)
 800133e:	f001 faeb 	bl	8002918 <HAL_GPIO_WritePin>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40020c00 	.word	0x40020c00
 8001350:	40020800 	.word	0x40020800

08001354 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001364:	480a      	ldr	r0, [pc, #40]	; (8001390 <LCD_IO_WriteReg+0x3c>)
 8001366:	f001 fad7 	bl	8002918 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800136a:	2200      	movs	r2, #0
 800136c:	2104      	movs	r1, #4
 800136e:	4809      	ldr	r0, [pc, #36]	; (8001394 <LCD_IO_WriteReg+0x40>)
 8001370:	f001 fad2 	bl	8002918 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	b29b      	uxth	r3, r3
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff feed 	bl	8001158 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800137e:	2201      	movs	r2, #1
 8001380:	2104      	movs	r1, #4
 8001382:	4804      	ldr	r0, [pc, #16]	; (8001394 <LCD_IO_WriteReg+0x40>)
 8001384:	f001 fac8 	bl	8002918 <HAL_GPIO_WritePin>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40020c00 	.word	0x40020c00
 8001394:	40020800 	.word	0x40020800

08001398 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 fcf9 	bl	8001d98 <HAL_Delay>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_MspInit+0x54>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a11      	ldr	r2, [pc, #68]	; (8001404 <HAL_MspInit+0x54>)
 80013c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_MspInit+0x54>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_MspInit+0x54>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_MspInit+0x54>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	6413      	str	r3, [r2, #64]	; 0x40
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_MspInit+0x54>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	210f      	movs	r1, #15
 80013f2:	f06f 0001 	mvn.w	r0, #1
 80013f6:	f000 fda9 	bl	8001f4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800

08001408 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <HAL_CRC_MspInit+0x3c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d10d      	bne.n	8001436 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_CRC_MspInit+0x40>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a09      	ldr	r2, [pc, #36]	; (8001448 <HAL_CRC_MspInit+0x40>)
 8001424:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b07      	ldr	r3, [pc, #28]	; (8001448 <HAL_CRC_MspInit+0x40>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40023000 	.word	0x40023000
 8001448:	40023800 	.word	0x40023800

0800144c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <HAL_DMA2D_MspInit+0x48>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d115      	bne.n	800148a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <HAL_DMA2D_MspInit+0x4c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a0c      	ldr	r2, [pc, #48]	; (8001498 <HAL_DMA2D_MspInit+0x4c>)
 8001468:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <HAL_DMA2D_MspInit+0x4c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2105      	movs	r1, #5
 800147e:	205a      	movs	r0, #90	; 0x5a
 8001480:	f000 fd64 	bl	8001f4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001484:	205a      	movs	r0, #90	; 0x5a
 8001486:	f000 fd7d 	bl	8001f84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	4002b000 	.word	0x4002b000
 8001498:	40023800 	.word	0x40023800

0800149c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a29      	ldr	r2, [pc, #164]	; (8001560 <HAL_I2C_MspInit+0xc4>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d14b      	bne.n	8001556 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	4b28      	ldr	r3, [pc, #160]	; (8001564 <HAL_I2C_MspInit+0xc8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a27      	ldr	r2, [pc, #156]	; (8001564 <HAL_I2C_MspInit+0xc8>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b25      	ldr	r3, [pc, #148]	; (8001564 <HAL_I2C_MspInit+0xc8>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <HAL_I2C_MspInit+0xc8>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a20      	ldr	r2, [pc, #128]	; (8001564 <HAL_I2C_MspInit+0xc8>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <HAL_I2C_MspInit+0xc8>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80014f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fc:	2312      	movs	r3, #18
 80014fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001500:	2301      	movs	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001508:	2304      	movs	r3, #4
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4815      	ldr	r0, [pc, #84]	; (8001568 <HAL_I2C_MspInit+0xcc>)
 8001514:	f000 ff4c 	bl	80023b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800151c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800151e:	2312      	movs	r3, #18
 8001520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001522:	2301      	movs	r3, #1
 8001524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800152a:	2304      	movs	r3, #4
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	480d      	ldr	r0, [pc, #52]	; (800156c <HAL_I2C_MspInit+0xd0>)
 8001536:	f000 ff3b 	bl	80023b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_I2C_MspInit+0xc8>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a08      	ldr	r2, [pc, #32]	; (8001564 <HAL_I2C_MspInit+0xc8>)
 8001544:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_I2C_MspInit+0xc8>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001556:	bf00      	nop
 8001558:	3728      	adds	r7, #40	; 0x28
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40005c00 	.word	0x40005c00
 8001564:	40023800 	.word	0x40023800
 8001568:	40020800 	.word	0x40020800
 800156c:	40020000 	.word	0x40020000

08001570 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08e      	sub	sp, #56	; 0x38
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a7b      	ldr	r2, [pc, #492]	; (800177c <HAL_LTDC_MspInit+0x20c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	f040 80f0 	bne.w	8001774 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
 8001598:	4b79      	ldr	r3, [pc, #484]	; (8001780 <HAL_LTDC_MspInit+0x210>)
 800159a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159c:	4a78      	ldr	r2, [pc, #480]	; (8001780 <HAL_LTDC_MspInit+0x210>)
 800159e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015a2:	6453      	str	r3, [r2, #68]	; 0x44
 80015a4:	4b76      	ldr	r3, [pc, #472]	; (8001780 <HAL_LTDC_MspInit+0x210>)
 80015a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015ac:	623b      	str	r3, [r7, #32]
 80015ae:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	4b72      	ldr	r3, [pc, #456]	; (8001780 <HAL_LTDC_MspInit+0x210>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	4a71      	ldr	r2, [pc, #452]	; (8001780 <HAL_LTDC_MspInit+0x210>)
 80015ba:	f043 0320 	orr.w	r3, r3, #32
 80015be:	6313      	str	r3, [r2, #48]	; 0x30
 80015c0:	4b6f      	ldr	r3, [pc, #444]	; (8001780 <HAL_LTDC_MspInit+0x210>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	f003 0320 	and.w	r3, r3, #32
 80015c8:	61fb      	str	r3, [r7, #28]
 80015ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	61bb      	str	r3, [r7, #24]
 80015d0:	4b6b      	ldr	r3, [pc, #428]	; (8001780 <HAL_LTDC_MspInit+0x210>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	4a6a      	ldr	r2, [pc, #424]	; (8001780 <HAL_LTDC_MspInit+0x210>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6313      	str	r3, [r2, #48]	; 0x30
 80015dc:	4b68      	ldr	r3, [pc, #416]	; (8001780 <HAL_LTDC_MspInit+0x210>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	61bb      	str	r3, [r7, #24]
 80015e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	4b64      	ldr	r3, [pc, #400]	; (8001780 <HAL_LTDC_MspInit+0x210>)
 80015ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f0:	4a63      	ldr	r2, [pc, #396]	; (8001780 <HAL_LTDC_MspInit+0x210>)
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	6313      	str	r3, [r2, #48]	; 0x30
 80015f8:	4b61      	ldr	r3, [pc, #388]	; (8001780 <HAL_LTDC_MspInit+0x210>)
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	4b5d      	ldr	r3, [pc, #372]	; (8001780 <HAL_LTDC_MspInit+0x210>)
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	4a5c      	ldr	r2, [pc, #368]	; (8001780 <HAL_LTDC_MspInit+0x210>)
 800160e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001612:	6313      	str	r3, [r2, #48]	; 0x30
 8001614:	4b5a      	ldr	r3, [pc, #360]	; (8001780 <HAL_LTDC_MspInit+0x210>)
 8001616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	4b56      	ldr	r3, [pc, #344]	; (8001780 <HAL_LTDC_MspInit+0x210>)
 8001626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001628:	4a55      	ldr	r2, [pc, #340]	; (8001780 <HAL_LTDC_MspInit+0x210>)
 800162a:	f043 0304 	orr.w	r3, r3, #4
 800162e:	6313      	str	r3, [r2, #48]	; 0x30
 8001630:	4b53      	ldr	r3, [pc, #332]	; (8001780 <HAL_LTDC_MspInit+0x210>)
 8001632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800163c:	2300      	movs	r3, #0
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	4b4f      	ldr	r3, [pc, #316]	; (8001780 <HAL_LTDC_MspInit+0x210>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	4a4e      	ldr	r2, [pc, #312]	; (8001780 <HAL_LTDC_MspInit+0x210>)
 8001646:	f043 0308 	orr.w	r3, r3, #8
 800164a:	6313      	str	r3, [r2, #48]	; 0x30
 800164c:	4b4c      	ldr	r3, [pc, #304]	; (8001780 <HAL_LTDC_MspInit+0x210>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800166a:	230e      	movs	r3, #14
 800166c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800166e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001672:	4619      	mov	r1, r3
 8001674:	4843      	ldr	r0, [pc, #268]	; (8001784 <HAL_LTDC_MspInit+0x214>)
 8001676:	f000 fe9b 	bl	80023b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800167a:	f641 0358 	movw	r3, #6232	; 0x1858
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800168c:	230e      	movs	r3, #14
 800168e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001694:	4619      	mov	r1, r3
 8001696:	483c      	ldr	r0, [pc, #240]	; (8001788 <HAL_LTDC_MspInit+0x218>)
 8001698:	f000 fe8a 	bl	80023b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800169c:	2303      	movs	r3, #3
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80016ac:	2309      	movs	r3, #9
 80016ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b4:	4619      	mov	r1, r3
 80016b6:	4835      	ldr	r0, [pc, #212]	; (800178c <HAL_LTDC_MspInit+0x21c>)
 80016b8:	f000 fe7a 	bl	80023b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80016bc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016ce:	230e      	movs	r3, #14
 80016d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d6:	4619      	mov	r1, r3
 80016d8:	482c      	ldr	r0, [pc, #176]	; (800178c <HAL_LTDC_MspInit+0x21c>)
 80016da:	f000 fe69 	bl	80023b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80016de:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016f0:	230e      	movs	r3, #14
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f8:	4619      	mov	r1, r3
 80016fa:	4825      	ldr	r0, [pc, #148]	; (8001790 <HAL_LTDC_MspInit+0x220>)
 80016fc:	f000 fe58 	bl	80023b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001700:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001712:	230e      	movs	r3, #14
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171a:	4619      	mov	r1, r3
 800171c:	481d      	ldr	r0, [pc, #116]	; (8001794 <HAL_LTDC_MspInit+0x224>)
 800171e:	f000 fe47 	bl	80023b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001722:	2348      	movs	r3, #72	; 0x48
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001732:	230e      	movs	r3, #14
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173a:	4619      	mov	r1, r3
 800173c:	4816      	ldr	r0, [pc, #88]	; (8001798 <HAL_LTDC_MspInit+0x228>)
 800173e:	f000 fe37 	bl	80023b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001742:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001754:	2309      	movs	r3, #9
 8001756:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175c:	4619      	mov	r1, r3
 800175e:	480c      	ldr	r0, [pc, #48]	; (8001790 <HAL_LTDC_MspInit+0x220>)
 8001760:	f000 fe26 	bl	80023b0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001764:	2200      	movs	r2, #0
 8001766:	2105      	movs	r1, #5
 8001768:	2058      	movs	r0, #88	; 0x58
 800176a:	f000 fbef 	bl	8001f4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800176e:	2058      	movs	r0, #88	; 0x58
 8001770:	f000 fc08 	bl	8001f84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001774:	bf00      	nop
 8001776:	3738      	adds	r7, #56	; 0x38
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40016800 	.word	0x40016800
 8001780:	40023800 	.word	0x40023800
 8001784:	40021400 	.word	0x40021400
 8001788:	40020000 	.word	0x40020000
 800178c:	40020400 	.word	0x40020400
 8001790:	40021800 	.word	0x40021800
 8001794:	40020800 	.word	0x40020800
 8001798:	40020c00 	.word	0x40020c00

0800179c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a19      	ldr	r2, [pc, #100]	; (8001820 <HAL_SPI_MspInit+0x84>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d12c      	bne.n	8001818 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_SPI_MspInit+0x88>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	4a17      	ldr	r2, [pc, #92]	; (8001824 <HAL_SPI_MspInit+0x88>)
 80017c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017cc:	6453      	str	r3, [r2, #68]	; 0x44
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_SPI_MspInit+0x88>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <HAL_SPI_MspInit+0x88>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a10      	ldr	r2, [pc, #64]	; (8001824 <HAL_SPI_MspInit+0x88>)
 80017e4:	f043 0320 	orr.w	r3, r3, #32
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <HAL_SPI_MspInit+0x88>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0320 	and.w	r3, r3, #32
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80017f6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80017fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001808:	2305      	movs	r3, #5
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <HAL_SPI_MspInit+0x8c>)
 8001814:	f000 fdcc 	bl	80023b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001818:	bf00      	nop
 800181a:	3728      	adds	r7, #40	; 0x28
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40015000 	.word	0x40015000
 8001824:	40023800 	.word	0x40023800
 8001828:	40021400 	.word	0x40021400

0800182c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a08      	ldr	r2, [pc, #32]	; (800185c <HAL_SPI_MspDeInit+0x30>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d10a      	bne.n	8001854 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <HAL_SPI_MspDeInit+0x34>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	4a07      	ldr	r2, [pc, #28]	; (8001860 <HAL_SPI_MspDeInit+0x34>)
 8001844:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001848:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800184a:	f44f 7160 	mov.w	r1, #896	; 0x380
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <HAL_SPI_MspDeInit+0x38>)
 8001850:	f000 ff58 	bl	8002704 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40015000 	.word	0x40015000
 8001860:	40023800 	.word	0x40023800
 8001864:	40021400 	.word	0x40021400

08001868 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0b      	ldr	r2, [pc, #44]	; (80018a4 <HAL_TIM_Base_MspInit+0x3c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d10d      	bne.n	8001896 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_TIM_Base_MspInit+0x40>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	4a09      	ldr	r2, [pc, #36]	; (80018a8 <HAL_TIM_Base_MspInit+0x40>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6453      	str	r3, [r2, #68]	; 0x44
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <HAL_TIM_Base_MspInit+0x40>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001896:	bf00      	nop
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40010000 	.word	0x40010000
 80018a8:	40023800 	.word	0x40023800

080018ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a19      	ldr	r2, [pc, #100]	; (8001930 <HAL_UART_MspInit+0x84>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d12c      	bne.n	8001928 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	4b18      	ldr	r3, [pc, #96]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	4a17      	ldr	r2, [pc, #92]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018d8:	f043 0310 	orr.w	r3, r3, #16
 80018dc:	6453      	str	r3, [r2, #68]	; 0x44
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f003 0310 	and.w	r3, r3, #16
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a10      	ldr	r2, [pc, #64]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001906:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800190a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001914:	2303      	movs	r3, #3
 8001916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001918:	2307      	movs	r3, #7
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4619      	mov	r1, r3
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <HAL_UART_MspInit+0x8c>)
 8001924:	f000 fd44 	bl	80023b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001928:	bf00      	nop
 800192a:	3728      	adds	r7, #40	; 0x28
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40011000 	.word	0x40011000
 8001934:	40023800 	.word	0x40023800
 8001938:	40020000 	.word	0x40020000

0800193c <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_HS)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a24      	ldr	r2, [pc, #144]	; (80019ec <HAL_HCD_MspInit+0xb0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d141      	bne.n	80019e2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <HAL_HCD_MspInit+0xb4>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a22      	ldr	r2, [pc, #136]	; (80019f0 <HAL_HCD_MspInit+0xb4>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <HAL_HCD_MspInit+0xb4>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800197a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800198c:	230c      	movs	r3, #12
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	4817      	ldr	r0, [pc, #92]	; (80019f4 <HAL_HCD_MspInit+0xb8>)
 8001998:	f000 fd0a 	bl	80023b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800199c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	4810      	ldr	r0, [pc, #64]	; (80019f4 <HAL_HCD_MspInit+0xb8>)
 80019b2:	f000 fcfd 	bl	80023b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <HAL_HCD_MspInit+0xb4>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a0c      	ldr	r2, [pc, #48]	; (80019f0 <HAL_HCD_MspInit+0xb4>)
 80019c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_HCD_MspInit+0xb4>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	204d      	movs	r0, #77	; 0x4d
 80019d8:	f000 fab8 	bl	8001f4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80019dc:	204d      	movs	r0, #77	; 0x4d
 80019de:	f000 fad1 	bl	8001f84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 80019e2:	bf00      	nop
 80019e4:	3728      	adds	r7, #40	; 0x28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40040000 	.word	0x40040000
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020400 	.word	0x40020400

080019f8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001a0c:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <HAL_FMC_MspInit+0x104>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d16f      	bne.n	8001af4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001a14:	4b39      	ldr	r3, [pc, #228]	; (8001afc <HAL_FMC_MspInit+0x104>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <HAL_FMC_MspInit+0x108>)
 8001a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a22:	4a37      	ldr	r2, [pc, #220]	; (8001b00 <HAL_FMC_MspInit+0x108>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6393      	str	r3, [r2, #56]	; 0x38
 8001a2a:	4b35      	ldr	r3, [pc, #212]	; (8001b00 <HAL_FMC_MspInit+0x108>)
 8001a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001a36:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001a3a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a48:	230c      	movs	r3, #12
 8001a4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	4619      	mov	r1, r3
 8001a50:	482c      	ldr	r0, [pc, #176]	; (8001b04 <HAL_FMC_MspInit+0x10c>)
 8001a52:	f000 fcad 	bl	80023b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001a56:	2301      	movs	r3, #1
 8001a58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a66:	230c      	movs	r3, #12
 8001a68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4826      	ldr	r0, [pc, #152]	; (8001b08 <HAL_FMC_MspInit+0x110>)
 8001a70:	f000 fc9e 	bl	80023b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001a74:	f248 1333 	movw	r3, #33075	; 0x8133
 8001a78:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a86:	230c      	movs	r3, #12
 8001a88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	481f      	ldr	r0, [pc, #124]	; (8001b0c <HAL_FMC_MspInit+0x114>)
 8001a90:	f000 fc8e 	bl	80023b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001a94:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001a98:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001aa6:	230c      	movs	r3, #12
 8001aa8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	4619      	mov	r1, r3
 8001aae:	4818      	ldr	r0, [pc, #96]	; (8001b10 <HAL_FMC_MspInit+0x118>)
 8001ab0:	f000 fc7e 	bl	80023b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001ab4:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001ab8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ac6:	230c      	movs	r3, #12
 8001ac8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	4619      	mov	r1, r3
 8001ace:	4811      	ldr	r0, [pc, #68]	; (8001b14 <HAL_FMC_MspInit+0x11c>)
 8001ad0:	f000 fc6e 	bl	80023b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001ad4:	2360      	movs	r3, #96	; 0x60
 8001ad6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ae4:	230c      	movs	r3, #12
 8001ae6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	4619      	mov	r1, r3
 8001aec:	480a      	ldr	r0, [pc, #40]	; (8001b18 <HAL_FMC_MspInit+0x120>)
 8001aee:	f000 fc5f 	bl	80023b0 <HAL_GPIO_Init>
 8001af2:	e000      	b.n	8001af6 <HAL_FMC_MspInit+0xfe>
    return;
 8001af4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	2000009c 	.word	0x2000009c
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40021400 	.word	0x40021400
 8001b08:	40020800 	.word	0x40020800
 8001b0c:	40021800 	.word	0x40021800
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40020c00 	.word	0x40020c00
 8001b18:	40020400 	.word	0x40020400

08001b1c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001b24:	f7ff ff68 	bl	80019f8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08c      	sub	sp, #48	; 0x30
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	2036      	movs	r0, #54	; 0x36
 8001b46:	f000 fa01 	bl	8001f4c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b4a:	2036      	movs	r0, #54	; 0x36
 8001b4c:	f000 fa1a 	bl	8001f84 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <HAL_InitTick+0xa4>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	4a1e      	ldr	r2, [pc, #120]	; (8001bd4 <HAL_InitTick+0xa4>)
 8001b5a:	f043 0310 	orr.w	r3, r3, #16
 8001b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b60:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <HAL_InitTick+0xa4>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	f003 0310 	and.w	r3, r3, #16
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b6c:	f107 0210 	add.w	r2, r7, #16
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4611      	mov	r1, r2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 fb3c 	bl	80051f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b7c:	f003 fb12 	bl	80051a4 <HAL_RCC_GetPCLK1Freq>
 8001b80:	4603      	mov	r3, r0
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b88:	4a13      	ldr	r2, [pc, #76]	; (8001bd8 <HAL_InitTick+0xa8>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	0c9b      	lsrs	r3, r3, #18
 8001b90:	3b01      	subs	r3, #1
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_InitTick+0xac>)
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <HAL_InitTick+0xb0>)
 8001b98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <HAL_InitTick+0xac>)
 8001b9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ba0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <HAL_InitTick+0xac>)
 8001ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <HAL_InitTick+0xac>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_InitTick+0xac>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001bb4:	4809      	ldr	r0, [pc, #36]	; (8001bdc <HAL_InitTick+0xac>)
 8001bb6:	f003 ffbb 	bl	8005b30 <HAL_TIM_Base_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d104      	bne.n	8001bca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001bc0:	4806      	ldr	r0, [pc, #24]	; (8001bdc <HAL_InitTick+0xac>)
 8001bc2:	f003 ffe0 	bl	8005b86 <HAL_TIM_Base_Start_IT>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	e000      	b.n	8001bcc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3730      	adds	r7, #48	; 0x30
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	431bde83 	.word	0x431bde83
 8001bdc:	200005b4 	.word	0x200005b4
 8001be0:	40001000 	.word	0x40001000

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <HardFault_Handler+0x4>

08001bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <MemManage_Handler+0x4>

08001bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <BusFault_Handler+0x4>

08001c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <UsageFault_Handler+0x4>

08001c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c48:	4802      	ldr	r0, [pc, #8]	; (8001c54 <TIM6_DAC_IRQHandler+0x10>)
 8001c4a:	f003 ffc0 	bl	8005bce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	200005b4 	.word	0x200005b4

08001c58 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <OTG_HS_IRQHandler+0x10>)
 8001c5e:	f000 fed6 	bl	8002a0e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	2000023c 	.word	0x2000023c

08001c6c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <LTDC_IRQHandler+0x10>)
 8001c72:	f002 fb5f 	bl	8004334 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000154 	.word	0x20000154

08001c80 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <DMA2D_IRQHandler+0x10>)
 8001c86:	f000 f9f0 	bl	800206a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000540 	.word	0x20000540

08001c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <SystemInit+0x28>)
 8001c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9e:	4a07      	ldr	r2, [pc, #28]	; (8001cbc <SystemInit+0x28>)
 8001ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ca8:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <SystemInit+0x28>)
 8001caa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cae:	609a      	str	r2, [r3, #8]
#endif
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cc6:	e003      	b.n	8001cd0 <LoopCopyDataInit>

08001cc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ccc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cce:	3104      	adds	r1, #4

08001cd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cd0:	480b      	ldr	r0, [pc, #44]	; (8001d00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001cd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cd8:	d3f6      	bcc.n	8001cc8 <CopyDataInit>
  ldr  r2, =_sbss
 8001cda:	4a0b      	ldr	r2, [pc, #44]	; (8001d08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cdc:	e002      	b.n	8001ce4 <LoopFillZerobss>

08001cde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ce0:	f842 3b04 	str.w	r3, [r2], #4

08001ce4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ce6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ce8:	d3f9      	bcc.n	8001cde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cea:	f7ff ffd3 	bl	8001c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cee:	f005 fb7d 	bl	80073ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cf2:	f7fe fd5f 	bl	80007b4 <main>
  bx  lr    
 8001cf6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001cf8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001cfc:	08008d74 	.word	0x08008d74
  ldr  r0, =_sdata
 8001d00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d04:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8001d08:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8001d0c:	200005f8 	.word	0x200005f8

08001d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d10:	e7fe      	b.n	8001d10 <ADC_IRQHandler>
	...

08001d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d18:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <HAL_Init+0x40>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0d      	ldr	r2, [pc, #52]	; (8001d54 <HAL_Init+0x40>)
 8001d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_Init+0x40>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <HAL_Init+0x40>)
 8001d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <HAL_Init+0x40>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <HAL_Init+0x40>)
 8001d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	f000 f8fa 	bl	8001f36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d42:	2000      	movs	r0, #0
 8001d44:	f7ff fef4 	bl	8001b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d48:	f7ff fb32 	bl	80013b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40023c00 	.word	0x40023c00

08001d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_IncTick+0x20>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_IncTick+0x24>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <HAL_IncTick+0x24>)
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000014 	.word	0x20000014
 8001d7c:	200005f4 	.word	0x200005f4

08001d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return uwTick;
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <HAL_GetTick+0x14>)
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	200005f4 	.word	0x200005f4

08001d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da0:	f7ff ffee 	bl	8001d80 <HAL_GetTick>
 8001da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db0:	d005      	beq.n	8001dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_Delay+0x40>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4413      	add	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dbe:	bf00      	nop
 8001dc0:	f7ff ffde 	bl	8001d80 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d8f7      	bhi.n	8001dc0 <HAL_Delay+0x28>
  {
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000014 	.word	0x20000014

08001ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0e:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	60d3      	str	r3, [r2, #12]
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <__NVIC_GetPriorityGrouping+0x18>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	f003 0307 	and.w	r3, r3, #7
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	db0b      	blt.n	8001e6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	f003 021f 	and.w	r2, r3, #31
 8001e58:	4907      	ldr	r1, [pc, #28]	; (8001e78 <__NVIC_EnableIRQ+0x38>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	2001      	movs	r0, #1
 8001e62:	fa00 f202 	lsl.w	r2, r0, r2
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000e100 	.word	0xe000e100

08001e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	db0a      	blt.n	8001ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	490c      	ldr	r1, [pc, #48]	; (8001ec8 <__NVIC_SetPriority+0x4c>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	0112      	lsls	r2, r2, #4
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea4:	e00a      	b.n	8001ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4908      	ldr	r1, [pc, #32]	; (8001ecc <__NVIC_SetPriority+0x50>)
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	3b04      	subs	r3, #4
 8001eb4:	0112      	lsls	r2, r2, #4
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	440b      	add	r3, r1
 8001eba:	761a      	strb	r2, [r3, #24]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000e100 	.word	0xe000e100
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f1c3 0307 	rsb	r3, r3, #7
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	bf28      	it	cs
 8001eee:	2304      	movcs	r3, #4
 8001ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d902      	bls.n	8001f00 <NVIC_EncodePriority+0x30>
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3b03      	subs	r3, #3
 8001efe:	e000      	b.n	8001f02 <NVIC_EncodePriority+0x32>
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	401a      	ands	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f18:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	43d9      	mvns	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	4313      	orrs	r3, r2
         );
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3724      	adds	r7, #36	; 0x24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ff4c 	bl	8001ddc <__NVIC_SetPriorityGrouping>
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f5e:	f7ff ff61 	bl	8001e24 <__NVIC_GetPriorityGrouping>
 8001f62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	68b9      	ldr	r1, [r7, #8]
 8001f68:	6978      	ldr	r0, [r7, #20]
 8001f6a:	f7ff ffb1 	bl	8001ed0 <NVIC_EncodePriority>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff80 	bl	8001e7c <__NVIC_SetPriority>
}
 8001f7c:	bf00      	nop
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ff54 	bl	8001e40 <__NVIC_EnableIRQ>
}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00e      	b.n	8001fd0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	795b      	ldrb	r3, [r3, #5]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d105      	bne.n	8001fc8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff fa20 	bl	8001408 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e03b      	b.n	8002062 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff fa24 	bl	800144c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002028:	f023 0107 	bic.w	r1, r3, #7
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002042:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68d1      	ldr	r1, [r2, #12]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	430b      	orrs	r3, r1
 8002050:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b084      	sub	sp, #16
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d026      	beq.n	80020da <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002092:	2b00      	cmp	r3, #0
 8002094:	d021      	beq.n	80020da <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020a4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020aa:	f043 0201 	orr.w	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2201      	movs	r2, #1
 80020b8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2204      	movs	r2, #4
 80020be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d026      	beq.n	8002132 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d021      	beq.n	8002132 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020fc:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2220      	movs	r2, #32
 8002104:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210a:	f043 0202 	orr.w	r2, r3, #2
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2204      	movs	r2, #4
 8002116:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d026      	beq.n	800218a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002142:	2b00      	cmp	r3, #0
 8002144:	d021      	beq.n	800218a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002154:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2208      	movs	r2, #8
 800215c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002162:	f043 0204 	orr.w	r2, r3, #4
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2204      	movs	r2, #4
 800216e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d013      	beq.n	80021bc <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00e      	beq.n	80021bc <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ac:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2204      	movs	r2, #4
 80021b4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f853 	bl	8002262 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d024      	beq.n	8002210 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01f      	beq.n	8002210 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021de:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2202      	movs	r2, #2
 80021e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	2b00      	cmp	r3, #0
 8002218:	d01f      	beq.n	800225a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d01a      	beq.n	800225a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002232:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2210      	movs	r2, #16
 800223a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f80e 	bl	8002276 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_DMA2D_ConfigLayer+0x20>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e079      	b.n	80023a0 <HAL_DMA2D_ConfigLayer+0x114>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	011b      	lsls	r3, r3, #4
 80022c0:	3318      	adds	r3, #24
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	041b      	lsls	r3, r3, #16
 80022d2:	4313      	orrs	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80022d6:	4b35      	ldr	r3, [pc, #212]	; (80023ac <HAL_DMA2D_ConfigLayer+0x120>)
 80022d8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b0a      	cmp	r3, #10
 80022e0:	d003      	beq.n	80022ea <HAL_DMA2D_ConfigLayer+0x5e>
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b09      	cmp	r3, #9
 80022e8:	d107      	bne.n	80022fa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	e005      	b.n	8002306 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	061b      	lsls	r3, r3, #24
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	4313      	orrs	r3, r2
 8002304:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d120      	bne.n	800234e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	43db      	mvns	r3, r3
 8002316:	ea02 0103 	and.w	r1, r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	430a      	orrs	r2, r1
 8002322:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b0a      	cmp	r3, #10
 8002334:	d003      	beq.n	800233e <HAL_DMA2D_ConfigLayer+0xb2>
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b09      	cmp	r3, #9
 800233c:	d127      	bne.n	800238e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800234a:	629a      	str	r2, [r3, #40]	; 0x28
 800234c:	e01f      	b.n	800238e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	69da      	ldr	r2, [r3, #28]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	43db      	mvns	r3, r3
 8002358:	ea02 0103 	and.w	r1, r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	430a      	orrs	r2, r1
 8002364:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	6812      	ldr	r2, [r2, #0]
 800236e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b0a      	cmp	r3, #10
 8002376:	d003      	beq.n	8002380 <HAL_DMA2D_ConfigLayer+0xf4>
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b09      	cmp	r3, #9
 800237e:	d106      	bne.n	800238e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800238c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	371c      	adds	r7, #28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	ff03000f 	.word	0xff03000f

080023b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	; 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	e177      	b.n	80026bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023cc:	2201      	movs	r2, #1
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	f040 8166 	bne.w	80026b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d00b      	beq.n	800240a <HAL_GPIO_Init+0x5a>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d007      	beq.n	800240a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023fe:	2b11      	cmp	r3, #17
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b12      	cmp	r3, #18
 8002408:	d130      	bne.n	800246c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	2203      	movs	r2, #3
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002440:	2201      	movs	r2, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 0201 	and.w	r2, r3, #1
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	2203      	movs	r2, #3
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0xfc>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b12      	cmp	r3, #18
 80024aa:	d123      	bne.n	80024f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	08da      	lsrs	r2, r3, #3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3208      	adds	r2, #8
 80024b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	220f      	movs	r2, #15
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	08da      	lsrs	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3208      	adds	r2, #8
 80024ee:	69b9      	ldr	r1, [r7, #24]
 80024f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	2203      	movs	r2, #3
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0203 	and.w	r2, r3, #3
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80c0 	beq.w	80026b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	4b65      	ldr	r3, [pc, #404]	; (80026d0 <HAL_GPIO_Init+0x320>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	4a64      	ldr	r2, [pc, #400]	; (80026d0 <HAL_GPIO_Init+0x320>)
 8002540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002544:	6453      	str	r3, [r2, #68]	; 0x44
 8002546:	4b62      	ldr	r3, [pc, #392]	; (80026d0 <HAL_GPIO_Init+0x320>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002552:	4a60      	ldr	r2, [pc, #384]	; (80026d4 <HAL_GPIO_Init+0x324>)
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	089b      	lsrs	r3, r3, #2
 8002558:	3302      	adds	r3, #2
 800255a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	220f      	movs	r2, #15
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a57      	ldr	r2, [pc, #348]	; (80026d8 <HAL_GPIO_Init+0x328>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d037      	beq.n	80025ee <HAL_GPIO_Init+0x23e>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a56      	ldr	r2, [pc, #344]	; (80026dc <HAL_GPIO_Init+0x32c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d031      	beq.n	80025ea <HAL_GPIO_Init+0x23a>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a55      	ldr	r2, [pc, #340]	; (80026e0 <HAL_GPIO_Init+0x330>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d02b      	beq.n	80025e6 <HAL_GPIO_Init+0x236>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a54      	ldr	r2, [pc, #336]	; (80026e4 <HAL_GPIO_Init+0x334>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d025      	beq.n	80025e2 <HAL_GPIO_Init+0x232>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a53      	ldr	r2, [pc, #332]	; (80026e8 <HAL_GPIO_Init+0x338>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d01f      	beq.n	80025de <HAL_GPIO_Init+0x22e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a52      	ldr	r2, [pc, #328]	; (80026ec <HAL_GPIO_Init+0x33c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d019      	beq.n	80025da <HAL_GPIO_Init+0x22a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a51      	ldr	r2, [pc, #324]	; (80026f0 <HAL_GPIO_Init+0x340>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d013      	beq.n	80025d6 <HAL_GPIO_Init+0x226>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a50      	ldr	r2, [pc, #320]	; (80026f4 <HAL_GPIO_Init+0x344>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d00d      	beq.n	80025d2 <HAL_GPIO_Init+0x222>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a4f      	ldr	r2, [pc, #316]	; (80026f8 <HAL_GPIO_Init+0x348>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d007      	beq.n	80025ce <HAL_GPIO_Init+0x21e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a4e      	ldr	r2, [pc, #312]	; (80026fc <HAL_GPIO_Init+0x34c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d101      	bne.n	80025ca <HAL_GPIO_Init+0x21a>
 80025c6:	2309      	movs	r3, #9
 80025c8:	e012      	b.n	80025f0 <HAL_GPIO_Init+0x240>
 80025ca:	230a      	movs	r3, #10
 80025cc:	e010      	b.n	80025f0 <HAL_GPIO_Init+0x240>
 80025ce:	2308      	movs	r3, #8
 80025d0:	e00e      	b.n	80025f0 <HAL_GPIO_Init+0x240>
 80025d2:	2307      	movs	r3, #7
 80025d4:	e00c      	b.n	80025f0 <HAL_GPIO_Init+0x240>
 80025d6:	2306      	movs	r3, #6
 80025d8:	e00a      	b.n	80025f0 <HAL_GPIO_Init+0x240>
 80025da:	2305      	movs	r3, #5
 80025dc:	e008      	b.n	80025f0 <HAL_GPIO_Init+0x240>
 80025de:	2304      	movs	r3, #4
 80025e0:	e006      	b.n	80025f0 <HAL_GPIO_Init+0x240>
 80025e2:	2303      	movs	r3, #3
 80025e4:	e004      	b.n	80025f0 <HAL_GPIO_Init+0x240>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e002      	b.n	80025f0 <HAL_GPIO_Init+0x240>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <HAL_GPIO_Init+0x240>
 80025ee:	2300      	movs	r3, #0
 80025f0:	69fa      	ldr	r2, [r7, #28]
 80025f2:	f002 0203 	and.w	r2, r2, #3
 80025f6:	0092      	lsls	r2, r2, #2
 80025f8:	4093      	lsls	r3, r2
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002600:	4934      	ldr	r1, [pc, #208]	; (80026d4 <HAL_GPIO_Init+0x324>)
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	089b      	lsrs	r3, r3, #2
 8002606:	3302      	adds	r3, #2
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800260e:	4b3c      	ldr	r3, [pc, #240]	; (8002700 <HAL_GPIO_Init+0x350>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002632:	4a33      	ldr	r2, [pc, #204]	; (8002700 <HAL_GPIO_Init+0x350>)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002638:	4b31      	ldr	r3, [pc, #196]	; (8002700 <HAL_GPIO_Init+0x350>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800265c:	4a28      	ldr	r2, [pc, #160]	; (8002700 <HAL_GPIO_Init+0x350>)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002662:	4b27      	ldr	r3, [pc, #156]	; (8002700 <HAL_GPIO_Init+0x350>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002686:	4a1e      	ldr	r2, [pc, #120]	; (8002700 <HAL_GPIO_Init+0x350>)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800268c:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <HAL_GPIO_Init+0x350>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026b0:	4a13      	ldr	r2, [pc, #76]	; (8002700 <HAL_GPIO_Init+0x350>)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3301      	adds	r3, #1
 80026ba:	61fb      	str	r3, [r7, #28]
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	2b0f      	cmp	r3, #15
 80026c0:	f67f ae84 	bls.w	80023cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026c4:	bf00      	nop
 80026c6:	3724      	adds	r7, #36	; 0x24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40013800 	.word	0x40013800
 80026d8:	40020000 	.word	0x40020000
 80026dc:	40020400 	.word	0x40020400
 80026e0:	40020800 	.word	0x40020800
 80026e4:	40020c00 	.word	0x40020c00
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40021400 	.word	0x40021400
 80026f0:	40021800 	.word	0x40021800
 80026f4:	40021c00 	.word	0x40021c00
 80026f8:	40022000 	.word	0x40022000
 80026fc:	40022400 	.word	0x40022400
 8002700:	40013c00 	.word	0x40013c00

08002704 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	e0d9      	b.n	80028d4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002720:	2201      	movs	r2, #1
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	429a      	cmp	r2, r3
 8002738:	f040 80c9 	bne.w	80028ce <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800273c:	4a6a      	ldr	r2, [pc, #424]	; (80028e8 <HAL_GPIO_DeInit+0x1e4>)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	089b      	lsrs	r3, r3, #2
 8002742:	3302      	adds	r3, #2
 8002744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002748:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	220f      	movs	r2, #15
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	4013      	ands	r3, r2
 800275c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a62      	ldr	r2, [pc, #392]	; (80028ec <HAL_GPIO_DeInit+0x1e8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d037      	beq.n	80027d6 <HAL_GPIO_DeInit+0xd2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a61      	ldr	r2, [pc, #388]	; (80028f0 <HAL_GPIO_DeInit+0x1ec>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d031      	beq.n	80027d2 <HAL_GPIO_DeInit+0xce>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a60      	ldr	r2, [pc, #384]	; (80028f4 <HAL_GPIO_DeInit+0x1f0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d02b      	beq.n	80027ce <HAL_GPIO_DeInit+0xca>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a5f      	ldr	r2, [pc, #380]	; (80028f8 <HAL_GPIO_DeInit+0x1f4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d025      	beq.n	80027ca <HAL_GPIO_DeInit+0xc6>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a5e      	ldr	r2, [pc, #376]	; (80028fc <HAL_GPIO_DeInit+0x1f8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d01f      	beq.n	80027c6 <HAL_GPIO_DeInit+0xc2>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a5d      	ldr	r2, [pc, #372]	; (8002900 <HAL_GPIO_DeInit+0x1fc>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d019      	beq.n	80027c2 <HAL_GPIO_DeInit+0xbe>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a5c      	ldr	r2, [pc, #368]	; (8002904 <HAL_GPIO_DeInit+0x200>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d013      	beq.n	80027be <HAL_GPIO_DeInit+0xba>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a5b      	ldr	r2, [pc, #364]	; (8002908 <HAL_GPIO_DeInit+0x204>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d00d      	beq.n	80027ba <HAL_GPIO_DeInit+0xb6>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a5a      	ldr	r2, [pc, #360]	; (800290c <HAL_GPIO_DeInit+0x208>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d007      	beq.n	80027b6 <HAL_GPIO_DeInit+0xb2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a59      	ldr	r2, [pc, #356]	; (8002910 <HAL_GPIO_DeInit+0x20c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d101      	bne.n	80027b2 <HAL_GPIO_DeInit+0xae>
 80027ae:	2309      	movs	r3, #9
 80027b0:	e012      	b.n	80027d8 <HAL_GPIO_DeInit+0xd4>
 80027b2:	230a      	movs	r3, #10
 80027b4:	e010      	b.n	80027d8 <HAL_GPIO_DeInit+0xd4>
 80027b6:	2308      	movs	r3, #8
 80027b8:	e00e      	b.n	80027d8 <HAL_GPIO_DeInit+0xd4>
 80027ba:	2307      	movs	r3, #7
 80027bc:	e00c      	b.n	80027d8 <HAL_GPIO_DeInit+0xd4>
 80027be:	2306      	movs	r3, #6
 80027c0:	e00a      	b.n	80027d8 <HAL_GPIO_DeInit+0xd4>
 80027c2:	2305      	movs	r3, #5
 80027c4:	e008      	b.n	80027d8 <HAL_GPIO_DeInit+0xd4>
 80027c6:	2304      	movs	r3, #4
 80027c8:	e006      	b.n	80027d8 <HAL_GPIO_DeInit+0xd4>
 80027ca:	2303      	movs	r3, #3
 80027cc:	e004      	b.n	80027d8 <HAL_GPIO_DeInit+0xd4>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e002      	b.n	80027d8 <HAL_GPIO_DeInit+0xd4>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <HAL_GPIO_DeInit+0xd4>
 80027d6:	2300      	movs	r3, #0
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	f002 0203 	and.w	r2, r2, #3
 80027de:	0092      	lsls	r2, r2, #2
 80027e0:	4093      	lsls	r3, r2
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d132      	bne.n	800284e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80027e8:	4b4a      	ldr	r3, [pc, #296]	; (8002914 <HAL_GPIO_DeInit+0x210>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	4948      	ldr	r1, [pc, #288]	; (8002914 <HAL_GPIO_DeInit+0x210>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80027f6:	4b47      	ldr	r3, [pc, #284]	; (8002914 <HAL_GPIO_DeInit+0x210>)
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	4945      	ldr	r1, [pc, #276]	; (8002914 <HAL_GPIO_DeInit+0x210>)
 8002800:	4013      	ands	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002804:	4b43      	ldr	r3, [pc, #268]	; (8002914 <HAL_GPIO_DeInit+0x210>)
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	43db      	mvns	r3, r3
 800280c:	4941      	ldr	r1, [pc, #260]	; (8002914 <HAL_GPIO_DeInit+0x210>)
 800280e:	4013      	ands	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002812:	4b40      	ldr	r3, [pc, #256]	; (8002914 <HAL_GPIO_DeInit+0x210>)
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	43db      	mvns	r3, r3
 800281a:	493e      	ldr	r1, [pc, #248]	; (8002914 <HAL_GPIO_DeInit+0x210>)
 800281c:	4013      	ands	r3, r2
 800281e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	220f      	movs	r2, #15
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002830:	4a2d      	ldr	r2, [pc, #180]	; (80028e8 <HAL_GPIO_DeInit+0x1e4>)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	3302      	adds	r3, #2
 8002838:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	43da      	mvns	r2, r3
 8002840:	4829      	ldr	r0, [pc, #164]	; (80028e8 <HAL_GPIO_DeInit+0x1e4>)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	089b      	lsrs	r3, r3, #2
 8002846:	400a      	ands	r2, r1
 8002848:	3302      	adds	r3, #2
 800284a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	2103      	movs	r1, #3
 8002858:	fa01 f303 	lsl.w	r3, r1, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	401a      	ands	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	08da      	lsrs	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3208      	adds	r2, #8
 800286c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	220f      	movs	r2, #15
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	08d2      	lsrs	r2, r2, #3
 8002884:	4019      	ands	r1, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3208      	adds	r2, #8
 800288a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	2103      	movs	r1, #3
 8002898:	fa01 f303 	lsl.w	r3, r1, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	401a      	ands	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	2101      	movs	r1, #1
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	fa01 f303 	lsl.w	r3, r1, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	401a      	ands	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	2103      	movs	r1, #3
 80028c2:	fa01 f303 	lsl.w	r3, r1, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	401a      	ands	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	3301      	adds	r3, #1
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b0f      	cmp	r3, #15
 80028d8:	f67f af22 	bls.w	8002720 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80028dc:	bf00      	nop
 80028de:	371c      	adds	r7, #28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	40013800 	.word	0x40013800
 80028ec:	40020000 	.word	0x40020000
 80028f0:	40020400 	.word	0x40020400
 80028f4:	40020800 	.word	0x40020800
 80028f8:	40020c00 	.word	0x40020c00
 80028fc:	40021000 	.word	0x40021000
 8002900:	40021400 	.word	0x40021400
 8002904:	40021800 	.word	0x40021800
 8002908:	40021c00 	.word	0x40021c00
 800290c:	40022000 	.word	0x40022000
 8002910:	40022400 	.word	0x40022400
 8002914:	40013c00 	.word	0x40013c00

08002918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	807b      	strh	r3, [r7, #2]
 8002924:	4613      	mov	r3, r2
 8002926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002928:	787b      	ldrb	r3, [r7, #1]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800292e:	887a      	ldrh	r2, [r7, #2]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002934:	e003      	b.n	800293e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002936:	887b      	ldrh	r3, [r7, #2]
 8002938:	041a      	lsls	r2, r3, #16
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	619a      	str	r2, [r3, #24]
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800294a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294c:	b08f      	sub	sp, #60	; 0x3c
 800294e:	af0a      	add	r7, sp, #40	; 0x28
 8002950:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e054      	b.n	8002a06 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe ffe0 	bl	800193c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2203      	movs	r2, #3
 8002980:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298c:	2b00      	cmp	r3, #0
 800298e:	d102      	bne.n	8002996 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f004 f9e5 	bl	8006d6a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	603b      	str	r3, [r7, #0]
 80029a6:	687e      	ldr	r6, [r7, #4]
 80029a8:	466d      	mov	r5, sp
 80029aa:	f106 0410 	add.w	r4, r6, #16
 80029ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80029be:	1d33      	adds	r3, r6, #4
 80029c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029c2:	6838      	ldr	r0, [r7, #0]
 80029c4:	f004 f970 	bl	8006ca8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2101      	movs	r1, #1
 80029ce:	4618      	mov	r0, r3
 80029d0:	f004 f9dc 	bl	8006d8c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	603b      	str	r3, [r7, #0]
 80029da:	687e      	ldr	r6, [r7, #4]
 80029dc:	466d      	mov	r5, sp
 80029de:	f106 0410 	add.w	r4, r6, #16
 80029e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80029f2:	1d33      	adds	r3, r6, #4
 80029f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029f6:	6838      	ldr	r0, [r7, #0]
 80029f8:	f004 fab8 	bl	8006f6c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a0e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f004 fa5f 	bl	8006ee8 <USB_GetMode>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	f040 80ef 	bne.w	8002c10 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f004 fa43 	bl	8006ec2 <USB_ReadInterrupts>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 80e5 	beq.w	8002c0e <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f004 fa3a 	bl	8006ec2 <USB_ReadInterrupts>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a58:	d104      	bne.n	8002a64 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a62:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f004 fa2a 	bl	8006ec2 <USB_ReadInterrupts>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a78:	d104      	bne.n	8002a84 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a82:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f004 fa1a 	bl	8006ec2 <USB_ReadInterrupts>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a98:	d104      	bne.n	8002aa4 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002aa2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f004 fa0a 	bl	8006ec2 <USB_ReadInterrupts>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d103      	bne.n	8002ac0 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2202      	movs	r2, #2
 8002abe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f004 f9fc 	bl	8006ec2 <USB_ReadInterrupts>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ad0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ad4:	d115      	bne.n	8002b02 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002ade:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d108      	bne.n	8002b02 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f8a4 	bl	8002c3e <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2101      	movs	r1, #1
 8002afc:	4618      	mov	r0, r3
 8002afe:	f004 faf1 	bl	80070e4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f004 f9db 	bl	8006ec2 <USB_ReadInterrupts>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b16:	d102      	bne.n	8002b1e <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f001 f913 	bl	8003d44 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f004 f9cd 	bl	8006ec2 <USB_ReadInterrupts>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d106      	bne.n	8002b40 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f86f 	bl	8002c16 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f004 f9bc 	bl	8006ec2 <USB_ReadInterrupts>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b54:	d138      	bne.n	8002bc8 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f004 fb35 	bl	80071ca <USB_HC_ReadInterrupt>
 8002b60:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	e025      	b.n	8002bb4 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	fa22 f303 	lsr.w	r3, r2, r3
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d018      	beq.n	8002bae <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b92:	d106      	bne.n	8002ba2 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	4619      	mov	r1, r3
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f87b 	bl	8002c96 <HCD_HC_IN_IRQHandler>
 8002ba0:	e005      	b.n	8002bae <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fca9 	bl	8003500 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d3d4      	bcc.n	8002b68 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f004 f978 	bl	8006ec2 <USB_ReadInterrupts>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	2b10      	cmp	r3, #16
 8002bda:	d101      	bne.n	8002be0 <HAL_HCD_IRQHandler+0x1d2>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <HAL_HCD_IRQHandler+0x1d4>
 8002be0:	2300      	movs	r3, #0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d014      	beq.n	8002c10 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699a      	ldr	r2, [r3, #24]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0210 	bic.w	r2, r2, #16
 8002bf4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fff8 	bl	8003bec <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0210 	orr.w	r2, r2, #16
 8002c0a:	619a      	str	r2, [r3, #24]
 8002c0c:	e000      	b.n	8002c10 <HAL_HCD_IRQHandler+0x202>
      return;
 8002c0e:	bf00      	nop
    }
  }
}
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	460b      	mov	r3, r1
 8002c84:	70fb      	strb	r3, [r7, #3]
 8002c86:	4613      	mov	r3, r2
 8002c88:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b086      	sub	sp, #24
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d119      	bne.n	8002cfa <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	0151      	lsls	r1, r2, #5
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	440a      	add	r2, r1
 8002cee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cf2:	f043 0302 	orr.w	r3, r3, #2
 8002cf6:	60d3      	str	r3, [r2, #12]
 8002cf8:	e0ce      	b.n	8002e98 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d10:	d12c      	bne.n	8002d6c <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1e:	461a      	mov	r2, r3
 8002d20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	440b      	add	r3, r1
 8002d34:	335d      	adds	r3, #93	; 0x5d
 8002d36:	2207      	movs	r2, #7
 8002d38:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	0151      	lsls	r1, r2, #5
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	440a      	add	r2, r1
 8002d50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d54:	f043 0302 	orr.w	r3, r3, #2
 8002d58:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f004 fa41 	bl	80071ec <USB_HC_Halt>
 8002d6a:	e095      	b.n	8002e98 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b20      	cmp	r3, #32
 8002d80:	d109      	bne.n	8002d96 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8e:	461a      	mov	r2, r3
 8002d90:	2320      	movs	r3, #32
 8002d92:	6093      	str	r3, [r2, #8]
 8002d94:	e080      	b.n	8002e98 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d134      	bne.n	8002e16 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	0151      	lsls	r1, r2, #5
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	440a      	add	r2, r1
 8002dc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dc6:	f043 0302 	orr.w	r3, r3, #2
 8002dca:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	440b      	add	r3, r1
 8002dda:	335d      	adds	r3, #93	; 0x5d
 8002ddc:	2205      	movs	r2, #5
 8002dde:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dec:	461a      	mov	r2, r3
 8002dee:	2310      	movs	r3, #16
 8002df0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfe:	461a      	mov	r2, r3
 8002e00:	2308      	movs	r3, #8
 8002e02:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f004 f9ec 	bl	80071ec <USB_HC_Halt>
 8002e14:	e040      	b.n	8002e98 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e2c:	d134      	bne.n	8002e98 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	0151      	lsls	r1, r2, #5
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	440a      	add	r2, r1
 8002e44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e48:	f043 0302 	orr.w	r3, r3, #2
 8002e4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	4611      	mov	r1, r2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f004 f9c7 	bl	80071ec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	2310      	movs	r3, #16
 8002e6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	440b      	add	r3, r1
 8002e7e:	335d      	adds	r3, #93	; 0x5d
 8002e80:	2208      	movs	r2, #8
 8002e82:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e90:	461a      	mov	r2, r3
 8002e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e96:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eae:	d122      	bne.n	8002ef6 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	0151      	lsls	r1, r2, #5
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	440a      	add	r2, r1
 8002ec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eca:	f043 0302 	orr.w	r3, r3, #2
 8002ece:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	4611      	mov	r1, r2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f004 f986 	bl	80071ec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eec:	461a      	mov	r2, r3
 8002eee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ef2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002ef4:	e300      	b.n	80034f8 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	f040 80fd 	bne.w	8003108 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d01b      	beq.n	8002f4e <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	440b      	add	r3, r1
 8002f24:	3348      	adds	r3, #72	; 0x48
 8002f26:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	0159      	lsls	r1, r3, #5
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	440b      	add	r3, r1
 8002f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002f3a:	1ad1      	subs	r1, r2, r3
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4403      	add	r3, r0
 8002f4a:	334c      	adds	r3, #76	; 0x4c
 8002f4c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	440b      	add	r3, r1
 8002f5c:	335d      	adds	r3, #93	; 0x5d
 8002f5e:	2201      	movs	r2, #1
 8002f60:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	440b      	add	r3, r1
 8002f70:	3358      	adds	r3, #88	; 0x58
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f82:	461a      	mov	r2, r3
 8002f84:	2301      	movs	r3, #1
 8002f86:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	440b      	add	r3, r1
 8002f96:	333f      	adds	r3, #63	; 0x3f
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	440b      	add	r3, r1
 8002fac:	333f      	adds	r3, #63	; 0x3f
 8002fae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d121      	bne.n	8002ff8 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	0151      	lsls	r1, r2, #5
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	440a      	add	r2, r1
 8002fca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fce:	f043 0302 	orr.w	r3, r3, #2
 8002fd2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f004 f904 	bl	80071ec <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	2310      	movs	r3, #16
 8002ff4:	6093      	str	r3, [r2, #8]
 8002ff6:	e070      	b.n	80030da <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	440b      	add	r3, r1
 8003006:	333f      	adds	r3, #63	; 0x3f
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b03      	cmp	r3, #3
 800300c:	d12a      	bne.n	8003064 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4413      	add	r3, r2
 8003016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	0151      	lsls	r1, r2, #5
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	440a      	add	r2, r1
 8003024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003028:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800302c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	440b      	add	r3, r1
 800303c:	335c      	adds	r3, #92	; 0x5c
 800303e:	2201      	movs	r2, #1
 8003040:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	b2d8      	uxtb	r0, r3
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	440b      	add	r3, r1
 8003054:	335c      	adds	r3, #92	; 0x5c
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	4601      	mov	r1, r0
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff fe0c 	bl	8002c7a <HAL_HCD_HC_NotifyURBChange_Callback>
 8003062:	e03a      	b.n	80030da <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	440b      	add	r3, r1
 8003072:	333f      	adds	r3, #63	; 0x3f
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d12f      	bne.n	80030da <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	440b      	add	r3, r1
 8003088:	335c      	adds	r3, #92	; 0x5c
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	440b      	add	r3, r1
 800309c:	3350      	adds	r3, #80	; 0x50
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	f083 0301 	eor.w	r3, r3, #1
 80030a4:	b2d8      	uxtb	r0, r3
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	440b      	add	r3, r1
 80030b4:	3350      	adds	r3, #80	; 0x50
 80030b6:	4602      	mov	r2, r0
 80030b8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	b2d8      	uxtb	r0, r3
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	440b      	add	r3, r1
 80030cc:	335c      	adds	r3, #92	; 0x5c
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	4601      	mov	r1, r0
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff fdd0 	bl	8002c7a <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	440b      	add	r3, r1
 80030e8:	3350      	adds	r3, #80	; 0x50
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	f083 0301 	eor.w	r3, r3, #1
 80030f0:	b2d8      	uxtb	r0, r3
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	440b      	add	r3, r1
 8003100:	3350      	adds	r3, #80	; 0x50
 8003102:	4602      	mov	r2, r0
 8003104:	701a      	strb	r2, [r3, #0]
}
 8003106:	e1f7      	b.n	80034f8 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4413      	add	r3, r2
 8003110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b02      	cmp	r3, #2
 800311c:	f040 811a 	bne.w	8003354 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4413      	add	r3, r2
 8003128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	0151      	lsls	r1, r2, #5
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	440a      	add	r2, r1
 8003136:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800313a:	f023 0302 	bic.w	r3, r3, #2
 800313e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	440b      	add	r3, r1
 800314e:	335d      	adds	r3, #93	; 0x5d
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d10a      	bne.n	800316c <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	440b      	add	r3, r1
 8003164:	335c      	adds	r3, #92	; 0x5c
 8003166:	2201      	movs	r2, #1
 8003168:	701a      	strb	r2, [r3, #0]
 800316a:	e0d9      	b.n	8003320 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	440b      	add	r3, r1
 800317a:	335d      	adds	r3, #93	; 0x5d
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b05      	cmp	r3, #5
 8003180:	d10a      	bne.n	8003198 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4613      	mov	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	440b      	add	r3, r1
 8003190:	335c      	adds	r3, #92	; 0x5c
 8003192:	2205      	movs	r2, #5
 8003194:	701a      	strb	r2, [r3, #0]
 8003196:	e0c3      	b.n	8003320 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	440b      	add	r3, r1
 80031a6:	335d      	adds	r3, #93	; 0x5d
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b06      	cmp	r3, #6
 80031ac:	d00a      	beq.n	80031c4 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	440b      	add	r3, r1
 80031bc:	335d      	adds	r3, #93	; 0x5d
 80031be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d156      	bne.n	8003272 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	440b      	add	r3, r1
 80031d2:	3358      	adds	r3, #88	; 0x58
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	1c59      	adds	r1, r3, #1
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4403      	add	r3, r0
 80031e6:	3358      	adds	r3, #88	; 0x58
 80031e8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	440b      	add	r3, r1
 80031f8:	3358      	adds	r3, #88	; 0x58
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d914      	bls.n	800322a <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	440b      	add	r3, r1
 800320e:	3358      	adds	r3, #88	; 0x58
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	440b      	add	r3, r1
 8003222:	335c      	adds	r3, #92	; 0x5c
 8003224:	2204      	movs	r2, #4
 8003226:	701a      	strb	r2, [r3, #0]
 8003228:	e009      	b.n	800323e <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	440b      	add	r3, r1
 8003238:	335c      	adds	r3, #92	; 0x5c
 800323a:	2202      	movs	r2, #2
 800323c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4413      	add	r3, r2
 8003246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003254:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800325c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4413      	add	r3, r2
 8003266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326a:	461a      	mov	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	e056      	b.n	8003320 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	440b      	add	r3, r1
 8003280:	335d      	adds	r3, #93	; 0x5d
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b03      	cmp	r3, #3
 8003286:	d123      	bne.n	80032d0 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	440b      	add	r3, r1
 8003296:	335c      	adds	r3, #92	; 0x5c
 8003298:	2202      	movs	r2, #2
 800329a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032b2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032ba:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c8:	461a      	mov	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e027      	b.n	8003320 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	440b      	add	r3, r1
 80032de:	335d      	adds	r3, #93	; 0x5d
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b07      	cmp	r3, #7
 80032e4:	d11c      	bne.n	8003320 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	440b      	add	r3, r1
 80032f4:	3358      	adds	r3, #88	; 0x58
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	1c59      	adds	r1, r3, #1
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4403      	add	r3, r0
 8003308:	3358      	adds	r3, #88	; 0x58
 800330a:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4613      	mov	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	440b      	add	r3, r1
 800331a:	335c      	adds	r3, #92	; 0x5c
 800331c:	2204      	movs	r2, #4
 800331e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4413      	add	r3, r2
 8003328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332c:	461a      	mov	r2, r3
 800332e:	2302      	movs	r3, #2
 8003330:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	b2d8      	uxtb	r0, r3
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	440b      	add	r3, r1
 8003344:	335c      	adds	r3, #92	; 0x5c
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	4601      	mov	r1, r0
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff fc94 	bl	8002c7a <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003352:	e0d1      	b.n	80034f8 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4413      	add	r3, r2
 800335c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003366:	2b80      	cmp	r3, #128	; 0x80
 8003368:	d13e      	bne.n	80033e8 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4413      	add	r3, r2
 8003372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	0151      	lsls	r1, r2, #5
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	440a      	add	r2, r1
 8003380:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003384:	f043 0302 	orr.w	r3, r3, #2
 8003388:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	440b      	add	r3, r1
 8003398:	3358      	adds	r3, #88	; 0x58
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	1c59      	adds	r1, r3, #1
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4403      	add	r3, r0
 80033ac:	3358      	adds	r3, #88	; 0x58
 80033ae:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	440b      	add	r3, r1
 80033be:	335d      	adds	r3, #93	; 0x5d
 80033c0:	2206      	movs	r2, #6
 80033c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	4611      	mov	r1, r2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f003 ff0c 	bl	80071ec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e0:	461a      	mov	r2, r3
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	6093      	str	r3, [r2, #8]
}
 80033e6:	e087      	b.n	80034f8 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 0310 	and.w	r3, r3, #16
 80033fa:	2b10      	cmp	r3, #16
 80033fc:	d17c      	bne.n	80034f8 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	440b      	add	r3, r1
 800340c:	333f      	adds	r3, #63	; 0x3f
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b03      	cmp	r3, #3
 8003412:	d122      	bne.n	800345a <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	440b      	add	r3, r1
 8003422:	3358      	adds	r3, #88	; 0x58
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4413      	add	r3, r2
 8003430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	0151      	lsls	r1, r2, #5
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	440a      	add	r2, r1
 800343e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003442:	f043 0302 	orr.w	r3, r3, #2
 8003446:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	4611      	mov	r1, r2
 8003452:	4618      	mov	r0, r3
 8003454:	f003 feca 	bl	80071ec <USB_HC_Halt>
 8003458:	e045      	b.n	80034e6 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	440b      	add	r3, r1
 8003468:	333f      	adds	r3, #63	; 0x3f
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	440b      	add	r3, r1
 800347e:	333f      	adds	r3, #63	; 0x3f
 8003480:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003482:	2b02      	cmp	r3, #2
 8003484:	d12f      	bne.n	80034e6 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	440b      	add	r3, r1
 8003494:	3358      	adds	r3, #88	; 0x58
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d121      	bne.n	80034e6 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	440b      	add	r3, r1
 80034b0:	335d      	adds	r3, #93	; 0x5d
 80034b2:	2203      	movs	r2, #3
 80034b4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	0151      	lsls	r1, r2, #5
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	440a      	add	r2, r1
 80034cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034d0:	f043 0302 	orr.w	r3, r3, #2
 80034d4:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f003 fe83 	bl	80071ec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f2:	461a      	mov	r2, r3
 80034f4:	2310      	movs	r3, #16
 80034f6:	6093      	str	r3, [r2, #8]
}
 80034f8:	bf00      	nop
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003516:	78fb      	ldrb	r3, [r7, #3]
 8003518:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	015a      	lsls	r2, r3, #5
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4413      	add	r3, r2
 8003522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b04      	cmp	r3, #4
 800352e:	d119      	bne.n	8003564 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4413      	add	r3, r2
 8003538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353c:	461a      	mov	r2, r3
 800353e:	2304      	movs	r3, #4
 8003540:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	015a      	lsls	r2, r3, #5
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	4413      	add	r3, r2
 800354a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	0151      	lsls	r1, r2, #5
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	440a      	add	r2, r1
 8003558:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800355c:	f043 0302 	orr.w	r3, r3, #2
 8003560:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003562:	e33e      	b.n	8003be2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	4413      	add	r3, r2
 800356c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b20      	cmp	r3, #32
 8003578:	d141      	bne.n	80035fe <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4413      	add	r3, r2
 8003582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003586:	461a      	mov	r2, r3
 8003588:	2320      	movs	r3, #32
 800358a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4613      	mov	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	440b      	add	r3, r1
 800359a:	333d      	adds	r3, #61	; 0x3d
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	f040 831f 	bne.w	8003be2 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	440b      	add	r3, r1
 80035b2:	333d      	adds	r3, #61	; 0x3d
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	440b      	add	r3, r1
 80035c6:	335c      	adds	r3, #92	; 0x5c
 80035c8:	2202      	movs	r2, #2
 80035ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	0151      	lsls	r1, r2, #5
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	440a      	add	r2, r1
 80035e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035e6:	f043 0302 	orr.w	r3, r3, #2
 80035ea:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f003 fdf8 	bl	80071ec <USB_HC_Halt>
}
 80035fc:	e2f1      	b.n	8003be2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003610:	2b40      	cmp	r3, #64	; 0x40
 8003612:	d13f      	bne.n	8003694 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	440b      	add	r3, r1
 8003622:	335d      	adds	r3, #93	; 0x5d
 8003624:	2204      	movs	r2, #4
 8003626:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	440b      	add	r3, r1
 8003636:	333d      	adds	r3, #61	; 0x3d
 8003638:	2201      	movs	r2, #1
 800363a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	440b      	add	r3, r1
 800364a:	3358      	adds	r3, #88	; 0x58
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4413      	add	r3, r2
 8003658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	0151      	lsls	r1, r2, #5
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	440a      	add	r2, r1
 8003666:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800366a:	f043 0302 	orr.w	r3, r3, #2
 800366e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	4611      	mov	r1, r2
 800367a:	4618      	mov	r0, r3
 800367c:	f003 fdb6 	bl	80071ec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	4413      	add	r3, r2
 8003688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800368c:	461a      	mov	r2, r3
 800368e:	2340      	movs	r3, #64	; 0x40
 8003690:	6093      	str	r3, [r2, #8]
}
 8003692:	e2a6      	b.n	8003be2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4413      	add	r3, r2
 800369c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036aa:	d122      	bne.n	80036f2 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	0151      	lsls	r1, r2, #5
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	440a      	add	r2, r1
 80036c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036c6:	f043 0302 	orr.w	r3, r3, #2
 80036ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	4611      	mov	r1, r2
 80036d6:	4618      	mov	r0, r3
 80036d8:	f003 fd88 	bl	80071ec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e8:	461a      	mov	r2, r3
 80036ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036ee:	6093      	str	r3, [r2, #8]
}
 80036f0:	e277      	b.n	8003be2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b01      	cmp	r3, #1
 8003706:	d135      	bne.n	8003774 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	440b      	add	r3, r1
 8003716:	3358      	adds	r3, #88	; 0x58
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4413      	add	r3, r2
 8003724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	0151      	lsls	r1, r2, #5
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	440a      	add	r2, r1
 8003732:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003736:	f043 0302 	orr.w	r3, r3, #2
 800373a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f003 fd50 	bl	80071ec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4413      	add	r3, r2
 8003754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003758:	461a      	mov	r2, r3
 800375a:	2301      	movs	r3, #1
 800375c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	440b      	add	r3, r1
 800376c:	335d      	adds	r3, #93	; 0x5d
 800376e:	2201      	movs	r2, #1
 8003770:	701a      	strb	r2, [r3, #0]
}
 8003772:	e236      	b.n	8003be2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	4413      	add	r3, r2
 800377c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b08      	cmp	r3, #8
 8003788:	d12b      	bne.n	80037e2 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4413      	add	r3, r2
 8003792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003796:	461a      	mov	r2, r3
 8003798:	2308      	movs	r3, #8
 800379a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	0151      	lsls	r1, r2, #5
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	440a      	add	r2, r1
 80037b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037b6:	f043 0302 	orr.w	r3, r3, #2
 80037ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	4611      	mov	r1, r2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f003 fd10 	bl	80071ec <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	440b      	add	r3, r1
 80037da:	335d      	adds	r3, #93	; 0x5d
 80037dc:	2205      	movs	r2, #5
 80037de:	701a      	strb	r2, [r3, #0]
}
 80037e0:	e1ff      	b.n	8003be2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 0310 	and.w	r3, r3, #16
 80037f4:	2b10      	cmp	r3, #16
 80037f6:	d155      	bne.n	80038a4 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	440b      	add	r3, r1
 8003806:	3358      	adds	r3, #88	; 0x58
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	440b      	add	r3, r1
 800381a:	335d      	adds	r3, #93	; 0x5d
 800381c:	2203      	movs	r2, #3
 800381e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	440b      	add	r3, r1
 800382e:	333d      	adds	r3, #61	; 0x3d
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d114      	bne.n	8003860 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	440b      	add	r3, r1
 8003844:	333c      	adds	r3, #60	; 0x3c
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d109      	bne.n	8003860 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	440b      	add	r3, r1
 800385a:	333d      	adds	r3, #61	; 0x3d
 800385c:	2201      	movs	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4413      	add	r3, r2
 8003868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	0151      	lsls	r1, r2, #5
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	440a      	add	r2, r1
 8003876:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800387a:	f043 0302 	orr.w	r3, r3, #2
 800387e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	4611      	mov	r1, r2
 800388a:	4618      	mov	r0, r3
 800388c:	f003 fcae 	bl	80071ec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4413      	add	r3, r2
 8003898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800389c:	461a      	mov	r2, r3
 800389e:	2310      	movs	r3, #16
 80038a0:	6093      	str	r3, [r2, #8]
}
 80038a2:	e19e      	b.n	8003be2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b6:	2b80      	cmp	r3, #128	; 0x80
 80038b8:	d12b      	bne.n	8003912 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	0151      	lsls	r1, r2, #5
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	440a      	add	r2, r1
 80038d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038d4:	f043 0302 	orr.w	r3, r3, #2
 80038d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f003 fc81 	bl	80071ec <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	440b      	add	r3, r1
 80038f8:	335d      	adds	r3, #93	; 0x5d
 80038fa:	2206      	movs	r2, #6
 80038fc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4413      	add	r3, r2
 8003906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800390a:	461a      	mov	r2, r3
 800390c:	2380      	movs	r3, #128	; 0x80
 800390e:	6093      	str	r3, [r2, #8]
}
 8003910:	e167      	b.n	8003be2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4413      	add	r3, r2
 800391a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003928:	d135      	bne.n	8003996 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	4413      	add	r3, r2
 8003932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	0151      	lsls	r1, r2, #5
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	440a      	add	r2, r1
 8003940:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003944:	f043 0302 	orr.w	r3, r3, #2
 8003948:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f003 fc49 	bl	80071ec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4413      	add	r3, r2
 8003962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003966:	461a      	mov	r2, r3
 8003968:	2310      	movs	r3, #16
 800396a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4413      	add	r3, r2
 8003974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003978:	461a      	mov	r2, r3
 800397a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800397e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	440b      	add	r3, r1
 800398e:	335d      	adds	r3, #93	; 0x5d
 8003990:	2208      	movs	r2, #8
 8003992:	701a      	strb	r2, [r3, #0]
}
 8003994:	e125      	b.n	8003be2 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4413      	add	r3, r2
 800399e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	f040 811a 	bne.w	8003be2 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	0151      	lsls	r1, r2, #5
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	440a      	add	r2, r1
 80039c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039c8:	f023 0302 	bic.w	r3, r3, #2
 80039cc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4613      	mov	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	440b      	add	r3, r1
 80039dc:	335d      	adds	r3, #93	; 0x5d
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d137      	bne.n	8003a54 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	440b      	add	r3, r1
 80039f2:	335c      	adds	r3, #92	; 0x5c
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	440b      	add	r3, r1
 8003a06:	333f      	adds	r3, #63	; 0x3f
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d00b      	beq.n	8003a26 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	440b      	add	r3, r1
 8003a1c:	333f      	adds	r3, #63	; 0x3f
 8003a1e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	f040 80c5 	bne.w	8003bb0 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	440b      	add	r3, r1
 8003a34:	3351      	adds	r3, #81	; 0x51
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	f083 0301 	eor.w	r3, r3, #1
 8003a3c:	b2d8      	uxtb	r0, r3
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4613      	mov	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	440b      	add	r3, r1
 8003a4c:	3351      	adds	r3, #81	; 0x51
 8003a4e:	4602      	mov	r2, r0
 8003a50:	701a      	strb	r2, [r3, #0]
 8003a52:	e0ad      	b.n	8003bb0 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	440b      	add	r3, r1
 8003a62:	335d      	adds	r3, #93	; 0x5d
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d10a      	bne.n	8003a80 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	440b      	add	r3, r1
 8003a78:	335c      	adds	r3, #92	; 0x5c
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	701a      	strb	r2, [r3, #0]
 8003a7e:	e097      	b.n	8003bb0 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	440b      	add	r3, r1
 8003a8e:	335d      	adds	r3, #93	; 0x5d
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d10a      	bne.n	8003aac <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	440b      	add	r3, r1
 8003aa4:	335c      	adds	r3, #92	; 0x5c
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	701a      	strb	r2, [r3, #0]
 8003aaa:	e081      	b.n	8003bb0 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	440b      	add	r3, r1
 8003aba:	335d      	adds	r3, #93	; 0x5d
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b05      	cmp	r3, #5
 8003ac0:	d10a      	bne.n	8003ad8 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	440b      	add	r3, r1
 8003ad0:	335c      	adds	r3, #92	; 0x5c
 8003ad2:	2205      	movs	r2, #5
 8003ad4:	701a      	strb	r2, [r3, #0]
 8003ad6:	e06b      	b.n	8003bb0 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	440b      	add	r3, r1
 8003ae6:	335d      	adds	r3, #93	; 0x5d
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	d00a      	beq.n	8003b04 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4613      	mov	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	440b      	add	r3, r1
 8003afc:	335d      	adds	r3, #93	; 0x5d
 8003afe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d155      	bne.n	8003bb0 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	440b      	add	r3, r1
 8003b12:	3358      	adds	r3, #88	; 0x58
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	1c59      	adds	r1, r3, #1
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4403      	add	r3, r0
 8003b26:	3358      	adds	r3, #88	; 0x58
 8003b28:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	440b      	add	r3, r1
 8003b38:	3358      	adds	r3, #88	; 0x58
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	d914      	bls.n	8003b6a <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	440b      	add	r3, r1
 8003b4e:	3358      	adds	r3, #88	; 0x58
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	440b      	add	r3, r1
 8003b62:	335c      	adds	r3, #92	; 0x5c
 8003b64:	2204      	movs	r2, #4
 8003b66:	701a      	strb	r2, [r3, #0]
 8003b68:	e009      	b.n	8003b7e <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	440b      	add	r3, r1
 8003b78:	335c      	adds	r3, #92	; 0x5c
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b94:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b9c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003baa:	461a      	mov	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	b2d8      	uxtb	r0, r3
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	440b      	add	r3, r1
 8003bd4:	335c      	adds	r3, #92	; 0x5c
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4601      	mov	r1, r0
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff f84c 	bl	8002c7a <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003be2:	bf00      	nop
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	; 0x28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	f003 030f 	and.w	r3, r3, #15
 8003c0c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	0c5b      	lsrs	r3, r3, #17
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	091b      	lsrs	r3, r3, #4
 8003c1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c20:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d003      	beq.n	8003c30 <HCD_RXQLVL_IRQHandler+0x44>
 8003c28:	2b05      	cmp	r3, #5
 8003c2a:	f000 8082 	beq.w	8003d32 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003c2e:	e083      	b.n	8003d38 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d07f      	beq.n	8003d36 <HCD_RXQLVL_IRQHandler+0x14a>
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	440b      	add	r3, r1
 8003c44:	3344      	adds	r3, #68	; 0x44
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d074      	beq.n	8003d36 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6818      	ldr	r0, [r3, #0]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	440b      	add	r3, r1
 8003c5e:	3344      	adds	r3, #68	; 0x44
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	b292      	uxth	r2, r2
 8003c66:	4619      	mov	r1, r3
 8003c68:	f003 f902 	bl	8006e70 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	440b      	add	r3, r1
 8003c7a:	3344      	adds	r3, #68	; 0x44
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	18d1      	adds	r1, r2, r3
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4613      	mov	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	4403      	add	r3, r0
 8003c90:	3344      	adds	r3, #68	; 0x44
 8003c92:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	440b      	add	r3, r1
 8003ca2:	334c      	adds	r3, #76	; 0x4c
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	18d1      	adds	r1, r2, r3
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	4403      	add	r3, r0
 8003cb8:	334c      	adds	r3, #76	; 0x4c
 8003cba:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <HCD_RXQLVL_IRQHandler+0x154>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d031      	beq.n	8003d36 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ce8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cf0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	440b      	add	r3, r1
 8003d12:	3350      	adds	r3, #80	; 0x50
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	f083 0301 	eor.w	r3, r3, #1
 8003d1a:	b2d8      	uxtb	r0, r3
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	440b      	add	r3, r1
 8003d2a:	3350      	adds	r3, #80	; 0x50
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	701a      	strb	r2, [r3, #0]
      break;
 8003d30:	e001      	b.n	8003d36 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003d32:	bf00      	nop
 8003d34:	e000      	b.n	8003d38 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003d36:	bf00      	nop
  }
}
 8003d38:	bf00      	nop
 8003d3a:	3728      	adds	r7, #40	; 0x28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	1ff80000 	.word	0x1ff80000

08003d44 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003d70:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d10b      	bne.n	8003d94 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d102      	bne.n	8003d8c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fe ff4f 	bl	8002c2a <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f043 0302 	orr.w	r3, r3, #2
 8003d92:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d132      	bne.n	8003e04 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f043 0308 	orr.w	r3, r3, #8
 8003da4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d126      	bne.n	8003dfe <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d113      	bne.n	8003de0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003dbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dc2:	d106      	bne.n	8003dd2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2102      	movs	r1, #2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f003 f98a 	bl	80070e4 <USB_InitFSLSPClkSel>
 8003dd0:	e011      	b.n	8003df6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f003 f983 	bl	80070e4 <USB_InitFSLSPClkSel>
 8003dde:	e00a      	b.n	8003df6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d106      	bne.n	8003df6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dee:	461a      	mov	r2, r3
 8003df0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003df4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fe ff2b 	bl	8002c52 <HAL_HCD_PortEnabled_Callback>
 8003dfc:	e002      	b.n	8003e04 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fe ff31 	bl	8002c66 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f003 0320 	and.w	r3, r3, #32
 8003e0a:	2b20      	cmp	r3, #32
 8003e0c:	d103      	bne.n	8003e16 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f043 0320 	orr.w	r3, r3, #32
 8003e14:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	6013      	str	r3, [r2, #0]
}
 8003e22:	bf00      	nop
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e11f      	b.n	800407e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fd fb22 	bl	800149c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2224      	movs	r2, #36	; 0x24
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0201 	bic.w	r2, r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e90:	f001 f988 	bl	80051a4 <HAL_RCC_GetPCLK1Freq>
 8003e94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	4a7b      	ldr	r2, [pc, #492]	; (8004088 <HAL_I2C_Init+0x25c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d807      	bhi.n	8003eb0 <HAL_I2C_Init+0x84>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4a7a      	ldr	r2, [pc, #488]	; (800408c <HAL_I2C_Init+0x260>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	bf94      	ite	ls
 8003ea8:	2301      	movls	r3, #1
 8003eaa:	2300      	movhi	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	e006      	b.n	8003ebe <HAL_I2C_Init+0x92>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4a77      	ldr	r2, [pc, #476]	; (8004090 <HAL_I2C_Init+0x264>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	bf94      	ite	ls
 8003eb8:	2301      	movls	r3, #1
 8003eba:	2300      	movhi	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e0db      	b.n	800407e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4a72      	ldr	r2, [pc, #456]	; (8004094 <HAL_I2C_Init+0x268>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	0c9b      	lsrs	r3, r3, #18
 8003ed0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	4a64      	ldr	r2, [pc, #400]	; (8004088 <HAL_I2C_Init+0x25c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d802      	bhi.n	8003f00 <HAL_I2C_Init+0xd4>
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	3301      	adds	r3, #1
 8003efe:	e009      	b.n	8003f14 <HAL_I2C_Init+0xe8>
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f06:	fb02 f303 	mul.w	r3, r2, r3
 8003f0a:	4a63      	ldr	r2, [pc, #396]	; (8004098 <HAL_I2C_Init+0x26c>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	099b      	lsrs	r3, r3, #6
 8003f12:	3301      	adds	r3, #1
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6812      	ldr	r2, [r2, #0]
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4956      	ldr	r1, [pc, #344]	; (8004088 <HAL_I2C_Init+0x25c>)
 8003f30:	428b      	cmp	r3, r1
 8003f32:	d80d      	bhi.n	8003f50 <HAL_I2C_Init+0x124>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	1e59      	subs	r1, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f42:	3301      	adds	r3, #1
 8003f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	bf38      	it	cc
 8003f4c:	2304      	movcc	r3, #4
 8003f4e:	e04f      	b.n	8003ff0 <HAL_I2C_Init+0x1c4>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d111      	bne.n	8003f7c <HAL_I2C_Init+0x150>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	1e58      	subs	r0, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6859      	ldr	r1, [r3, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	440b      	add	r3, r1
 8003f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	bf0c      	ite	eq
 8003f74:	2301      	moveq	r3, #1
 8003f76:	2300      	movne	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	e012      	b.n	8003fa2 <HAL_I2C_Init+0x176>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	1e58      	subs	r0, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6859      	ldr	r1, [r3, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	0099      	lsls	r1, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f92:	3301      	adds	r3, #1
 8003f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bf0c      	ite	eq
 8003f9c:	2301      	moveq	r3, #1
 8003f9e:	2300      	movne	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_I2C_Init+0x17e>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e022      	b.n	8003ff0 <HAL_I2C_Init+0x1c4>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10e      	bne.n	8003fd0 <HAL_I2C_Init+0x1a4>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1e58      	subs	r0, r3, #1
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6859      	ldr	r1, [r3, #4]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	440b      	add	r3, r1
 8003fc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fce:	e00f      	b.n	8003ff0 <HAL_I2C_Init+0x1c4>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	1e58      	subs	r0, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6859      	ldr	r1, [r3, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	0099      	lsls	r1, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	6809      	ldr	r1, [r1, #0]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69da      	ldr	r2, [r3, #28]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800401e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6911      	ldr	r1, [r2, #16]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	68d2      	ldr	r2, [r2, #12]
 800402a:	4311      	orrs	r1, r2
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	430b      	orrs	r3, r1
 8004032:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695a      	ldr	r2, [r3, #20]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0201 	orr.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	000186a0 	.word	0x000186a0
 800408c:	001e847f 	.word	0x001e847f
 8004090:	003d08ff 	.word	0x003d08ff
 8004094:	431bde83 	.word	0x431bde83
 8004098:	10624dd3 	.word	0x10624dd3

0800409c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	d129      	bne.n	8004106 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2224      	movs	r2, #36	; 0x24
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0201 	bic.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0210 	bic.w	r2, r2, #16
 80040d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0201 	orr.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	e000      	b.n	8004108 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004106:	2302      	movs	r3, #2
  }
}
 8004108:	4618      	mov	r0, r3
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800411e:	2300      	movs	r3, #0
 8004120:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b20      	cmp	r3, #32
 800412c:	d12a      	bne.n	8004184 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2224      	movs	r2, #36	; 0x24
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0201 	bic.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800414e:	89fb      	ldrh	r3, [r7, #14]
 8004150:	f023 030f 	bic.w	r3, r3, #15
 8004154:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	b29a      	uxth	r2, r3
 800415a:	89fb      	ldrh	r3, [r7, #14]
 800415c:	4313      	orrs	r3, r2
 800415e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	89fa      	ldrh	r2, [r7, #14]
 8004166:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004180:	2300      	movs	r3, #0
 8004182:	e000      	b.n	8004186 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004184:	2302      	movs	r3, #2
  }
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
	...

08004194 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e0bf      	b.n	8004326 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fd f9d8 	bl	8001570 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80041d6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6999      	ldr	r1, [r3, #24]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80041ec:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6899      	ldr	r1, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	4b4a      	ldr	r3, [pc, #296]	; (8004330 <HAL_LTDC_Init+0x19c>)
 8004208:	400b      	ands	r3, r1
 800420a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	041b      	lsls	r3, r3, #16
 8004212:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6899      	ldr	r1, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68d9      	ldr	r1, [r3, #12]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	4b3e      	ldr	r3, [pc, #248]	; (8004330 <HAL_LTDC_Init+0x19c>)
 8004236:	400b      	ands	r3, r1
 8004238:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	041b      	lsls	r3, r3, #16
 8004240:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68d9      	ldr	r1, [r3, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1a      	ldr	r2, [r3, #32]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6919      	ldr	r1, [r3, #16]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	4b33      	ldr	r3, [pc, #204]	; (8004330 <HAL_LTDC_Init+0x19c>)
 8004264:	400b      	ands	r3, r1
 8004266:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	041b      	lsls	r3, r3, #16
 800426e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6919      	ldr	r1, [r3, #16]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6959      	ldr	r1, [r3, #20]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	4b27      	ldr	r3, [pc, #156]	; (8004330 <HAL_LTDC_Init+0x19c>)
 8004292:	400b      	ands	r3, r1
 8004294:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	041b      	lsls	r3, r3, #16
 800429c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6959      	ldr	r1, [r3, #20]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80042c4:	041b      	lsls	r3, r3, #16
 80042c6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80042d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0206 	orr.w	r2, r2, #6
 8004302:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699a      	ldr	r2, [r3, #24]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	f000f800 	.word	0xf000f800

08004334 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004342:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d023      	beq.n	800439e <HAL_LTDC_IRQHandler+0x6a>
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d01e      	beq.n	800439e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0204 	bic.w	r2, r2, #4
 800436e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2204      	movs	r2, #4
 8004376:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800437e:	f043 0201 	orr.w	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2204      	movs	r2, #4
 800438c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f86f 	bl	800447c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d023      	beq.n	80043f0 <HAL_LTDC_IRQHandler+0xbc>
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d01e      	beq.n	80043f0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0202 	bic.w	r2, r2, #2
 80043c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2202      	movs	r2, #2
 80043c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043d0:	f043 0202 	orr.w	r2, r3, #2
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2204      	movs	r2, #4
 80043de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f846 	bl	800447c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d01b      	beq.n	8004432 <HAL_LTDC_IRQHandler+0xfe>
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	d016      	beq.n	8004432 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0201 	bic.w	r2, r2, #1
 8004412:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2201      	movs	r2, #1
 800441a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f82f 	bl	8004490 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01b      	beq.n	8004474 <HAL_LTDC_IRQHandler+0x140>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d016      	beq.n	8004474 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0208 	bic.w	r2, r2, #8
 8004454:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2208      	movs	r2, #8
 800445c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fc fe0e 	bl	8001090 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004474:	bf00      	nop
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80044a4:	b5b0      	push	{r4, r5, r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_LTDC_ConfigLayer+0x1a>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e02c      	b.n	8004518 <HAL_LTDC_ConfigLayer+0x74>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2202      	movs	r2, #2
 80044ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2134      	movs	r1, #52	; 0x34
 80044d4:	fb01 f303 	mul.w	r3, r1, r3
 80044d8:	4413      	add	r3, r2
 80044da:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	4614      	mov	r4, r2
 80044e2:	461d      	mov	r5, r3
 80044e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044f0:	682b      	ldr	r3, [r5, #0]
 80044f2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	68b9      	ldr	r1, [r7, #8]
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f882 	bl	8004602 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2201      	movs	r2, #1
 8004504:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bdb0      	pop	{r4, r5, r7, pc}

08004520 <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_LTDC_Reload+0x18>
 8004534:	2302      	movs	r3, #2
 8004536:	e01c      	b.n	8004572 <HAL_LTDC_Reload+0x52>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0208 	orr.w	r2, r2, #8
 8004556:	635a      	str	r2, [r3, #52]	; 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <HAL_LTDC_SetWindowPosition_NoReload>:
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b086      	sub	sp, #24
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(X0));
  assert_param(IS_LTDC_CFBLNBR(Y0));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_LTDC_SetWindowPosition_NoReload+0x1c>
 8004596:	2302      	movs	r3, #2
 8004598:	e02f      	b.n	80045fa <HAL_LTDC_SetWindowPosition_NoReload+0x7c>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2202      	movs	r2, #2
 80045a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2234      	movs	r2, #52	; 0x34
 80045ae:	fb02 f303 	mul.w	r3, r2, r3
 80045b2:	3338      	adds	r3, #56	; 0x38
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4413      	add	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	441a      	add	r2, r3
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	441a      	add	r2, r3
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	6979      	ldr	r1, [r7, #20]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f80d 	bl	8004602 <LTDC_SetConfig>

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004602:	b480      	push	{r7}
 8004604:	b089      	sub	sp, #36	; 0x24
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	0c1b      	lsrs	r3, r3, #16
 800461a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800461e:	4413      	add	r3, r2
 8004620:	041b      	lsls	r3, r3, #16
 8004622:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	01db      	lsls	r3, r3, #7
 800462e:	4413      	add	r3, r2
 8004630:	3384      	adds	r3, #132	; 0x84
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	6812      	ldr	r2, [r2, #0]
 8004638:	4611      	mov	r1, r2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	01d2      	lsls	r2, r2, #7
 800463e:	440a      	add	r2, r1
 8004640:	3284      	adds	r2, #132	; 0x84
 8004642:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004646:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	0c1b      	lsrs	r3, r3, #16
 8004654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004658:	4413      	add	r3, r2
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4619      	mov	r1, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	01db      	lsls	r3, r3, #7
 8004666:	440b      	add	r3, r1
 8004668:	3384      	adds	r3, #132	; 0x84
 800466a:	4619      	mov	r1, r3
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	4313      	orrs	r3, r2
 8004670:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004680:	4413      	add	r3, r2
 8004682:	041b      	lsls	r3, r3, #16
 8004684:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	01db      	lsls	r3, r3, #7
 8004690:	4413      	add	r3, r2
 8004692:	3384      	adds	r3, #132	; 0x84
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	6812      	ldr	r2, [r2, #0]
 800469a:	4611      	mov	r1, r2
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	01d2      	lsls	r2, r2, #7
 80046a0:	440a      	add	r2, r1
 80046a2:	3284      	adds	r2, #132	; 0x84
 80046a4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80046a8:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046b8:	4413      	add	r3, r2
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4619      	mov	r1, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	01db      	lsls	r3, r3, #7
 80046c6:	440b      	add	r3, r1
 80046c8:	3384      	adds	r3, #132	; 0x84
 80046ca:	4619      	mov	r1, r3
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	01db      	lsls	r3, r3, #7
 80046dc:	4413      	add	r3, r2
 80046de:	3384      	adds	r3, #132	; 0x84
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	6812      	ldr	r2, [r2, #0]
 80046e6:	4611      	mov	r1, r2
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	01d2      	lsls	r2, r2, #7
 80046ec:	440a      	add	r2, r1
 80046ee:	3284      	adds	r2, #132	; 0x84
 80046f0:	f023 0307 	bic.w	r3, r3, #7
 80046f4:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	01db      	lsls	r3, r3, #7
 8004700:	4413      	add	r3, r2
 8004702:	3384      	adds	r3, #132	; 0x84
 8004704:	461a      	mov	r2, r3
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004712:	021b      	lsls	r3, r3, #8
 8004714:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800471c:	041b      	lsls	r3, r3, #16
 800471e:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	061b      	lsls	r3, r3, #24
 8004726:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	461a      	mov	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	01db      	lsls	r3, r3, #7
 8004732:	4413      	add	r3, r2
 8004734:	3384      	adds	r3, #132	; 0x84
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	01db      	lsls	r3, r3, #7
 8004742:	4413      	add	r3, r2
 8004744:	3384      	adds	r3, #132	; 0x84
 8004746:	461a      	mov	r2, r3
 8004748:	2300      	movs	r3, #0
 800474a:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004752:	461a      	mov	r2, r3
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	431a      	orrs	r2, r3
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	431a      	orrs	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4619      	mov	r1, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	01db      	lsls	r3, r3, #7
 8004766:	440b      	add	r3, r1
 8004768:	3384      	adds	r3, #132	; 0x84
 800476a:	4619      	mov	r1, r3
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	4313      	orrs	r3, r2
 8004770:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	01db      	lsls	r3, r3, #7
 800477c:	4413      	add	r3, r2
 800477e:	3384      	adds	r3, #132	; 0x84
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	6812      	ldr	r2, [r2, #0]
 8004786:	4611      	mov	r1, r2
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	01d2      	lsls	r2, r2, #7
 800478c:	440a      	add	r2, r1
 800478e:	3284      	adds	r2, #132	; 0x84
 8004790:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004794:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	01db      	lsls	r3, r3, #7
 80047a0:	4413      	add	r3, r2
 80047a2:	3384      	adds	r3, #132	; 0x84
 80047a4:	461a      	mov	r2, r3
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	461a      	mov	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	01db      	lsls	r3, r3, #7
 80047b6:	4413      	add	r3, r2
 80047b8:	3384      	adds	r3, #132	; 0x84
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	6812      	ldr	r2, [r2, #0]
 80047c0:	4611      	mov	r1, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	01d2      	lsls	r2, r2, #7
 80047c6:	440a      	add	r2, r1
 80047c8:	3284      	adds	r2, #132	; 0x84
 80047ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80047ce:	f023 0307 	bic.w	r3, r3, #7
 80047d2:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	68f9      	ldr	r1, [r7, #12]
 80047de:	6809      	ldr	r1, [r1, #0]
 80047e0:	4608      	mov	r0, r1
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	01c9      	lsls	r1, r1, #7
 80047e6:	4401      	add	r1, r0
 80047e8:	3184      	adds	r1, #132	; 0x84
 80047ea:	4313      	orrs	r3, r2
 80047ec:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	01db      	lsls	r3, r3, #7
 80047f8:	4413      	add	r3, r2
 80047fa:	3384      	adds	r3, #132	; 0x84
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	01db      	lsls	r3, r3, #7
 8004808:	4413      	add	r3, r2
 800480a:	3384      	adds	r3, #132	; 0x84
 800480c:	461a      	mov	r2, r3
 800480e:	2300      	movs	r3, #0
 8004810:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	01db      	lsls	r3, r3, #7
 800481c:	4413      	add	r3, r2
 800481e:	3384      	adds	r3, #132	; 0x84
 8004820:	461a      	mov	r2, r3
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d102      	bne.n	8004836 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004830:	2304      	movs	r3, #4
 8004832:	61fb      	str	r3, [r7, #28]
 8004834:	e01b      	b.n	800486e <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d102      	bne.n	8004844 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800483e:	2303      	movs	r3, #3
 8004840:	61fb      	str	r3, [r7, #28]
 8004842:	e014      	b.n	800486e <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	2b04      	cmp	r3, #4
 800484a:	d00b      	beq.n	8004864 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004850:	2b02      	cmp	r3, #2
 8004852:	d007      	beq.n	8004864 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004858:	2b03      	cmp	r3, #3
 800485a:	d003      	beq.n	8004864 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004860:	2b07      	cmp	r3, #7
 8004862:	d102      	bne.n	800486a <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004864:	2302      	movs	r3, #2
 8004866:	61fb      	str	r3, [r7, #28]
 8004868:	e001      	b.n	800486e <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800486a:	2301      	movs	r3, #1
 800486c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	01db      	lsls	r3, r3, #7
 8004878:	4413      	add	r3, r2
 800487a:	3384      	adds	r3, #132	; 0x84
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	6812      	ldr	r2, [r2, #0]
 8004882:	4611      	mov	r1, r2
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	01d2      	lsls	r2, r2, #7
 8004888:	440a      	add	r2, r1
 800488a:	3284      	adds	r2, #132	; 0x84
 800488c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004890:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	fb02 f303 	mul.w	r3, r2, r3
 800489c:	041a      	lsls	r2, r3, #16
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	6859      	ldr	r1, [r3, #4]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	1acb      	subs	r3, r1, r3
 80048a8:	69f9      	ldr	r1, [r7, #28]
 80048aa:	fb01 f303 	mul.w	r3, r1, r3
 80048ae:	3303      	adds	r3, #3
 80048b0:	68f9      	ldr	r1, [r7, #12]
 80048b2:	6809      	ldr	r1, [r1, #0]
 80048b4:	4608      	mov	r0, r1
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	01c9      	lsls	r1, r1, #7
 80048ba:	4401      	add	r1, r0
 80048bc:	3184      	adds	r1, #132	; 0x84
 80048be:	4313      	orrs	r3, r2
 80048c0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	01db      	lsls	r3, r3, #7
 80048cc:	4413      	add	r3, r2
 80048ce:	3384      	adds	r3, #132	; 0x84
 80048d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	6812      	ldr	r2, [r2, #0]
 80048d6:	4611      	mov	r1, r2
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	01d2      	lsls	r2, r2, #7
 80048dc:	440a      	add	r2, r1
 80048de:	3284      	adds	r2, #132	; 0x84
 80048e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80048e4:	f023 0307 	bic.w	r3, r3, #7
 80048e8:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	01db      	lsls	r3, r3, #7
 80048f4:	4413      	add	r3, r2
 80048f6:	3384      	adds	r3, #132	; 0x84
 80048f8:	461a      	mov	r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fe:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	461a      	mov	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	01db      	lsls	r3, r3, #7
 800490a:	4413      	add	r3, r2
 800490c:	3384      	adds	r3, #132	; 0x84
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	6812      	ldr	r2, [r2, #0]
 8004914:	4611      	mov	r1, r2
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	01d2      	lsls	r2, r2, #7
 800491a:	440a      	add	r2, r1
 800491c:	3284      	adds	r2, #132	; 0x84
 800491e:	f043 0301 	orr.w	r3, r3, #1
 8004922:	6013      	str	r3, [r2, #0]
}
 8004924:	bf00      	nop
 8004926:	3724      	adds	r7, #36	; 0x24
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e25b      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d075      	beq.n	8004a3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800494e:	4ba3      	ldr	r3, [pc, #652]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 030c 	and.w	r3, r3, #12
 8004956:	2b04      	cmp	r3, #4
 8004958:	d00c      	beq.n	8004974 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800495a:	4ba0      	ldr	r3, [pc, #640]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004962:	2b08      	cmp	r3, #8
 8004964:	d112      	bne.n	800498c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004966:	4b9d      	ldr	r3, [pc, #628]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800496e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004972:	d10b      	bne.n	800498c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004974:	4b99      	ldr	r3, [pc, #612]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d05b      	beq.n	8004a38 <HAL_RCC_OscConfig+0x108>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d157      	bne.n	8004a38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e236      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004994:	d106      	bne.n	80049a4 <HAL_RCC_OscConfig+0x74>
 8004996:	4b91      	ldr	r3, [pc, #580]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a90      	ldr	r2, [pc, #576]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 800499c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	e01d      	b.n	80049e0 <HAL_RCC_OscConfig+0xb0>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049ac:	d10c      	bne.n	80049c8 <HAL_RCC_OscConfig+0x98>
 80049ae:	4b8b      	ldr	r3, [pc, #556]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a8a      	ldr	r2, [pc, #552]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	4b88      	ldr	r3, [pc, #544]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a87      	ldr	r2, [pc, #540]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e00b      	b.n	80049e0 <HAL_RCC_OscConfig+0xb0>
 80049c8:	4b84      	ldr	r3, [pc, #528]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a83      	ldr	r2, [pc, #524]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	4b81      	ldr	r3, [pc, #516]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a80      	ldr	r2, [pc, #512]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 80049da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d013      	beq.n	8004a10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e8:	f7fd f9ca 	bl	8001d80 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049f0:	f7fd f9c6 	bl	8001d80 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	; 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e1fb      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a02:	4b76      	ldr	r3, [pc, #472]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0xc0>
 8004a0e:	e014      	b.n	8004a3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a10:	f7fd f9b6 	bl	8001d80 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a18:	f7fd f9b2 	bl	8001d80 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b64      	cmp	r3, #100	; 0x64
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e1e7      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a2a:	4b6c      	ldr	r3, [pc, #432]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0xe8>
 8004a36:	e000      	b.n	8004a3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d063      	beq.n	8004b0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a46:	4b65      	ldr	r3, [pc, #404]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 030c 	and.w	r3, r3, #12
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00b      	beq.n	8004a6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a52:	4b62      	ldr	r3, [pc, #392]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d11c      	bne.n	8004a98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a5e:	4b5f      	ldr	r3, [pc, #380]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d116      	bne.n	8004a98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a6a:	4b5c      	ldr	r3, [pc, #368]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <HAL_RCC_OscConfig+0x152>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d001      	beq.n	8004a82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e1bb      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a82:	4b56      	ldr	r3, [pc, #344]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	4952      	ldr	r1, [pc, #328]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a96:	e03a      	b.n	8004b0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d020      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aa0:	4b4f      	ldr	r3, [pc, #316]	; (8004be0 <HAL_RCC_OscConfig+0x2b0>)
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa6:	f7fd f96b 	bl	8001d80 <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aae:	f7fd f967 	bl	8001d80 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e19c      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac0:	4b46      	ldr	r3, [pc, #280]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0f0      	beq.n	8004aae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004acc:	4b43      	ldr	r3, [pc, #268]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	4940      	ldr	r1, [pc, #256]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	600b      	str	r3, [r1, #0]
 8004ae0:	e015      	b.n	8004b0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ae2:	4b3f      	ldr	r3, [pc, #252]	; (8004be0 <HAL_RCC_OscConfig+0x2b0>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae8:	f7fd f94a 	bl	8001d80 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004af0:	f7fd f946 	bl	8001d80 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e17b      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b02:	4b36      	ldr	r3, [pc, #216]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f0      	bne.n	8004af0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d030      	beq.n	8004b7c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d016      	beq.n	8004b50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b22:	4b30      	ldr	r3, [pc, #192]	; (8004be4 <HAL_RCC_OscConfig+0x2b4>)
 8004b24:	2201      	movs	r2, #1
 8004b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b28:	f7fd f92a 	bl	8001d80 <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b30:	f7fd f926 	bl	8001d80 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e15b      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b42:	4b26      	ldr	r3, [pc, #152]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f0      	beq.n	8004b30 <HAL_RCC_OscConfig+0x200>
 8004b4e:	e015      	b.n	8004b7c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b50:	4b24      	ldr	r3, [pc, #144]	; (8004be4 <HAL_RCC_OscConfig+0x2b4>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b56:	f7fd f913 	bl	8001d80 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b5e:	f7fd f90f 	bl	8001d80 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e144      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b70:	4b1a      	ldr	r3, [pc, #104]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1f0      	bne.n	8004b5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 80a0 	beq.w	8004cca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b8e:	4b13      	ldr	r3, [pc, #76]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10f      	bne.n	8004bba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	4a0e      	ldr	r2, [pc, #56]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8004baa:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <HAL_RCC_OscConfig+0x2ac>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb2:	60bb      	str	r3, [r7, #8]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bba:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <HAL_RCC_OscConfig+0x2b8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d121      	bne.n	8004c0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bc6:	4b08      	ldr	r3, [pc, #32]	; (8004be8 <HAL_RCC_OscConfig+0x2b8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a07      	ldr	r2, [pc, #28]	; (8004be8 <HAL_RCC_OscConfig+0x2b8>)
 8004bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bd2:	f7fd f8d5 	bl	8001d80 <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd8:	e011      	b.n	8004bfe <HAL_RCC_OscConfig+0x2ce>
 8004bda:	bf00      	nop
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	42470000 	.word	0x42470000
 8004be4:	42470e80 	.word	0x42470e80
 8004be8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bec:	f7fd f8c8 	bl	8001d80 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e0fd      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bfe:	4b81      	ldr	r3, [pc, #516]	; (8004e04 <HAL_RCC_OscConfig+0x4d4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0f0      	beq.n	8004bec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d106      	bne.n	8004c20 <HAL_RCC_OscConfig+0x2f0>
 8004c12:	4b7d      	ldr	r3, [pc, #500]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	4a7c      	ldr	r2, [pc, #496]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004c18:	f043 0301 	orr.w	r3, r3, #1
 8004c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c1e:	e01c      	b.n	8004c5a <HAL_RCC_OscConfig+0x32a>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2b05      	cmp	r3, #5
 8004c26:	d10c      	bne.n	8004c42 <HAL_RCC_OscConfig+0x312>
 8004c28:	4b77      	ldr	r3, [pc, #476]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2c:	4a76      	ldr	r2, [pc, #472]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004c2e:	f043 0304 	orr.w	r3, r3, #4
 8004c32:	6713      	str	r3, [r2, #112]	; 0x70
 8004c34:	4b74      	ldr	r3, [pc, #464]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c38:	4a73      	ldr	r2, [pc, #460]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004c3a:	f043 0301 	orr.w	r3, r3, #1
 8004c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c40:	e00b      	b.n	8004c5a <HAL_RCC_OscConfig+0x32a>
 8004c42:	4b71      	ldr	r3, [pc, #452]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c46:	4a70      	ldr	r2, [pc, #448]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004c48:	f023 0301 	bic.w	r3, r3, #1
 8004c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c4e:	4b6e      	ldr	r3, [pc, #440]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	4a6d      	ldr	r2, [pc, #436]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004c54:	f023 0304 	bic.w	r3, r3, #4
 8004c58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d015      	beq.n	8004c8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c62:	f7fd f88d 	bl	8001d80 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c68:	e00a      	b.n	8004c80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c6a:	f7fd f889 	bl	8001d80 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e0bc      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c80:	4b61      	ldr	r3, [pc, #388]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0ee      	beq.n	8004c6a <HAL_RCC_OscConfig+0x33a>
 8004c8c:	e014      	b.n	8004cb8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c8e:	f7fd f877 	bl	8001d80 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c94:	e00a      	b.n	8004cac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c96:	f7fd f873 	bl	8001d80 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e0a6      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cac:	4b56      	ldr	r3, [pc, #344]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1ee      	bne.n	8004c96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d105      	bne.n	8004cca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cbe:	4b52      	ldr	r3, [pc, #328]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	4a51      	ldr	r2, [pc, #324]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 8092 	beq.w	8004df8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cd4:	4b4c      	ldr	r3, [pc, #304]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 030c 	and.w	r3, r3, #12
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d05c      	beq.n	8004d9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d141      	bne.n	8004d6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce8:	4b48      	ldr	r3, [pc, #288]	; (8004e0c <HAL_RCC_OscConfig+0x4dc>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cee:	f7fd f847 	bl	8001d80 <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf4:	e008      	b.n	8004d08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cf6:	f7fd f843 	bl	8001d80 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e078      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d08:	4b3f      	ldr	r3, [pc, #252]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f0      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	69da      	ldr	r2, [r3, #28]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	019b      	lsls	r3, r3, #6
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2a:	085b      	lsrs	r3, r3, #1
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	041b      	lsls	r3, r3, #16
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	061b      	lsls	r3, r3, #24
 8004d38:	4933      	ldr	r1, [pc, #204]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d3e:	4b33      	ldr	r3, [pc, #204]	; (8004e0c <HAL_RCC_OscConfig+0x4dc>)
 8004d40:	2201      	movs	r2, #1
 8004d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d44:	f7fd f81c 	bl	8001d80 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d4c:	f7fd f818 	bl	8001d80 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e04d      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d5e:	4b2a      	ldr	r3, [pc, #168]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCC_OscConfig+0x41c>
 8004d6a:	e045      	b.n	8004df8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d6c:	4b27      	ldr	r3, [pc, #156]	; (8004e0c <HAL_RCC_OscConfig+0x4dc>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d72:	f7fd f805 	bl	8001d80 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d7a:	f7fd f801 	bl	8001d80 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e036      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d8c:	4b1e      	ldr	r3, [pc, #120]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1f0      	bne.n	8004d7a <HAL_RCC_OscConfig+0x44a>
 8004d98:	e02e      	b.n	8004df8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d101      	bne.n	8004da6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e029      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004da6:	4b18      	ldr	r3, [pc, #96]	; (8004e08 <HAL_RCC_OscConfig+0x4d8>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d11c      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d115      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dce:	4013      	ands	r3, r2
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d10d      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d106      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d001      	beq.n	8004df8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	40007000 	.word	0x40007000
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	42470060 	.word	0x42470060

08004e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e0cc      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e24:	4b68      	ldr	r3, [pc, #416]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 030f 	and.w	r3, r3, #15
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d90c      	bls.n	8004e4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e32:	4b65      	ldr	r3, [pc, #404]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3a:	4b63      	ldr	r3, [pc, #396]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d001      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0b8      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d020      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e64:	4b59      	ldr	r3, [pc, #356]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	4a58      	ldr	r2, [pc, #352]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e7c:	4b53      	ldr	r3, [pc, #332]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	4a52      	ldr	r2, [pc, #328]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e88:	4b50      	ldr	r3, [pc, #320]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	494d      	ldr	r1, [pc, #308]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d044      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d107      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eae:	4b47      	ldr	r3, [pc, #284]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d119      	bne.n	8004eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e07f      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d003      	beq.n	8004ece <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	d107      	bne.n	8004ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ece:	4b3f      	ldr	r3, [pc, #252]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d109      	bne.n	8004eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e06f      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ede:	4b3b      	ldr	r3, [pc, #236]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e067      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eee:	4b37      	ldr	r3, [pc, #220]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f023 0203 	bic.w	r2, r3, #3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	4934      	ldr	r1, [pc, #208]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f00:	f7fc ff3e 	bl	8001d80 <HAL_GetTick>
 8004f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f06:	e00a      	b.n	8004f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f08:	f7fc ff3a 	bl	8001d80 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e04f      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1e:	4b2b      	ldr	r3, [pc, #172]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 020c 	and.w	r2, r3, #12
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d1eb      	bne.n	8004f08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f30:	4b25      	ldr	r3, [pc, #148]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d20c      	bcs.n	8004f58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f3e:	4b22      	ldr	r3, [pc, #136]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f46:	4b20      	ldr	r3, [pc, #128]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d001      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e032      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d008      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f64:	4b19      	ldr	r3, [pc, #100]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	4916      	ldr	r1, [pc, #88]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d009      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f82:	4b12      	ldr	r3, [pc, #72]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	490e      	ldr	r1, [pc, #56]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f96:	f000 f821 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8004f9a:	4601      	mov	r1, r0
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	091b      	lsrs	r3, r3, #4
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	4a0a      	ldr	r2, [pc, #40]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004fa8:	5cd3      	ldrb	r3, [r2, r3]
 8004faa:	fa21 f303 	lsr.w	r3, r1, r3
 8004fae:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fb2:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fc fdba 	bl	8001b30 <HAL_InitTick>

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40023c00 	.word	0x40023c00
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	08008d4c 	.word	0x08008d4c
 8004fd4:	2000000c 	.word	0x2000000c
 8004fd8:	20000010 	.word	0x20000010

08004fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	607b      	str	r3, [r7, #4]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	2300      	movs	r3, #0
 8004fec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ff2:	4b63      	ldr	r3, [pc, #396]	; (8005180 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 030c 	and.w	r3, r3, #12
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d007      	beq.n	800500e <HAL_RCC_GetSysClockFreq+0x32>
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d008      	beq.n	8005014 <HAL_RCC_GetSysClockFreq+0x38>
 8005002:	2b00      	cmp	r3, #0
 8005004:	f040 80b4 	bne.w	8005170 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005008:	4b5e      	ldr	r3, [pc, #376]	; (8005184 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800500a:	60bb      	str	r3, [r7, #8]
       break;
 800500c:	e0b3      	b.n	8005176 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800500e:	4b5e      	ldr	r3, [pc, #376]	; (8005188 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005010:	60bb      	str	r3, [r7, #8]
      break;
 8005012:	e0b0      	b.n	8005176 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005014:	4b5a      	ldr	r3, [pc, #360]	; (8005180 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800501c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800501e:	4b58      	ldr	r3, [pc, #352]	; (8005180 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d04a      	beq.n	80050c0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800502a:	4b55      	ldr	r3, [pc, #340]	; (8005180 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	099b      	lsrs	r3, r3, #6
 8005030:	f04f 0400 	mov.w	r4, #0
 8005034:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	ea03 0501 	and.w	r5, r3, r1
 8005040:	ea04 0602 	and.w	r6, r4, r2
 8005044:	4629      	mov	r1, r5
 8005046:	4632      	mov	r2, r6
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	f04f 0400 	mov.w	r4, #0
 8005050:	0154      	lsls	r4, r2, #5
 8005052:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005056:	014b      	lsls	r3, r1, #5
 8005058:	4619      	mov	r1, r3
 800505a:	4622      	mov	r2, r4
 800505c:	1b49      	subs	r1, r1, r5
 800505e:	eb62 0206 	sbc.w	r2, r2, r6
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	f04f 0400 	mov.w	r4, #0
 800506a:	0194      	lsls	r4, r2, #6
 800506c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005070:	018b      	lsls	r3, r1, #6
 8005072:	1a5b      	subs	r3, r3, r1
 8005074:	eb64 0402 	sbc.w	r4, r4, r2
 8005078:	f04f 0100 	mov.w	r1, #0
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	00e2      	lsls	r2, r4, #3
 8005082:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005086:	00d9      	lsls	r1, r3, #3
 8005088:	460b      	mov	r3, r1
 800508a:	4614      	mov	r4, r2
 800508c:	195b      	adds	r3, r3, r5
 800508e:	eb44 0406 	adc.w	r4, r4, r6
 8005092:	f04f 0100 	mov.w	r1, #0
 8005096:	f04f 0200 	mov.w	r2, #0
 800509a:	0262      	lsls	r2, r4, #9
 800509c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80050a0:	0259      	lsls	r1, r3, #9
 80050a2:	460b      	mov	r3, r1
 80050a4:	4614      	mov	r4, r2
 80050a6:	4618      	mov	r0, r3
 80050a8:	4621      	mov	r1, r4
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f04f 0400 	mov.w	r4, #0
 80050b0:	461a      	mov	r2, r3
 80050b2:	4623      	mov	r3, r4
 80050b4:	f7fb f89a 	bl	80001ec <__aeabi_uldivmod>
 80050b8:	4603      	mov	r3, r0
 80050ba:	460c      	mov	r4, r1
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	e049      	b.n	8005154 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050c0:	4b2f      	ldr	r3, [pc, #188]	; (8005180 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	099b      	lsrs	r3, r3, #6
 80050c6:	f04f 0400 	mov.w	r4, #0
 80050ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	ea03 0501 	and.w	r5, r3, r1
 80050d6:	ea04 0602 	and.w	r6, r4, r2
 80050da:	4629      	mov	r1, r5
 80050dc:	4632      	mov	r2, r6
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	f04f 0400 	mov.w	r4, #0
 80050e6:	0154      	lsls	r4, r2, #5
 80050e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80050ec:	014b      	lsls	r3, r1, #5
 80050ee:	4619      	mov	r1, r3
 80050f0:	4622      	mov	r2, r4
 80050f2:	1b49      	subs	r1, r1, r5
 80050f4:	eb62 0206 	sbc.w	r2, r2, r6
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	f04f 0400 	mov.w	r4, #0
 8005100:	0194      	lsls	r4, r2, #6
 8005102:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005106:	018b      	lsls	r3, r1, #6
 8005108:	1a5b      	subs	r3, r3, r1
 800510a:	eb64 0402 	sbc.w	r4, r4, r2
 800510e:	f04f 0100 	mov.w	r1, #0
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	00e2      	lsls	r2, r4, #3
 8005118:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800511c:	00d9      	lsls	r1, r3, #3
 800511e:	460b      	mov	r3, r1
 8005120:	4614      	mov	r4, r2
 8005122:	195b      	adds	r3, r3, r5
 8005124:	eb44 0406 	adc.w	r4, r4, r6
 8005128:	f04f 0100 	mov.w	r1, #0
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	02a2      	lsls	r2, r4, #10
 8005132:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005136:	0299      	lsls	r1, r3, #10
 8005138:	460b      	mov	r3, r1
 800513a:	4614      	mov	r4, r2
 800513c:	4618      	mov	r0, r3
 800513e:	4621      	mov	r1, r4
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f04f 0400 	mov.w	r4, #0
 8005146:	461a      	mov	r2, r3
 8005148:	4623      	mov	r3, r4
 800514a:	f7fb f84f 	bl	80001ec <__aeabi_uldivmod>
 800514e:	4603      	mov	r3, r0
 8005150:	460c      	mov	r4, r1
 8005152:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005154:	4b0a      	ldr	r3, [pc, #40]	; (8005180 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	0c1b      	lsrs	r3, r3, #16
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	3301      	adds	r3, #1
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	fbb2 f3f3 	udiv	r3, r2, r3
 800516c:	60bb      	str	r3, [r7, #8]
      break;
 800516e:	e002      	b.n	8005176 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005170:	4b04      	ldr	r3, [pc, #16]	; (8005184 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005172:	60bb      	str	r3, [r7, #8]
      break;
 8005174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005176:	68bb      	ldr	r3, [r7, #8]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005180:	40023800 	.word	0x40023800
 8005184:	00f42400 	.word	0x00f42400
 8005188:	007a1200 	.word	0x007a1200

0800518c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005190:	4b03      	ldr	r3, [pc, #12]	; (80051a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005192:	681b      	ldr	r3, [r3, #0]
}
 8005194:	4618      	mov	r0, r3
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	2000000c 	.word	0x2000000c

080051a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051a8:	f7ff fff0 	bl	800518c <HAL_RCC_GetHCLKFreq>
 80051ac:	4601      	mov	r1, r0
 80051ae:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	0a9b      	lsrs	r3, r3, #10
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	4a03      	ldr	r2, [pc, #12]	; (80051c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051ba:	5cd3      	ldrb	r3, [r2, r3]
 80051bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40023800 	.word	0x40023800
 80051c8:	08008d5c 	.word	0x08008d5c

080051cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051d0:	f7ff ffdc 	bl	800518c <HAL_RCC_GetHCLKFreq>
 80051d4:	4601      	mov	r1, r0
 80051d6:	4b05      	ldr	r3, [pc, #20]	; (80051ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	0b5b      	lsrs	r3, r3, #13
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	4a03      	ldr	r2, [pc, #12]	; (80051f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051e2:	5cd3      	ldrb	r3, [r2, r3]
 80051e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40023800 	.word	0x40023800
 80051f0:	08008d5c 	.word	0x08008d5c

080051f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	220f      	movs	r2, #15
 8005202:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005204:	4b12      	ldr	r3, [pc, #72]	; (8005250 <HAL_RCC_GetClockConfig+0x5c>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f003 0203 	and.w	r2, r3, #3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005210:	4b0f      	ldr	r3, [pc, #60]	; (8005250 <HAL_RCC_GetClockConfig+0x5c>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800521c:	4b0c      	ldr	r3, [pc, #48]	; (8005250 <HAL_RCC_GetClockConfig+0x5c>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005228:	4b09      	ldr	r3, [pc, #36]	; (8005250 <HAL_RCC_GetClockConfig+0x5c>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	08db      	lsrs	r3, r3, #3
 800522e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005236:	4b07      	ldr	r3, [pc, #28]	; (8005254 <HAL_RCC_GetClockConfig+0x60>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 020f 	and.w	r2, r3, #15
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	601a      	str	r2, [r3, #0]
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40023800 	.word	0x40023800
 8005254:	40023c00 	.word	0x40023c00

08005258 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10b      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800527c:	2b00      	cmp	r3, #0
 800527e:	d105      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005288:	2b00      	cmp	r3, #0
 800528a:	d075      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800528c:	4bad      	ldr	r3, [pc, #692]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800528e:	2200      	movs	r2, #0
 8005290:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005292:	f7fc fd75 	bl	8001d80 <HAL_GetTick>
 8005296:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005298:	e008      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800529a:	f7fc fd71 	bl	8001d80 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d901      	bls.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e18b      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052ac:	4ba6      	ldr	r3, [pc, #664]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1f0      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d009      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	019a      	lsls	r2, r3, #6
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	071b      	lsls	r3, r3, #28
 80052d0:	499d      	ldr	r1, [pc, #628]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d01f      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052e4:	4b98      	ldr	r3, [pc, #608]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ea:	0f1b      	lsrs	r3, r3, #28
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	019a      	lsls	r2, r3, #6
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	061b      	lsls	r3, r3, #24
 80052fe:	431a      	orrs	r2, r3
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	071b      	lsls	r3, r3, #28
 8005304:	4990      	ldr	r1, [pc, #576]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005306:	4313      	orrs	r3, r2
 8005308:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800530c:	4b8e      	ldr	r3, [pc, #568]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800530e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005312:	f023 021f 	bic.w	r2, r3, #31
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	3b01      	subs	r3, #1
 800531c:	498a      	ldr	r1, [pc, #552]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800531e:	4313      	orrs	r3, r2
 8005320:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00d      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	019a      	lsls	r2, r3, #6
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	061b      	lsls	r3, r3, #24
 800533c:	431a      	orrs	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	071b      	lsls	r3, r3, #28
 8005344:	4980      	ldr	r1, [pc, #512]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800534c:	4b7d      	ldr	r3, [pc, #500]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800534e:	2201      	movs	r2, #1
 8005350:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005352:	f7fc fd15 	bl	8001d80 <HAL_GetTick>
 8005356:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005358:	e008      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800535a:	f7fc fd11 	bl	8001d80 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e12b      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800536c:	4b76      	ldr	r3, [pc, #472]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0f0      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b00      	cmp	r3, #0
 8005382:	d105      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800538c:	2b00      	cmp	r3, #0
 800538e:	d079      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005390:	4b6e      	ldr	r3, [pc, #440]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005396:	f7fc fcf3 	bl	8001d80 <HAL_GetTick>
 800539a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800539c:	e008      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800539e:	f7fc fcef 	bl	8001d80 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e109      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053b0:	4b65      	ldr	r3, [pc, #404]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053bc:	d0ef      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0304 	and.w	r3, r3, #4
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d020      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053ca:	4b5f      	ldr	r3, [pc, #380]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d0:	0f1b      	lsrs	r3, r3, #28
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	019a      	lsls	r2, r3, #6
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	061b      	lsls	r3, r3, #24
 80053e4:	431a      	orrs	r2, r3
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	071b      	lsls	r3, r3, #28
 80053ea:	4957      	ldr	r1, [pc, #348]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053f2:	4b55      	ldr	r3, [pc, #340]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	3b01      	subs	r3, #1
 8005402:	021b      	lsls	r3, r3, #8
 8005404:	4950      	ldr	r1, [pc, #320]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01e      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005418:	4b4b      	ldr	r3, [pc, #300]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541e:	0e1b      	lsrs	r3, r3, #24
 8005420:	f003 030f 	and.w	r3, r3, #15
 8005424:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	019a      	lsls	r2, r3, #6
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	061b      	lsls	r3, r3, #24
 8005430:	431a      	orrs	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	071b      	lsls	r3, r3, #28
 8005438:	4943      	ldr	r1, [pc, #268]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800543a:	4313      	orrs	r3, r2
 800543c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005440:	4b41      	ldr	r3, [pc, #260]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005446:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	493e      	ldr	r1, [pc, #248]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005456:	4b3d      	ldr	r3, [pc, #244]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005458:	2201      	movs	r2, #1
 800545a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800545c:	f7fc fc90 	bl	8001d80 <HAL_GetTick>
 8005460:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005462:	e008      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005464:	f7fc fc8c 	bl	8001d80 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e0a6      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005476:	4b34      	ldr	r3, [pc, #208]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800547e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005482:	d1ef      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0320 	and.w	r3, r3, #32
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 808d 	beq.w	80055ac <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005492:	2300      	movs	r3, #0
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	4b2c      	ldr	r3, [pc, #176]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	4a2b      	ldr	r2, [pc, #172]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800549c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a0:	6413      	str	r3, [r2, #64]	; 0x40
 80054a2:	4b29      	ldr	r3, [pc, #164]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80054ae:	4b28      	ldr	r3, [pc, #160]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a27      	ldr	r2, [pc, #156]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80054b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054ba:	f7fc fc61 	bl	8001d80 <HAL_GetTick>
 80054be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054c0:	e008      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80054c2:	f7fc fc5d 	bl	8001d80 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e077      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054d4:	4b1e      	ldr	r3, [pc, #120]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0f0      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054e0:	4b19      	ldr	r3, [pc, #100]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d039      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d032      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054fe:	4b12      	ldr	r3, [pc, #72]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005506:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005508:	4b12      	ldr	r3, [pc, #72]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800550a:	2201      	movs	r2, #1
 800550c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800550e:	4b11      	ldr	r3, [pc, #68]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005514:	4a0c      	ldr	r2, [pc, #48]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800551a:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800551c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b01      	cmp	r3, #1
 8005524:	d11e      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005526:	f7fc fc2b 	bl	8001d80 <HAL_GetTick>
 800552a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800552c:	e014      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800552e:	f7fc fc27 	bl	8001d80 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	f241 3288 	movw	r2, #5000	; 0x1388
 800553c:	4293      	cmp	r3, r2
 800553e:	d90b      	bls.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e03f      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005544:	42470068 	.word	0x42470068
 8005548:	40023800 	.word	0x40023800
 800554c:	42470070 	.word	0x42470070
 8005550:	40007000 	.word	0x40007000
 8005554:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005558:	4b1c      	ldr	r3, [pc, #112]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800555a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0e4      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005568:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005570:	d10d      	bne.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005572:	4b16      	ldr	r3, [pc, #88]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005586:	4911      	ldr	r1, [pc, #68]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005588:	4313      	orrs	r3, r2
 800558a:	608b      	str	r3, [r1, #8]
 800558c:	e005      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800558e:	4b0f      	ldr	r3, [pc, #60]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	4a0e      	ldr	r2, [pc, #56]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005594:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005598:	6093      	str	r3, [r2, #8]
 800559a:	4b0c      	ldr	r3, [pc, #48]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800559c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055a6:	4909      	ldr	r1, [pc, #36]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0310 	and.w	r3, r3, #16
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d004      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80055be:	4b04      	ldr	r3, [pc, #16]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80055c0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40023800 	.word	0x40023800
 80055d0:	424711e0 	.word	0x424711e0

080055d4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e025      	b.n	8005634 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d106      	bne.n	8005602 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7fc fa8d 	bl	8001b1c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2202      	movs	r2, #2
 8005606:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	3304      	adds	r3, #4
 8005612:	4619      	mov	r1, r3
 8005614:	4610      	mov	r0, r2
 8005616:	f001 fa55 	bl	8006ac4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6818      	ldr	r0, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	461a      	mov	r2, r3
 8005624:	6839      	ldr	r1, [r7, #0]
 8005626:	f001 fac0 	bl	8006baa <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e056      	b.n	80056fc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d106      	bne.n	800566e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7fc f897 	bl	800179c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2202      	movs	r2, #2
 8005672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005684:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	431a      	orrs	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	ea42 0103 	orr.w	r1, r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	0c1b      	lsrs	r3, r3, #16
 80056cc:	f003 0104 	and.w	r1, r3, #4
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e01a      	b.n	800574c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2202      	movs	r2, #2
 800571a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800572c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7fc f87c 	bl	800182c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b088      	sub	sp, #32
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	603b      	str	r3, [r7, #0]
 8005760:	4613      	mov	r3, r2
 8005762:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005764:	2300      	movs	r3, #0
 8005766:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800576e:	2b01      	cmp	r3, #1
 8005770:	d101      	bne.n	8005776 <HAL_SPI_Transmit+0x22>
 8005772:	2302      	movs	r3, #2
 8005774:	e11e      	b.n	80059b4 <HAL_SPI_Transmit+0x260>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800577e:	f7fc faff 	bl	8001d80 <HAL_GetTick>
 8005782:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b01      	cmp	r3, #1
 8005792:	d002      	beq.n	800579a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005794:	2302      	movs	r3, #2
 8005796:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005798:	e103      	b.n	80059a2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <HAL_SPI_Transmit+0x52>
 80057a0:	88fb      	ldrh	r3, [r7, #6]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d102      	bne.n	80057ac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057aa:	e0fa      	b.n	80059a2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2203      	movs	r2, #3
 80057b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	88fa      	ldrh	r2, [r7, #6]
 80057c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	88fa      	ldrh	r2, [r7, #6]
 80057ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f2:	d107      	bne.n	8005804 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005802:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580e:	2b40      	cmp	r3, #64	; 0x40
 8005810:	d007      	beq.n	8005822 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005820:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800582a:	d14b      	bne.n	80058c4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <HAL_SPI_Transmit+0xe6>
 8005834:	8afb      	ldrh	r3, [r7, #22]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d13e      	bne.n	80058b8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583e:	881a      	ldrh	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584a:	1c9a      	adds	r2, r3, #2
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005854:	b29b      	uxth	r3, r3
 8005856:	3b01      	subs	r3, #1
 8005858:	b29a      	uxth	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800585e:	e02b      	b.n	80058b8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b02      	cmp	r3, #2
 800586c:	d112      	bne.n	8005894 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005872:	881a      	ldrh	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587e:	1c9a      	adds	r2, r3, #2
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005888:	b29b      	uxth	r3, r3
 800588a:	3b01      	subs	r3, #1
 800588c:	b29a      	uxth	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	86da      	strh	r2, [r3, #54]	; 0x36
 8005892:	e011      	b.n	80058b8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005894:	f7fc fa74 	bl	8001d80 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d803      	bhi.n	80058ac <HAL_SPI_Transmit+0x158>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058aa:	d102      	bne.n	80058b2 <HAL_SPI_Transmit+0x15e>
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d102      	bne.n	80058b8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058b6:	e074      	b.n	80059a2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1ce      	bne.n	8005860 <HAL_SPI_Transmit+0x10c>
 80058c2:	e04c      	b.n	800595e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <HAL_SPI_Transmit+0x17e>
 80058cc:	8afb      	ldrh	r3, [r7, #22]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d140      	bne.n	8005954 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	330c      	adds	r3, #12
 80058dc:	7812      	ldrb	r2, [r2, #0]
 80058de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	3b01      	subs	r3, #1
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80058f8:	e02c      	b.n	8005954 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b02      	cmp	r3, #2
 8005906:	d113      	bne.n	8005930 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	330c      	adds	r3, #12
 8005912:	7812      	ldrb	r2, [r2, #0]
 8005914:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005924:	b29b      	uxth	r3, r3
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	86da      	strh	r2, [r3, #54]	; 0x36
 800592e:	e011      	b.n	8005954 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005930:	f7fc fa26 	bl	8001d80 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d803      	bhi.n	8005948 <HAL_SPI_Transmit+0x1f4>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005946:	d102      	bne.n	800594e <HAL_SPI_Transmit+0x1fa>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d102      	bne.n	8005954 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005952:	e026      	b.n	80059a2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1cd      	bne.n	80058fa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	6839      	ldr	r1, [r7, #0]
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 f8a2 	bl	8005aac <SPI_EndRxTxTransaction>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2220      	movs	r2, #32
 8005972:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10a      	bne.n	8005992 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800597c:	2300      	movs	r3, #0
 800597e:	613b      	str	r3, [r7, #16]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	613b      	str	r3, [r7, #16]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	613b      	str	r3, [r7, #16]
 8005990:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	77fb      	strb	r3, [r7, #31]
 800599e:	e000      	b.n	80059a2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80059a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3720      	adds	r7, #32
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059ca:	b2db      	uxtb	r3, r3
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	603b      	str	r3, [r7, #0]
 80059e4:	4613      	mov	r3, r2
 80059e6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059e8:	e04c      	b.n	8005a84 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f0:	d048      	beq.n	8005a84 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80059f2:	f7fc f9c5 	bl	8001d80 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d902      	bls.n	8005a08 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d13d      	bne.n	8005a84 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a20:	d111      	bne.n	8005a46 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a2a:	d004      	beq.n	8005a36 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a34:	d107      	bne.n	8005a46 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a4e:	d10f      	bne.n	8005a70 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e00f      	b.n	8005aa4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	bf0c      	ite	eq
 8005a94:	2301      	moveq	r3, #1
 8005a96:	2300      	movne	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	79fb      	ldrb	r3, [r7, #7]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d1a3      	bne.n	80059ea <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b088      	sub	sp, #32
 8005ab0:	af02      	add	r7, sp, #8
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ab8:	4b1b      	ldr	r3, [pc, #108]	; (8005b28 <SPI_EndRxTxTransaction+0x7c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a1b      	ldr	r2, [pc, #108]	; (8005b2c <SPI_EndRxTxTransaction+0x80>)
 8005abe:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac2:	0d5b      	lsrs	r3, r3, #21
 8005ac4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ac8:	fb02 f303 	mul.w	r3, r2, r3
 8005acc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ad6:	d112      	bne.n	8005afe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	2180      	movs	r1, #128	; 0x80
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f7ff ff78 	bl	80059d8 <SPI_WaitFlagStateUntilTimeout>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d016      	beq.n	8005b1c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af2:	f043 0220 	orr.w	r2, r3, #32
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e00f      	b.n	8005b1e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00a      	beq.n	8005b1a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b14:	2b80      	cmp	r3, #128	; 0x80
 8005b16:	d0f2      	beq.n	8005afe <SPI_EndRxTxTransaction+0x52>
 8005b18:	e000      	b.n	8005b1c <SPI_EndRxTxTransaction+0x70>
        break;
 8005b1a:	bf00      	nop
  }

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	2000000c 	.word	0x2000000c
 8005b2c:	165e9f81 	.word	0x165e9f81

08005b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e01d      	b.n	8005b7e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7fb fe86 	bl	8001868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	f000 fa14 	bl	8005f9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b085      	sub	sp, #20
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0201 	orr.w	r2, r2, #1
 8005b9c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b06      	cmp	r3, #6
 8005bae:	d007      	beq.n	8005bc0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0201 	orr.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d122      	bne.n	8005c2a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d11b      	bne.n	8005c2a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f06f 0202 	mvn.w	r2, #2
 8005bfa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	f003 0303 	and.w	r3, r3, #3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f9a5 	bl	8005f60 <HAL_TIM_IC_CaptureCallback>
 8005c16:	e005      	b.n	8005c24 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f997 	bl	8005f4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f9a8 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	d122      	bne.n	8005c7e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d11b      	bne.n	8005c7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f06f 0204 	mvn.w	r2, #4
 8005c4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f97b 	bl	8005f60 <HAL_TIM_IC_CaptureCallback>
 8005c6a:	e005      	b.n	8005c78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f96d 	bl	8005f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f97e 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d122      	bne.n	8005cd2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f003 0308 	and.w	r3, r3, #8
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d11b      	bne.n	8005cd2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f06f 0208 	mvn.w	r2, #8
 8005ca2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2204      	movs	r2, #4
 8005ca8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	f003 0303 	and.w	r3, r3, #3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f951 	bl	8005f60 <HAL_TIM_IC_CaptureCallback>
 8005cbe:	e005      	b.n	8005ccc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f943 	bl	8005f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f954 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f003 0310 	and.w	r3, r3, #16
 8005cdc:	2b10      	cmp	r3, #16
 8005cde:	d122      	bne.n	8005d26 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f003 0310 	and.w	r3, r3, #16
 8005cea:	2b10      	cmp	r3, #16
 8005cec:	d11b      	bne.n	8005d26 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f06f 0210 	mvn.w	r2, #16
 8005cf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2208      	movs	r2, #8
 8005cfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f927 	bl	8005f60 <HAL_TIM_IC_CaptureCallback>
 8005d12:	e005      	b.n	8005d20 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f919 	bl	8005f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f92a 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d10e      	bne.n	8005d52 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d107      	bne.n	8005d52 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f06f 0201 	mvn.w	r2, #1
 8005d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7fb f9af 	bl	80010b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5c:	2b80      	cmp	r3, #128	; 0x80
 8005d5e:	d10e      	bne.n	8005d7e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6a:	2b80      	cmp	r3, #128	; 0x80
 8005d6c:	d107      	bne.n	8005d7e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 facf 	bl	800631c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d88:	2b40      	cmp	r3, #64	; 0x40
 8005d8a:	d10e      	bne.n	8005daa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d96:	2b40      	cmp	r3, #64	; 0x40
 8005d98:	d107      	bne.n	8005daa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f8ef 	bl	8005f88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	f003 0320 	and.w	r3, r3, #32
 8005db4:	2b20      	cmp	r3, #32
 8005db6:	d10e      	bne.n	8005dd6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	f003 0320 	and.w	r3, r3, #32
 8005dc2:	2b20      	cmp	r3, #32
 8005dc4:	d107      	bne.n	8005dd6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f06f 0220 	mvn.w	r2, #32
 8005dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fa99 	bl	8006308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dd6:	bf00      	nop
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <HAL_TIM_ConfigClockSource+0x18>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e0a6      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x166>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2202      	movs	r2, #2
 8005e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e14:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e1c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	d067      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x120>
 8005e2e:	2b40      	cmp	r3, #64	; 0x40
 8005e30:	d80b      	bhi.n	8005e4a <HAL_TIM_ConfigClockSource+0x6c>
 8005e32:	2b10      	cmp	r3, #16
 8005e34:	d073      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0x140>
 8005e36:	2b10      	cmp	r3, #16
 8005e38:	d802      	bhi.n	8005e40 <HAL_TIM_ConfigClockSource+0x62>
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d06f      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005e3e:	e078      	b.n	8005f32 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	d06c      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0x140>
 8005e44:	2b30      	cmp	r3, #48	; 0x30
 8005e46:	d06a      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005e48:	e073      	b.n	8005f32 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e4a:	2b70      	cmp	r3, #112	; 0x70
 8005e4c:	d00d      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x8c>
 8005e4e:	2b70      	cmp	r3, #112	; 0x70
 8005e50:	d804      	bhi.n	8005e5c <HAL_TIM_ConfigClockSource+0x7e>
 8005e52:	2b50      	cmp	r3, #80	; 0x50
 8005e54:	d033      	beq.n	8005ebe <HAL_TIM_ConfigClockSource+0xe0>
 8005e56:	2b60      	cmp	r3, #96	; 0x60
 8005e58:	d041      	beq.n	8005ede <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005e5a:	e06a      	b.n	8005f32 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e60:	d066      	beq.n	8005f30 <HAL_TIM_ConfigClockSource+0x152>
 8005e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e66:	d017      	beq.n	8005e98 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005e68:	e063      	b.n	8005f32 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6818      	ldr	r0, [r3, #0]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	6899      	ldr	r1, [r3, #8]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f000 f9a9 	bl	80061d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	609a      	str	r2, [r3, #8]
      break;
 8005e96:	e04c      	b.n	8005f32 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6818      	ldr	r0, [r3, #0]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	6899      	ldr	r1, [r3, #8]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f000 f992 	bl	80061d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005eba:	609a      	str	r2, [r3, #8]
      break;
 8005ebc:	e039      	b.n	8005f32 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6818      	ldr	r0, [r3, #0]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	6859      	ldr	r1, [r3, #4]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f000 f906 	bl	80060dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2150      	movs	r1, #80	; 0x50
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 f95f 	bl	800619a <TIM_ITRx_SetConfig>
      break;
 8005edc:	e029      	b.n	8005f32 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6818      	ldr	r0, [r3, #0]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	6859      	ldr	r1, [r3, #4]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	461a      	mov	r2, r3
 8005eec:	f000 f925 	bl	800613a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2160      	movs	r1, #96	; 0x60
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 f94f 	bl	800619a <TIM_ITRx_SetConfig>
      break;
 8005efc:	e019      	b.n	8005f32 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6818      	ldr	r0, [r3, #0]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	6859      	ldr	r1, [r3, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f000 f8e6 	bl	80060dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2140      	movs	r1, #64	; 0x40
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 f93f 	bl	800619a <TIM_ITRx_SetConfig>
      break;
 8005f1c:	e009      	b.n	8005f32 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4619      	mov	r1, r3
 8005f28:	4610      	mov	r0, r2
 8005f2a:	f000 f936 	bl	800619a <TIM_ITRx_SetConfig>
      break;
 8005f2e:	e000      	b.n	8005f32 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005f30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a40      	ldr	r2, [pc, #256]	; (80060b0 <TIM_Base_SetConfig+0x114>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d013      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fba:	d00f      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a3d      	ldr	r2, [pc, #244]	; (80060b4 <TIM_Base_SetConfig+0x118>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00b      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a3c      	ldr	r2, [pc, #240]	; (80060b8 <TIM_Base_SetConfig+0x11c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d007      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a3b      	ldr	r2, [pc, #236]	; (80060bc <TIM_Base_SetConfig+0x120>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d003      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a3a      	ldr	r2, [pc, #232]	; (80060c0 <TIM_Base_SetConfig+0x124>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d108      	bne.n	8005fee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a2f      	ldr	r2, [pc, #188]	; (80060b0 <TIM_Base_SetConfig+0x114>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d02b      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffc:	d027      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a2c      	ldr	r2, [pc, #176]	; (80060b4 <TIM_Base_SetConfig+0x118>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d023      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a2b      	ldr	r2, [pc, #172]	; (80060b8 <TIM_Base_SetConfig+0x11c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d01f      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a2a      	ldr	r2, [pc, #168]	; (80060bc <TIM_Base_SetConfig+0x120>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d01b      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a29      	ldr	r2, [pc, #164]	; (80060c0 <TIM_Base_SetConfig+0x124>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d017      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a28      	ldr	r2, [pc, #160]	; (80060c4 <TIM_Base_SetConfig+0x128>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d013      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a27      	ldr	r2, [pc, #156]	; (80060c8 <TIM_Base_SetConfig+0x12c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00f      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a26      	ldr	r2, [pc, #152]	; (80060cc <TIM_Base_SetConfig+0x130>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00b      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a25      	ldr	r2, [pc, #148]	; (80060d0 <TIM_Base_SetConfig+0x134>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d007      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a24      	ldr	r2, [pc, #144]	; (80060d4 <TIM_Base_SetConfig+0x138>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d003      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a23      	ldr	r2, [pc, #140]	; (80060d8 <TIM_Base_SetConfig+0x13c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d108      	bne.n	8006060 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	4313      	orrs	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a0a      	ldr	r2, [pc, #40]	; (80060b0 <TIM_Base_SetConfig+0x114>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d003      	beq.n	8006094 <TIM_Base_SetConfig+0xf8>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a0c      	ldr	r2, [pc, #48]	; (80060c0 <TIM_Base_SetConfig+0x124>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d103      	bne.n	800609c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	691a      	ldr	r2, [r3, #16]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	615a      	str	r2, [r3, #20]
}
 80060a2:	bf00      	nop
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40010000 	.word	0x40010000
 80060b4:	40000400 	.word	0x40000400
 80060b8:	40000800 	.word	0x40000800
 80060bc:	40000c00 	.word	0x40000c00
 80060c0:	40010400 	.word	0x40010400
 80060c4:	40014000 	.word	0x40014000
 80060c8:	40014400 	.word	0x40014400
 80060cc:	40014800 	.word	0x40014800
 80060d0:	40001800 	.word	0x40001800
 80060d4:	40001c00 	.word	0x40001c00
 80060d8:	40002000 	.word	0x40002000

080060dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	f023 0201 	bic.w	r2, r3, #1
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	4313      	orrs	r3, r2
 8006110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f023 030a 	bic.w	r3, r3, #10
 8006118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	621a      	str	r2, [r3, #32]
}
 800612e:	bf00      	nop
 8006130:	371c      	adds	r7, #28
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800613a:	b480      	push	{r7}
 800613c:	b087      	sub	sp, #28
 800613e:	af00      	add	r7, sp, #0
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	f023 0210 	bic.w	r2, r3, #16
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006164:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	031b      	lsls	r3, r3, #12
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006176:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	011b      	lsls	r3, r3, #4
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	621a      	str	r2, [r3, #32]
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800619a:	b480      	push	{r7}
 800619c:	b085      	sub	sp, #20
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	f043 0307 	orr.w	r3, r3, #7
 80061bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	609a      	str	r2, [r3, #8]
}
 80061c4:	bf00      	nop
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b087      	sub	sp, #28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
 80061dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	021a      	lsls	r2, r3, #8
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	431a      	orrs	r2, r3
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	609a      	str	r2, [r3, #8]
}
 8006204:	bf00      	nop
 8006206:	371c      	adds	r7, #28
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006220:	2b01      	cmp	r3, #1
 8006222:	d101      	bne.n	8006228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006224:	2302      	movs	r3, #2
 8006226:	e05a      	b.n	80062de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	4313      	orrs	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a21      	ldr	r2, [pc, #132]	; (80062ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d022      	beq.n	80062b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006274:	d01d      	beq.n	80062b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a1d      	ldr	r2, [pc, #116]	; (80062f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d018      	beq.n	80062b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a1b      	ldr	r2, [pc, #108]	; (80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d013      	beq.n	80062b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a1a      	ldr	r2, [pc, #104]	; (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00e      	beq.n	80062b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a18      	ldr	r2, [pc, #96]	; (80062fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d009      	beq.n	80062b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a17      	ldr	r2, [pc, #92]	; (8006300 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d004      	beq.n	80062b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a15      	ldr	r2, [pc, #84]	; (8006304 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d10c      	bne.n	80062cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	40010000 	.word	0x40010000
 80062f0:	40000400 	.word	0x40000400
 80062f4:	40000800 	.word	0x40000800
 80062f8:	40000c00 	.word	0x40000c00
 80062fc:	40010400 	.word	0x40010400
 8006300:	40014000 	.word	0x40014000
 8006304:	40001800 	.word	0x40001800

08006308 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e03f      	b.n	80063c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d106      	bne.n	800635c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7fb faa8 	bl	80018ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2224      	movs	r2, #36	; 0x24
 8006360:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68da      	ldr	r2, [r3, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006372:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f829 	bl	80063cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	691a      	ldr	r2, [r3, #16]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006388:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	695a      	ldr	r2, [r3, #20]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006398:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68da      	ldr	r2, [r3, #12]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
	...

080063cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d0:	b085      	sub	sp, #20
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	431a      	orrs	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	4313      	orrs	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800640e:	f023 030c 	bic.w	r3, r3, #12
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	6812      	ldr	r2, [r2, #0]
 8006416:	68f9      	ldr	r1, [r7, #12]
 8006418:	430b      	orrs	r3, r1
 800641a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	699a      	ldr	r2, [r3, #24]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800643a:	f040 818b 	bne.w	8006754 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4ac1      	ldr	r2, [pc, #772]	; (8006748 <UART_SetConfig+0x37c>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d005      	beq.n	8006454 <UART_SetConfig+0x88>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4abf      	ldr	r2, [pc, #764]	; (800674c <UART_SetConfig+0x380>)
 800644e:	4293      	cmp	r3, r2
 8006450:	f040 80bd 	bne.w	80065ce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006454:	f7fe feba 	bl	80051cc <HAL_RCC_GetPCLK2Freq>
 8006458:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	461d      	mov	r5, r3
 800645e:	f04f 0600 	mov.w	r6, #0
 8006462:	46a8      	mov	r8, r5
 8006464:	46b1      	mov	r9, r6
 8006466:	eb18 0308 	adds.w	r3, r8, r8
 800646a:	eb49 0409 	adc.w	r4, r9, r9
 800646e:	4698      	mov	r8, r3
 8006470:	46a1      	mov	r9, r4
 8006472:	eb18 0805 	adds.w	r8, r8, r5
 8006476:	eb49 0906 	adc.w	r9, r9, r6
 800647a:	f04f 0100 	mov.w	r1, #0
 800647e:	f04f 0200 	mov.w	r2, #0
 8006482:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006486:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800648a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800648e:	4688      	mov	r8, r1
 8006490:	4691      	mov	r9, r2
 8006492:	eb18 0005 	adds.w	r0, r8, r5
 8006496:	eb49 0106 	adc.w	r1, r9, r6
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	461d      	mov	r5, r3
 80064a0:	f04f 0600 	mov.w	r6, #0
 80064a4:	196b      	adds	r3, r5, r5
 80064a6:	eb46 0406 	adc.w	r4, r6, r6
 80064aa:	461a      	mov	r2, r3
 80064ac:	4623      	mov	r3, r4
 80064ae:	f7f9 fe9d 	bl	80001ec <__aeabi_uldivmod>
 80064b2:	4603      	mov	r3, r0
 80064b4:	460c      	mov	r4, r1
 80064b6:	461a      	mov	r2, r3
 80064b8:	4ba5      	ldr	r3, [pc, #660]	; (8006750 <UART_SetConfig+0x384>)
 80064ba:	fba3 2302 	umull	r2, r3, r3, r2
 80064be:	095b      	lsrs	r3, r3, #5
 80064c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	461d      	mov	r5, r3
 80064c8:	f04f 0600 	mov.w	r6, #0
 80064cc:	46a9      	mov	r9, r5
 80064ce:	46b2      	mov	sl, r6
 80064d0:	eb19 0309 	adds.w	r3, r9, r9
 80064d4:	eb4a 040a 	adc.w	r4, sl, sl
 80064d8:	4699      	mov	r9, r3
 80064da:	46a2      	mov	sl, r4
 80064dc:	eb19 0905 	adds.w	r9, r9, r5
 80064e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80064e4:	f04f 0100 	mov.w	r1, #0
 80064e8:	f04f 0200 	mov.w	r2, #0
 80064ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064f8:	4689      	mov	r9, r1
 80064fa:	4692      	mov	sl, r2
 80064fc:	eb19 0005 	adds.w	r0, r9, r5
 8006500:	eb4a 0106 	adc.w	r1, sl, r6
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	461d      	mov	r5, r3
 800650a:	f04f 0600 	mov.w	r6, #0
 800650e:	196b      	adds	r3, r5, r5
 8006510:	eb46 0406 	adc.w	r4, r6, r6
 8006514:	461a      	mov	r2, r3
 8006516:	4623      	mov	r3, r4
 8006518:	f7f9 fe68 	bl	80001ec <__aeabi_uldivmod>
 800651c:	4603      	mov	r3, r0
 800651e:	460c      	mov	r4, r1
 8006520:	461a      	mov	r2, r3
 8006522:	4b8b      	ldr	r3, [pc, #556]	; (8006750 <UART_SetConfig+0x384>)
 8006524:	fba3 1302 	umull	r1, r3, r3, r2
 8006528:	095b      	lsrs	r3, r3, #5
 800652a:	2164      	movs	r1, #100	; 0x64
 800652c:	fb01 f303 	mul.w	r3, r1, r3
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	3332      	adds	r3, #50	; 0x32
 8006536:	4a86      	ldr	r2, [pc, #536]	; (8006750 <UART_SetConfig+0x384>)
 8006538:	fba2 2303 	umull	r2, r3, r2, r3
 800653c:	095b      	lsrs	r3, r3, #5
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006544:	4498      	add	r8, r3
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	461d      	mov	r5, r3
 800654a:	f04f 0600 	mov.w	r6, #0
 800654e:	46a9      	mov	r9, r5
 8006550:	46b2      	mov	sl, r6
 8006552:	eb19 0309 	adds.w	r3, r9, r9
 8006556:	eb4a 040a 	adc.w	r4, sl, sl
 800655a:	4699      	mov	r9, r3
 800655c:	46a2      	mov	sl, r4
 800655e:	eb19 0905 	adds.w	r9, r9, r5
 8006562:	eb4a 0a06 	adc.w	sl, sl, r6
 8006566:	f04f 0100 	mov.w	r1, #0
 800656a:	f04f 0200 	mov.w	r2, #0
 800656e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006572:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006576:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800657a:	4689      	mov	r9, r1
 800657c:	4692      	mov	sl, r2
 800657e:	eb19 0005 	adds.w	r0, r9, r5
 8006582:	eb4a 0106 	adc.w	r1, sl, r6
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	461d      	mov	r5, r3
 800658c:	f04f 0600 	mov.w	r6, #0
 8006590:	196b      	adds	r3, r5, r5
 8006592:	eb46 0406 	adc.w	r4, r6, r6
 8006596:	461a      	mov	r2, r3
 8006598:	4623      	mov	r3, r4
 800659a:	f7f9 fe27 	bl	80001ec <__aeabi_uldivmod>
 800659e:	4603      	mov	r3, r0
 80065a0:	460c      	mov	r4, r1
 80065a2:	461a      	mov	r2, r3
 80065a4:	4b6a      	ldr	r3, [pc, #424]	; (8006750 <UART_SetConfig+0x384>)
 80065a6:	fba3 1302 	umull	r1, r3, r3, r2
 80065aa:	095b      	lsrs	r3, r3, #5
 80065ac:	2164      	movs	r1, #100	; 0x64
 80065ae:	fb01 f303 	mul.w	r3, r1, r3
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	00db      	lsls	r3, r3, #3
 80065b6:	3332      	adds	r3, #50	; 0x32
 80065b8:	4a65      	ldr	r2, [pc, #404]	; (8006750 <UART_SetConfig+0x384>)
 80065ba:	fba2 2303 	umull	r2, r3, r2, r3
 80065be:	095b      	lsrs	r3, r3, #5
 80065c0:	f003 0207 	and.w	r2, r3, #7
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4442      	add	r2, r8
 80065ca:	609a      	str	r2, [r3, #8]
 80065cc:	e26f      	b.n	8006aae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065ce:	f7fe fde9 	bl	80051a4 <HAL_RCC_GetPCLK1Freq>
 80065d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	461d      	mov	r5, r3
 80065d8:	f04f 0600 	mov.w	r6, #0
 80065dc:	46a8      	mov	r8, r5
 80065de:	46b1      	mov	r9, r6
 80065e0:	eb18 0308 	adds.w	r3, r8, r8
 80065e4:	eb49 0409 	adc.w	r4, r9, r9
 80065e8:	4698      	mov	r8, r3
 80065ea:	46a1      	mov	r9, r4
 80065ec:	eb18 0805 	adds.w	r8, r8, r5
 80065f0:	eb49 0906 	adc.w	r9, r9, r6
 80065f4:	f04f 0100 	mov.w	r1, #0
 80065f8:	f04f 0200 	mov.w	r2, #0
 80065fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006600:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006604:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006608:	4688      	mov	r8, r1
 800660a:	4691      	mov	r9, r2
 800660c:	eb18 0005 	adds.w	r0, r8, r5
 8006610:	eb49 0106 	adc.w	r1, r9, r6
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	461d      	mov	r5, r3
 800661a:	f04f 0600 	mov.w	r6, #0
 800661e:	196b      	adds	r3, r5, r5
 8006620:	eb46 0406 	adc.w	r4, r6, r6
 8006624:	461a      	mov	r2, r3
 8006626:	4623      	mov	r3, r4
 8006628:	f7f9 fde0 	bl	80001ec <__aeabi_uldivmod>
 800662c:	4603      	mov	r3, r0
 800662e:	460c      	mov	r4, r1
 8006630:	461a      	mov	r2, r3
 8006632:	4b47      	ldr	r3, [pc, #284]	; (8006750 <UART_SetConfig+0x384>)
 8006634:	fba3 2302 	umull	r2, r3, r3, r2
 8006638:	095b      	lsrs	r3, r3, #5
 800663a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	461d      	mov	r5, r3
 8006642:	f04f 0600 	mov.w	r6, #0
 8006646:	46a9      	mov	r9, r5
 8006648:	46b2      	mov	sl, r6
 800664a:	eb19 0309 	adds.w	r3, r9, r9
 800664e:	eb4a 040a 	adc.w	r4, sl, sl
 8006652:	4699      	mov	r9, r3
 8006654:	46a2      	mov	sl, r4
 8006656:	eb19 0905 	adds.w	r9, r9, r5
 800665a:	eb4a 0a06 	adc.w	sl, sl, r6
 800665e:	f04f 0100 	mov.w	r1, #0
 8006662:	f04f 0200 	mov.w	r2, #0
 8006666:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800666a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800666e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006672:	4689      	mov	r9, r1
 8006674:	4692      	mov	sl, r2
 8006676:	eb19 0005 	adds.w	r0, r9, r5
 800667a:	eb4a 0106 	adc.w	r1, sl, r6
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	461d      	mov	r5, r3
 8006684:	f04f 0600 	mov.w	r6, #0
 8006688:	196b      	adds	r3, r5, r5
 800668a:	eb46 0406 	adc.w	r4, r6, r6
 800668e:	461a      	mov	r2, r3
 8006690:	4623      	mov	r3, r4
 8006692:	f7f9 fdab 	bl	80001ec <__aeabi_uldivmod>
 8006696:	4603      	mov	r3, r0
 8006698:	460c      	mov	r4, r1
 800669a:	461a      	mov	r2, r3
 800669c:	4b2c      	ldr	r3, [pc, #176]	; (8006750 <UART_SetConfig+0x384>)
 800669e:	fba3 1302 	umull	r1, r3, r3, r2
 80066a2:	095b      	lsrs	r3, r3, #5
 80066a4:	2164      	movs	r1, #100	; 0x64
 80066a6:	fb01 f303 	mul.w	r3, r1, r3
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	00db      	lsls	r3, r3, #3
 80066ae:	3332      	adds	r3, #50	; 0x32
 80066b0:	4a27      	ldr	r2, [pc, #156]	; (8006750 <UART_SetConfig+0x384>)
 80066b2:	fba2 2303 	umull	r2, r3, r2, r3
 80066b6:	095b      	lsrs	r3, r3, #5
 80066b8:	005b      	lsls	r3, r3, #1
 80066ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066be:	4498      	add	r8, r3
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	461d      	mov	r5, r3
 80066c4:	f04f 0600 	mov.w	r6, #0
 80066c8:	46a9      	mov	r9, r5
 80066ca:	46b2      	mov	sl, r6
 80066cc:	eb19 0309 	adds.w	r3, r9, r9
 80066d0:	eb4a 040a 	adc.w	r4, sl, sl
 80066d4:	4699      	mov	r9, r3
 80066d6:	46a2      	mov	sl, r4
 80066d8:	eb19 0905 	adds.w	r9, r9, r5
 80066dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80066e0:	f04f 0100 	mov.w	r1, #0
 80066e4:	f04f 0200 	mov.w	r2, #0
 80066e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066f4:	4689      	mov	r9, r1
 80066f6:	4692      	mov	sl, r2
 80066f8:	eb19 0005 	adds.w	r0, r9, r5
 80066fc:	eb4a 0106 	adc.w	r1, sl, r6
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	461d      	mov	r5, r3
 8006706:	f04f 0600 	mov.w	r6, #0
 800670a:	196b      	adds	r3, r5, r5
 800670c:	eb46 0406 	adc.w	r4, r6, r6
 8006710:	461a      	mov	r2, r3
 8006712:	4623      	mov	r3, r4
 8006714:	f7f9 fd6a 	bl	80001ec <__aeabi_uldivmod>
 8006718:	4603      	mov	r3, r0
 800671a:	460c      	mov	r4, r1
 800671c:	461a      	mov	r2, r3
 800671e:	4b0c      	ldr	r3, [pc, #48]	; (8006750 <UART_SetConfig+0x384>)
 8006720:	fba3 1302 	umull	r1, r3, r3, r2
 8006724:	095b      	lsrs	r3, r3, #5
 8006726:	2164      	movs	r1, #100	; 0x64
 8006728:	fb01 f303 	mul.w	r3, r1, r3
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	3332      	adds	r3, #50	; 0x32
 8006732:	4a07      	ldr	r2, [pc, #28]	; (8006750 <UART_SetConfig+0x384>)
 8006734:	fba2 2303 	umull	r2, r3, r2, r3
 8006738:	095b      	lsrs	r3, r3, #5
 800673a:	f003 0207 	and.w	r2, r3, #7
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4442      	add	r2, r8
 8006744:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006746:	e1b2      	b.n	8006aae <UART_SetConfig+0x6e2>
 8006748:	40011000 	.word	0x40011000
 800674c:	40011400 	.word	0x40011400
 8006750:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4ad7      	ldr	r2, [pc, #860]	; (8006ab8 <UART_SetConfig+0x6ec>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d005      	beq.n	800676a <UART_SetConfig+0x39e>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4ad6      	ldr	r2, [pc, #856]	; (8006abc <UART_SetConfig+0x6f0>)
 8006764:	4293      	cmp	r3, r2
 8006766:	f040 80d1 	bne.w	800690c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800676a:	f7fe fd2f 	bl	80051cc <HAL_RCC_GetPCLK2Freq>
 800676e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	469a      	mov	sl, r3
 8006774:	f04f 0b00 	mov.w	fp, #0
 8006778:	46d0      	mov	r8, sl
 800677a:	46d9      	mov	r9, fp
 800677c:	eb18 0308 	adds.w	r3, r8, r8
 8006780:	eb49 0409 	adc.w	r4, r9, r9
 8006784:	4698      	mov	r8, r3
 8006786:	46a1      	mov	r9, r4
 8006788:	eb18 080a 	adds.w	r8, r8, sl
 800678c:	eb49 090b 	adc.w	r9, r9, fp
 8006790:	f04f 0100 	mov.w	r1, #0
 8006794:	f04f 0200 	mov.w	r2, #0
 8006798:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800679c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80067a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80067a4:	4688      	mov	r8, r1
 80067a6:	4691      	mov	r9, r2
 80067a8:	eb1a 0508 	adds.w	r5, sl, r8
 80067ac:	eb4b 0609 	adc.w	r6, fp, r9
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4619      	mov	r1, r3
 80067b6:	f04f 0200 	mov.w	r2, #0
 80067ba:	f04f 0300 	mov.w	r3, #0
 80067be:	f04f 0400 	mov.w	r4, #0
 80067c2:	0094      	lsls	r4, r2, #2
 80067c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067c8:	008b      	lsls	r3, r1, #2
 80067ca:	461a      	mov	r2, r3
 80067cc:	4623      	mov	r3, r4
 80067ce:	4628      	mov	r0, r5
 80067d0:	4631      	mov	r1, r6
 80067d2:	f7f9 fd0b 	bl	80001ec <__aeabi_uldivmod>
 80067d6:	4603      	mov	r3, r0
 80067d8:	460c      	mov	r4, r1
 80067da:	461a      	mov	r2, r3
 80067dc:	4bb8      	ldr	r3, [pc, #736]	; (8006ac0 <UART_SetConfig+0x6f4>)
 80067de:	fba3 2302 	umull	r2, r3, r3, r2
 80067e2:	095b      	lsrs	r3, r3, #5
 80067e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	469b      	mov	fp, r3
 80067ec:	f04f 0c00 	mov.w	ip, #0
 80067f0:	46d9      	mov	r9, fp
 80067f2:	46e2      	mov	sl, ip
 80067f4:	eb19 0309 	adds.w	r3, r9, r9
 80067f8:	eb4a 040a 	adc.w	r4, sl, sl
 80067fc:	4699      	mov	r9, r3
 80067fe:	46a2      	mov	sl, r4
 8006800:	eb19 090b 	adds.w	r9, r9, fp
 8006804:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006808:	f04f 0100 	mov.w	r1, #0
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006814:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006818:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800681c:	4689      	mov	r9, r1
 800681e:	4692      	mov	sl, r2
 8006820:	eb1b 0509 	adds.w	r5, fp, r9
 8006824:	eb4c 060a 	adc.w	r6, ip, sl
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	4619      	mov	r1, r3
 800682e:	f04f 0200 	mov.w	r2, #0
 8006832:	f04f 0300 	mov.w	r3, #0
 8006836:	f04f 0400 	mov.w	r4, #0
 800683a:	0094      	lsls	r4, r2, #2
 800683c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006840:	008b      	lsls	r3, r1, #2
 8006842:	461a      	mov	r2, r3
 8006844:	4623      	mov	r3, r4
 8006846:	4628      	mov	r0, r5
 8006848:	4631      	mov	r1, r6
 800684a:	f7f9 fccf 	bl	80001ec <__aeabi_uldivmod>
 800684e:	4603      	mov	r3, r0
 8006850:	460c      	mov	r4, r1
 8006852:	461a      	mov	r2, r3
 8006854:	4b9a      	ldr	r3, [pc, #616]	; (8006ac0 <UART_SetConfig+0x6f4>)
 8006856:	fba3 1302 	umull	r1, r3, r3, r2
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	2164      	movs	r1, #100	; 0x64
 800685e:	fb01 f303 	mul.w	r3, r1, r3
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	3332      	adds	r3, #50	; 0x32
 8006868:	4a95      	ldr	r2, [pc, #596]	; (8006ac0 <UART_SetConfig+0x6f4>)
 800686a:	fba2 2303 	umull	r2, r3, r2, r3
 800686e:	095b      	lsrs	r3, r3, #5
 8006870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006874:	4498      	add	r8, r3
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	469b      	mov	fp, r3
 800687a:	f04f 0c00 	mov.w	ip, #0
 800687e:	46d9      	mov	r9, fp
 8006880:	46e2      	mov	sl, ip
 8006882:	eb19 0309 	adds.w	r3, r9, r9
 8006886:	eb4a 040a 	adc.w	r4, sl, sl
 800688a:	4699      	mov	r9, r3
 800688c:	46a2      	mov	sl, r4
 800688e:	eb19 090b 	adds.w	r9, r9, fp
 8006892:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006896:	f04f 0100 	mov.w	r1, #0
 800689a:	f04f 0200 	mov.w	r2, #0
 800689e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068aa:	4689      	mov	r9, r1
 80068ac:	4692      	mov	sl, r2
 80068ae:	eb1b 0509 	adds.w	r5, fp, r9
 80068b2:	eb4c 060a 	adc.w	r6, ip, sl
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	4619      	mov	r1, r3
 80068bc:	f04f 0200 	mov.w	r2, #0
 80068c0:	f04f 0300 	mov.w	r3, #0
 80068c4:	f04f 0400 	mov.w	r4, #0
 80068c8:	0094      	lsls	r4, r2, #2
 80068ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068ce:	008b      	lsls	r3, r1, #2
 80068d0:	461a      	mov	r2, r3
 80068d2:	4623      	mov	r3, r4
 80068d4:	4628      	mov	r0, r5
 80068d6:	4631      	mov	r1, r6
 80068d8:	f7f9 fc88 	bl	80001ec <__aeabi_uldivmod>
 80068dc:	4603      	mov	r3, r0
 80068de:	460c      	mov	r4, r1
 80068e0:	461a      	mov	r2, r3
 80068e2:	4b77      	ldr	r3, [pc, #476]	; (8006ac0 <UART_SetConfig+0x6f4>)
 80068e4:	fba3 1302 	umull	r1, r3, r3, r2
 80068e8:	095b      	lsrs	r3, r3, #5
 80068ea:	2164      	movs	r1, #100	; 0x64
 80068ec:	fb01 f303 	mul.w	r3, r1, r3
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	011b      	lsls	r3, r3, #4
 80068f4:	3332      	adds	r3, #50	; 0x32
 80068f6:	4a72      	ldr	r2, [pc, #456]	; (8006ac0 <UART_SetConfig+0x6f4>)
 80068f8:	fba2 2303 	umull	r2, r3, r2, r3
 80068fc:	095b      	lsrs	r3, r3, #5
 80068fe:	f003 020f 	and.w	r2, r3, #15
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4442      	add	r2, r8
 8006908:	609a      	str	r2, [r3, #8]
 800690a:	e0d0      	b.n	8006aae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800690c:	f7fe fc4a 	bl	80051a4 <HAL_RCC_GetPCLK1Freq>
 8006910:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	469a      	mov	sl, r3
 8006916:	f04f 0b00 	mov.w	fp, #0
 800691a:	46d0      	mov	r8, sl
 800691c:	46d9      	mov	r9, fp
 800691e:	eb18 0308 	adds.w	r3, r8, r8
 8006922:	eb49 0409 	adc.w	r4, r9, r9
 8006926:	4698      	mov	r8, r3
 8006928:	46a1      	mov	r9, r4
 800692a:	eb18 080a 	adds.w	r8, r8, sl
 800692e:	eb49 090b 	adc.w	r9, r9, fp
 8006932:	f04f 0100 	mov.w	r1, #0
 8006936:	f04f 0200 	mov.w	r2, #0
 800693a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800693e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006942:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006946:	4688      	mov	r8, r1
 8006948:	4691      	mov	r9, r2
 800694a:	eb1a 0508 	adds.w	r5, sl, r8
 800694e:	eb4b 0609 	adc.w	r6, fp, r9
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	4619      	mov	r1, r3
 8006958:	f04f 0200 	mov.w	r2, #0
 800695c:	f04f 0300 	mov.w	r3, #0
 8006960:	f04f 0400 	mov.w	r4, #0
 8006964:	0094      	lsls	r4, r2, #2
 8006966:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800696a:	008b      	lsls	r3, r1, #2
 800696c:	461a      	mov	r2, r3
 800696e:	4623      	mov	r3, r4
 8006970:	4628      	mov	r0, r5
 8006972:	4631      	mov	r1, r6
 8006974:	f7f9 fc3a 	bl	80001ec <__aeabi_uldivmod>
 8006978:	4603      	mov	r3, r0
 800697a:	460c      	mov	r4, r1
 800697c:	461a      	mov	r2, r3
 800697e:	4b50      	ldr	r3, [pc, #320]	; (8006ac0 <UART_SetConfig+0x6f4>)
 8006980:	fba3 2302 	umull	r2, r3, r3, r2
 8006984:	095b      	lsrs	r3, r3, #5
 8006986:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	469b      	mov	fp, r3
 800698e:	f04f 0c00 	mov.w	ip, #0
 8006992:	46d9      	mov	r9, fp
 8006994:	46e2      	mov	sl, ip
 8006996:	eb19 0309 	adds.w	r3, r9, r9
 800699a:	eb4a 040a 	adc.w	r4, sl, sl
 800699e:	4699      	mov	r9, r3
 80069a0:	46a2      	mov	sl, r4
 80069a2:	eb19 090b 	adds.w	r9, r9, fp
 80069a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80069aa:	f04f 0100 	mov.w	r1, #0
 80069ae:	f04f 0200 	mov.w	r2, #0
 80069b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069be:	4689      	mov	r9, r1
 80069c0:	4692      	mov	sl, r2
 80069c2:	eb1b 0509 	adds.w	r5, fp, r9
 80069c6:	eb4c 060a 	adc.w	r6, ip, sl
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	4619      	mov	r1, r3
 80069d0:	f04f 0200 	mov.w	r2, #0
 80069d4:	f04f 0300 	mov.w	r3, #0
 80069d8:	f04f 0400 	mov.w	r4, #0
 80069dc:	0094      	lsls	r4, r2, #2
 80069de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069e2:	008b      	lsls	r3, r1, #2
 80069e4:	461a      	mov	r2, r3
 80069e6:	4623      	mov	r3, r4
 80069e8:	4628      	mov	r0, r5
 80069ea:	4631      	mov	r1, r6
 80069ec:	f7f9 fbfe 	bl	80001ec <__aeabi_uldivmod>
 80069f0:	4603      	mov	r3, r0
 80069f2:	460c      	mov	r4, r1
 80069f4:	461a      	mov	r2, r3
 80069f6:	4b32      	ldr	r3, [pc, #200]	; (8006ac0 <UART_SetConfig+0x6f4>)
 80069f8:	fba3 1302 	umull	r1, r3, r3, r2
 80069fc:	095b      	lsrs	r3, r3, #5
 80069fe:	2164      	movs	r1, #100	; 0x64
 8006a00:	fb01 f303 	mul.w	r3, r1, r3
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	011b      	lsls	r3, r3, #4
 8006a08:	3332      	adds	r3, #50	; 0x32
 8006a0a:	4a2d      	ldr	r2, [pc, #180]	; (8006ac0 <UART_SetConfig+0x6f4>)
 8006a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a10:	095b      	lsrs	r3, r3, #5
 8006a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a16:	4498      	add	r8, r3
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	469b      	mov	fp, r3
 8006a1c:	f04f 0c00 	mov.w	ip, #0
 8006a20:	46d9      	mov	r9, fp
 8006a22:	46e2      	mov	sl, ip
 8006a24:	eb19 0309 	adds.w	r3, r9, r9
 8006a28:	eb4a 040a 	adc.w	r4, sl, sl
 8006a2c:	4699      	mov	r9, r3
 8006a2e:	46a2      	mov	sl, r4
 8006a30:	eb19 090b 	adds.w	r9, r9, fp
 8006a34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a38:	f04f 0100 	mov.w	r1, #0
 8006a3c:	f04f 0200 	mov.w	r2, #0
 8006a40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a4c:	4689      	mov	r9, r1
 8006a4e:	4692      	mov	sl, r2
 8006a50:	eb1b 0509 	adds.w	r5, fp, r9
 8006a54:	eb4c 060a 	adc.w	r6, ip, sl
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	f04f 0200 	mov.w	r2, #0
 8006a62:	f04f 0300 	mov.w	r3, #0
 8006a66:	f04f 0400 	mov.w	r4, #0
 8006a6a:	0094      	lsls	r4, r2, #2
 8006a6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a70:	008b      	lsls	r3, r1, #2
 8006a72:	461a      	mov	r2, r3
 8006a74:	4623      	mov	r3, r4
 8006a76:	4628      	mov	r0, r5
 8006a78:	4631      	mov	r1, r6
 8006a7a:	f7f9 fbb7 	bl	80001ec <__aeabi_uldivmod>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	460c      	mov	r4, r1
 8006a82:	461a      	mov	r2, r3
 8006a84:	4b0e      	ldr	r3, [pc, #56]	; (8006ac0 <UART_SetConfig+0x6f4>)
 8006a86:	fba3 1302 	umull	r1, r3, r3, r2
 8006a8a:	095b      	lsrs	r3, r3, #5
 8006a8c:	2164      	movs	r1, #100	; 0x64
 8006a8e:	fb01 f303 	mul.w	r3, r1, r3
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	011b      	lsls	r3, r3, #4
 8006a96:	3332      	adds	r3, #50	; 0x32
 8006a98:	4a09      	ldr	r2, [pc, #36]	; (8006ac0 <UART_SetConfig+0x6f4>)
 8006a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9e:	095b      	lsrs	r3, r3, #5
 8006aa0:	f003 020f 	and.w	r2, r3, #15
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4442      	add	r2, r8
 8006aaa:	609a      	str	r2, [r3, #8]
}
 8006aac:	e7ff      	b.n	8006aae <UART_SetConfig+0x6e2>
 8006aae:	bf00      	nop
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab8:	40011000 	.word	0x40011000
 8006abc:	40011400 	.word	0x40011400
 8006ac0:	51eb851f 	.word	0x51eb851f

08006ac4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d029      	beq.n	8006b32 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006aea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006aee:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006af8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8006afe:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8006b04:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8006b0a:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8006b10:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8006b16:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8006b1c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8006b22:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	e034      	b.n	8006b9c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b3e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006b48:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006b4e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006b62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b66:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006b70:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8006b76:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8006b7c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8006b82:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006b88:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b087      	sub	sp, #28
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	60f8      	str	r0, [r7, #12]
 8006bb2:	60b9      	str	r1, [r7, #8]
 8006bb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d02e      	beq.n	8006c22 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006bd0:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006be0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	3b01      	subs	r3, #1
 8006be8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006bea:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006bf4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006bfe:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	3b01      	subs	r3, #1
 8006c06:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006c08:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006c12:	4313      	orrs	r3, r2
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	609a      	str	r2, [r3, #8]
 8006c20:	e03b      	b.n	8006c9a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c32:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006c44:	4313      	orrs	r3, r2
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006c58:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	3b01      	subs	r3, #1
 8006c66:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006c68:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006c72:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006c7c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	3b01      	subs	r3, #1
 8006c84:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006c86:	4313      	orrs	r3, r2
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	371c      	adds	r7, #28
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ca8:	b084      	sub	sp, #16
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b084      	sub	sp, #16
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	f107 001c 	add.w	r0, r7, #28
 8006cb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d122      	bne.n	8006d06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d105      	bne.n	8006cfa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f902 	bl	8006f04 <USB_CoreReset>
 8006d00:	4603      	mov	r3, r0
 8006d02:	73fb      	strb	r3, [r7, #15]
 8006d04:	e01a      	b.n	8006d3c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f8f6 	bl	8006f04 <USB_CoreReset>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d106      	bne.n	8006d30 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	639a      	str	r2, [r3, #56]	; 0x38
 8006d2e:	e005      	b.n	8006d3c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d10b      	bne.n	8006d5a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f043 0206 	orr.w	r2, r3, #6
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f043 0220 	orr.w	r2, r3, #32
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d66:	b004      	add	sp, #16
 8006d68:	4770      	bx	lr

08006d6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f023 0201 	bic.w	r2, r3, #1
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	460b      	mov	r3, r1
 8006d96:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006da4:	78fb      	ldrb	r3, [r7, #3]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d106      	bne.n	8006db8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	60da      	str	r2, [r3, #12]
 8006db6:	e00b      	b.n	8006dd0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006db8:	78fb      	ldrb	r3, [r7, #3]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d106      	bne.n	8006dcc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	60da      	str	r2, [r3, #12]
 8006dca:	e001      	b.n	8006dd0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e003      	b.n	8006dd8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006dd0:	2032      	movs	r0, #50	; 0x32
 8006dd2:	f7fa ffe1 	bl	8001d98 <HAL_Delay>

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	019b      	lsls	r3, r3, #6
 8006df2:	f043 0220 	orr.w	r2, r3, #32
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4a09      	ldr	r2, [pc, #36]	; (8006e28 <USB_FlushTxFifo+0x48>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d901      	bls.n	8006e0c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e006      	b.n	8006e1a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	f003 0320 	and.w	r3, r3, #32
 8006e14:	2b20      	cmp	r3, #32
 8006e16:	d0f0      	beq.n	8006dfa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	00030d40 	.word	0x00030d40

08006e2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006e34:	2300      	movs	r3, #0
 8006e36:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2210      	movs	r2, #16
 8006e3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	3301      	adds	r3, #1
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4a09      	ldr	r2, [pc, #36]	; (8006e6c <USB_FlushRxFifo+0x40>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d901      	bls.n	8006e50 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e006      	b.n	8006e5e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	f003 0310 	and.w	r3, r3, #16
 8006e58:	2b10      	cmp	r3, #16
 8006e5a:	d0f0      	beq.n	8006e3e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	00030d40 	.word	0x00030d40

08006e70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b089      	sub	sp, #36	; 0x24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006e86:	88fb      	ldrh	r3, [r7, #6]
 8006e88:	3303      	adds	r3, #3
 8006e8a:	089b      	lsrs	r3, r3, #2
 8006e8c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006e8e:	2300      	movs	r3, #0
 8006e90:	61bb      	str	r3, [r7, #24]
 8006e92:	e00b      	b.n	8006eac <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	3304      	adds	r3, #4
 8006ea4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	61bb      	str	r3, [r7, #24]
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d3ef      	bcc.n	8006e94 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006eb4:	69fb      	ldr	r3, [r7, #28]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3724      	adds	r7, #36	; 0x24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b085      	sub	sp, #20
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006eda:	68fb      	ldr	r3, [r7, #12]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	f003 0301 	and.w	r3, r3, #1
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3301      	adds	r3, #1
 8006f14:	60fb      	str	r3, [r7, #12]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	4a13      	ldr	r2, [pc, #76]	; (8006f68 <USB_CoreReset+0x64>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d901      	bls.n	8006f22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e01b      	b.n	8006f5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	daf2      	bge.n	8006f10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	f043 0201 	orr.w	r2, r3, #1
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4a09      	ldr	r2, [pc, #36]	; (8006f68 <USB_CoreReset+0x64>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d901      	bls.n	8006f4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e006      	b.n	8006f5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d0f0      	beq.n	8006f3a <USB_CoreReset+0x36>

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	00030d40 	.word	0x00030d40

08006f6c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f6c:	b084      	sub	sp, #16
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b084      	sub	sp, #16
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	f107 001c 	add.w	r0, r7, #28
 8006f7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f88:	461a      	mov	r2, r3
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006faa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d018      	beq.n	8006ff0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d10a      	bne.n	8006fda <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fd2:	f043 0304 	orr.w	r3, r3, #4
 8006fd6:	6013      	str	r3, [r2, #0]
 8006fd8:	e014      	b.n	8007004 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fe8:	f023 0304 	bic.w	r3, r3, #4
 8006fec:	6013      	str	r3, [r2, #0]
 8006fee:	e009      	b.n	8007004 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ffe:	f023 0304 	bic.w	r3, r3, #4
 8007002:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007004:	2110      	movs	r1, #16
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7ff feea 	bl	8006de0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f7ff ff0d 	bl	8006e2c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007012:	2300      	movs	r3, #0
 8007014:	60fb      	str	r3, [r7, #12]
 8007016:	e015      	b.n	8007044 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	4413      	add	r3, r2
 8007020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007024:	461a      	mov	r2, r3
 8007026:	f04f 33ff 	mov.w	r3, #4294967295
 800702a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	4413      	add	r3, r2
 8007034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007038:	461a      	mov	r2, r3
 800703a:	2300      	movs	r3, #0
 800703c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	3301      	adds	r3, #1
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	429a      	cmp	r2, r3
 800704a:	d3e5      	bcc.n	8007018 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800704c:	2101      	movs	r1, #1
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f882 	bl	8007158 <USB_DriveVbus>

  HAL_Delay(200U);
 8007054:	20c8      	movs	r0, #200	; 0xc8
 8007056:	f7fa fe9f 	bl	8001d98 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f04f 32ff 	mov.w	r2, #4294967295
 8007066:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00b      	beq.n	800708c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800707a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a14      	ldr	r2, [pc, #80]	; (80070d0 <USB_HostInit+0x164>)
 8007080:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a13      	ldr	r2, [pc, #76]	; (80070d4 <USB_HostInit+0x168>)
 8007086:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800708a:	e009      	b.n	80070a0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2280      	movs	r2, #128	; 0x80
 8007090:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a10      	ldr	r2, [pc, #64]	; (80070d8 <USB_HostInit+0x16c>)
 8007096:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a10      	ldr	r2, [pc, #64]	; (80070dc <USB_HostInit+0x170>)
 800709c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d105      	bne.n	80070b2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	f043 0210 	orr.w	r2, r3, #16
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	699a      	ldr	r2, [r3, #24]
 80070b6:	4b0a      	ldr	r3, [pc, #40]	; (80070e0 <USB_HostInit+0x174>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070ca:	b004      	add	sp, #16
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	01000200 	.word	0x01000200
 80070d4:	00e00300 	.word	0x00e00300
 80070d8:	00600080 	.word	0x00600080
 80070dc:	004000e0 	.word	0x004000e0
 80070e0:	a3200008 	.word	0xa3200008

080070e4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	460b      	mov	r3, r1
 80070ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007102:	f023 0303 	bic.w	r3, r3, #3
 8007106:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	78fb      	ldrb	r3, [r7, #3]
 8007112:	f003 0303 	and.w	r3, r3, #3
 8007116:	68f9      	ldr	r1, [r7, #12]
 8007118:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800711c:	4313      	orrs	r3, r2
 800711e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d107      	bne.n	8007136 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800712c:	461a      	mov	r2, r3
 800712e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007132:	6053      	str	r3, [r2, #4]
 8007134:	e009      	b.n	800714a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007136:	78fb      	ldrb	r3, [r7, #3]
 8007138:	2b02      	cmp	r3, #2
 800713a:	d106      	bne.n	800714a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007142:	461a      	mov	r2, r3
 8007144:	f241 7370 	movw	r3, #6000	; 0x1770
 8007148:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	460b      	mov	r3, r1
 8007162:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007168:	2300      	movs	r3, #0
 800716a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800717c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d109      	bne.n	800719c <USB_DriveVbus+0x44>
 8007188:	78fb      	ldrb	r3, [r7, #3]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d106      	bne.n	800719c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007196:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800719a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071a6:	d109      	bne.n	80071bc <USB_DriveVbus+0x64>
 80071a8:	78fb      	ldrb	r3, [r7, #3]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d106      	bne.n	80071bc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80071b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071ba:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b085      	sub	sp, #20
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	b29b      	uxth	r3, r3
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b087      	sub	sp, #28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	460b      	mov	r3, r1
 80071f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80071fc:	78fb      	ldrb	r3, [r7, #3]
 80071fe:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	4413      	add	r3, r2
 800720c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	0c9b      	lsrs	r3, r3, #18
 8007214:	f003 0303 	and.w	r3, r3, #3
 8007218:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <USB_HC_Halt+0x3a>
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2b02      	cmp	r3, #2
 8007224:	d16c      	bne.n	8007300 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	4413      	add	r3, r2
 800722e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	0151      	lsls	r1, r2, #5
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	440a      	add	r2, r1
 800723c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007240:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007244:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d143      	bne.n	80072da <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	015a      	lsls	r2, r3, #5
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	4413      	add	r3, r2
 800725a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	0151      	lsls	r1, r2, #5
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	440a      	add	r2, r1
 8007268:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800726c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007270:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	015a      	lsls	r2, r3, #5
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	4413      	add	r3, r2
 800727a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	0151      	lsls	r1, r2, #5
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	440a      	add	r2, r1
 8007288:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800728c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007290:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	4413      	add	r3, r2
 800729a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	0151      	lsls	r1, r2, #5
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	440a      	add	r2, r1
 80072a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072b0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	3301      	adds	r3, #1
 80072b6:	617b      	str	r3, [r7, #20]
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072be:	d81d      	bhi.n	80072fc <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072d6:	d0ec      	beq.n	80072b2 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80072d8:	e080      	b.n	80073dc <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	0151      	lsls	r1, r2, #5
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	440a      	add	r2, r1
 80072f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072f8:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80072fa:	e06f      	b.n	80073dc <USB_HC_Halt+0x1f0>
          break;
 80072fc:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80072fe:	e06d      	b.n	80073dc <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	4413      	add	r3, r2
 8007308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	0151      	lsls	r1, r2, #5
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	440a      	add	r2, r1
 8007316:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800731a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800731e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d143      	bne.n	80073b8 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	4413      	add	r3, r2
 8007338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	0151      	lsls	r1, r2, #5
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	440a      	add	r2, r1
 8007346:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800734a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800734e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	4413      	add	r3, r2
 8007358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	0151      	lsls	r1, r2, #5
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	440a      	add	r2, r1
 8007366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800736a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800736e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	4413      	add	r3, r2
 8007378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	0151      	lsls	r1, r2, #5
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	440a      	add	r2, r1
 8007386:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800738a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800738e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	3301      	adds	r3, #1
 8007394:	617b      	str	r3, [r7, #20]
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800739c:	d81d      	bhi.n	80073da <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073b4:	d0ec      	beq.n	8007390 <USB_HC_Halt+0x1a4>
 80073b6:	e011      	b.n	80073dc <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	0151      	lsls	r1, r2, #5
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	440a      	add	r2, r1
 80073ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073d6:	6013      	str	r3, [r2, #0]
 80073d8:	e000      	b.n	80073dc <USB_HC_Halt+0x1f0>
          break;
 80073da:	bf00      	nop
    }
  }

  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	371c      	adds	r7, #28
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
	...

080073ec <__libc_init_array>:
 80073ec:	b570      	push	{r4, r5, r6, lr}
 80073ee:	4e0d      	ldr	r6, [pc, #52]	; (8007424 <__libc_init_array+0x38>)
 80073f0:	4c0d      	ldr	r4, [pc, #52]	; (8007428 <__libc_init_array+0x3c>)
 80073f2:	1ba4      	subs	r4, r4, r6
 80073f4:	10a4      	asrs	r4, r4, #2
 80073f6:	2500      	movs	r5, #0
 80073f8:	42a5      	cmp	r5, r4
 80073fa:	d109      	bne.n	8007410 <__libc_init_array+0x24>
 80073fc:	4e0b      	ldr	r6, [pc, #44]	; (800742c <__libc_init_array+0x40>)
 80073fe:	4c0c      	ldr	r4, [pc, #48]	; (8007430 <__libc_init_array+0x44>)
 8007400:	f000 f820 	bl	8007444 <_init>
 8007404:	1ba4      	subs	r4, r4, r6
 8007406:	10a4      	asrs	r4, r4, #2
 8007408:	2500      	movs	r5, #0
 800740a:	42a5      	cmp	r5, r4
 800740c:	d105      	bne.n	800741a <__libc_init_array+0x2e>
 800740e:	bd70      	pop	{r4, r5, r6, pc}
 8007410:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007414:	4798      	blx	r3
 8007416:	3501      	adds	r5, #1
 8007418:	e7ee      	b.n	80073f8 <__libc_init_array+0xc>
 800741a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800741e:	4798      	blx	r3
 8007420:	3501      	adds	r5, #1
 8007422:	e7f2      	b.n	800740a <__libc_init_array+0x1e>
 8007424:	08008d6c 	.word	0x08008d6c
 8007428:	08008d6c 	.word	0x08008d6c
 800742c:	08008d6c 	.word	0x08008d6c
 8007430:	08008d70 	.word	0x08008d70

08007434 <memset>:
 8007434:	4402      	add	r2, r0
 8007436:	4603      	mov	r3, r0
 8007438:	4293      	cmp	r3, r2
 800743a:	d100      	bne.n	800743e <memset+0xa>
 800743c:	4770      	bx	lr
 800743e:	f803 1b01 	strb.w	r1, [r3], #1
 8007442:	e7f9      	b.n	8007438 <memset+0x4>

08007444 <_init>:
 8007444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007446:	bf00      	nop
 8007448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800744a:	bc08      	pop	{r3}
 800744c:	469e      	mov	lr, r3
 800744e:	4770      	bx	lr

08007450 <_fini>:
 8007450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007452:	bf00      	nop
 8007454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007456:	bc08      	pop	{r3}
 8007458:	469e      	mov	lr, r3
 800745a:	4770      	bx	lr
