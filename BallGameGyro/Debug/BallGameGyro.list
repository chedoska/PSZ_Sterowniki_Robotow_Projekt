
BallGameGyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000848c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ce0  0800863c  0800863c  0001863c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a31c  0800a31c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800a31c  0800a31c  0001a31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a324  0800a324  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a324  0800a324  0001a324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a328  0800a328  0001a328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800a32c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000424c  20000010  0800a33c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000425c  0800a33c  0002425c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cbdd  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039d1  00000000  00000000  0003cc1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001998  00000000  00000000  000405f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017e8  00000000  00000000  00041f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027f28  00000000  00000000  00043770  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001567e  00000000  00000000  0006b698  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8386  00000000  00000000  00080d16  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016909c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f34  00000000  00000000  00169118  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008624 	.word	0x08008624

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08008624 	.word	0x08008624

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2f>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000994:	bf24      	itt	cs
 8000996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800099e:	d90d      	bls.n	80009bc <__aeabi_d2f+0x30>
 80009a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b4:	bf08      	it	eq
 80009b6:	f020 0001 	biceq.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009c0:	d121      	bne.n	8000a06 <__aeabi_d2f+0x7a>
 80009c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009c6:	bfbc      	itt	lt
 80009c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	4770      	bxlt	lr
 80009ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d6:	f1c2 0218 	rsb	r2, r2, #24
 80009da:	f1c2 0c20 	rsb	ip, r2, #32
 80009de:	fa10 f30c 	lsls.w	r3, r0, ip
 80009e2:	fa20 f002 	lsr.w	r0, r0, r2
 80009e6:	bf18      	it	ne
 80009e8:	f040 0001 	orrne.w	r0, r0, #1
 80009ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f8:	ea40 000c 	orr.w	r0, r0, ip
 80009fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	e7cc      	b.n	80009a0 <__aeabi_d2f+0x14>
 8000a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a0a:	d107      	bne.n	8000a1c <__aeabi_d2f+0x90>
 8000a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a10:	bf1e      	ittt	ne
 8000a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a1a:	4770      	bxne	lr
 8000a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a40:	f000 b972 	b.w	8000d28 <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f806 	bl	8000a5c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__udivmoddi4>:
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a60:	9e08      	ldr	r6, [sp, #32]
 8000a62:	4604      	mov	r4, r0
 8000a64:	4688      	mov	r8, r1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d14b      	bne.n	8000b02 <__udivmoddi4+0xa6>
 8000a6a:	428a      	cmp	r2, r1
 8000a6c:	4615      	mov	r5, r2
 8000a6e:	d967      	bls.n	8000b40 <__udivmoddi4+0xe4>
 8000a70:	fab2 f282 	clz	r2, r2
 8000a74:	b14a      	cbz	r2, 8000a8a <__udivmoddi4+0x2e>
 8000a76:	f1c2 0720 	rsb	r7, r2, #32
 8000a7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a82:	4095      	lsls	r5, r2
 8000a84:	ea47 0803 	orr.w	r8, r7, r3
 8000a88:	4094      	lsls	r4, r2
 8000a8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a8e:	0c23      	lsrs	r3, r4, #16
 8000a90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a94:	fa1f fc85 	uxth.w	ip, r5
 8000a98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aa0:	fb07 f10c 	mul.w	r1, r7, ip
 8000aa4:	4299      	cmp	r1, r3
 8000aa6:	d909      	bls.n	8000abc <__udivmoddi4+0x60>
 8000aa8:	18eb      	adds	r3, r5, r3
 8000aaa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000aae:	f080 811b 	bcs.w	8000ce8 <__udivmoddi4+0x28c>
 8000ab2:	4299      	cmp	r1, r3
 8000ab4:	f240 8118 	bls.w	8000ce8 <__udivmoddi4+0x28c>
 8000ab8:	3f02      	subs	r7, #2
 8000aba:	442b      	add	r3, r5
 8000abc:	1a5b      	subs	r3, r3, r1
 8000abe:	b2a4      	uxth	r4, r4
 8000ac0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ac4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000acc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ad0:	45a4      	cmp	ip, r4
 8000ad2:	d909      	bls.n	8000ae8 <__udivmoddi4+0x8c>
 8000ad4:	192c      	adds	r4, r5, r4
 8000ad6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ada:	f080 8107 	bcs.w	8000cec <__udivmoddi4+0x290>
 8000ade:	45a4      	cmp	ip, r4
 8000ae0:	f240 8104 	bls.w	8000cec <__udivmoddi4+0x290>
 8000ae4:	3802      	subs	r0, #2
 8000ae6:	442c      	add	r4, r5
 8000ae8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000aec:	eba4 040c 	sub.w	r4, r4, ip
 8000af0:	2700      	movs	r7, #0
 8000af2:	b11e      	cbz	r6, 8000afc <__udivmoddi4+0xa0>
 8000af4:	40d4      	lsrs	r4, r2
 8000af6:	2300      	movs	r3, #0
 8000af8:	e9c6 4300 	strd	r4, r3, [r6]
 8000afc:	4639      	mov	r1, r7
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0xbe>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	f000 80eb 	beq.w	8000ce2 <__udivmoddi4+0x286>
 8000b0c:	2700      	movs	r7, #0
 8000b0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b12:	4638      	mov	r0, r7
 8000b14:	4639      	mov	r1, r7
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	fab3 f783 	clz	r7, r3
 8000b1e:	2f00      	cmp	r7, #0
 8000b20:	d147      	bne.n	8000bb2 <__udivmoddi4+0x156>
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d302      	bcc.n	8000b2c <__udivmoddi4+0xd0>
 8000b26:	4282      	cmp	r2, r0
 8000b28:	f200 80fa 	bhi.w	8000d20 <__udivmoddi4+0x2c4>
 8000b2c:	1a84      	subs	r4, r0, r2
 8000b2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b32:	2001      	movs	r0, #1
 8000b34:	4698      	mov	r8, r3
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d0e0      	beq.n	8000afc <__udivmoddi4+0xa0>
 8000b3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b3e:	e7dd      	b.n	8000afc <__udivmoddi4+0xa0>
 8000b40:	b902      	cbnz	r2, 8000b44 <__udivmoddi4+0xe8>
 8000b42:	deff      	udf	#255	; 0xff
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	f040 808f 	bne.w	8000c6c <__udivmoddi4+0x210>
 8000b4e:	1b49      	subs	r1, r1, r5
 8000b50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b54:	fa1f f885 	uxth.w	r8, r5
 8000b58:	2701      	movs	r7, #1
 8000b5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b68:	fb08 f10c 	mul.w	r1, r8, ip
 8000b6c:	4299      	cmp	r1, r3
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x124>
 8000b70:	18eb      	adds	r3, r5, r3
 8000b72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x122>
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	f200 80cd 	bhi.w	8000d18 <__udivmoddi4+0x2bc>
 8000b7e:	4684      	mov	ip, r0
 8000b80:	1a59      	subs	r1, r3, r1
 8000b82:	b2a3      	uxth	r3, r4
 8000b84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b90:	fb08 f800 	mul.w	r8, r8, r0
 8000b94:	45a0      	cmp	r8, r4
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x14c>
 8000b98:	192c      	adds	r4, r5, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x14a>
 8000ba0:	45a0      	cmp	r8, r4
 8000ba2:	f200 80b6 	bhi.w	8000d12 <__udivmoddi4+0x2b6>
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	eba4 0408 	sub.w	r4, r4, r8
 8000bac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bb0:	e79f      	b.n	8000af2 <__udivmoddi4+0x96>
 8000bb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bb6:	40bb      	lsls	r3, r7
 8000bb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bcc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bd0:	4325      	orrs	r5, r4
 8000bd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bd6:	0c2c      	lsrs	r4, r5, #16
 8000bd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bdc:	fa1f fa8e 	uxth.w	sl, lr
 8000be0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000be4:	fb09 f40a 	mul.w	r4, r9, sl
 8000be8:	429c      	cmp	r4, r3
 8000bea:	fa02 f207 	lsl.w	r2, r2, r7
 8000bee:	fa00 f107 	lsl.w	r1, r0, r7
 8000bf2:	d90b      	bls.n	8000c0c <__udivmoddi4+0x1b0>
 8000bf4:	eb1e 0303 	adds.w	r3, lr, r3
 8000bf8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bfc:	f080 8087 	bcs.w	8000d0e <__udivmoddi4+0x2b2>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f240 8084 	bls.w	8000d0e <__udivmoddi4+0x2b2>
 8000c06:	f1a9 0902 	sub.w	r9, r9, #2
 8000c0a:	4473      	add	r3, lr
 8000c0c:	1b1b      	subs	r3, r3, r4
 8000c0e:	b2ad      	uxth	r5, r5
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c20:	45a2      	cmp	sl, r4
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x1da>
 8000c24:	eb1e 0404 	adds.w	r4, lr, r4
 8000c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2c:	d26b      	bcs.n	8000d06 <__udivmoddi4+0x2aa>
 8000c2e:	45a2      	cmp	sl, r4
 8000c30:	d969      	bls.n	8000d06 <__udivmoddi4+0x2aa>
 8000c32:	3802      	subs	r0, #2
 8000c34:	4474      	add	r4, lr
 8000c36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c3e:	eba4 040a 	sub.w	r4, r4, sl
 8000c42:	454c      	cmp	r4, r9
 8000c44:	46c2      	mov	sl, r8
 8000c46:	464b      	mov	r3, r9
 8000c48:	d354      	bcc.n	8000cf4 <__udivmoddi4+0x298>
 8000c4a:	d051      	beq.n	8000cf0 <__udivmoddi4+0x294>
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	d069      	beq.n	8000d24 <__udivmoddi4+0x2c8>
 8000c50:	ebb1 050a 	subs.w	r5, r1, sl
 8000c54:	eb64 0403 	sbc.w	r4, r4, r3
 8000c58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c5c:	40fd      	lsrs	r5, r7
 8000c5e:	40fc      	lsrs	r4, r7
 8000c60:	ea4c 0505 	orr.w	r5, ip, r5
 8000c64:	e9c6 5400 	strd	r5, r4, [r6]
 8000c68:	2700      	movs	r7, #0
 8000c6a:	e747      	b.n	8000afc <__udivmoddi4+0xa0>
 8000c6c:	f1c2 0320 	rsb	r3, r2, #32
 8000c70:	fa20 f703 	lsr.w	r7, r0, r3
 8000c74:	4095      	lsls	r5, r2
 8000c76:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c82:	4338      	orrs	r0, r7
 8000c84:	0c01      	lsrs	r1, r0, #16
 8000c86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c8a:	fa1f f885 	uxth.w	r8, r5
 8000c8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c96:	fb07 f308 	mul.w	r3, r7, r8
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x256>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ca8:	d22f      	bcs.n	8000d0a <__udivmoddi4+0x2ae>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d92d      	bls.n	8000d0a <__udivmoddi4+0x2ae>
 8000cae:	3f02      	subs	r7, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	1acb      	subs	r3, r1, r3
 8000cb4:	b281      	uxth	r1, r0
 8000cb6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc2:	fb00 f308 	mul.w	r3, r0, r8
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x27e>
 8000cca:	1869      	adds	r1, r5, r1
 8000ccc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd0:	d217      	bcs.n	8000d02 <__udivmoddi4+0x2a6>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d915      	bls.n	8000d02 <__udivmoddi4+0x2a6>
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	4429      	add	r1, r5
 8000cda:	1ac9      	subs	r1, r1, r3
 8000cdc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ce0:	e73b      	b.n	8000b5a <__udivmoddi4+0xfe>
 8000ce2:	4637      	mov	r7, r6
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e709      	b.n	8000afc <__udivmoddi4+0xa0>
 8000ce8:	4607      	mov	r7, r0
 8000cea:	e6e7      	b.n	8000abc <__udivmoddi4+0x60>
 8000cec:	4618      	mov	r0, r3
 8000cee:	e6fb      	b.n	8000ae8 <__udivmoddi4+0x8c>
 8000cf0:	4541      	cmp	r1, r8
 8000cf2:	d2ab      	bcs.n	8000c4c <__udivmoddi4+0x1f0>
 8000cf4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cf8:	eb69 020e 	sbc.w	r2, r9, lr
 8000cfc:	3801      	subs	r0, #1
 8000cfe:	4613      	mov	r3, r2
 8000d00:	e7a4      	b.n	8000c4c <__udivmoddi4+0x1f0>
 8000d02:	4660      	mov	r0, ip
 8000d04:	e7e9      	b.n	8000cda <__udivmoddi4+0x27e>
 8000d06:	4618      	mov	r0, r3
 8000d08:	e795      	b.n	8000c36 <__udivmoddi4+0x1da>
 8000d0a:	4667      	mov	r7, ip
 8000d0c:	e7d1      	b.n	8000cb2 <__udivmoddi4+0x256>
 8000d0e:	4681      	mov	r9, r0
 8000d10:	e77c      	b.n	8000c0c <__udivmoddi4+0x1b0>
 8000d12:	3802      	subs	r0, #2
 8000d14:	442c      	add	r4, r5
 8000d16:	e747      	b.n	8000ba8 <__udivmoddi4+0x14c>
 8000d18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d1c:	442b      	add	r3, r5
 8000d1e:	e72f      	b.n	8000b80 <__udivmoddi4+0x124>
 8000d20:	4638      	mov	r0, r7
 8000d22:	e708      	b.n	8000b36 <__udivmoddi4+0xda>
 8000d24:	4637      	mov	r7, r6
 8000d26:	e6e9      	b.n	8000afc <__udivmoddi4+0xa0>

08000d28 <__aeabi_idiv0>:
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <ball_ctrl_init>:
 */
#include "ball_control.h"

// Inicjalizacja srtruktury do zarządzania pozycją i fizyką piłki
void ball_ctrl_init(Ball_control_data *ball_data, uint16_t X_start_pos, uint16_t Y_start_pos)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	807b      	strh	r3, [r7, #2]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	803b      	strh	r3, [r7, #0]
	ball_ctrl_restetDrift(ball_data);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f000 f81c 	bl	8000d7a <ball_ctrl_restetDrift>
	ball_data->X_screen_pos = X_start_pos;
 8000d42:	887b      	ldrh	r3, [r7, #2]
 8000d44:	ee07 3a90 	vmov	s15, r3
 8000d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	edc3 7a03 	vstr	s15, [r3, #12]
	ball_data->Y_screen_pos = Y_start_pos;
 8000d52:	883b      	ldrh	r3, [r7, #0]
 8000d54:	ee07 3a90 	vmov	s15, r3
 8000d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	edc3 7a04 	vstr	s15, [r3, #16]
	ball_data->X_screen_speed = 0;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f04f 0200 	mov.w	r2, #0
 8000d68:	615a      	str	r2, [r3, #20]
	ball_data->Y_screen_speed = 0;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <ball_ctrl_restetDrift>:

// Usuwanie dryftu powstałęgo przy całkowaniu pedkości obrotowych
void ball_ctrl_restetDrift(Ball_control_data *ball_data)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
	ball_data->ctrlX_angle = 0;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f04f 0200 	mov.w	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
	ball_data->ctrlY_angle = 0;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f04f 0200 	mov.w	r2, #0
 8000d90:	605a      	str	r2, [r3, #4]
	ball_data->ctrlY_angle = 0;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f04f 0200 	mov.w	r2, #0
 8000d98:	605a      	str	r2, [r3, #4]
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <ball_update_ctrl_angles>:
 * int delta_time_ms - czas jaki upłyną od poprzedniego pomiaru wyrażony w milisekundach
 * L3GD20 *L3GD20_data - wskaźnik do struktury z danymi odczytu żyroskoou
 * Ball_control_data *ball_data - wskaźnik do struktury zarządzającej pozycją piłki.
 */
void ball_update_ctrl_angles(Ball_control_data *ball_data, L3GD20 *L3GD20_data, int delta_time_ms)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
	float delta_time = delta_time_ms / 1000.0;
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff fb6d 	bl	8000494 <__aeabi_i2d>
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <ball_update_ctrl_angles+0x90>)
 8000dc0:	f7ff fcfc 	bl	80007bc <__aeabi_ddiv>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	460c      	mov	r4, r1
 8000dc8:	4618      	mov	r0, r3
 8000dca:	4621      	mov	r1, r4
 8000dcc:	f7ff fdde 	bl	800098c <__aeabi_d2f>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	617b      	str	r3, [r7, #20]
	ball_data->ctrlX_angle += L3GD20_data->X_val * delta_time;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	ed93 7a00 	vldr	s14, [r3]
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	edd3 6a03 	vldr	s13, [r3, #12]
 8000de0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	edc3 7a00 	vstr	s15, [r3]
	ball_data->ctrlY_angle += L3GD20_data->Y_val * delta_time;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	ed93 7a01 	vldr	s14, [r3, #4]
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	edd3 6a04 	vldr	s13, [r3, #16]
 8000dfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	edc3 7a01 	vstr	s15, [r3, #4]
	ball_data->ctrlZ_angle += L3GD20_data->Z_val * delta_time;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	ed93 7a02 	vldr	s14, [r3, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	edd3 6a05 	vldr	s13, [r3, #20]
 8000e1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000e2e:	bf00      	nop
 8000e30:	371c      	adds	r7, #28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd90      	pop	{r4, r7, pc}
 8000e36:	bf00      	nop
 8000e38:	408f4000 	.word	0x408f4000
 8000e3c:	00000000 	.word	0x00000000

08000e40 <ball_update_pos>:
/*
 * Ball_control_data *ball_data - wskaźnik do struktury zarządzającej pozycją piłki.
 * int delta_time_ms - czas jaki upłyną od poprzedniego pomiaru wyrażony w milisekundach
 */
void ball_update_pos(Ball_control_data *ball_data, int delta_time_ms)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	ed2d 8b02 	vpush	{d8}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
	float delta_time = delta_time_ms / 1000.0;
 8000e4e:	6838      	ldr	r0, [r7, #0]
 8000e50:	f7ff fb20 	bl	8000494 <__aeabi_i2d>
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	4b6f      	ldr	r3, [pc, #444]	; (8001018 <ball_update_pos+0x1d8>)
 8000e5a:	f7ff fcaf 	bl	80007bc <__aeabi_ddiv>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	460c      	mov	r4, r1
 8000e62:	4618      	mov	r0, r3
 8000e64:	4621      	mov	r1, r4
 8000e66:	f7ff fd91 	bl	800098c <__aeabi_d2f>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	617b      	str	r3, [r7, #20]
	float X_radAngle = (ball_data->ctrlX_angle * PI_CONST / 180.0);				// Wyrażenie orientacji w radianch
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fb20 	bl	80004b8 <__aeabi_f2d>
 8000e78:	a365      	add	r3, pc, #404	; (adr r3, 8001010 <ball_update_pos+0x1d0>)
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	f7ff fb73 	bl	8000568 <__aeabi_dmul>
 8000e82:	4603      	mov	r3, r0
 8000e84:	460c      	mov	r4, r1
 8000e86:	4618      	mov	r0, r3
 8000e88:	4621      	mov	r1, r4
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	4b63      	ldr	r3, [pc, #396]	; (800101c <ball_update_pos+0x1dc>)
 8000e90:	f7ff fc94 	bl	80007bc <__aeabi_ddiv>
 8000e94:	4603      	mov	r3, r0
 8000e96:	460c      	mov	r4, r1
 8000e98:	4618      	mov	r0, r3
 8000e9a:	4621      	mov	r1, r4
 8000e9c:	f7ff fd76 	bl	800098c <__aeabi_d2f>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	613b      	str	r3, [r7, #16]
	float Y_radAngle = (ball_data->ctrlY_angle * PI_CONST / 180.0);				// dla osi X i Y
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fb05 	bl	80004b8 <__aeabi_f2d>
 8000eae:	a358      	add	r3, pc, #352	; (adr r3, 8001010 <ball_update_pos+0x1d0>)
 8000eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb4:	f7ff fb58 	bl	8000568 <__aeabi_dmul>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	460c      	mov	r4, r1
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	4621      	mov	r1, r4
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	4b55      	ldr	r3, [pc, #340]	; (800101c <ball_update_pos+0x1dc>)
 8000ec6:	f7ff fc79 	bl	80007bc <__aeabi_ddiv>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	460c      	mov	r4, r1
 8000ece:	4618      	mov	r0, r3
 8000ed0:	4621      	mov	r1, r4
 8000ed2:	f7ff fd5b 	bl	800098c <__aeabi_d2f>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	60fb      	str	r3, [r7, #12]

	ball_data->X_screen_speed += sinf(X_radAngle) * GRAVITY_CONST * delta_time;	// całkowanie przyśpieszenia by otrzymać
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	ed93 8a05 	vldr	s16, [r3, #20]
 8000ee0:	ed97 0a04 	vldr	s0, [r7, #16]
 8000ee4:	f006 fe52 	bl	8007b8c <sinf>
 8000ee8:	eeb0 7a40 	vmov.f32	s14, s0
 8000eec:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8001020 <ball_update_pos+0x1e0>
 8000ef0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ef4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000efc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	edc3 7a05 	vstr	s15, [r3, #20]
	ball_data->Y_screen_speed += sinf(Y_radAngle) * GRAVITY_CONST * delta_time;	// prędkośc chwilową piłki
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	ed93 8a06 	vldr	s16, [r3, #24]
 8000f0c:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f10:	f006 fe3c 	bl	8007b8c <sinf>
 8000f14:	eeb0 7a40 	vmov.f32	s14, s0
 8000f18:	eddf 7a41 	vldr	s15, [pc, #260]	; 8001020 <ball_update_pos+0x1e0>
 8000f1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f20:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f28:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	edc3 7a06 	vstr	s15, [r3, #24]

	if(ball_data->X_screen_speed > 0)											// Uwzględnienie oporu siły tarcia
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f40:	dd0e      	ble.n	8000f60 <ball_update_pos+0x120>
		ball_data->X_screen_speed -= FRICTION_CONST * delta_time;				// W przeciwnym kierunku do prędkosci
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f48:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f4c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001024 <ball_update_pos+0x1e4>
 8000f50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	edc3 7a05 	vstr	s15, [r3, #20]
 8000f5e:	e00d      	b.n	8000f7c <ball_update_pos+0x13c>
	else
		ball_data->X_screen_speed += FRICTION_CONST * delta_time;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f6a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001024 <ball_update_pos+0x1e4>
 8000f6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	edc3 7a05 	vstr	s15, [r3, #20]

	if(ball_data->Y_screen_speed > 0)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8a:	dd0e      	ble.n	8000faa <ball_update_pos+0x16a>
			ball_data->Y_screen_speed -= FRICTION_CONST * delta_time;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f92:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f96:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001024 <ball_update_pos+0x1e4>
 8000f9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	edc3 7a06 	vstr	s15, [r3, #24]
 8000fa8:	e00d      	b.n	8000fc6 <ball_update_pos+0x186>
		else
			ball_data->Y_screen_speed += FRICTION_CONST * delta_time;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	ed93 7a06 	vldr	s14, [r3, #24]
 8000fb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fb4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001024 <ball_update_pos+0x1e4>
 8000fb8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	edc3 7a06 	vstr	s15, [r3, #24]

	ball_data->X_screen_pos += (ball_data->X_screen_speed * delta_time);		// Całkowanie prędkosći chwilowej by otrzymać
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	ed93 7a03 	vldr	s14, [r3, #12]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	edd3 6a05 	vldr	s13, [r3, #20]
 8000fd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	edc3 7a03 	vstr	s15, [r3, #12]
	ball_data->Y_screen_pos += (ball_data->Y_screen_speed * delta_time);		// aktualną pozycję piłki na ekranie
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	ed93 7a04 	vldr	s14, [r3, #16]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	edd3 6a06 	vldr	s13, [r3, #24]
 8000ff0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8001002:	bf00      	nop
 8001004:	371c      	adds	r7, #28
 8001006:	46bd      	mov	sp, r7
 8001008:	ecbd 8b02 	vpop	{d8}
 800100c:	bd90      	pop	{r4, r7, pc}
 800100e:	bf00      	nop
 8001010:	4d12d84a 	.word	0x4d12d84a
 8001014:	400921fb 	.word	0x400921fb
 8001018:	408f4000 	.word	0x408f4000
 800101c:	40668000 	.word	0x40668000
 8001020:	44480000 	.word	0x44480000
 8001024:	42480000 	.word	0x42480000

08001028 <ball_handle_collision>:
 * int minX - min. dopuszczalna wartość dla współrzędnej X
 * int minY - min. dopuszczalna wartość dla współrzędnej Y
 */
WallHit ball_handle_collision(Ball_control_data *ball_data,
						   int maxX, int minX, int maxY, int minY)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
	static CollisionFilterStatus collisionFilterFlag_Y = BALL_COLLISIONS_ALOWED;
	static CollisionFilterStatus collisionFilterFlag_X = BALL_COLLISIONS_ALOWED;

	if	(ball_data->X_screen_pos > minX + COLLISION_RESTART_AREA_OFFSET &&
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	ed93 7a03 	vldr	s14, [r3, #12]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	330f      	adds	r3, #15
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001048:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800104c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001050:	dd10      	ble.n	8001074 <ball_handle_collision+0x4c>
	 	 ball_data->X_screen_pos < maxX - COLLISION_RESTART_AREA_OFFSET)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	ed93 7a03 	vldr	s14, [r3, #12]
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	3b0f      	subs	r3, #15
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	if	(ball_data->X_screen_pos > minX + COLLISION_RESTART_AREA_OFFSET &&
 8001064:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106c:	d502      	bpl.n	8001074 <ball_handle_collision+0x4c>
	{
		collisionFilterFlag_X = BALL_COLLISIONS_ALOWED;
 800106e:	4b84      	ldr	r3, [pc, #528]	; (8001280 <ball_handle_collision+0x258>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
	}

	if	(ball_data->Y_screen_pos > minY + COLLISION_RESTART_AREA_OFFSET &&
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	ed93 7a04 	vldr	s14, [r3, #16]
 800107a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107c:	330f      	adds	r3, #15
 800107e:	ee07 3a90 	vmov	s15, r3
 8001082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001086:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800108a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108e:	dd10      	ble.n	80010b2 <ball_handle_collision+0x8a>
		 ball_data->Y_screen_pos < maxY - COLLISION_RESTART_AREA_OFFSET)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	ed93 7a04 	vldr	s14, [r3, #16]
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	3b0f      	subs	r3, #15
 800109a:	ee07 3a90 	vmov	s15, r3
 800109e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	if	(ball_data->Y_screen_pos > minY + COLLISION_RESTART_AREA_OFFSET &&
 80010a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	d502      	bpl.n	80010b2 <ball_handle_collision+0x8a>
	{
		collisionFilterFlag_Y = BALL_COLLISIONS_ALOWED;
 80010ac:	4b75      	ldr	r3, [pc, #468]	; (8001284 <ball_handle_collision+0x25c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
	}

	WallHit wallHitFlag = BALL_NO_COLLISION;
 80010b2:	2301      	movs	r3, #1
 80010b4:	75fb      	strb	r3, [r7, #23]

	// Spradzenie kontaktu ze ścianami horyzontalnie wzdłuż osi X
	if(ball_data->X_screen_pos > maxX || ball_data->X_screen_pos < minX)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	ed93 7a03 	vldr	s14, [r3, #12]
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	ee07 3a90 	vmov	s15, r3
 80010c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ce:	dc0c      	bgt.n	80010ea <ball_handle_collision+0xc2>
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	ed93 7a03 	vldr	s14, [r3, #12]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e8:	d552      	bpl.n	8001190 <ball_handle_collision+0x168>
	{
		// Zmiana kierunku prędkości piłki po odbiciu
		ball_data->X_screen_speed = -ball_data->X_screen_speed * WALL_ENERGY_LOSS_CONST;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80010f0:	eef1 7a67 	vneg.f32	s15, s15
 80010f4:	ee17 3a90 	vmov	r3, s15
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff f9dd 	bl	80004b8 <__aeabi_f2d>
 80010fe:	a35e      	add	r3, pc, #376	; (adr r3, 8001278 <ball_handle_collision+0x250>)
 8001100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001104:	f7ff fa30 	bl	8000568 <__aeabi_dmul>
 8001108:	4603      	mov	r3, r0
 800110a:	460c      	mov	r4, r1
 800110c:	4618      	mov	r0, r3
 800110e:	4621      	mov	r1, r4
 8001110:	f7ff fc3c 	bl	800098c <__aeabi_d2f>
 8001114:	4602      	mov	r2, r0
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	615a      	str	r2, [r3, #20]
		// Cofnięcie piłki do obrębu ekranu
		ball_data->X_screen_pos = ball_data->X_screen_pos > maxX ? maxX : ball_data->X_screen_pos;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800112e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001132:	dd05      	ble.n	8001140 <ball_handle_collision+0x118>
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113e:	e002      	b.n	8001146 <ball_handle_collision+0x11e>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	edd3 7a03 	vldr	s15, [r3, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	edc3 7a03 	vstr	s15, [r3, #12]
		ball_data->X_screen_pos = ball_data->X_screen_pos < minX ? minX : ball_data->X_screen_pos;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	ee07 3a90 	vmov	s15, r3
 8001158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001164:	d505      	bpl.n	8001172 <ball_handle_collision+0x14a>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	ee07 3a90 	vmov	s15, r3
 800116c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001170:	e002      	b.n	8001178 <ball_handle_collision+0x150>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	edd3 7a03 	vldr	s15, [r3, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	edc3 7a03 	vstr	s15, [r3, #12]

		if(collisionFilterFlag_X == BALL_COLLISIONS_ALOWED){
 800117e:	4b40      	ldr	r3, [pc, #256]	; (8001280 <ball_handle_collision+0x258>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d104      	bne.n	8001190 <ball_handle_collision+0x168>
			wallHitFlag = BALL_COLLISION_DETECTED;
 8001186:	2300      	movs	r3, #0
 8001188:	75fb      	strb	r3, [r7, #23]
			collisionFilterFlag_X = BALL_COLLISIONS_BLOCKED;
 800118a:	4b3d      	ldr	r3, [pc, #244]	; (8001280 <ball_handle_collision+0x258>)
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
		}
	}

	// Spradzenie kontaktu ze ścianami horyzontalnie wzdłuż osi Y
	if(ball_data->Y_screen_pos > maxY || ball_data->Y_screen_pos < minY)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	ed93 7a04 	vldr	s14, [r3, #16]
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	ee07 3a90 	vmov	s15, r3
 800119c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a8:	dc0c      	bgt.n	80011c4 <ball_handle_collision+0x19c>
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	ed93 7a04 	vldr	s14, [r3, #16]
 80011b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c2:	d552      	bpl.n	800126a <ball_handle_collision+0x242>
	{
		// Zmiana kierunku prędkości piłki po odbiciu
		ball_data->Y_screen_speed = -ball_data->Y_screen_speed * WALL_ENERGY_LOSS_CONST;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80011ca:	eef1 7a67 	vneg.f32	s15, s15
 80011ce:	ee17 3a90 	vmov	r3, s15
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f970 	bl	80004b8 <__aeabi_f2d>
 80011d8:	a327      	add	r3, pc, #156	; (adr r3, 8001278 <ball_handle_collision+0x250>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7ff f9c3 	bl	8000568 <__aeabi_dmul>
 80011e2:	4603      	mov	r3, r0
 80011e4:	460c      	mov	r4, r1
 80011e6:	4618      	mov	r0, r3
 80011e8:	4621      	mov	r1, r4
 80011ea:	f7ff fbcf 	bl	800098c <__aeabi_d2f>
 80011ee:	4602      	mov	r2, r0
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	619a      	str	r2, [r3, #24]
		// Cofnięcie piłki do obrębu ekranu
		ball_data->Y_screen_pos = ball_data->Y_screen_pos > maxY ? maxY : ball_data->Y_screen_pos;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001204:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120c:	dd05      	ble.n	800121a <ball_handle_collision+0x1f2>
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	ee07 3a90 	vmov	s15, r3
 8001214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001218:	e002      	b.n	8001220 <ball_handle_collision+0x1f8>
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	edc3 7a04 	vstr	s15, [r3, #16]
		ball_data->Y_screen_pos = ball_data->Y_screen_pos < minY ? minY : ball_data->Y_screen_pos;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	ed93 7a04 	vldr	s14, [r3, #16]
 800122c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122e:	ee07 3a90 	vmov	s15, r3
 8001232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001236:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800123a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123e:	d505      	bpl.n	800124c <ball_handle_collision+0x224>
 8001240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001242:	ee07 3a90 	vmov	s15, r3
 8001246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800124a:	e002      	b.n	8001252 <ball_handle_collision+0x22a>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	edc3 7a04 	vstr	s15, [r3, #16]

		if(collisionFilterFlag_Y == BALL_COLLISIONS_ALOWED){
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <ball_handle_collision+0x25c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d104      	bne.n	800126a <ball_handle_collision+0x242>
			wallHitFlag = BALL_COLLISION_DETECTED;
 8001260:	2300      	movs	r3, #0
 8001262:	75fb      	strb	r3, [r7, #23]
			collisionFilterFlag_Y = BALL_COLLISIONS_BLOCKED;
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <ball_handle_collision+0x25c>)
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
		}
	}
	return wallHitFlag;
 800126a:	7dfb      	ldrb	r3, [r7, #23]
}
 800126c:	4618      	mov	r0, r3
 800126e:	371c      	adds	r7, #28
 8001270:	46bd      	mov	sp, r7
 8001272:	bd90      	pop	{r4, r7, pc}
 8001274:	f3af 8000 	nop.w
 8001278:	cccccccd 	.word	0xcccccccd
 800127c:	3fe4cccc 	.word	0x3fe4cccc
 8001280:	2000002c 	.word	0x2000002c
 8001284:	2000002d 	.word	0x2000002d

08001288 <generateSineWave>:
#include "ball_sound.h"

void generateSineWave(uint32_t frequency, uint32_t amplitude, uint32_t timer_frequency)
{
 8001288:	b5b0      	push	{r4, r5, r7, lr}
 800128a:	ed2d 8b02 	vpush	{d8}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
	amplitude /= 2;
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	085b      	lsrs	r3, r3, #1
 800129c:	60bb      	str	r3, [r7, #8]
	if(amplitude > 2047) amplitude = 2047;
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012a4:	d302      	bcc.n	80012ac <generateSineWave+0x24>
 80012a6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80012aa:	60bb      	str	r3, [r7, #8]

	float period = 1.0 / timer_frequency;
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff f8e1 	bl	8000474 <__aeabi_ui2d>
 80012b2:	4603      	mov	r3, r0
 80012b4:	460c      	mov	r4, r1
 80012b6:	461a      	mov	r2, r3
 80012b8:	4623      	mov	r3, r4
 80012ba:	f04f 0000 	mov.w	r0, #0
 80012be:	4930      	ldr	r1, [pc, #192]	; (8001380 <generateSineWave+0xf8>)
 80012c0:	f7ff fa7c 	bl	80007bc <__aeabi_ddiv>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4618      	mov	r0, r3
 80012ca:	4621      	mov	r1, r4
 80012cc:	f7ff fb5e 	bl	800098c <__aeabi_d2f>
 80012d0:	4603      	mov	r3, r0
 80012d2:	613b      	str	r3, [r7, #16]
	for(int t = 0; t < SAMPLE_NUMBER; t++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	e044      	b.n	8001364 <generateSineWave+0xdc>
	{
		sound_wav[t] =	amplitude * (sinf(2.0 * PI_CONST_SOUND * t * period * frequency) + 1);
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80012e4:	6978      	ldr	r0, [r7, #20]
 80012e6:	f7ff f8d5 	bl	8000494 <__aeabi_i2d>
 80012ea:	a323      	add	r3, pc, #140	; (adr r3, 8001378 <generateSineWave+0xf0>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	f7ff f93a 	bl	8000568 <__aeabi_dmul>
 80012f4:	4603      	mov	r3, r0
 80012f6:	460c      	mov	r4, r1
 80012f8:	4625      	mov	r5, r4
 80012fa:	461c      	mov	r4, r3
 80012fc:	6938      	ldr	r0, [r7, #16]
 80012fe:	f7ff f8db 	bl	80004b8 <__aeabi_f2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4620      	mov	r0, r4
 8001308:	4629      	mov	r1, r5
 800130a:	f7ff f92d 	bl	8000568 <__aeabi_dmul>
 800130e:	4603      	mov	r3, r0
 8001310:	460c      	mov	r4, r1
 8001312:	4625      	mov	r5, r4
 8001314:	461c      	mov	r4, r3
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f7ff f8ac 	bl	8000474 <__aeabi_ui2d>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4620      	mov	r0, r4
 8001322:	4629      	mov	r1, r5
 8001324:	f7ff f920 	bl	8000568 <__aeabi_dmul>
 8001328:	4603      	mov	r3, r0
 800132a:	460c      	mov	r4, r1
 800132c:	4618      	mov	r0, r3
 800132e:	4621      	mov	r1, r4
 8001330:	f7ff fb2c 	bl	800098c <__aeabi_d2f>
 8001334:	4603      	mov	r3, r0
 8001336:	ee00 3a10 	vmov	s0, r3
 800133a:	f006 fc27 	bl	8007b8c <sinf>
 800133e:	eeb0 7a40 	vmov.f32	s14, s0
 8001342:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800134e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001352:	ee17 1a90 	vmov	r1, s15
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <generateSineWave+0xfc>)
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int t = 0; t < SAMPLE_NUMBER; t++)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	3301      	adds	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800136a:	dbb6      	blt.n	80012da <generateSineWave+0x52>
	}
}
 800136c:	bf00      	nop
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	ecbd 8b02 	vpop	{d8}
 8001376:	bdb0      	pop	{r4, r5, r7, pc}
 8001378:	4d12d84a 	.word	0x4d12d84a
 800137c:	401921fb 	.word	0x401921fb
 8001380:	3ff00000 	.word	0x3ff00000
 8001384:	20000094 	.word	0x20000094

08001388 <addSineWaveAt>:

void addSineWaveAt(uint32_t frequency, uint32_t amplitude, uint32_t timer_frequency, uint32_t begin, uint32_t end)
{
 8001388:	b5b0      	push	{r4, r5, r7, lr}
 800138a:	ed2d 8b02 	vpush	{d8}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	603b      	str	r3, [r7, #0]
	amplitude /= 2;
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	085b      	lsrs	r3, r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
	float period = 1.0 / timer_frequency;
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff f867 	bl	8000474 <__aeabi_ui2d>
 80013a6:	4603      	mov	r3, r0
 80013a8:	460c      	mov	r4, r1
 80013aa:	461a      	mov	r2, r3
 80013ac:	4623      	mov	r3, r4
 80013ae:	f04f 0000 	mov.w	r0, #0
 80013b2:	493d      	ldr	r1, [pc, #244]	; (80014a8 <addSineWaveAt+0x120>)
 80013b4:	f7ff fa02 	bl	80007bc <__aeabi_ddiv>
 80013b8:	4603      	mov	r3, r0
 80013ba:	460c      	mov	r4, r1
 80013bc:	4618      	mov	r0, r3
 80013be:	4621      	mov	r1, r4
 80013c0:	f7ff fae4 	bl	800098c <__aeabi_d2f>
 80013c4:	4603      	mov	r3, r0
 80013c6:	61bb      	str	r3, [r7, #24]
	if(end > SAMPLE_NUMBER)
 80013c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ca:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80013ce:	d902      	bls.n	80013d6 <addSineWaveAt+0x4e>
	{
		end = SAMPLE_NUMBER;
 80013d0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80013d4:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	for(int t = begin; t < end; t++)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	61fb      	str	r3, [r7, #28]
 80013da:	e056      	b.n	800148a <addSineWaveAt+0x102>
	{
		int sample = amplitude * sinf(2.0 * PI_CONST_SOUND * t * period * frequency);
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	ee07 3a90 	vmov	s15, r3
 80013e2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80013e6:	69f8      	ldr	r0, [r7, #28]
 80013e8:	f7ff f854 	bl	8000494 <__aeabi_i2d>
 80013ec:	a32c      	add	r3, pc, #176	; (adr r3, 80014a0 <addSineWaveAt+0x118>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	f7ff f8b9 	bl	8000568 <__aeabi_dmul>
 80013f6:	4603      	mov	r3, r0
 80013f8:	460c      	mov	r4, r1
 80013fa:	4625      	mov	r5, r4
 80013fc:	461c      	mov	r4, r3
 80013fe:	69b8      	ldr	r0, [r7, #24]
 8001400:	f7ff f85a 	bl	80004b8 <__aeabi_f2d>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4620      	mov	r0, r4
 800140a:	4629      	mov	r1, r5
 800140c:	f7ff f8ac 	bl	8000568 <__aeabi_dmul>
 8001410:	4603      	mov	r3, r0
 8001412:	460c      	mov	r4, r1
 8001414:	4625      	mov	r5, r4
 8001416:	461c      	mov	r4, r3
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f7ff f82b 	bl	8000474 <__aeabi_ui2d>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4620      	mov	r0, r4
 8001424:	4629      	mov	r1, r5
 8001426:	f7ff f89f 	bl	8000568 <__aeabi_dmul>
 800142a:	4603      	mov	r3, r0
 800142c:	460c      	mov	r4, r1
 800142e:	4618      	mov	r0, r3
 8001430:	4621      	mov	r1, r4
 8001432:	f7ff faab 	bl	800098c <__aeabi_d2f>
 8001436:	4603      	mov	r3, r0
 8001438:	ee00 3a10 	vmov	s0, r3
 800143c:	f006 fba6 	bl	8007b8c <sinf>
 8001440:	eef0 7a40 	vmov.f32	s15, s0
 8001444:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001448:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800144c:	ee17 3a90 	vmov	r3, s15
 8001450:	617b      	str	r3, [r7, #20]
		sound_wav[t] = sample + (int)sound_wav[t];
 8001452:	4a16      	ldr	r2, [pc, #88]	; (80014ac <addSineWaveAt+0x124>)
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145a:	461a      	mov	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	4413      	add	r3, r2
 8001460:	4619      	mov	r1, r3
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <addSineWaveAt+0x124>)
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if(sound_wav[t] > 4095) sound_wav[t] = 4095;
 800146a:	4a10      	ldr	r2, [pc, #64]	; (80014ac <addSineWaveAt+0x124>)
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001476:	d305      	bcc.n	8001484 <addSineWaveAt+0xfc>
 8001478:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <addSineWaveAt+0x124>)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001480:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int t = begin; t < end; t++)
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	3301      	adds	r3, #1
 8001488:	61fb      	str	r3, [r7, #28]
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800148e:	429a      	cmp	r2, r3
 8001490:	d8a4      	bhi.n	80013dc <addSineWaveAt+0x54>
	}
}
 8001492:	bf00      	nop
 8001494:	3720      	adds	r7, #32
 8001496:	46bd      	mov	sp, r7
 8001498:	ecbd 8b02 	vpop	{d8}
 800149c:	bdb0      	pop	{r4, r5, r7, pc}
 800149e:	bf00      	nop
 80014a0:	4d12d84a 	.word	0x4d12d84a
 80014a4:	401921fb 	.word	0x401921fb
 80014a8:	3ff00000 	.word	0x3ff00000
 80014ac:	20000094 	.word	0x20000094

080014b0 <L3GD20_init>:
// Inicjalizacja modułu żyroskopu do odczytu
/*
 * SPI_HandleTypeDef *m_hspi_handle port - układ SPI który będzie wykorzystywany do komunikacji.
 * L3GD20 *L3GD20_data - struktura przechowuąca odczytane wartości  z żyroskopu
 */
int L3GD20_init(SPI_HandleTypeDef *m_hspi_handle, L3GD20 *L3GD20_data){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
	L3GD20_data->hspi_handle = m_hspi_handle;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	2102      	movs	r1, #2
 80014c4:	4812      	ldr	r0, [pc, #72]	; (8001510 <L3GD20_init+0x60>)
 80014c6:	f003 fa17 	bl	80048f8 <HAL_GPIO_WritePin>

	if(L3GD20_recive(L3GD20_WHO_AM_I, L3GD20_data) != 212)
 80014ca:	6839      	ldr	r1, [r7, #0]
 80014cc:	200f      	movs	r0, #15
 80014ce:	f000 f847 	bl	8001560 <L3GD20_recive>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2bd4      	cmp	r3, #212	; 0xd4
 80014d6:	d001      	beq.n	80014dc <L3GD20_init+0x2c>
	{
		// Jeśli identyfikator urządzenia nie odpowiada żyroskopowi
		return 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	e014      	b.n	8001506 <L3GD20_init+0x56>
	}

	L3GD20_send(L3GD20_CTRL_REG1, 0x0F, L3GD20_data); // aktywuje odczyty z żyroskopu
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	210f      	movs	r1, #15
 80014e0:	2020      	movs	r0, #32
 80014e2:	f000 f817 	bl	8001514 <L3GD20_send>
	L3GD20_send(L3GD20_CTRL_REG4, 0x20, L3GD20_data); // Okreslenie skali 500 dps
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	2120      	movs	r1, #32
 80014ea:	2023      	movs	r0, #35	; 0x23
 80014ec:	f000 f812 	bl	8001514 <L3GD20_send>
	L3GD20_send(L3GD20_CTRL_REG2, 0x00, L3GD20_data); // ustawia filtr górnoprzepustowy (Normal mode)
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	2100      	movs	r1, #0
 80014f4:	2021      	movs	r0, #33	; 0x21
 80014f6:	f000 f80d 	bl	8001514 <L3GD20_send>
	L3GD20_send(L3GD20_CTRL_REG5, 0x10, L3GD20_data); // włącza filtr górnoprzepustowy (enable)
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	2110      	movs	r1, #16
 80014fe:	2024      	movs	r0, #36	; 0x24
 8001500:	f000 f808 	bl	8001514 <L3GD20_send>
	return 1;
 8001504:	2301      	movs	r3, #1
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40020800 	.word	0x40020800

08001514 <L3GD20_send>:
 * L3GD20 *L3GD20_data - struktura przechowuąca odczytane wartości z żyroskopu
 * uint8_t address - adres rejestru
 * uint8_t data - dane do przesłania (1 bajt)
 */
void L3GD20_send(uint8_t address, uint8_t data, L3GD20 *L3GD20_data)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	603a      	str	r2, [r7, #0]
 800151e:	71fb      	strb	r3, [r7, #7]
 8001520:	460b      	mov	r3, r1
 8001522:	71bb      	strb	r3, [r7, #6]
	uint8_t transmit_data[2];
	transmit_data[0] = address;
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	733b      	strb	r3, [r7, #12]
	transmit_data[1] = data;
 8001528:	79bb      	ldrb	r3, [r7, #6]
 800152a:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2102      	movs	r1, #2
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <L3GD20_send+0x48>)
 8001532:	f003 f9e1 	bl	80048f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(L3GD20_data->hspi_handle, transmit_data, 2, L3GD20_SPI_WAIT_TIME);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	f107 010c 	add.w	r1, r7, #12
 800153e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001542:	2202      	movs	r2, #2
 8001544:	f004 fe86 	bl	8006254 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	2102      	movs	r1, #2
 800154c:	4803      	ldr	r0, [pc, #12]	; (800155c <L3GD20_send+0x48>)
 800154e:	f003 f9d3 	bl	80048f8 <HAL_GPIO_WritePin>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40020800 	.word	0x40020800

08001560 <L3GD20_recive>:
/*
 * L3GD20 *L3GD20_data - struktura przechowuąca odczytane wartości z żyroskopu
 * uint8_t address - adres rejestru
 */
uint8_t L3GD20_recive(uint8_t addres, L3GD20 *L3GD20_data)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af02      	add	r7, sp, #8
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
	uint8_t transmit_data[2];
	uint8_t recive_data[2];
	transmit_data[0] = addres | 0x80;
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001572:	b2db      	uxtb	r3, r3
 8001574:	733b      	strb	r3, [r7, #12]
	transmit_data[1] = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	737b      	strb	r3, [r7, #13]
	recive_data[1] = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	727b      	strb	r3, [r7, #9]
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	2102      	movs	r1, #2
 8001582:	480c      	ldr	r0, [pc, #48]	; (80015b4 <L3GD20_recive+0x54>)
 8001584:	f003 f9b8 	bl	80048f8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(L3GD20_data->hspi_handle, transmit_data, recive_data, 2, L3GD20_SPI_WAIT_TIME);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	6818      	ldr	r0, [r3, #0]
 800158c:	f107 0208 	add.w	r2, r7, #8
 8001590:	f107 010c 	add.w	r1, r7, #12
 8001594:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2302      	movs	r3, #2
 800159c:	f004 ff8e 	bl	80064bc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2102      	movs	r1, #2
 80015a4:	4803      	ldr	r0, [pc, #12]	; (80015b4 <L3GD20_recive+0x54>)
 80015a6:	f003 f9a7 	bl	80048f8 <HAL_GPIO_WritePin>
	return recive_data[1];
 80015aa:	7a7b      	ldrb	r3, [r7, #9]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40020800 	.word	0x40020800

080015b8 <L3GD20_readRawData>:

// Odczytuje z żyroskopu nieprzetworzone dane o prędkościaach obrotowych wokół osi XYZ
// i zapisuje je do struktury L3GD20 *L3GD20_data
void L3GD20_readRawData(L3GD20 *L3GD20_data)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	L3GD20_data->X_raw = L3GD20_recive(L3GD20_OUT_X_L, L3GD20_data);		//młodszy bajt
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	2028      	movs	r0, #40	; 0x28
 80015c4:	f7ff ffcc 	bl	8001560 <L3GD20_recive>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b21a      	sxth	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	809a      	strh	r2, [r3, #4]
	L3GD20_data->X_raw |= L3GD20_recive(L3GD20_OUT_X_H, L3GD20_data) << 8;	//starszy bajt
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	2029      	movs	r0, #41	; 0x29
 80015d4:	f7ff ffc4 	bl	8001560 <L3GD20_recive>
 80015d8:	4603      	mov	r3, r0
 80015da:	0219      	lsls	r1, r3, #8
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80015e2:	b20b      	sxth	r3, r1
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b21a      	sxth	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	809a      	strh	r2, [r3, #4]

	L3GD20_data->Y_raw = L3GD20_recive(L3GD20_OUT_Y_L, L3GD20_data);
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	202a      	movs	r0, #42	; 0x2a
 80015f0:	f7ff ffb6 	bl	8001560 <L3GD20_recive>
 80015f4:	4603      	mov	r3, r0
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	80da      	strh	r2, [r3, #6]
	L3GD20_data->Y_raw |= L3GD20_recive(L3GD20_OUT_Y_H, L3GD20_data) << 8;
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	202b      	movs	r0, #43	; 0x2b
 8001600:	f7ff ffae 	bl	8001560 <L3GD20_recive>
 8001604:	4603      	mov	r3, r0
 8001606:	0219      	lsls	r1, r3, #8
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800160e:	b20b      	sxth	r3, r1
 8001610:	4313      	orrs	r3, r2
 8001612:	b21a      	sxth	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	80da      	strh	r2, [r3, #6]

	L3GD20_data->Z_raw = L3GD20_recive(L3GD20_OUT_Z_L, L3GD20_data);
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	202c      	movs	r0, #44	; 0x2c
 800161c:	f7ff ffa0 	bl	8001560 <L3GD20_recive>
 8001620:	4603      	mov	r3, r0
 8001622:	b21a      	sxth	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	811a      	strh	r2, [r3, #8]
	L3GD20_data->Z_raw |= L3GD20_recive(L3GD20_OUT_Z_H, L3GD20_data) << 8;
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	202d      	movs	r0, #45	; 0x2d
 800162c:	f7ff ff98 	bl	8001560 <L3GD20_recive>
 8001630:	4603      	mov	r3, r0
 8001632:	0219      	lsls	r1, r3, #8
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800163a:	b20b      	sxth	r3, r1
 800163c:	4313      	orrs	r3, r2
 800163e:	b21a      	sxth	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	811a      	strh	r2, [r3, #8]
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	0000      	movs	r0, r0
	...

08001650 <L3GD20_convertRawData>:

// Konwertuje nieprzetworzone dane o prędkości obrotowej na stopnie na seukndę
void L3GD20_convertRawData(struct L3GD20 *L3GD20_data)
{
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	L3GD20_data->X_val = (L3GD20_data->X_raw + L3GD20_X_OFFSET) * SENSITIVITY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800165e:	3b1e      	subs	r3, #30
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe ff17 	bl	8000494 <__aeabi_i2d>
 8001666:	a31e      	add	r3, pc, #120	; (adr r3, 80016e0 <L3GD20_convertRawData+0x90>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f7fe ff7c 	bl	8000568 <__aeabi_dmul>
 8001670:	4603      	mov	r3, r0
 8001672:	460c      	mov	r4, r1
 8001674:	4618      	mov	r0, r3
 8001676:	4621      	mov	r1, r4
 8001678:	f7ff f988 	bl	800098c <__aeabi_d2f>
 800167c:	4602      	mov	r2, r0
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	60da      	str	r2, [r3, #12]
	L3GD20_data->Y_val = (L3GD20_data->Y_raw + L3GD20_Y_OFFSET) * SENSITIVITY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001688:	3b05      	subs	r3, #5
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe ff02 	bl	8000494 <__aeabi_i2d>
 8001690:	a313      	add	r3, pc, #76	; (adr r3, 80016e0 <L3GD20_convertRawData+0x90>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f7fe ff67 	bl	8000568 <__aeabi_dmul>
 800169a:	4603      	mov	r3, r0
 800169c:	460c      	mov	r4, r1
 800169e:	4618      	mov	r0, r3
 80016a0:	4621      	mov	r1, r4
 80016a2:	f7ff f973 	bl	800098c <__aeabi_d2f>
 80016a6:	4602      	mov	r2, r0
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	611a      	str	r2, [r3, #16]
	L3GD20_data->Z_val = (L3GD20_data->Z_raw + L3GD20_Z_OFFSET) * SENSITIVITY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016b2:	330d      	adds	r3, #13
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe feed 	bl	8000494 <__aeabi_i2d>
 80016ba:	a309      	add	r3, pc, #36	; (adr r3, 80016e0 <L3GD20_convertRawData+0x90>)
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	f7fe ff52 	bl	8000568 <__aeabi_dmul>
 80016c4:	4603      	mov	r3, r0
 80016c6:	460c      	mov	r4, r1
 80016c8:	4618      	mov	r0, r3
 80016ca:	4621      	mov	r1, r4
 80016cc:	f7ff f95e 	bl	800098c <__aeabi_d2f>
 80016d0:	4602      	mov	r2, r0
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	615a      	str	r2, [r3, #20]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd90      	pop	{r4, r7, pc}
 80016de:	bf00      	nop
 80016e0:	70a3d70a 	.word	0x70a3d70a
 80016e4:	3fb70a3d 	.word	0x3fb70a3d

080016e8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80016ec:	f000 ffa4 	bl	8002638 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80016f0:	20ca      	movs	r0, #202	; 0xca
 80016f2:	f000 f943 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80016f6:	20c3      	movs	r0, #195	; 0xc3
 80016f8:	f000 f94d 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80016fc:	2008      	movs	r0, #8
 80016fe:	f000 f94a 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001702:	2050      	movs	r0, #80	; 0x50
 8001704:	f000 f947 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001708:	20cf      	movs	r0, #207	; 0xcf
 800170a:	f000 f937 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800170e:	2000      	movs	r0, #0
 8001710:	f000 f941 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001714:	20c1      	movs	r0, #193	; 0xc1
 8001716:	f000 f93e 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800171a:	2030      	movs	r0, #48	; 0x30
 800171c:	f000 f93b 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001720:	20ed      	movs	r0, #237	; 0xed
 8001722:	f000 f92b 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001726:	2064      	movs	r0, #100	; 0x64
 8001728:	f000 f935 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800172c:	2003      	movs	r0, #3
 800172e:	f000 f932 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001732:	2012      	movs	r0, #18
 8001734:	f000 f92f 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001738:	2081      	movs	r0, #129	; 0x81
 800173a:	f000 f92c 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800173e:	20e8      	movs	r0, #232	; 0xe8
 8001740:	f000 f91c 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001744:	2085      	movs	r0, #133	; 0x85
 8001746:	f000 f926 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800174a:	2000      	movs	r0, #0
 800174c:	f000 f923 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001750:	2078      	movs	r0, #120	; 0x78
 8001752:	f000 f920 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001756:	20cb      	movs	r0, #203	; 0xcb
 8001758:	f000 f910 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800175c:	2039      	movs	r0, #57	; 0x39
 800175e:	f000 f91a 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001762:	202c      	movs	r0, #44	; 0x2c
 8001764:	f000 f917 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001768:	2000      	movs	r0, #0
 800176a:	f000 f914 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800176e:	2034      	movs	r0, #52	; 0x34
 8001770:	f000 f911 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001774:	2002      	movs	r0, #2
 8001776:	f000 f90e 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800177a:	20f7      	movs	r0, #247	; 0xf7
 800177c:	f000 f8fe 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001780:	2020      	movs	r0, #32
 8001782:	f000 f908 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001786:	20ea      	movs	r0, #234	; 0xea
 8001788:	f000 f8f8 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800178c:	2000      	movs	r0, #0
 800178e:	f000 f902 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001792:	2000      	movs	r0, #0
 8001794:	f000 f8ff 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001798:	20b1      	movs	r0, #177	; 0xb1
 800179a:	f000 f8ef 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800179e:	2000      	movs	r0, #0
 80017a0:	f000 f8f9 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80017a4:	201b      	movs	r0, #27
 80017a6:	f000 f8f6 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80017aa:	20b6      	movs	r0, #182	; 0xb6
 80017ac:	f000 f8e6 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80017b0:	200a      	movs	r0, #10
 80017b2:	f000 f8f0 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80017b6:	20a2      	movs	r0, #162	; 0xa2
 80017b8:	f000 f8ed 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80017bc:	20c0      	movs	r0, #192	; 0xc0
 80017be:	f000 f8dd 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80017c2:	2010      	movs	r0, #16
 80017c4:	f000 f8e7 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80017c8:	20c1      	movs	r0, #193	; 0xc1
 80017ca:	f000 f8d7 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80017ce:	2010      	movs	r0, #16
 80017d0:	f000 f8e1 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80017d4:	20c5      	movs	r0, #197	; 0xc5
 80017d6:	f000 f8d1 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80017da:	2045      	movs	r0, #69	; 0x45
 80017dc:	f000 f8db 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80017e0:	2015      	movs	r0, #21
 80017e2:	f000 f8d8 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80017e6:	20c7      	movs	r0, #199	; 0xc7
 80017e8:	f000 f8c8 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80017ec:	2090      	movs	r0, #144	; 0x90
 80017ee:	f000 f8d2 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80017f2:	2036      	movs	r0, #54	; 0x36
 80017f4:	f000 f8c2 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80017f8:	20c8      	movs	r0, #200	; 0xc8
 80017fa:	f000 f8cc 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80017fe:	20f2      	movs	r0, #242	; 0xf2
 8001800:	f000 f8bc 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001804:	2000      	movs	r0, #0
 8001806:	f000 f8c6 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800180a:	20b0      	movs	r0, #176	; 0xb0
 800180c:	f000 f8b6 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001810:	20c2      	movs	r0, #194	; 0xc2
 8001812:	f000 f8c0 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001816:	20b6      	movs	r0, #182	; 0xb6
 8001818:	f000 f8b0 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800181c:	200a      	movs	r0, #10
 800181e:	f000 f8ba 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001822:	20a7      	movs	r0, #167	; 0xa7
 8001824:	f000 f8b7 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001828:	2027      	movs	r0, #39	; 0x27
 800182a:	f000 f8b4 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800182e:	2004      	movs	r0, #4
 8001830:	f000 f8b1 	bl	8001996 <ili9341_WriteData>

  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001834:	202a      	movs	r0, #42	; 0x2a
 8001836:	f000 f8a1 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800183a:	2000      	movs	r0, #0
 800183c:	f000 f8ab 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001840:	2000      	movs	r0, #0
 8001842:	f000 f8a8 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001846:	2000      	movs	r0, #0
 8001848:	f000 f8a5 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800184c:	20ef      	movs	r0, #239	; 0xef
 800184e:	f000 f8a2 	bl	8001996 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001852:	202b      	movs	r0, #43	; 0x2b
 8001854:	f000 f892 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001858:	2000      	movs	r0, #0
 800185a:	f000 f89c 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800185e:	2000      	movs	r0, #0
 8001860:	f000 f899 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001864:	2001      	movs	r0, #1
 8001866:	f000 f896 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800186a:	203f      	movs	r0, #63	; 0x3f
 800186c:	f000 f893 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001870:	20f6      	movs	r0, #246	; 0xf6
 8001872:	f000 f883 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001876:	2001      	movs	r0, #1
 8001878:	f000 f88d 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800187c:	2000      	movs	r0, #0
 800187e:	f000 f88a 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001882:	2006      	movs	r0, #6
 8001884:	f000 f887 	bl	8001996 <ili9341_WriteData>

  ili9341_WriteReg(LCD_GRAM);
 8001888:	202c      	movs	r0, #44	; 0x2c
 800188a:	f000 f877 	bl	800197c <ili9341_WriteReg>
  LCD_Delay(200);
 800188e:	20c8      	movs	r0, #200	; 0xc8
 8001890:	f000 ff8e 	bl	80027b0 <LCD_Delay>

  ili9341_WriteReg(LCD_GAMMA);
 8001894:	2026      	movs	r0, #38	; 0x26
 8001896:	f000 f871 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800189a:	2001      	movs	r0, #1
 800189c:	f000 f87b 	bl	8001996 <ili9341_WriteData>

  ili9341_WriteReg(LCD_PGAMMA);
 80018a0:	20e0      	movs	r0, #224	; 0xe0
 80018a2:	f000 f86b 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80018a6:	200f      	movs	r0, #15
 80018a8:	f000 f875 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80018ac:	2029      	movs	r0, #41	; 0x29
 80018ae:	f000 f872 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80018b2:	2024      	movs	r0, #36	; 0x24
 80018b4:	f000 f86f 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80018b8:	200c      	movs	r0, #12
 80018ba:	f000 f86c 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80018be:	200e      	movs	r0, #14
 80018c0:	f000 f869 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80018c4:	2009      	movs	r0, #9
 80018c6:	f000 f866 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80018ca:	204e      	movs	r0, #78	; 0x4e
 80018cc:	f000 f863 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80018d0:	2078      	movs	r0, #120	; 0x78
 80018d2:	f000 f860 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80018d6:	203c      	movs	r0, #60	; 0x3c
 80018d8:	f000 f85d 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80018dc:	2009      	movs	r0, #9
 80018de:	f000 f85a 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80018e2:	2013      	movs	r0, #19
 80018e4:	f000 f857 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80018e8:	2005      	movs	r0, #5
 80018ea:	f000 f854 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80018ee:	2017      	movs	r0, #23
 80018f0:	f000 f851 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80018f4:	2011      	movs	r0, #17
 80018f6:	f000 f84e 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018fa:	2000      	movs	r0, #0
 80018fc:	f000 f84b 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001900:	20e1      	movs	r0, #225	; 0xe1
 8001902:	f000 f83b 	bl	800197c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001906:	2000      	movs	r0, #0
 8001908:	f000 f845 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800190c:	2016      	movs	r0, #22
 800190e:	f000 f842 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001912:	201b      	movs	r0, #27
 8001914:	f000 f83f 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001918:	2004      	movs	r0, #4
 800191a:	f000 f83c 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800191e:	2011      	movs	r0, #17
 8001920:	f000 f839 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001924:	2007      	movs	r0, #7
 8001926:	f000 f836 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800192a:	2031      	movs	r0, #49	; 0x31
 800192c:	f000 f833 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001930:	2033      	movs	r0, #51	; 0x33
 8001932:	f000 f830 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001936:	2042      	movs	r0, #66	; 0x42
 8001938:	f000 f82d 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800193c:	2005      	movs	r0, #5
 800193e:	f000 f82a 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001942:	200c      	movs	r0, #12
 8001944:	f000 f827 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001948:	200a      	movs	r0, #10
 800194a:	f000 f824 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800194e:	2028      	movs	r0, #40	; 0x28
 8001950:	f000 f821 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001954:	202f      	movs	r0, #47	; 0x2f
 8001956:	f000 f81e 	bl	8001996 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800195a:	200f      	movs	r0, #15
 800195c:	f000 f81b 	bl	8001996 <ili9341_WriteData>

  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001960:	2011      	movs	r0, #17
 8001962:	f000 f80b 	bl	800197c <ili9341_WriteReg>
  LCD_Delay(200);
 8001966:	20c8      	movs	r0, #200	; 0xc8
 8001968:	f000 ff22 	bl	80027b0 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800196c:	2029      	movs	r0, #41	; 0x29
 800196e:	f000 f805 	bl	800197c <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001972:	202c      	movs	r0, #44	; 0x2c
 8001974:	f000 f802 	bl	800197c <ili9341_WriteReg>
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}

0800197c <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	4618      	mov	r0, r3
 800198a:	f000 feef 	bl	800276c <LCD_IO_WriteReg>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fec0 	bl	8002728 <LCD_IO_WriteData>
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b092      	sub	sp, #72	; 0x48
 80019b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019b6:	f001 fbf3 	bl	80031a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ba:	f000 f8e7 	bl	8001b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019be:	f000 fc45 	bl	800224c <MX_GPIO_Init>
  MX_DMA_Init();
 80019c2:	f000 fbd3 	bl	800216c <MX_DMA_Init>
  MX_CRC_Init();
 80019c6:	f000 f965 	bl	8001c94 <MX_CRC_Init>
  MX_DMA2D_Init();
 80019ca:	f000 f9a1 	bl	8001d10 <MX_DMA2D_Init>
  MX_FMC_Init();
 80019ce:	f000 fbed 	bl	80021ac <MX_FMC_Init>
  MX_LTDC_Init();
 80019d2:	f000 fa0f 	bl	8001df4 <MX_LTDC_Init>
  MX_SPI5_Init();
 80019d6:	f000 facd 	bl	8001f74 <MX_SPI5_Init>
  MX_TIM1_Init();
 80019da:	f000 fb01 	bl	8001fe0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80019de:	f000 fb9b 	bl	8002118 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 80019e2:	f000 f9c7 	bl	8001d74 <MX_I2C3_Init>
  MX_DAC_Init();
 80019e6:	f000 f969 	bl	8001cbc <MX_DAC_Init>
  MX_TIM2_Init();
 80019ea:	f000 fb49 	bl	8002080 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  L3GD20 m_gyro;						// struktura z daynmi z żyroskopu
  Ball_control_data m_ball;				// struktura z informacjami o instancji piłki
  L3GD20_init(&hspi5, &m_gyro);			// Inicjalizacja żyroskopu
 80019ee:	f107 0320 	add.w	r3, r7, #32
 80019f2:	4619      	mov	r1, r3
 80019f4:	485d      	ldr	r0, [pc, #372]	; (8001b6c <main+0x1bc>)
 80019f6:	f7ff fd5b 	bl	80014b0 <L3GD20_init>
  ball_ctrl_init(&m_ball, 100, 100);	// Inicjalizacja pozycji piłki
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	2264      	movs	r2, #100	; 0x64
 80019fe:	2164      	movs	r1, #100	; 0x64
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff f993 	bl	8000d2c <ball_ctrl_init>

  generateSineWave(2000, 0, 10000);//
 8001a06:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a10:	f7ff fc3a 	bl	8001288 <generateSineWave>
  addSineWaveAt(600, 4000, 20000, 0, 800);
 8001a14:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a20:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001a24:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001a28:	f7ff fcae 	bl	8001388 <addSineWaveAt>
  addSineWaveAt(1000, 4000, 20000, 1000, 1600);
 8001a2c:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a36:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a3a:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001a3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a42:	f7ff fca1 	bl	8001388 <addSineWaveAt>
  addSineWaveAt(1400, 4000, 20000, 2000, 2400);
 8001a46:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a50:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a54:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001a58:	f44f 60af 	mov.w	r0, #1400	; 0x578
 8001a5c:	f7ff fc94 	bl	8001388 <addSineWaveAt>
  addSineWaveAt(1800, 4000, 20000, 3000, 3200);
 8001a60:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001a6a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a6e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001a72:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8001a76:	f7ff fc87 	bl	8001388 <addSineWaveAt>
  addSineWaveAt(2200, 4000, 20000, 2000, 4000);
 8001a7a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a84:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a88:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001a8c:	f640 0098 	movw	r0, #2200	; 0x898
 8001a90:	f7ff fc7a 	bl	8001388 <addSineWaveAt>

  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, (uint32_t*)sound_wav, SAMPLE_NUMBER, DAC_ALIGN_12B_R);
 8001a94:	2300      	movs	r3, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001a9c:	4a34      	ldr	r2, [pc, #208]	; (8001b70 <main+0x1c0>)
 8001a9e:	2110      	movs	r1, #16
 8001aa0:	4834      	ldr	r0, [pc, #208]	; (8001b74 <main+0x1c4>)
 8001aa2:	f001 fd01 	bl	80034a8 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 8001aa6:	4834      	ldr	r0, [pc, #208]	; (8001b78 <main+0x1c8>)
 8001aa8:	f004 ff8f 	bl	80069ca <HAL_TIM_Base_Start>

  int it = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  L3GD20_readRawData(&m_gyro);						// Odczyt danych z żyroskopu
 8001ab0:	f107 0320 	add.w	r3, r7, #32
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fd7f 	bl	80015b8 <L3GD20_readRawData>
	  L3GD20_convertRawData(&m_gyro);					// Przetworzenie danych z żyroskopu
 8001aba:	f107 0320 	add.w	r3, r7, #32
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fdc6 	bl	8001650 <L3GD20_convertRawData>
	  ball_update_ctrl_angles(&m_ball, &m_gyro, 10);	// aktualizacja sił dziłających na piłkę od żyroskopu
 8001ac4:	f107 0120 	add.w	r1, r7, #32
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	220a      	movs	r2, #10
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff f96b 	bl	8000da8 <ball_update_ctrl_angles>
	  ball_update_pos(&m_ball, 10);						// aktualizacja pozycji piłki na ekranie
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	210a      	movs	r1, #10
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff f9b2 	bl	8000e40 <ball_update_pos>

	  // sprawdzenie warunku kolizji i aktualizacja prędkości
	  WallHit collision = ball_handle_collision(&m_ball, 260, 0, 180, 0);
 8001adc:	1d38      	adds	r0, r7, #4
 8001ade:	2300      	movs	r3, #0
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	23b4      	movs	r3, #180	; 0xb4
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001aea:	f7ff fa9d 	bl	8001028 <ball_handle_collision>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	  if(collision == BALL_COLLISION_DETECTED && hdma_dac2.State == HAL_DMA_STATE_READY)
 8001af4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10e      	bne.n	8001b1a <main+0x16a>
 8001afc:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <main+0x1cc>)
 8001afe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d108      	bne.n	8001b1a <main+0x16a>
	  {
		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, (uint32_t*)sound_wav, SAMPLE_NUMBER, DAC_ALIGN_12B_R);
 8001b08:	2300      	movs	r3, #0
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001b10:	4a17      	ldr	r2, [pc, #92]	; (8001b70 <main+0x1c0>)
 8001b12:	2110      	movs	r1, #16
 8001b14:	4817      	ldr	r0, [pc, #92]	; (8001b74 <main+0x1c4>)
 8001b16:	f001 fcc7 	bl	80034a8 <HAL_DAC_Start_DMA>
	  }

	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4818      	ldr	r0, [pc, #96]	; (8001b80 <main+0x1d0>)
 8001b1e:	f002 fed3 	bl	80048c8 <HAL_GPIO_ReadPin>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d103      	bne.n	8001b30 <main+0x180>
	  {
		  // Zerowanie dryftu powstałego przy całkowaniu wartości z żyroskopu
	  	  ball_ctrl_restetDrift(&m_ball);
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff f925 	bl	8000d7a <ball_ctrl_restetDrift>
	  }

	  // Zadanie piłce pozycji
	  HAL_LTDC_SetWindowPosition_NoReload(&hltdc, m_ball.Y_screen_pos, m_ball.X_screen_pos, 1);
 8001b30:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b34:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8001b38:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b40:	2301      	movs	r3, #1
 8001b42:	ee17 2a90 	vmov	r2, s15
 8001b46:	ee17 1a10 	vmov	r1, s14
 8001b4a:	480e      	ldr	r0, [pc, #56]	; (8001b84 <main+0x1d4>)
 8001b4c:	f003 fa97 	bl	800507e <HAL_LTDC_SetWindowPosition_NoReload>

	  ReloadFlag = 0;
 8001b50:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <main+0x1d8>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
	  // Aktualizacja stanu ekranu
	  HAL_LTDC_Reload(&hltdc,LTDC_SRCR_VBR);
 8001b56:	2102      	movs	r1, #2
 8001b58:	480a      	ldr	r0, [pc, #40]	; (8001b84 <main+0x1d4>)
 8001b5a:	f003 fa61 	bl	8005020 <HAL_LTDC_Reload>

	  // Czekanie aż ekran zostanie zaaktualzizowany
	  while(ReloadFlag == 0) { }
 8001b5e:	bf00      	nop
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <main+0x1d8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0fb      	beq.n	8001b60 <main+0x1b0>
  {
 8001b68:	e7a2      	b.n	8001ab0 <main+0x100>
 8001b6a:	bf00      	nop
 8001b6c:	20003f68 	.word	0x20003f68
 8001b70:	20000094 	.word	0x20000094
 8001b74:	200040b0 	.word	0x200040b0
 8001b78:	20004144 	.word	0x20004144
 8001b7c:	20004184 	.word	0x20004184
 8001b80:	40020000 	.word	0x40020000
 8001b84:	20003fc8 	.word	0x20003fc8
 8001b88:	20000030 	.word	0x20000030

08001b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b0a0      	sub	sp, #128	; 0x80
 8001b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b96:	2230      	movs	r2, #48	; 0x30
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f005 ffee 	bl	8007b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bb0:	f107 030c 	add.w	r3, r7, #12
 8001bb4:	2230      	movs	r2, #48	; 0x30
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f005 ffdf 	bl	8007b7c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	4b32      	ldr	r3, [pc, #200]	; (8001c8c <SystemClock_Config+0x100>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	4a31      	ldr	r2, [pc, #196]	; (8001c8c <SystemClock_Config+0x100>)
 8001bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bce:	4b2f      	ldr	r3, [pc, #188]	; (8001c8c <SystemClock_Config+0x100>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	4b2c      	ldr	r3, [pc, #176]	; (8001c90 <SystemClock_Config+0x104>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001be6:	4a2a      	ldr	r2, [pc, #168]	; (8001c90 <SystemClock_Config+0x104>)
 8001be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <SystemClock_Config+0x104>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c02:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c04:	2302      	movs	r3, #2
 8001c06:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c0e:	2308      	movs	r3, #8
 8001c10:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001c12:	2390      	movs	r3, #144	; 0x90
 8001c14:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c16:	2302      	movs	r3, #2
 8001c18:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 fc04 	bl	8005430 <HAL_RCC_OscConfig>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c2e:	f000 fc5d 	bl	80024ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c32:	230f      	movs	r3, #15
 8001c34:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c36:	2302      	movs	r3, #2
 8001c38:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c44:	2300      	movs	r3, #0
 8001c46:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c4c:	2102      	movs	r1, #2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 fe5e 	bl	8005910 <HAL_RCC_ClockConfig>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001c5a:	f000 fc47 	bl	80024ec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001c5e:	2308      	movs	r3, #8
 8001c60:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001c62:	23c0      	movs	r3, #192	; 0xc0
 8001c64:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001c66:	2304      	movs	r3, #4
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001c6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	4618      	mov	r0, r3
 8001c76:	f004 f86f 	bl	8005d58 <HAL_RCCEx_PeriphCLKConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001c80:	f000 fc34 	bl	80024ec <Error_Handler>
  }
}
 8001c84:	bf00      	nop
 8001c86:	3780      	adds	r7, #128	; 0x80
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40007000 	.word	0x40007000

08001c94 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <MX_CRC_Init+0x20>)
 8001c9a:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <MX_CRC_Init+0x24>)
 8001c9c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_CRC_Init+0x20>)
 8001ca0:	f001 fbc4 	bl	800342c <HAL_CRC_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001caa:	f000 fc1f 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20003fc0 	.word	0x20003fc0
 8001cb8:	40023000 	.word	0x40023000

08001cbc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <MX_DAC_Init+0x4c>)
 8001ccc:	4a0f      	ldr	r2, [pc, #60]	; (8001d0c <MX_DAC_Init+0x50>)
 8001cce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001cd0:	480d      	ldr	r0, [pc, #52]	; (8001d08 <MX_DAC_Init+0x4c>)
 8001cd2:	f001 fbc7 	bl	8003464 <HAL_DAC_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001cdc:	f000 fc06 	bl	80024ec <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001ce0:	2324      	movs	r3, #36	; 0x24
 8001ce2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001ce8:	463b      	mov	r3, r7
 8001cea:	2210      	movs	r2, #16
 8001cec:	4619      	mov	r1, r3
 8001cee:	4806      	ldr	r0, [pc, #24]	; (8001d08 <MX_DAC_Init+0x4c>)
 8001cf0:	f001 fcfa 	bl	80036e8 <HAL_DAC_ConfigChannel>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001cfa:	f000 fbf7 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200040b0 	.word	0x200040b0
 8001d0c:	40007400 	.word	0x40007400

08001d10 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <MX_DMA2D_Init+0x5c>)
 8001d16:	4a16      	ldr	r2, [pc, #88]	; (8001d70 <MX_DMA2D_Init+0x60>)
 8001d18:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001d1a:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <MX_DMA2D_Init+0x5c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <MX_DMA2D_Init+0x5c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_DMA2D_Init+0x5c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <MX_DMA2D_Init+0x5c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MX_DMA2D_Init+0x5c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <MX_DMA2D_Init+0x5c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <MX_DMA2D_Init+0x5c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001d44:	4809      	ldr	r0, [pc, #36]	; (8001d6c <MX_DMA2D_Init+0x5c>)
 8001d46:	f002 f91f 	bl	8003f88 <HAL_DMA2D_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001d50:	f000 fbcc 	bl	80024ec <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001d54:	2101      	movs	r1, #1
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <MX_DMA2D_Init+0x5c>)
 8001d58:	f002 fa70 	bl	800423c <HAL_DMA2D_ConfigLayer>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001d62:	f000 fbc3 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20004104 	.word	0x20004104
 8001d70:	4002b000 	.word	0x4002b000

08001d74 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001d78:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <MX_I2C3_Init+0x74>)
 8001d7a:	4a1c      	ldr	r2, [pc, #112]	; (8001dec <MX_I2C3_Init+0x78>)
 8001d7c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <MX_I2C3_Init+0x74>)
 8001d80:	4a1b      	ldr	r2, [pc, #108]	; (8001df0 <MX_I2C3_Init+0x7c>)
 8001d82:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d84:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <MX_I2C3_Init+0x74>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001d8a:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <MX_I2C3_Init+0x74>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d90:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <MX_I2C3_Init+0x74>)
 8001d92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d96:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d98:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <MX_I2C3_Init+0x74>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001d9e:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <MX_I2C3_Init+0x74>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001da4:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <MX_I2C3_Init+0x74>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <MX_I2C3_Init+0x74>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001db0:	480d      	ldr	r0, [pc, #52]	; (8001de8 <MX_I2C3_Init+0x74>)
 8001db2:	f002 fdbb 	bl	800492c <HAL_I2C_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001dbc:	f000 fb96 	bl	80024ec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4809      	ldr	r0, [pc, #36]	; (8001de8 <MX_I2C3_Init+0x74>)
 8001dc4:	f002 feea 	bl	8004b9c <HAL_I2CEx_ConfigAnalogFilter>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001dce:	f000 fb8d 	bl	80024ec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4804      	ldr	r0, [pc, #16]	; (8001de8 <MX_I2C3_Init+0x74>)
 8001dd6:	f002 ff1d 	bl	8004c14 <HAL_I2CEx_ConfigDigitalFilter>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001de0:	f000 fb84 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20003f14 	.word	0x20003f14
 8001dec:	40005c00 	.word	0x40005c00
 8001df0:	000186a0 	.word	0x000186a0

08001df4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b09a      	sub	sp, #104	; 0x68
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001dfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dfe:	2234      	movs	r2, #52	; 0x34
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f005 feba 	bl	8007b7c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001e08:	463b      	mov	r3, r7
 8001e0a:	2234      	movs	r2, #52	; 0x34
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f005 feb4 	bl	8007b7c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */
  ili9341_Init();
 8001e14:	f7ff fc68 	bl	80016e8 <ili9341_Init>
  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001e18:	4b53      	ldr	r3, [pc, #332]	; (8001f68 <MX_LTDC_Init+0x174>)
 8001e1a:	4a54      	ldr	r2, [pc, #336]	; (8001f6c <MX_LTDC_Init+0x178>)
 8001e1c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001e1e:	4b52      	ldr	r3, [pc, #328]	; (8001f68 <MX_LTDC_Init+0x174>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001e24:	4b50      	ldr	r3, [pc, #320]	; (8001f68 <MX_LTDC_Init+0x174>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001e2a:	4b4f      	ldr	r3, [pc, #316]	; (8001f68 <MX_LTDC_Init+0x174>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001e30:	4b4d      	ldr	r3, [pc, #308]	; (8001f68 <MX_LTDC_Init+0x174>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001e36:	4b4c      	ldr	r3, [pc, #304]	; (8001f68 <MX_LTDC_Init+0x174>)
 8001e38:	2209      	movs	r2, #9
 8001e3a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001e3c:	4b4a      	ldr	r3, [pc, #296]	; (8001f68 <MX_LTDC_Init+0x174>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001e42:	4b49      	ldr	r3, [pc, #292]	; (8001f68 <MX_LTDC_Init+0x174>)
 8001e44:	221d      	movs	r2, #29
 8001e46:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8001e48:	4b47      	ldr	r3, [pc, #284]	; (8001f68 <MX_LTDC_Init+0x174>)
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001e4e:	4b46      	ldr	r3, [pc, #280]	; (8001f68 <MX_LTDC_Init+0x174>)
 8001e50:	f240 120d 	movw	r2, #269	; 0x10d
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8001e56:	4b44      	ldr	r3, [pc, #272]	; (8001f68 <MX_LTDC_Init+0x174>)
 8001e58:	f240 1243 	movw	r2, #323	; 0x143
 8001e5c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001e5e:	4b42      	ldr	r3, [pc, #264]	; (8001f68 <MX_LTDC_Init+0x174>)
 8001e60:	f240 1217 	movw	r2, #279	; 0x117
 8001e64:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001e66:	4b40      	ldr	r3, [pc, #256]	; (8001f68 <MX_LTDC_Init+0x174>)
 8001e68:	f240 1247 	movw	r2, #327	; 0x147
 8001e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001e6e:	4b3e      	ldr	r3, [pc, #248]	; (8001f68 <MX_LTDC_Init+0x174>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001e76:	4b3c      	ldr	r3, [pc, #240]	; (8001f68 <MX_LTDC_Init+0x174>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001e7e:	4b3a      	ldr	r3, [pc, #232]	; (8001f68 <MX_LTDC_Init+0x174>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001e86:	4838      	ldr	r0, [pc, #224]	; (8001f68 <MX_LTDC_Init+0x174>)
 8001e88:	f002 ff04 	bl	8004c94 <HAL_LTDC_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_LTDC_Init+0xa2>
  {
    Error_Handler();
 8001e92:	f000 fb2b 	bl	80024ec <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8001e9a:	23f0      	movs	r3, #240	; 0xf0
 8001e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 8001ea2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001ea6:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8001eac:	23ff      	movs	r3, #255	; 0xff
 8001eae:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001eb4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001eb8:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001eba:	2307      	movs	r3, #7
 8001ebc:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0x0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8001ec2:	23f0      	movs	r3, #240	; 0xf0
 8001ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8001ec6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001eca:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 255;
 8001ed2:	23ff      	movs	r3, #255	; 0xff
 8001ed4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001ede:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4820      	ldr	r0, [pc, #128]	; (8001f68 <MX_LTDC_Init+0x174>)
 8001ee8:	f003 f85c 	bl	8004fa4 <HAL_LTDC_ConfigLayer>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_LTDC_Init+0x102>
  {
    Error_Handler();
 8001ef2:	f000 fafb 	bl	80024ec <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 60;
 8001efa:	233c      	movs	r3, #60	; 0x3c
 8001efc:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 60;
 8001f02:	233c      	movs	r3, #60	; 0x3c
 8001f04:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001f06:	2302      	movs	r3, #2
 8001f08:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 255;
 8001f0a:	23ff      	movs	r3, #255	; 0xff
 8001f0c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 255;
 8001f0e:	23ff      	movs	r3, #255	; 0xff
 8001f10:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001f12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f16:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001f18:	2307      	movs	r3, #7
 8001f1a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 56;
 8001f20:	2338      	movs	r3, #56	; 0x38
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 57;
 8001f24:	2339      	movs	r3, #57	; 0x39
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001f3a:	463b      	mov	r3, r7
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4809      	ldr	r0, [pc, #36]	; (8001f68 <MX_LTDC_Init+0x174>)
 8001f42:	f003 f82f 	bl	8004fa4 <HAL_LTDC_ConfigLayer>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_LTDC_Init+0x15c>
  {
    Error_Handler();
 8001f4c:	f000 face 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  pLayerCfg1.FBStartAdress = (uint32_t)&ball2;
 8001f50:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <MX_LTDC_Init+0x17c>)
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1);
 8001f54:	463b      	mov	r3, r7
 8001f56:	2201      	movs	r2, #1
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4803      	ldr	r0, [pc, #12]	; (8001f68 <MX_LTDC_Init+0x174>)
 8001f5c:	f003 f822 	bl	8004fa4 <HAL_LTDC_ConfigLayer>
  /* USER CODE END LTDC_Init 2 */

}
 8001f60:	bf00      	nop
 8001f62:	3768      	adds	r7, #104	; 0x68
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20003fc8 	.word	0x20003fc8
 8001f6c:	40016800 	.word	0x40016800
 8001f70:	0800863c 	.word	0x0800863c

08001f74 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001f78:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <MX_SPI5_Init+0x64>)
 8001f7a:	4a18      	ldr	r2, [pc, #96]	; (8001fdc <MX_SPI5_Init+0x68>)
 8001f7c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001f7e:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <MX_SPI5_Init+0x64>)
 8001f80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f84:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001f86:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <MX_SPI5_Init+0x64>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <MX_SPI5_Init+0x64>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <MX_SPI5_Init+0x64>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f98:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <MX_SPI5_Init+0x64>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <MX_SPI5_Init+0x64>)
 8001fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fa4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_SPI5_Init+0x64>)
 8001fa8:	2218      	movs	r2, #24
 8001faa:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <MX_SPI5_Init+0x64>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_SPI5_Init+0x64>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fb8:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <MX_SPI5_Init+0x64>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_SPI5_Init+0x64>)
 8001fc0:	220a      	movs	r2, #10
 8001fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001fc4:	4804      	ldr	r0, [pc, #16]	; (8001fd8 <MX_SPI5_Init+0x64>)
 8001fc6:	f004 f8b9 	bl	800613c <HAL_SPI_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001fd0:	f000 fa8c 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20003f68 	.word	0x20003f68
 8001fdc:	40015000 	.word	0x40015000

08001fe0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fe6:	f107 0308 	add.w	r3, r7, #8
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <MX_TIM1_Init+0x98>)
 8001ffe:	4a1f      	ldr	r2, [pc, #124]	; (800207c <MX_TIM1_Init+0x9c>)
 8002000:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002002:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <MX_TIM1_Init+0x98>)
 8002004:	2200      	movs	r2, #0
 8002006:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002008:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <MX_TIM1_Init+0x98>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800200e:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <MX_TIM1_Init+0x98>)
 8002010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002014:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002016:	4b18      	ldr	r3, [pc, #96]	; (8002078 <MX_TIM1_Init+0x98>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800201c:	4b16      	ldr	r3, [pc, #88]	; (8002078 <MX_TIM1_Init+0x98>)
 800201e:	2200      	movs	r2, #0
 8002020:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <MX_TIM1_Init+0x98>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002028:	4813      	ldr	r0, [pc, #76]	; (8002078 <MX_TIM1_Init+0x98>)
 800202a:	f004 fca3 	bl	8006974 <HAL_TIM_Base_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002034:	f000 fa5a 	bl	80024ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800203c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800203e:	f107 0308 	add.w	r3, r7, #8
 8002042:	4619      	mov	r1, r3
 8002044:	480c      	ldr	r0, [pc, #48]	; (8002078 <MX_TIM1_Init+0x98>)
 8002046:	f004 fe10 	bl	8006c6a <HAL_TIM_ConfigClockSource>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002050:	f000 fa4c 	bl	80024ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002054:	2300      	movs	r3, #0
 8002056:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800205c:	463b      	mov	r3, r7
 800205e:	4619      	mov	r1, r3
 8002060:	4805      	ldr	r0, [pc, #20]	; (8002078 <MX_TIM1_Init+0x98>)
 8002062:	f005 f81b 	bl	800709c <HAL_TIMEx_MasterConfigSynchronization>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800206c:	f000 fa3e 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	200040c4 	.word	0x200040c4
 800207c:	40010000 	.word	0x40010000

08002080 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002086:	f107 0308 	add.w	r3, r7, #8
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002094:	463b      	mov	r3, r7
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800209c:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <MX_TIM2_Init+0x94>)
 800209e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <MX_TIM2_Init+0x94>)
 80020a6:	2248      	movs	r2, #72	; 0x48
 80020a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020aa:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <MX_TIM2_Init+0x94>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 80020b0:	4b18      	ldr	r3, [pc, #96]	; (8002114 <MX_TIM2_Init+0x94>)
 80020b2:	2232      	movs	r2, #50	; 0x32
 80020b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b6:	4b17      	ldr	r3, [pc, #92]	; (8002114 <MX_TIM2_Init+0x94>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020bc:	4b15      	ldr	r3, [pc, #84]	; (8002114 <MX_TIM2_Init+0x94>)
 80020be:	2200      	movs	r2, #0
 80020c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020c2:	4814      	ldr	r0, [pc, #80]	; (8002114 <MX_TIM2_Init+0x94>)
 80020c4:	f004 fc56 	bl	8006974 <HAL_TIM_Base_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80020ce:	f000 fa0d 	bl	80024ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020d8:	f107 0308 	add.w	r3, r7, #8
 80020dc:	4619      	mov	r1, r3
 80020de:	480d      	ldr	r0, [pc, #52]	; (8002114 <MX_TIM2_Init+0x94>)
 80020e0:	f004 fdc3 	bl	8006c6a <HAL_TIM_ConfigClockSource>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80020ea:	f000 f9ff 	bl	80024ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020ee:	2320      	movs	r3, #32
 80020f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020f6:	463b      	mov	r3, r7
 80020f8:	4619      	mov	r1, r3
 80020fa:	4806      	ldr	r0, [pc, #24]	; (8002114 <MX_TIM2_Init+0x94>)
 80020fc:	f004 ffce 	bl	800709c <HAL_TIMEx_MasterConfigSynchronization>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002106:	f000 f9f1 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800210a:	bf00      	nop
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20004144 	.word	0x20004144

08002118 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 800211e:	4a12      	ldr	r2, [pc, #72]	; (8002168 <MX_USART1_UART_Init+0x50>)
 8002120:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 8002124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002128:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002136:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 800213e:	220c      	movs	r2, #12
 8002140:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 8002150:	f005 f834 	bl	80071bc <HAL_UART_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800215a:	f000 f9c7 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20004070 	.word	0x20004070
 8002168:	40011000 	.word	0x40011000

0800216c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <MX_DMA_Init+0x3c>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a0b      	ldr	r2, [pc, #44]	; (80021a8 <MX_DMA_Init+0x3c>)
 800217c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <MX_DMA_Init+0x3c>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800218e:	2200      	movs	r2, #0
 8002190:	2100      	movs	r1, #0
 8002192:	2011      	movs	r0, #17
 8002194:	f001 f920 	bl	80033d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002198:	2011      	movs	r0, #17
 800219a:	f001 f939 	bl	8003410 <HAL_NVIC_EnableIRQ>

}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800

080021ac <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
 80021c0:	615a      	str	r2, [r3, #20]
 80021c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80021c4:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <MX_FMC_Init+0x98>)
 80021c6:	4a20      	ldr	r2, [pc, #128]	; (8002248 <MX_FMC_Init+0x9c>)
 80021c8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80021ca:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <MX_FMC_Init+0x98>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80021d0:	4b1c      	ldr	r3, [pc, #112]	; (8002244 <MX_FMC_Init+0x98>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80021d6:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <MX_FMC_Init+0x98>)
 80021d8:	2204      	movs	r2, #4
 80021da:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <MX_FMC_Init+0x98>)
 80021de:	2210      	movs	r2, #16
 80021e0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80021e2:	4b18      	ldr	r3, [pc, #96]	; (8002244 <MX_FMC_Init+0x98>)
 80021e4:	2240      	movs	r2, #64	; 0x40
 80021e6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80021e8:	4b16      	ldr	r3, [pc, #88]	; (8002244 <MX_FMC_Init+0x98>)
 80021ea:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80021ee:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <MX_FMC_Init+0x98>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <MX_FMC_Init+0x98>)
 80021f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021fc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <MX_FMC_Init+0x98>)
 8002200:	2200      	movs	r2, #0
 8002202:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <MX_FMC_Init+0x98>)
 8002206:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800220c:	2302      	movs	r3, #2
 800220e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002210:	2307      	movs	r3, #7
 8002212:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002214:	2304      	movs	r3, #4
 8002216:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002218:	2307      	movs	r3, #7
 800221a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800221c:	2303      	movs	r3, #3
 800221e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002220:	2302      	movs	r3, #2
 8002222:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002224:	2302      	movs	r3, #2
 8002226:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002228:	1d3b      	adds	r3, r7, #4
 800222a:	4619      	mov	r1, r3
 800222c:	4805      	ldr	r0, [pc, #20]	; (8002244 <MX_FMC_Init+0x98>)
 800222e:	f003 ff51 	bl	80060d4 <HAL_SDRAM_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002238:	f000 f958 	bl	80024ec <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800223c:	bf00      	nop
 800223e:	3720      	adds	r7, #32
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	200041e4 	.word	0x200041e4
 8002248:	a0000140 	.word	0xa0000140

0800224c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08e      	sub	sp, #56	; 0x38
 8002250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
 8002260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	623b      	str	r3, [r7, #32]
 8002266:	4b89      	ldr	r3, [pc, #548]	; (800248c <MX_GPIO_Init+0x240>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a88      	ldr	r2, [pc, #544]	; (800248c <MX_GPIO_Init+0x240>)
 800226c:	f043 0304 	orr.w	r3, r3, #4
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b86      	ldr	r3, [pc, #536]	; (800248c <MX_GPIO_Init+0x240>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	623b      	str	r3, [r7, #32]
 800227c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	4b82      	ldr	r3, [pc, #520]	; (800248c <MX_GPIO_Init+0x240>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a81      	ldr	r2, [pc, #516]	; (800248c <MX_GPIO_Init+0x240>)
 8002288:	f043 0320 	orr.w	r3, r3, #32
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b7f      	ldr	r3, [pc, #508]	; (800248c <MX_GPIO_Init+0x240>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	61fb      	str	r3, [r7, #28]
 8002298:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
 800229e:	4b7b      	ldr	r3, [pc, #492]	; (800248c <MX_GPIO_Init+0x240>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a7a      	ldr	r2, [pc, #488]	; (800248c <MX_GPIO_Init+0x240>)
 80022a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b78      	ldr	r3, [pc, #480]	; (800248c <MX_GPIO_Init+0x240>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b2:	61bb      	str	r3, [r7, #24]
 80022b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	4b74      	ldr	r3, [pc, #464]	; (800248c <MX_GPIO_Init+0x240>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a73      	ldr	r2, [pc, #460]	; (800248c <MX_GPIO_Init+0x240>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b71      	ldr	r3, [pc, #452]	; (800248c <MX_GPIO_Init+0x240>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	4b6d      	ldr	r3, [pc, #436]	; (800248c <MX_GPIO_Init+0x240>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a6c      	ldr	r2, [pc, #432]	; (800248c <MX_GPIO_Init+0x240>)
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b6a      	ldr	r3, [pc, #424]	; (800248c <MX_GPIO_Init+0x240>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	4b66      	ldr	r3, [pc, #408]	; (800248c <MX_GPIO_Init+0x240>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a65      	ldr	r2, [pc, #404]	; (800248c <MX_GPIO_Init+0x240>)
 80022f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
 80022fe:	4b63      	ldr	r3, [pc, #396]	; (800248c <MX_GPIO_Init+0x240>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	4b5f      	ldr	r3, [pc, #380]	; (800248c <MX_GPIO_Init+0x240>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a5e      	ldr	r2, [pc, #376]	; (800248c <MX_GPIO_Init+0x240>)
 8002314:	f043 0310 	orr.w	r3, r3, #16
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b5c      	ldr	r3, [pc, #368]	; (800248c <MX_GPIO_Init+0x240>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]
 800232a:	4b58      	ldr	r3, [pc, #352]	; (800248c <MX_GPIO_Init+0x240>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a57      	ldr	r2, [pc, #348]	; (800248c <MX_GPIO_Init+0x240>)
 8002330:	f043 0308 	orr.w	r3, r3, #8
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b55      	ldr	r3, [pc, #340]	; (800248c <MX_GPIO_Init+0x240>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002342:	2200      	movs	r2, #0
 8002344:	2116      	movs	r1, #22
 8002346:	4852      	ldr	r0, [pc, #328]	; (8002490 <MX_GPIO_Init+0x244>)
 8002348:	f002 fad6 	bl	80048f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800234c:	2200      	movs	r2, #0
 800234e:	2180      	movs	r1, #128	; 0x80
 8002350:	4850      	ldr	r0, [pc, #320]	; (8002494 <MX_GPIO_Init+0x248>)
 8002352:	f002 fad1 	bl	80048f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002356:	2200      	movs	r2, #0
 8002358:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800235c:	484e      	ldr	r0, [pc, #312]	; (8002498 <MX_GPIO_Init+0x24c>)
 800235e:	f002 facb 	bl	80048f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002362:	2200      	movs	r2, #0
 8002364:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002368:	484c      	ldr	r0, [pc, #304]	; (800249c <MX_GPIO_Init+0x250>)
 800236a:	f002 fac5 	bl	80048f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800236e:	2316      	movs	r3, #22
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002372:	2301      	movs	r3, #1
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	2300      	movs	r3, #0
 800237c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800237e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002382:	4619      	mov	r1, r3
 8002384:	4842      	ldr	r0, [pc, #264]	; (8002490 <MX_GPIO_Init+0x244>)
 8002386:	f001 ffeb 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800238a:	f248 0307 	movw	r3, #32775	; 0x8007
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002390:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <MX_GPIO_Init+0x254>)
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800239c:	4619      	mov	r1, r3
 800239e:	483d      	ldr	r0, [pc, #244]	; (8002494 <MX_GPIO_Init+0x248>)
 80023a0:	f001 ffde 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a8:	2301      	movs	r3, #1
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b0:	2300      	movs	r3, #0
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80023b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b8:	4619      	mov	r1, r3
 80023ba:	4836      	ldr	r0, [pc, #216]	; (8002494 <MX_GPIO_Init+0x248>)
 80023bc:	f001 ffd0 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80023c0:	2320      	movs	r3, #32
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80023c4:	4b36      	ldr	r3, [pc, #216]	; (80024a0 <MX_GPIO_Init+0x254>)
 80023c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80023cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d0:	4619      	mov	r1, r3
 80023d2:	482f      	ldr	r0, [pc, #188]	; (8002490 <MX_GPIO_Init+0x244>)
 80023d4:	f001 ffc4 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80023d8:	2304      	movs	r3, #4
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023dc:	2300      	movs	r3, #0
 80023de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80023e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e8:	4619      	mov	r1, r3
 80023ea:	482e      	ldr	r0, [pc, #184]	; (80024a4 <MX_GPIO_Init+0x258>)
 80023ec:	f001 ffb8 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80023f0:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fe:	2300      	movs	r3, #0
 8002400:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002402:	230c      	movs	r3, #12
 8002404:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800240a:	4619      	mov	r1, r3
 800240c:	4825      	ldr	r0, [pc, #148]	; (80024a4 <MX_GPIO_Init+0x258>)
 800240e:	f001 ffa7 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002412:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002418:	2300      	movs	r3, #0
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002424:	4619      	mov	r1, r3
 8002426:	481f      	ldr	r0, [pc, #124]	; (80024a4 <MX_GPIO_Init+0x258>)
 8002428:	f001 ff9a 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800242c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002432:	2300      	movs	r3, #0
 8002434:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800243a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800243e:	4619      	mov	r1, r3
 8002440:	4815      	ldr	r0, [pc, #84]	; (8002498 <MX_GPIO_Init+0x24c>)
 8002442:	f001 ff8d 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002446:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244c:	2301      	movs	r3, #1
 800244e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002454:	2300      	movs	r3, #0
 8002456:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800245c:	4619      	mov	r1, r3
 800245e:	480e      	ldr	r0, [pc, #56]	; (8002498 <MX_GPIO_Init+0x24c>)
 8002460:	f001 ff7e 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002464:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246a:	2301      	movs	r3, #1
 800246c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002472:	2300      	movs	r3, #0
 8002474:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800247a:	4619      	mov	r1, r3
 800247c:	4807      	ldr	r0, [pc, #28]	; (800249c <MX_GPIO_Init+0x250>)
 800247e:	f001 ff6f 	bl	8004360 <HAL_GPIO_Init>

}
 8002482:	bf00      	nop
 8002484:	3738      	adds	r7, #56	; 0x38
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800
 8002490:	40020800 	.word	0x40020800
 8002494:	40020000 	.word	0x40020000
 8002498:	40020c00 	.word	0x40020c00
 800249c:	40021800 	.word	0x40021800
 80024a0:	10120000 	.word	0x10120000
 80024a4:	40020400 	.word	0x40020400

080024a8 <HAL_LTDC_ReloadEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  ReloadFlag = 1;
 80024b0:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <HAL_LTDC_ReloadEventCallback+0x1c>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	601a      	str	r2, [r3, #0]
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	20000030 	.word	0x20000030

080024c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d101      	bne.n	80024de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80024da:	f000 fe83 	bl	80031e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40001000 	.word	0x40001000

080024ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002500:	4819      	ldr	r0, [pc, #100]	; (8002568 <SPIx_Init+0x6c>)
 8002502:	f004 f97d 	bl	8006800 <HAL_SPI_GetState>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d12b      	bne.n	8002564 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800250c:	4b16      	ldr	r3, [pc, #88]	; (8002568 <SPIx_Init+0x6c>)
 800250e:	4a17      	ldr	r2, [pc, #92]	; (800256c <SPIx_Init+0x70>)
 8002510:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <SPIx_Init+0x6c>)
 8002514:	2218      	movs	r2, #24
 8002516:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002518:	4b13      	ldr	r3, [pc, #76]	; (8002568 <SPIx_Init+0x6c>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <SPIx_Init+0x6c>)
 8002520:	2200      	movs	r2, #0
 8002522:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002524:	4b10      	ldr	r3, [pc, #64]	; (8002568 <SPIx_Init+0x6c>)
 8002526:	2200      	movs	r2, #0
 8002528:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800252a:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <SPIx_Init+0x6c>)
 800252c:	2200      	movs	r2, #0
 800252e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002530:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <SPIx_Init+0x6c>)
 8002532:	2207      	movs	r2, #7
 8002534:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002536:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <SPIx_Init+0x6c>)
 8002538:	2200      	movs	r2, #0
 800253a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <SPIx_Init+0x6c>)
 800253e:	2200      	movs	r2, #0
 8002540:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <SPIx_Init+0x6c>)
 8002544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002548:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800254a:	4b07      	ldr	r3, [pc, #28]	; (8002568 <SPIx_Init+0x6c>)
 800254c:	2200      	movs	r2, #0
 800254e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <SPIx_Init+0x6c>)
 8002552:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002556:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8002558:	4803      	ldr	r0, [pc, #12]	; (8002568 <SPIx_Init+0x6c>)
 800255a:	f000 f833 	bl	80025c4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800255e:	4802      	ldr	r0, [pc, #8]	; (8002568 <SPIx_Init+0x6c>)
 8002560:	f003 fdec 	bl	800613c <HAL_SPI_Init>
  }
}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000034 	.word	0x20000034
 800256c:	40015000 	.word	0x40015000

08002570 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <SPIx_Write+0x34>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	1db9      	adds	r1, r7, #6
 8002584:	2201      	movs	r2, #1
 8002586:	4808      	ldr	r0, [pc, #32]	; (80025a8 <SPIx_Write+0x38>)
 8002588:	f003 fe64 	bl	8006254 <HAL_SPI_Transmit>
 800258c:	4603      	mov	r3, r0
 800258e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002590:	7bfb      	ldrb	r3, [r7, #15]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002596:	f000 f809 	bl	80025ac <SPIx_Error>
  }
}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000000 	.word	0x20000000
 80025a8:	20000034 	.word	0x20000034

080025ac <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80025b0:	4803      	ldr	r0, [pc, #12]	; (80025c0 <SPIx_Error+0x14>)
 80025b2:	f003 fe27 	bl	8006204 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80025b6:	f7ff ffa1 	bl	80024fc <SPIx_Init>
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000034 	.word	0x20000034

080025c4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	; 0x28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80025cc:	2300      	movs	r3, #0
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	4b17      	ldr	r3, [pc, #92]	; (8002630 <SPIx_MspInit+0x6c>)
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	4a16      	ldr	r2, [pc, #88]	; (8002630 <SPIx_MspInit+0x6c>)
 80025d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025da:	6453      	str	r3, [r2, #68]	; 0x44
 80025dc:	4b14      	ldr	r3, [pc, #80]	; (8002630 <SPIx_MspInit+0x6c>)
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	4b10      	ldr	r3, [pc, #64]	; (8002630 <SPIx_MspInit+0x6c>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	4a0f      	ldr	r2, [pc, #60]	; (8002630 <SPIx_MspInit+0x6c>)
 80025f2:	f043 0320 	orr.w	r3, r3, #32
 80025f6:	6313      	str	r3, [r2, #48]	; 0x30
 80025f8:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <SPIx_MspInit+0x6c>)
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002604:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002608:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800260a:	2302      	movs	r3, #2
 800260c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800260e:	2302      	movs	r3, #2
 8002610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002612:	2301      	movs	r3, #1
 8002614:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002616:	2305      	movs	r3, #5
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 800261a:	f107 0314 	add.w	r3, r7, #20
 800261e:	4619      	mov	r1, r3
 8002620:	4804      	ldr	r0, [pc, #16]	; (8002634 <SPIx_MspInit+0x70>)
 8002622:	f001 fe9d 	bl	8004360 <HAL_GPIO_Init>
}
 8002626:	bf00      	nop
 8002628:	3728      	adds	r7, #40	; 0x28
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800
 8002634:	40021400 	.word	0x40021400

08002638 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800263e:	4b36      	ldr	r3, [pc, #216]	; (8002718 <LCD_IO_Init+0xe0>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d164      	bne.n	8002710 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8002646:	4b34      	ldr	r3, [pc, #208]	; (8002718 <LCD_IO_Init+0xe0>)
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800264c:	2300      	movs	r3, #0
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	4b32      	ldr	r3, [pc, #200]	; (800271c <LCD_IO_Init+0xe4>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	4a31      	ldr	r2, [pc, #196]	; (800271c <LCD_IO_Init+0xe4>)
 8002656:	f043 0308 	orr.w	r3, r3, #8
 800265a:	6313      	str	r3, [r2, #48]	; 0x30
 800265c:	4b2f      	ldr	r3, [pc, #188]	; (800271c <LCD_IO_Init+0xe4>)
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800266c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800266e:	2301      	movs	r3, #1
 8002670:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002676:	2302      	movs	r3, #2
 8002678:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800267a:	f107 030c 	add.w	r3, r7, #12
 800267e:	4619      	mov	r1, r3
 8002680:	4827      	ldr	r0, [pc, #156]	; (8002720 <LCD_IO_Init+0xe8>)
 8002682:	f001 fe6d 	bl	8004360 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	4b24      	ldr	r3, [pc, #144]	; (800271c <LCD_IO_Init+0xe4>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a23      	ldr	r2, [pc, #140]	; (800271c <LCD_IO_Init+0xe4>)
 8002690:	f043 0308 	orr.w	r3, r3, #8
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b21      	ldr	r3, [pc, #132]	; (800271c <LCD_IO_Init+0xe4>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80026a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80026a8:	2301      	movs	r3, #1
 80026aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80026b0:	2302      	movs	r3, #2
 80026b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	4619      	mov	r1, r3
 80026ba:	4819      	ldr	r0, [pc, #100]	; (8002720 <LCD_IO_Init+0xe8>)
 80026bc:	f001 fe50 	bl	8004360 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80026c0:	2300      	movs	r3, #0
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	4b15      	ldr	r3, [pc, #84]	; (800271c <LCD_IO_Init+0xe4>)
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	4a14      	ldr	r2, [pc, #80]	; (800271c <LCD_IO_Init+0xe4>)
 80026ca:	f043 0304 	orr.w	r3, r3, #4
 80026ce:	6313      	str	r3, [r2, #48]	; 0x30
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <LCD_IO_Init+0xe4>)
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80026dc:	2304      	movs	r3, #4
 80026de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80026e0:	2301      	movs	r3, #1
 80026e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80026e8:	2302      	movs	r3, #2
 80026ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80026ec:	f107 030c 	add.w	r3, r7, #12
 80026f0:	4619      	mov	r1, r3
 80026f2:	480c      	ldr	r0, [pc, #48]	; (8002724 <LCD_IO_Init+0xec>)
 80026f4:	f001 fe34 	bl	8004360 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80026f8:	2200      	movs	r2, #0
 80026fa:	2104      	movs	r1, #4
 80026fc:	4809      	ldr	r0, [pc, #36]	; (8002724 <LCD_IO_Init+0xec>)
 80026fe:	f002 f8fb 	bl	80048f8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002702:	2201      	movs	r2, #1
 8002704:	2104      	movs	r1, #4
 8002706:	4807      	ldr	r0, [pc, #28]	; (8002724 <LCD_IO_Init+0xec>)
 8002708:	f002 f8f6 	bl	80048f8 <HAL_GPIO_WritePin>

    SPIx_Init();
 800270c:	f7ff fef6 	bl	80024fc <SPIx_Init>
  }
}
 8002710:	bf00      	nop
 8002712:	3720      	adds	r7, #32
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	2000008c 	.word	0x2000008c
 800271c:	40023800 	.word	0x40023800
 8002720:	40020c00 	.word	0x40020c00
 8002724:	40020800 	.word	0x40020800

08002728 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002732:	2201      	movs	r2, #1
 8002734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002738:	480a      	ldr	r0, [pc, #40]	; (8002764 <LCD_IO_WriteData+0x3c>)
 800273a:	f002 f8dd 	bl	80048f8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800273e:	2200      	movs	r2, #0
 8002740:	2104      	movs	r1, #4
 8002742:	4809      	ldr	r0, [pc, #36]	; (8002768 <LCD_IO_WriteData+0x40>)
 8002744:	f002 f8d8 	bl	80048f8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002748:	88fb      	ldrh	r3, [r7, #6]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff ff10 	bl	8002570 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002750:	2201      	movs	r2, #1
 8002752:	2104      	movs	r1, #4
 8002754:	4804      	ldr	r0, [pc, #16]	; (8002768 <LCD_IO_WriteData+0x40>)
 8002756:	f002 f8cf 	bl	80048f8 <HAL_GPIO_WritePin>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40020c00 	.word	0x40020c00
 8002768:	40020800 	.word	0x40020800

0800276c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002776:	2200      	movs	r2, #0
 8002778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800277c:	480a      	ldr	r0, [pc, #40]	; (80027a8 <LCD_IO_WriteReg+0x3c>)
 800277e:	f002 f8bb 	bl	80048f8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002782:	2200      	movs	r2, #0
 8002784:	2104      	movs	r1, #4
 8002786:	4809      	ldr	r0, [pc, #36]	; (80027ac <LCD_IO_WriteReg+0x40>)
 8002788:	f002 f8b6 	bl	80048f8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	b29b      	uxth	r3, r3
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff feed 	bl	8002570 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002796:	2201      	movs	r2, #1
 8002798:	2104      	movs	r1, #4
 800279a:	4804      	ldr	r0, [pc, #16]	; (80027ac <LCD_IO_WriteReg+0x40>)
 800279c:	f002 f8ac 	bl	80048f8 <HAL_GPIO_WritePin>
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40020c00 	.word	0x40020c00
 80027ac:	40020800 	.word	0x40020800

080027b0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fd33 	bl	8003224 <HAL_Delay>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_MspInit+0x54>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	4a11      	ldr	r2, [pc, #68]	; (800281c <HAL_MspInit+0x54>)
 80027d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027dc:	6453      	str	r3, [r2, #68]	; 0x44
 80027de:	4b0f      	ldr	r3, [pc, #60]	; (800281c <HAL_MspInit+0x54>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e6:	607b      	str	r3, [r7, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	603b      	str	r3, [r7, #0]
 80027ee:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_MspInit+0x54>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	4a0a      	ldr	r2, [pc, #40]	; (800281c <HAL_MspInit+0x54>)
 80027f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f8:	6413      	str	r3, [r2, #64]	; 0x40
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_MspInit+0x54>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	210f      	movs	r1, #15
 800280a:	f06f 0001 	mvn.w	r0, #1
 800280e:	f000 fde3 	bl	80033d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800

08002820 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0b      	ldr	r2, [pc, #44]	; (800285c <HAL_CRC_MspInit+0x3c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d10d      	bne.n	800284e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <HAL_CRC_MspInit+0x40>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a09      	ldr	r2, [pc, #36]	; (8002860 <HAL_CRC_MspInit+0x40>)
 800283c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b07      	ldr	r3, [pc, #28]	; (8002860 <HAL_CRC_MspInit+0x40>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40023000 	.word	0x40023000
 8002860:	40023800 	.word	0x40023800

08002864 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08a      	sub	sp, #40	; 0x28
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	f107 0314 	add.w	r3, r7, #20
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a33      	ldr	r2, [pc, #204]	; (8002950 <HAL_DAC_MspInit+0xec>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d160      	bne.n	8002948 <HAL_DAC_MspInit+0xe4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	4b32      	ldr	r3, [pc, #200]	; (8002954 <HAL_DAC_MspInit+0xf0>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	4a31      	ldr	r2, [pc, #196]	; (8002954 <HAL_DAC_MspInit+0xf0>)
 8002890:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002894:	6413      	str	r3, [r2, #64]	; 0x40
 8002896:	4b2f      	ldr	r3, [pc, #188]	; (8002954 <HAL_DAC_MspInit+0xf0>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <HAL_DAC_MspInit+0xf0>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	4a2a      	ldr	r2, [pc, #168]	; (8002954 <HAL_DAC_MspInit+0xf0>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6313      	str	r3, [r2, #48]	; 0x30
 80028b2:	4b28      	ldr	r3, [pc, #160]	; (8002954 <HAL_DAC_MspInit+0xf0>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80028be:	2320      	movs	r3, #32
 80028c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028c2:	2303      	movs	r3, #3
 80028c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ca:	f107 0314 	add.w	r3, r7, #20
 80028ce:	4619      	mov	r1, r3
 80028d0:	4821      	ldr	r0, [pc, #132]	; (8002958 <HAL_DAC_MspInit+0xf4>)
 80028d2:	f001 fd45 	bl	8004360 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 80028d6:	4b21      	ldr	r3, [pc, #132]	; (800295c <HAL_DAC_MspInit+0xf8>)
 80028d8:	4a21      	ldr	r2, [pc, #132]	; (8002960 <HAL_DAC_MspInit+0xfc>)
 80028da:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 80028dc:	4b1f      	ldr	r3, [pc, #124]	; (800295c <HAL_DAC_MspInit+0xf8>)
 80028de:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80028e2:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028e4:	4b1d      	ldr	r3, [pc, #116]	; (800295c <HAL_DAC_MspInit+0xf8>)
 80028e6:	2240      	movs	r2, #64	; 0x40
 80028e8:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ea:	4b1c      	ldr	r3, [pc, #112]	; (800295c <HAL_DAC_MspInit+0xf8>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80028f0:	4b1a      	ldr	r3, [pc, #104]	; (800295c <HAL_DAC_MspInit+0xf8>)
 80028f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028f6:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028f8:	4b18      	ldr	r3, [pc, #96]	; (800295c <HAL_DAC_MspInit+0xf8>)
 80028fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028fe:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002900:	4b16      	ldr	r3, [pc, #88]	; (800295c <HAL_DAC_MspInit+0xf8>)
 8002902:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002906:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_NORMAL;
 8002908:	4b14      	ldr	r3, [pc, #80]	; (800295c <HAL_DAC_MspInit+0xf8>)
 800290a:	2200      	movs	r2, #0
 800290c:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_HIGH;
 800290e:	4b13      	ldr	r3, [pc, #76]	; (800295c <HAL_DAC_MspInit+0xf8>)
 8002910:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002914:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002916:	4b11      	ldr	r3, [pc, #68]	; (800295c <HAL_DAC_MspInit+0xf8>)
 8002918:	2200      	movs	r2, #0
 800291a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 800291c:	480f      	ldr	r0, [pc, #60]	; (800295c <HAL_DAC_MspInit+0xf8>)
 800291e:	f000 ffc5 	bl	80038ac <HAL_DMA_Init>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8002928:	f7ff fde0 	bl	80024ec <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a0b      	ldr	r2, [pc, #44]	; (800295c <HAL_DAC_MspInit+0xf8>)
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	4a0a      	ldr	r2, [pc, #40]	; (800295c <HAL_DAC_MspInit+0xf8>)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002938:	2200      	movs	r2, #0
 800293a:	2100      	movs	r1, #0
 800293c:	2036      	movs	r0, #54	; 0x36
 800293e:	f000 fd4b 	bl	80033d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002942:	2036      	movs	r0, #54	; 0x36
 8002944:	f000 fd64 	bl	8003410 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002948:	bf00      	nop
 800294a:	3728      	adds	r7, #40	; 0x28
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40007400 	.word	0x40007400
 8002954:	40023800 	.word	0x40023800
 8002958:	40020000 	.word	0x40020000
 800295c:	20004184 	.word	0x20004184
 8002960:	400260a0 	.word	0x400260a0

08002964 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0e      	ldr	r2, [pc, #56]	; (80029ac <HAL_DMA2D_MspInit+0x48>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d115      	bne.n	80029a2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <HAL_DMA2D_MspInit+0x4c>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a0c      	ldr	r2, [pc, #48]	; (80029b0 <HAL_DMA2D_MspInit+0x4c>)
 8002980:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <HAL_DMA2D_MspInit+0x4c>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002992:	2200      	movs	r2, #0
 8002994:	2105      	movs	r1, #5
 8002996:	205a      	movs	r0, #90	; 0x5a
 8002998:	f000 fd1e 	bl	80033d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800299c:	205a      	movs	r0, #90	; 0x5a
 800299e:	f000 fd37 	bl	8003410 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80029a2:	bf00      	nop
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	4002b000 	.word	0x4002b000
 80029b0:	40023800 	.word	0x40023800

080029b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08a      	sub	sp, #40	; 0x28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a29      	ldr	r2, [pc, #164]	; (8002a78 <HAL_I2C_MspInit+0xc4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d14b      	bne.n	8002a6e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <HAL_I2C_MspInit+0xc8>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	4a27      	ldr	r2, [pc, #156]	; (8002a7c <HAL_I2C_MspInit+0xc8>)
 80029e0:	f043 0304 	orr.w	r3, r3, #4
 80029e4:	6313      	str	r3, [r2, #48]	; 0x30
 80029e6:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <HAL_I2C_MspInit+0xc8>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <HAL_I2C_MspInit+0xc8>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	4a20      	ldr	r2, [pc, #128]	; (8002a7c <HAL_I2C_MspInit+0xc8>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6313      	str	r3, [r2, #48]	; 0x30
 8002a02:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <HAL_I2C_MspInit+0xc8>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a14:	2312      	movs	r3, #18
 8002a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a20:	2304      	movs	r3, #4
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002a24:	f107 0314 	add.w	r3, r7, #20
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4815      	ldr	r0, [pc, #84]	; (8002a80 <HAL_I2C_MspInit+0xcc>)
 8002a2c:	f001 fc98 	bl	8004360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002a30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a36:	2312      	movs	r3, #18
 8002a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a42:	2304      	movs	r3, #4
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002a46:	f107 0314 	add.w	r3, r7, #20
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	480d      	ldr	r0, [pc, #52]	; (8002a84 <HAL_I2C_MspInit+0xd0>)
 8002a4e:	f001 fc87 	bl	8004360 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_I2C_MspInit+0xc8>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <HAL_I2C_MspInit+0xc8>)
 8002a5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a60:	6413      	str	r3, [r2, #64]	; 0x40
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_I2C_MspInit+0xc8>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a6e:	bf00      	nop
 8002a70:	3728      	adds	r7, #40	; 0x28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40005c00 	.word	0x40005c00
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40020800 	.word	0x40020800
 8002a84:	40020000 	.word	0x40020000

08002a88 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08e      	sub	sp, #56	; 0x38
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a7b      	ldr	r2, [pc, #492]	; (8002c94 <HAL_LTDC_MspInit+0x20c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	f040 80f0 	bne.w	8002c8c <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002aac:	2300      	movs	r3, #0
 8002aae:	623b      	str	r3, [r7, #32]
 8002ab0:	4b79      	ldr	r3, [pc, #484]	; (8002c98 <HAL_LTDC_MspInit+0x210>)
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab4:	4a78      	ldr	r2, [pc, #480]	; (8002c98 <HAL_LTDC_MspInit+0x210>)
 8002ab6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002aba:	6453      	str	r3, [r2, #68]	; 0x44
 8002abc:	4b76      	ldr	r3, [pc, #472]	; (8002c98 <HAL_LTDC_MspInit+0x210>)
 8002abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ac4:	623b      	str	r3, [r7, #32]
 8002ac6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61fb      	str	r3, [r7, #28]
 8002acc:	4b72      	ldr	r3, [pc, #456]	; (8002c98 <HAL_LTDC_MspInit+0x210>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	4a71      	ldr	r2, [pc, #452]	; (8002c98 <HAL_LTDC_MspInit+0x210>)
 8002ad2:	f043 0320 	orr.w	r3, r3, #32
 8002ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad8:	4b6f      	ldr	r3, [pc, #444]	; (8002c98 <HAL_LTDC_MspInit+0x210>)
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61bb      	str	r3, [r7, #24]
 8002ae8:	4b6b      	ldr	r3, [pc, #428]	; (8002c98 <HAL_LTDC_MspInit+0x210>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	4a6a      	ldr	r2, [pc, #424]	; (8002c98 <HAL_LTDC_MspInit+0x210>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6313      	str	r3, [r2, #48]	; 0x30
 8002af4:	4b68      	ldr	r3, [pc, #416]	; (8002c98 <HAL_LTDC_MspInit+0x210>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	61bb      	str	r3, [r7, #24]
 8002afe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	4b64      	ldr	r3, [pc, #400]	; (8002c98 <HAL_LTDC_MspInit+0x210>)
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	4a63      	ldr	r2, [pc, #396]	; (8002c98 <HAL_LTDC_MspInit+0x210>)
 8002b0a:	f043 0302 	orr.w	r3, r3, #2
 8002b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b10:	4b61      	ldr	r3, [pc, #388]	; (8002c98 <HAL_LTDC_MspInit+0x210>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	4b5d      	ldr	r3, [pc, #372]	; (8002c98 <HAL_LTDC_MspInit+0x210>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	4a5c      	ldr	r2, [pc, #368]	; (8002c98 <HAL_LTDC_MspInit+0x210>)
 8002b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2c:	4b5a      	ldr	r3, [pc, #360]	; (8002c98 <HAL_LTDC_MspInit+0x210>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	4b56      	ldr	r3, [pc, #344]	; (8002c98 <HAL_LTDC_MspInit+0x210>)
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	4a55      	ldr	r2, [pc, #340]	; (8002c98 <HAL_LTDC_MspInit+0x210>)
 8002b42:	f043 0304 	orr.w	r3, r3, #4
 8002b46:	6313      	str	r3, [r2, #48]	; 0x30
 8002b48:	4b53      	ldr	r3, [pc, #332]	; (8002c98 <HAL_LTDC_MspInit+0x210>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b54:	2300      	movs	r3, #0
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	4b4f      	ldr	r3, [pc, #316]	; (8002c98 <HAL_LTDC_MspInit+0x210>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	4a4e      	ldr	r2, [pc, #312]	; (8002c98 <HAL_LTDC_MspInit+0x210>)
 8002b5e:	f043 0308 	orr.w	r3, r3, #8
 8002b62:	6313      	str	r3, [r2, #48]	; 0x30
 8002b64:	4b4c      	ldr	r3, [pc, #304]	; (8002c98 <HAL_LTDC_MspInit+0x210>)
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b76:	2302      	movs	r3, #2
 8002b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b82:	230e      	movs	r3, #14
 8002b84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4843      	ldr	r0, [pc, #268]	; (8002c9c <HAL_LTDC_MspInit+0x214>)
 8002b8e:	f001 fbe7 	bl	8004360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002b92:	f641 0358 	movw	r3, #6232	; 0x1858
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ba4:	230e      	movs	r3, #14
 8002ba6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bac:	4619      	mov	r1, r3
 8002bae:	483c      	ldr	r0, [pc, #240]	; (8002ca0 <HAL_LTDC_MspInit+0x218>)
 8002bb0:	f001 fbd6 	bl	8004360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002bc4:	2309      	movs	r3, #9
 8002bc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4835      	ldr	r0, [pc, #212]	; (8002ca4 <HAL_LTDC_MspInit+0x21c>)
 8002bd0:	f001 fbc6 	bl	8004360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002bd4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be2:	2300      	movs	r3, #0
 8002be4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002be6:	230e      	movs	r3, #14
 8002be8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bee:	4619      	mov	r1, r3
 8002bf0:	482c      	ldr	r0, [pc, #176]	; (8002ca4 <HAL_LTDC_MspInit+0x21c>)
 8002bf2:	f001 fbb5 	bl	8004360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002bf6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c04:	2300      	movs	r3, #0
 8002c06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c08:	230e      	movs	r3, #14
 8002c0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c10:	4619      	mov	r1, r3
 8002c12:	4825      	ldr	r0, [pc, #148]	; (8002ca8 <HAL_LTDC_MspInit+0x220>)
 8002c14:	f001 fba4 	bl	8004360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002c18:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c26:	2300      	movs	r3, #0
 8002c28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c2a:	230e      	movs	r3, #14
 8002c2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c32:	4619      	mov	r1, r3
 8002c34:	481d      	ldr	r0, [pc, #116]	; (8002cac <HAL_LTDC_MspInit+0x224>)
 8002c36:	f001 fb93 	bl	8004360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002c3a:	2348      	movs	r3, #72	; 0x48
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c46:	2300      	movs	r3, #0
 8002c48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c4a:	230e      	movs	r3, #14
 8002c4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c52:	4619      	mov	r1, r3
 8002c54:	4816      	ldr	r0, [pc, #88]	; (8002cb0 <HAL_LTDC_MspInit+0x228>)
 8002c56:	f001 fb83 	bl	8004360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002c5a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c60:	2302      	movs	r3, #2
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002c6c:	2309      	movs	r3, #9
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c74:	4619      	mov	r1, r3
 8002c76:	480c      	ldr	r0, [pc, #48]	; (8002ca8 <HAL_LTDC_MspInit+0x220>)
 8002c78:	f001 fb72 	bl	8004360 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2105      	movs	r1, #5
 8002c80:	2058      	movs	r0, #88	; 0x58
 8002c82:	f000 fba9 	bl	80033d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002c86:	2058      	movs	r0, #88	; 0x58
 8002c88:	f000 fbc2 	bl	8003410 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002c8c:	bf00      	nop
 8002c8e:	3738      	adds	r7, #56	; 0x38
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40016800 	.word	0x40016800
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40021400 	.word	0x40021400
 8002ca0:	40020000 	.word	0x40020000
 8002ca4:	40020400 	.word	0x40020400
 8002ca8:	40021800 	.word	0x40021800
 8002cac:	40020800 	.word	0x40020800
 8002cb0:	40020c00 	.word	0x40020c00

08002cb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08a      	sub	sp, #40	; 0x28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cbc:	f107 0314 	add.w	r3, r7, #20
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a19      	ldr	r2, [pc, #100]	; (8002d38 <HAL_SPI_MspInit+0x84>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d12c      	bne.n	8002d30 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <HAL_SPI_MspInit+0x88>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	4a17      	ldr	r2, [pc, #92]	; (8002d3c <HAL_SPI_MspInit+0x88>)
 8002ce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce6:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <HAL_SPI_MspInit+0x88>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <HAL_SPI_MspInit+0x88>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	4a10      	ldr	r2, [pc, #64]	; (8002d3c <HAL_SPI_MspInit+0x88>)
 8002cfc:	f043 0320 	orr.w	r3, r3, #32
 8002d00:	6313      	str	r3, [r2, #48]	; 0x30
 8002d02:	4b0e      	ldr	r3, [pc, #56]	; (8002d3c <HAL_SPI_MspInit+0x88>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002d0e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d14:	2302      	movs	r3, #2
 8002d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002d20:	2305      	movs	r3, #5
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d24:	f107 0314 	add.w	r3, r7, #20
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4805      	ldr	r0, [pc, #20]	; (8002d40 <HAL_SPI_MspInit+0x8c>)
 8002d2c:	f001 fb18 	bl	8004360 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002d30:	bf00      	nop
 8002d32:	3728      	adds	r7, #40	; 0x28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40015000 	.word	0x40015000
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40021400 	.word	0x40021400

08002d44 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a08      	ldr	r2, [pc, #32]	; (8002d74 <HAL_SPI_MspDeInit+0x30>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d10a      	bne.n	8002d6c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <HAL_SPI_MspDeInit+0x34>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	4a07      	ldr	r2, [pc, #28]	; (8002d78 <HAL_SPI_MspDeInit+0x34>)
 8002d5c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d60:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002d62:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002d66:	4805      	ldr	r0, [pc, #20]	; (8002d7c <HAL_SPI_MspDeInit+0x38>)
 8002d68:	f001 fca4 	bl	80046b4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40015000 	.word	0x40015000
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40021400 	.word	0x40021400

08002d80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a15      	ldr	r2, [pc, #84]	; (8002de4 <HAL_TIM_Base_MspInit+0x64>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d10e      	bne.n	8002db0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <HAL_TIM_Base_MspInit+0x68>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	4a13      	ldr	r2, [pc, #76]	; (8002de8 <HAL_TIM_Base_MspInit+0x68>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6453      	str	r3, [r2, #68]	; 0x44
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_TIM_Base_MspInit+0x68>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002dae:	e012      	b.n	8002dd6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db8:	d10d      	bne.n	8002dd6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_TIM_Base_MspInit+0x68>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	4a09      	ldr	r2, [pc, #36]	; (8002de8 <HAL_TIM_Base_MspInit+0x68>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dca:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <HAL_TIM_Base_MspInit+0x68>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
}
 8002dd6:	bf00      	nop
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40010000 	.word	0x40010000
 8002de8:	40023800 	.word	0x40023800

08002dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08a      	sub	sp, #40	; 0x28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	f107 0314 	add.w	r3, r7, #20
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a19      	ldr	r2, [pc, #100]	; (8002e70 <HAL_UART_MspInit+0x84>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d12c      	bne.n	8002e68 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	4b18      	ldr	r3, [pc, #96]	; (8002e74 <HAL_UART_MspInit+0x88>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	4a17      	ldr	r2, [pc, #92]	; (8002e74 <HAL_UART_MspInit+0x88>)
 8002e18:	f043 0310 	orr.w	r3, r3, #16
 8002e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <HAL_UART_MspInit+0x88>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <HAL_UART_MspInit+0x88>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	4a10      	ldr	r2, [pc, #64]	; (8002e74 <HAL_UART_MspInit+0x88>)
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3a:	4b0e      	ldr	r3, [pc, #56]	; (8002e74 <HAL_UART_MspInit+0x88>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002e46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e54:	2303      	movs	r3, #3
 8002e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e58:	2307      	movs	r3, #7
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	4619      	mov	r1, r3
 8002e62:	4805      	ldr	r0, [pc, #20]	; (8002e78 <HAL_UART_MspInit+0x8c>)
 8002e64:	f001 fa7c 	bl	8004360 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e68:	bf00      	nop
 8002e6a:	3728      	adds	r7, #40	; 0x28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40011000 	.word	0x40011000
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40020000 	.word	0x40020000

08002e7c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002e82:	1d3b      	adds	r3, r7, #4
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	60da      	str	r2, [r3, #12]
 8002e8e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002e90:	4b3b      	ldr	r3, [pc, #236]	; (8002f80 <HAL_FMC_MspInit+0x104>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d16f      	bne.n	8002f78 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002e98:	4b39      	ldr	r3, [pc, #228]	; (8002f80 <HAL_FMC_MspInit+0x104>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	4b38      	ldr	r3, [pc, #224]	; (8002f84 <HAL_FMC_MspInit+0x108>)
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	4a37      	ldr	r2, [pc, #220]	; (8002f84 <HAL_FMC_MspInit+0x108>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6393      	str	r3, [r2, #56]	; 0x38
 8002eae:	4b35      	ldr	r3, [pc, #212]	; (8002f84 <HAL_FMC_MspInit+0x108>)
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002eba:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002ebe:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ecc:	230c      	movs	r3, #12
 8002ece:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ed0:	1d3b      	adds	r3, r7, #4
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	482c      	ldr	r0, [pc, #176]	; (8002f88 <HAL_FMC_MspInit+0x10c>)
 8002ed6:	f001 fa43 	bl	8004360 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002eda:	2301      	movs	r3, #1
 8002edc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002eea:	230c      	movs	r3, #12
 8002eec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002eee:	1d3b      	adds	r3, r7, #4
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4826      	ldr	r0, [pc, #152]	; (8002f8c <HAL_FMC_MspInit+0x110>)
 8002ef4:	f001 fa34 	bl	8004360 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002ef8:	f248 1333 	movw	r3, #33075	; 0x8133
 8002efc:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efe:	2302      	movs	r3, #2
 8002f00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f06:	2303      	movs	r3, #3
 8002f08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f0a:	230c      	movs	r3, #12
 8002f0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f0e:	1d3b      	adds	r3, r7, #4
 8002f10:	4619      	mov	r1, r3
 8002f12:	481f      	ldr	r0, [pc, #124]	; (8002f90 <HAL_FMC_MspInit+0x114>)
 8002f14:	f001 fa24 	bl	8004360 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002f18:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002f1c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f26:	2303      	movs	r3, #3
 8002f28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f2a:	230c      	movs	r3, #12
 8002f2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f2e:	1d3b      	adds	r3, r7, #4
 8002f30:	4619      	mov	r1, r3
 8002f32:	4818      	ldr	r0, [pc, #96]	; (8002f94 <HAL_FMC_MspInit+0x118>)
 8002f34:	f001 fa14 	bl	8004360 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002f38:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002f3c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f46:	2303      	movs	r3, #3
 8002f48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f4a:	230c      	movs	r3, #12
 8002f4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f4e:	1d3b      	adds	r3, r7, #4
 8002f50:	4619      	mov	r1, r3
 8002f52:	4811      	ldr	r0, [pc, #68]	; (8002f98 <HAL_FMC_MspInit+0x11c>)
 8002f54:	f001 fa04 	bl	8004360 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002f58:	2360      	movs	r3, #96	; 0x60
 8002f5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f64:	2303      	movs	r3, #3
 8002f66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f68:	230c      	movs	r3, #12
 8002f6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f6c:	1d3b      	adds	r3, r7, #4
 8002f6e:	4619      	mov	r1, r3
 8002f70:	480a      	ldr	r0, [pc, #40]	; (8002f9c <HAL_FMC_MspInit+0x120>)
 8002f72:	f001 f9f5 	bl	8004360 <HAL_GPIO_Init>
 8002f76:	e000      	b.n	8002f7a <HAL_FMC_MspInit+0xfe>
    return;
 8002f78:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20000090 	.word	0x20000090
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40021400 	.word	0x40021400
 8002f8c:	40020800 	.word	0x40020800
 8002f90:	40021800 	.word	0x40021800
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40020c00 	.word	0x40020c00
 8002f9c:	40020400 	.word	0x40020400

08002fa0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002fa8:	f7ff ff68 	bl	8002e7c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08c      	sub	sp, #48	; 0x30
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	2036      	movs	r0, #54	; 0x36
 8002fca:	f000 fa05 	bl	80033d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002fce:	2036      	movs	r0, #54	; 0x36
 8002fd0:	f000 fa1e 	bl	8003410 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	4b1f      	ldr	r3, [pc, #124]	; (8003058 <HAL_InitTick+0xa4>)
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	4a1e      	ldr	r2, [pc, #120]	; (8003058 <HAL_InitTick+0xa4>)
 8002fde:	f043 0310 	orr.w	r3, r3, #16
 8002fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe4:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <HAL_InitTick+0xa4>)
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ff0:	f107 0210 	add.w	r2, r7, #16
 8002ff4:	f107 0314 	add.w	r3, r7, #20
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f002 fe7a 	bl	8005cf4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003000:	f002 fe50 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 8003004:	4603      	mov	r3, r0
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300c:	4a13      	ldr	r2, [pc, #76]	; (800305c <HAL_InitTick+0xa8>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	0c9b      	lsrs	r3, r3, #18
 8003014:	3b01      	subs	r3, #1
 8003016:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <HAL_InitTick+0xac>)
 800301a:	4a12      	ldr	r2, [pc, #72]	; (8003064 <HAL_InitTick+0xb0>)
 800301c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800301e:	4b10      	ldr	r3, [pc, #64]	; (8003060 <HAL_InitTick+0xac>)
 8003020:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003024:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003026:	4a0e      	ldr	r2, [pc, #56]	; (8003060 <HAL_InitTick+0xac>)
 8003028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800302c:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <HAL_InitTick+0xac>)
 800302e:	2200      	movs	r2, #0
 8003030:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003032:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_InitTick+0xac>)
 8003034:	2200      	movs	r2, #0
 8003036:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003038:	4809      	ldr	r0, [pc, #36]	; (8003060 <HAL_InitTick+0xac>)
 800303a:	f003 fc9b 	bl	8006974 <HAL_TIM_Base_Init>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d104      	bne.n	800304e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003044:	4806      	ldr	r0, [pc, #24]	; (8003060 <HAL_InitTick+0xac>)
 8003046:	f003 fce4 	bl	8006a12 <HAL_TIM_Base_Start_IT>
 800304a:	4603      	mov	r3, r0
 800304c:	e000      	b.n	8003050 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
}
 8003050:	4618      	mov	r0, r3
 8003052:	3730      	adds	r7, #48	; 0x30
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40023800 	.word	0x40023800
 800305c:	431bde83 	.word	0x431bde83
 8003060:	20004218 	.word	0x20004218
 8003064:	40001000 	.word	0x40001000

08003068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800306c:	bf00      	nop
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003076:	b480      	push	{r7}
 8003078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800307a:	e7fe      	b.n	800307a <HardFault_Handler+0x4>

0800307c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003080:	e7fe      	b.n	8003080 <MemManage_Handler+0x4>

08003082 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003086:	e7fe      	b.n	8003086 <BusFault_Handler+0x4>

08003088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800308c:	e7fe      	b.n	800308c <UsageFault_Handler+0x4>

0800308e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800308e:	b480      	push	{r7}
 8003090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030a0:	bf00      	nop
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030aa:	b480      	push	{r7}
 80030ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 80030cc:	4802      	ldr	r0, [pc, #8]	; (80030d8 <DMA1_Stream6_IRQHandler+0x10>)
 80030ce:	f000 fcf3 	bl	8003ab8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20004184 	.word	0x20004184

080030dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80030e0:	4803      	ldr	r0, [pc, #12]	; (80030f0 <TIM6_DAC_IRQHandler+0x14>)
 80030e2:	f000 fa8f 	bl	8003604 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80030e6:	4803      	ldr	r0, [pc, #12]	; (80030f4 <TIM6_DAC_IRQHandler+0x18>)
 80030e8:	f003 fcb7 	bl	8006a5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80030ec:	bf00      	nop
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	200040b0 	.word	0x200040b0
 80030f4:	20004218 	.word	0x20004218

080030f8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80030fc:	4802      	ldr	r0, [pc, #8]	; (8003108 <LTDC_IRQHandler+0x10>)
 80030fe:	f001 fe99 	bl	8004e34 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20003fc8 	.word	0x20003fc8

0800310c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003110:	4802      	ldr	r0, [pc, #8]	; (800311c <DMA2D_IRQHandler+0x10>)
 8003112:	f000 ff82 	bl	800401a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20004104 	.word	0x20004104

08003120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003124:	4b08      	ldr	r3, [pc, #32]	; (8003148 <SystemInit+0x28>)
 8003126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312a:	4a07      	ldr	r2, [pc, #28]	; (8003148 <SystemInit+0x28>)
 800312c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003134:	4b04      	ldr	r3, [pc, #16]	; (8003148 <SystemInit+0x28>)
 8003136:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800313a:	609a      	str	r2, [r3, #8]
#endif
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800314c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003184 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003150:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003152:	e003      	b.n	800315c <LoopCopyDataInit>

08003154 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003156:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003158:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800315a:	3104      	adds	r1, #4

0800315c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800315c:	480b      	ldr	r0, [pc, #44]	; (800318c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800315e:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003160:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003162:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003164:	d3f6      	bcc.n	8003154 <CopyDataInit>
  ldr  r2, =_sbss
 8003166:	4a0b      	ldr	r2, [pc, #44]	; (8003194 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003168:	e002      	b.n	8003170 <LoopFillZerobss>

0800316a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800316a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800316c:	f842 3b04 	str.w	r3, [r2], #4

08003170 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003170:	4b09      	ldr	r3, [pc, #36]	; (8003198 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003172:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003174:	d3f9      	bcc.n	800316a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003176:	f7ff ffd3 	bl	8003120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800317a:	f004 fcdb 	bl	8007b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800317e:	f7fe fc17 	bl	80019b0 <main>
  bx  lr    
 8003182:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003184:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003188:	0800a32c 	.word	0x0800a32c
  ldr  r0, =_sdata
 800318c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003190:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8003194:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8003198:	2000425c 	.word	0x2000425c

0800319c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800319c:	e7fe      	b.n	800319c <ADC_IRQHandler>
	...

080031a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031a4:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <HAL_Init+0x40>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a0d      	ldr	r2, [pc, #52]	; (80031e0 <HAL_Init+0x40>)
 80031aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_Init+0x40>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <HAL_Init+0x40>)
 80031b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <HAL_Init+0x40>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a07      	ldr	r2, [pc, #28]	; (80031e0 <HAL_Init+0x40>)
 80031c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031c8:	2003      	movs	r0, #3
 80031ca:	f000 f8fa 	bl	80033c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031ce:	2000      	movs	r0, #0
 80031d0:	f7ff fef0 	bl	8002fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031d4:	f7ff faf8 	bl	80027c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40023c00 	.word	0x40023c00

080031e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031e8:	4b06      	ldr	r3, [pc, #24]	; (8003204 <HAL_IncTick+0x20>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	4b06      	ldr	r3, [pc, #24]	; (8003208 <HAL_IncTick+0x24>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4413      	add	r3, r2
 80031f4:	4a04      	ldr	r2, [pc, #16]	; (8003208 <HAL_IncTick+0x24>)
 80031f6:	6013      	str	r3, [r2, #0]
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	2000000c 	.word	0x2000000c
 8003208:	20004258 	.word	0x20004258

0800320c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return uwTick;
 8003210:	4b03      	ldr	r3, [pc, #12]	; (8003220 <HAL_GetTick+0x14>)
 8003212:	681b      	ldr	r3, [r3, #0]
}
 8003214:	4618      	mov	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	20004258 	.word	0x20004258

08003224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800322c:	f7ff ffee 	bl	800320c <HAL_GetTick>
 8003230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d005      	beq.n	800324a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800323e:	4b09      	ldr	r3, [pc, #36]	; (8003264 <HAL_Delay+0x40>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800324a:	bf00      	nop
 800324c:	f7ff ffde 	bl	800320c <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	429a      	cmp	r2, r3
 800325a:	d8f7      	bhi.n	800324c <HAL_Delay+0x28>
  {
  }
}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	2000000c 	.word	0x2000000c

08003268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <__NVIC_SetPriorityGrouping+0x44>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003284:	4013      	ands	r3, r2
 8003286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800329a:	4a04      	ldr	r2, [pc, #16]	; (80032ac <__NVIC_SetPriorityGrouping+0x44>)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	60d3      	str	r3, [r2, #12]
}
 80032a0:	bf00      	nop
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032b4:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <__NVIC_GetPriorityGrouping+0x18>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	0a1b      	lsrs	r3, r3, #8
 80032ba:	f003 0307 	and.w	r3, r3, #7
}
 80032be:	4618      	mov	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	e000ed00 	.word	0xe000ed00

080032cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	db0b      	blt.n	80032f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	f003 021f 	and.w	r2, r3, #31
 80032e4:	4907      	ldr	r1, [pc, #28]	; (8003304 <__NVIC_EnableIRQ+0x38>)
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	2001      	movs	r0, #1
 80032ee:	fa00 f202 	lsl.w	r2, r0, r2
 80032f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	e000e100 	.word	0xe000e100

08003308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	6039      	str	r1, [r7, #0]
 8003312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003318:	2b00      	cmp	r3, #0
 800331a:	db0a      	blt.n	8003332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	b2da      	uxtb	r2, r3
 8003320:	490c      	ldr	r1, [pc, #48]	; (8003354 <__NVIC_SetPriority+0x4c>)
 8003322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003326:	0112      	lsls	r2, r2, #4
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	440b      	add	r3, r1
 800332c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003330:	e00a      	b.n	8003348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	b2da      	uxtb	r2, r3
 8003336:	4908      	ldr	r1, [pc, #32]	; (8003358 <__NVIC_SetPriority+0x50>)
 8003338:	79fb      	ldrb	r3, [r7, #7]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	3b04      	subs	r3, #4
 8003340:	0112      	lsls	r2, r2, #4
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	440b      	add	r3, r1
 8003346:	761a      	strb	r2, [r3, #24]
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	e000e100 	.word	0xe000e100
 8003358:	e000ed00 	.word	0xe000ed00

0800335c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800335c:	b480      	push	{r7}
 800335e:	b089      	sub	sp, #36	; 0x24
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f1c3 0307 	rsb	r3, r3, #7
 8003376:	2b04      	cmp	r3, #4
 8003378:	bf28      	it	cs
 800337a:	2304      	movcs	r3, #4
 800337c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	3304      	adds	r3, #4
 8003382:	2b06      	cmp	r3, #6
 8003384:	d902      	bls.n	800338c <NVIC_EncodePriority+0x30>
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	3b03      	subs	r3, #3
 800338a:	e000      	b.n	800338e <NVIC_EncodePriority+0x32>
 800338c:	2300      	movs	r3, #0
 800338e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003390:	f04f 32ff 	mov.w	r2, #4294967295
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43da      	mvns	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	401a      	ands	r2, r3
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033a4:	f04f 31ff 	mov.w	r1, #4294967295
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	fa01 f303 	lsl.w	r3, r1, r3
 80033ae:	43d9      	mvns	r1, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b4:	4313      	orrs	r3, r2
         );
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3724      	adds	r7, #36	; 0x24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff ff4c 	bl	8003268 <__NVIC_SetPriorityGrouping>
}
 80033d0:	bf00      	nop
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
 80033e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033ea:	f7ff ff61 	bl	80032b0 <__NVIC_GetPriorityGrouping>
 80033ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	6978      	ldr	r0, [r7, #20]
 80033f6:	f7ff ffb1 	bl	800335c <NVIC_EncodePriority>
 80033fa:	4602      	mov	r2, r0
 80033fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003400:	4611      	mov	r1, r2
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff ff80 	bl	8003308 <__NVIC_SetPriority>
}
 8003408:	bf00      	nop
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800341a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff ff54 	bl	80032cc <__NVIC_EnableIRQ>
}
 8003424:	bf00      	nop
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e00e      	b.n	800345c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	795b      	ldrb	r3, [r3, #5]
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d105      	bne.n	8003454 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff f9e6 	bl	8002820 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e014      	b.n	80034a0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	791b      	ldrb	r3, [r3, #4]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d105      	bne.n	800348c <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff f9ec 	bl	8002864 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	795b      	ldrb	r3, [r3, #5]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <HAL_DAC_Start_DMA+0x1e>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e08e      	b.n	80035e4 <HAL_DAC_Start_DMA+0x13c>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2202      	movs	r2, #2
 80034d0:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d12a      	bne.n	800352e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	4a43      	ldr	r2, [pc, #268]	; (80035ec <HAL_DAC_Start_DMA+0x144>)
 80034de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	4a42      	ldr	r2, [pc, #264]	; (80035f0 <HAL_DAC_Start_DMA+0x148>)
 80034e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4a41      	ldr	r2, [pc, #260]	; (80035f4 <HAL_DAC_Start_DMA+0x14c>)
 80034ee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034fe:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	2b04      	cmp	r3, #4
 8003504:	d009      	beq.n	800351a <HAL_DAC_Start_DMA+0x72>
 8003506:	2b08      	cmp	r3, #8
 8003508:	d00c      	beq.n	8003524 <HAL_DAC_Start_DMA+0x7c>
 800350a:	2b00      	cmp	r3, #0
 800350c:	d000      	beq.n	8003510 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800350e:	e039      	b.n	8003584 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3308      	adds	r3, #8
 8003516:	617b      	str	r3, [r7, #20]
        break;
 8003518:	e034      	b.n	8003584 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	330c      	adds	r3, #12
 8003520:	617b      	str	r3, [r7, #20]
        break;
 8003522:	e02f      	b.n	8003584 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3310      	adds	r3, #16
 800352a:	617b      	str	r3, [r7, #20]
        break;
 800352c:	e02a      	b.n	8003584 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	4a31      	ldr	r2, [pc, #196]	; (80035f8 <HAL_DAC_Start_DMA+0x150>)
 8003534:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	4a30      	ldr	r2, [pc, #192]	; (80035fc <HAL_DAC_Start_DMA+0x154>)
 800353c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	4a2f      	ldr	r2, [pc, #188]	; (8003600 <HAL_DAC_Start_DMA+0x158>)
 8003544:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003554:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	2b04      	cmp	r3, #4
 800355a:	d009      	beq.n	8003570 <HAL_DAC_Start_DMA+0xc8>
 800355c:	2b08      	cmp	r3, #8
 800355e:	d00c      	beq.n	800357a <HAL_DAC_Start_DMA+0xd2>
 8003560:	2b00      	cmp	r3, #0
 8003562:	d000      	beq.n	8003566 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003564:	e00e      	b.n	8003584 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3314      	adds	r3, #20
 800356c:	617b      	str	r3, [r7, #20]
        break;
 800356e:	e009      	b.n	8003584 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3318      	adds	r3, #24
 8003576:	617b      	str	r3, [r7, #20]
        break;
 8003578:	e004      	b.n	8003584 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	331c      	adds	r3, #28
 8003580:	617b      	str	r3, [r7, #20]
        break;
 8003582:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10f      	bne.n	80035aa <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003598:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6898      	ldr	r0, [r3, #8]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	f000 fa30 	bl	8003a08 <HAL_DMA_Start_IT>
 80035a8:	e00e      	b.n	80035c8 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80035b8:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	68d8      	ldr	r0, [r3, #12]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	f000 fa20 	bl	8003a08 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6819      	ldr	r1, [r3, #0]
 80035ce:	2201      	movs	r2, #1
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	409a      	lsls	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	08003783 	.word	0x08003783
 80035f0:	080037a5 	.word	0x080037a5
 80035f4:	080037c1 	.word	0x080037c1
 80035f8:	0800383f 	.word	0x0800383f
 80035fc:	08003861 	.word	0x08003861
 8003600:	0800387d 	.word	0x0800387d

08003604 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800361a:	d118      	bne.n	800364e <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2204      	movs	r2, #4
 8003620:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f043 0201 	orr.w	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003636:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003646:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f843 	bl	80036d4 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800365c:	d118      	bne.n	8003690 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2204      	movs	r2, #4
 8003662:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f043 0202 	orr.w	r2, r3, #2
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003678:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003688:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f8cd 	bl	800382a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	795b      	ldrb	r3, [r3, #5]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_DAC_ConfigChannel+0x20>
 8003704:	2302      	movs	r3, #2
 8003706:	e036      	b.n	8003776 <HAL_DAC_ConfigChannel+0x8e>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2201      	movs	r2, #1
 800370c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2202      	movs	r2, #2
 8003712:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800371c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4013      	ands	r3, r2
 800372c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	4313      	orrs	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6819      	ldr	r1, [r3, #0]
 8003756:	22c0      	movs	r2, #192	; 0xc0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43da      	mvns	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	400a      	ands	r2, r1
 8003766:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2201      	movs	r2, #1
 800376c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	371c      	adds	r7, #28
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378e:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f7ff ff81 	bl	8003698 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	711a      	strb	r2, [r3, #4]
}
 800379c:	bf00      	nop
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b0:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f7ff ff7a 	bl	80036ac <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80037b8:	bf00      	nop
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037cc:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f043 0204 	orr.w	r2, r3, #4
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f7ff ff70 	bl	80036c0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	711a      	strb	r2, [r3, #4]
}
 80037e6:	bf00      	nop
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b084      	sub	sp, #16
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f7ff ffce 	bl	80037ee <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	711a      	strb	r2, [r3, #4]
}
 8003858:	bf00      	nop
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f7ff ffc7 	bl	8003802 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003874:	bf00      	nop
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003888:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f043 0204 	orr.w	r2, r3, #4
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f7ff ffbd 	bl	8003816 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	711a      	strb	r2, [r3, #4]
}
 80038a2:	bf00      	nop
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038b8:	f7ff fca8 	bl	800320c <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e099      	b.n	80039fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0201 	bic.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038e8:	e00f      	b.n	800390a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038ea:	f7ff fc8f 	bl	800320c <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b05      	cmp	r3, #5
 80038f6:	d908      	bls.n	800390a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2203      	movs	r2, #3
 8003902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e078      	b.n	80039fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e8      	bne.n	80038ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4b38      	ldr	r3, [pc, #224]	; (8003a04 <HAL_DMA_Init+0x158>)
 8003924:	4013      	ands	r3, r2
 8003926:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003936:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003942:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800394e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4313      	orrs	r3, r2
 800395a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	2b04      	cmp	r3, #4
 8003962:	d107      	bne.n	8003974 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	4313      	orrs	r3, r2
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	4313      	orrs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f023 0307 	bic.w	r3, r3, #7
 800398a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	2b04      	cmp	r3, #4
 800399c:	d117      	bne.n	80039ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00e      	beq.n	80039ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fa6f 	bl	8003e94 <DMA_CheckFifoParam>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2240      	movs	r2, #64	; 0x40
 80039c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80039ca:	2301      	movs	r3, #1
 80039cc:	e016      	b.n	80039fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fa26 	bl	8003e28 <DMA_CalcBaseAndBitshift>
 80039dc:	4603      	mov	r3, r0
 80039de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e4:	223f      	movs	r2, #63	; 0x3f
 80039e6:	409a      	lsls	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	f010803f 	.word	0xf010803f

08003a08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_DMA_Start_IT+0x26>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e040      	b.n	8003ab0 <HAL_DMA_Start_IT+0xa8>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d12f      	bne.n	8003aa2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2202      	movs	r2, #2
 8003a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f9b8 	bl	8003dcc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a60:	223f      	movs	r2, #63	; 0x3f
 8003a62:	409a      	lsls	r2, r3
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0216 	orr.w	r2, r2, #22
 8003a76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d007      	beq.n	8003a90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0208 	orr.w	r2, r2, #8
 8003a8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	e005      	b.n	8003aae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003aaa:	2302      	movs	r3, #2
 8003aac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ac4:	4b92      	ldr	r3, [pc, #584]	; (8003d10 <HAL_DMA_IRQHandler+0x258>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a92      	ldr	r2, [pc, #584]	; (8003d14 <HAL_DMA_IRQHandler+0x25c>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	0a9b      	lsrs	r3, r3, #10
 8003ad0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae2:	2208      	movs	r2, #8
 8003ae4:	409a      	lsls	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d01a      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d013      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0204 	bic.w	r2, r2, #4
 8003b0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b10:	2208      	movs	r2, #8
 8003b12:	409a      	lsls	r2, r3
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1c:	f043 0201 	orr.w	r2, r3, #1
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b28:	2201      	movs	r2, #1
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d012      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00b      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b46:	2201      	movs	r2, #1
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b52:	f043 0202 	orr.w	r2, r3, #2
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5e:	2204      	movs	r2, #4
 8003b60:	409a      	lsls	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4013      	ands	r3, r2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d012      	beq.n	8003b90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00b      	beq.n	8003b90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	409a      	lsls	r2, r3
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	f043 0204 	orr.w	r2, r3, #4
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b94:	2210      	movs	r2, #16
 8003b96:	409a      	lsls	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d043      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d03c      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb2:	2210      	movs	r2, #16
 8003bb4:	409a      	lsls	r2, r3
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d018      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d108      	bne.n	8003be8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d024      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	4798      	blx	r3
 8003be6:	e01f      	b.n	8003c28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d01b      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	4798      	blx	r3
 8003bf8:	e016      	b.n	8003c28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d107      	bne.n	8003c18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0208 	bic.w	r2, r2, #8
 8003c16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	409a      	lsls	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4013      	ands	r3, r2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 808e 	beq.w	8003d56 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 8086 	beq.w	8003d56 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4e:	2220      	movs	r2, #32
 8003c50:	409a      	lsls	r2, r3
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b05      	cmp	r3, #5
 8003c60:	d136      	bne.n	8003cd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0216 	bic.w	r2, r2, #22
 8003c70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695a      	ldr	r2, [r3, #20]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d103      	bne.n	8003c92 <HAL_DMA_IRQHandler+0x1da>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d007      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0208 	bic.w	r2, r2, #8
 8003ca0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca6:	223f      	movs	r2, #63	; 0x3f
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d07d      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	4798      	blx	r3
        }
        return;
 8003cce:	e078      	b.n	8003dc2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d01c      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d108      	bne.n	8003cfe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d030      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	4798      	blx	r3
 8003cfc:	e02b      	b.n	8003d56 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d027      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	4798      	blx	r3
 8003d0e:	e022      	b.n	8003d56 <HAL_DMA_IRQHandler+0x29e>
 8003d10:	20000004 	.word	0x20000004
 8003d14:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10f      	bne.n	8003d46 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0210 	bic.w	r2, r2, #16
 8003d34:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d032      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d022      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2205      	movs	r2, #5
 8003d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0201 	bic.w	r2, r2, #1
 8003d80:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	3301      	adds	r3, #1
 8003d86:	60bb      	str	r3, [r7, #8]
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d307      	bcc.n	8003d9e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f2      	bne.n	8003d82 <HAL_DMA_IRQHandler+0x2ca>
 8003d9c:	e000      	b.n	8003da0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003d9e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	4798      	blx	r3
 8003dc0:	e000      	b.n	8003dc4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003dc2:	bf00      	nop
    }
  }
}
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop

08003dcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003de8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2b40      	cmp	r3, #64	; 0x40
 8003df8:	d108      	bne.n	8003e0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e0a:	e007      	b.n	8003e1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	60da      	str	r2, [r3, #12]
}
 8003e1c:	bf00      	nop
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	3b10      	subs	r3, #16
 8003e38:	4a14      	ldr	r2, [pc, #80]	; (8003e8c <DMA_CalcBaseAndBitshift+0x64>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	091b      	lsrs	r3, r3, #4
 8003e40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e42:	4a13      	ldr	r2, [pc, #76]	; (8003e90 <DMA_CalcBaseAndBitshift+0x68>)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d909      	bls.n	8003e6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e5e:	f023 0303 	bic.w	r3, r3, #3
 8003e62:	1d1a      	adds	r2, r3, #4
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	659a      	str	r2, [r3, #88]	; 0x58
 8003e68:	e007      	b.n	8003e7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e72:	f023 0303 	bic.w	r3, r3, #3
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	aaaaaaab 	.word	0xaaaaaaab
 8003e90:	08009f44 	.word	0x08009f44

08003e94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d11f      	bne.n	8003eee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b03      	cmp	r3, #3
 8003eb2:	d855      	bhi.n	8003f60 <DMA_CheckFifoParam+0xcc>
 8003eb4:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <DMA_CheckFifoParam+0x28>)
 8003eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eba:	bf00      	nop
 8003ebc:	08003ecd 	.word	0x08003ecd
 8003ec0:	08003edf 	.word	0x08003edf
 8003ec4:	08003ecd 	.word	0x08003ecd
 8003ec8:	08003f61 	.word	0x08003f61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d045      	beq.n	8003f64 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003edc:	e042      	b.n	8003f64 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ee6:	d13f      	bne.n	8003f68 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eec:	e03c      	b.n	8003f68 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef6:	d121      	bne.n	8003f3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	d836      	bhi.n	8003f6c <DMA_CheckFifoParam+0xd8>
 8003efe:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <DMA_CheckFifoParam+0x70>)
 8003f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f04:	08003f15 	.word	0x08003f15
 8003f08:	08003f1b 	.word	0x08003f1b
 8003f0c:	08003f15 	.word	0x08003f15
 8003f10:	08003f2d 	.word	0x08003f2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	73fb      	strb	r3, [r7, #15]
      break;
 8003f18:	e02f      	b.n	8003f7a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d024      	beq.n	8003f70 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f2a:	e021      	b.n	8003f70 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f34:	d11e      	bne.n	8003f74 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f3a:	e01b      	b.n	8003f74 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d902      	bls.n	8003f48 <DMA_CheckFifoParam+0xb4>
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d003      	beq.n	8003f4e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f46:	e018      	b.n	8003f7a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f4c:	e015      	b.n	8003f7a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00e      	beq.n	8003f78 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8003f5e:	e00b      	b.n	8003f78 <DMA_CheckFifoParam+0xe4>
      break;
 8003f60:	bf00      	nop
 8003f62:	e00a      	b.n	8003f7a <DMA_CheckFifoParam+0xe6>
      break;
 8003f64:	bf00      	nop
 8003f66:	e008      	b.n	8003f7a <DMA_CheckFifoParam+0xe6>
      break;
 8003f68:	bf00      	nop
 8003f6a:	e006      	b.n	8003f7a <DMA_CheckFifoParam+0xe6>
      break;
 8003f6c:	bf00      	nop
 8003f6e:	e004      	b.n	8003f7a <DMA_CheckFifoParam+0xe6>
      break;
 8003f70:	bf00      	nop
 8003f72:	e002      	b.n	8003f7a <DMA_CheckFifoParam+0xe6>
      break;   
 8003f74:	bf00      	nop
 8003f76:	e000      	b.n	8003f7a <DMA_CheckFifoParam+0xe6>
      break;
 8003f78:	bf00      	nop
    }
  } 
  
  return status; 
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e03b      	b.n	8004012 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fe fcd8 	bl	8002964 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd8:	f023 0107 	bic.w	r1, r3, #7
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003ff2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	68d1      	ldr	r1, [r2, #12]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	430b      	orrs	r3, r1
 8004000:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b00      	cmp	r3, #0
 800403a:	d026      	beq.n	800408a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	2b00      	cmp	r3, #0
 8004044:	d021      	beq.n	800408a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004054:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405a:	f043 0201 	orr.w	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2201      	movs	r2, #1
 8004068:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2204      	movs	r2, #4
 800406e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b00      	cmp	r3, #0
 8004092:	d026      	beq.n	80040e2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d021      	beq.n	80040e2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040ac:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2220      	movs	r2, #32
 80040b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ba:	f043 0202 	orr.w	r2, r3, #2
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2204      	movs	r2, #4
 80040c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d026      	beq.n	800413a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d021      	beq.n	800413a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004104:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2208      	movs	r2, #8
 800410c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004112:	f043 0204 	orr.w	r2, r3, #4
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2204      	movs	r2, #4
 800411e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d013      	beq.n	800416c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00e      	beq.n	800416c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800415c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2204      	movs	r2, #4
 8004164:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f853 	bl	8004212 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d024      	beq.n	80041c0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800417c:	2b00      	cmp	r3, #0
 800417e:	d01f      	beq.n	80041c0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800418e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2202      	movs	r2, #2
 8004196:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d01f      	beq.n	800420a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01a      	beq.n	800420a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041e2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2210      	movs	r2, #16
 80041ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f80e 	bl	8004226 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800420a:	bf00      	nop
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
	...

0800423c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_DMA2D_ConfigLayer+0x20>
 8004258:	2302      	movs	r3, #2
 800425a:	e079      	b.n	8004350 <HAL_DMA2D_ConfigLayer+0x114>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	3318      	adds	r3, #24
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	4413      	add	r3, r2
 8004276:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	041b      	lsls	r3, r3, #16
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004286:	4b35      	ldr	r3, [pc, #212]	; (800435c <HAL_DMA2D_ConfigLayer+0x120>)
 8004288:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b0a      	cmp	r3, #10
 8004290:	d003      	beq.n	800429a <HAL_DMA2D_ConfigLayer+0x5e>
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b09      	cmp	r3, #9
 8004298:	d107      	bne.n	80042aa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	e005      	b.n	80042b6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	061b      	lsls	r3, r3, #24
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d120      	bne.n	80042fe <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	43db      	mvns	r3, r3
 80042c6:	ea02 0103 	and.w	r1, r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b0a      	cmp	r3, #10
 80042e4:	d003      	beq.n	80042ee <HAL_DMA2D_ConfigLayer+0xb2>
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b09      	cmp	r3, #9
 80042ec:	d127      	bne.n	800433e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80042fa:	629a      	str	r2, [r3, #40]	; 0x28
 80042fc:	e01f      	b.n	800433e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	69da      	ldr	r2, [r3, #28]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	43db      	mvns	r3, r3
 8004308:	ea02 0103 	and.w	r1, r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	430a      	orrs	r2, r1
 8004314:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b0a      	cmp	r3, #10
 8004326:	d003      	beq.n	8004330 <HAL_DMA2D_ConfigLayer+0xf4>
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b09      	cmp	r3, #9
 800432e:	d106      	bne.n	800433e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800433c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	371c      	adds	r7, #28
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	ff03000f 	.word	0xff03000f

08004360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004360:	b480      	push	{r7}
 8004362:	b089      	sub	sp, #36	; 0x24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800436e:	2300      	movs	r3, #0
 8004370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004372:	2300      	movs	r3, #0
 8004374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004376:	2300      	movs	r3, #0
 8004378:	61fb      	str	r3, [r7, #28]
 800437a:	e177      	b.n	800466c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800437c:	2201      	movs	r2, #1
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4013      	ands	r3, r2
 800438e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	429a      	cmp	r2, r3
 8004396:	f040 8166 	bne.w	8004666 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d00b      	beq.n	80043ba <HAL_GPIO_Init+0x5a>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d007      	beq.n	80043ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043ae:	2b11      	cmp	r3, #17
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b12      	cmp	r3, #18
 80043b8:	d130      	bne.n	800441c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	2203      	movs	r2, #3
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	43db      	mvns	r3, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4013      	ands	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043f0:	2201      	movs	r2, #1
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	43db      	mvns	r3, r3
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4013      	ands	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	091b      	lsrs	r3, r3, #4
 8004406:	f003 0201 	and.w	r2, r3, #1
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4313      	orrs	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	2203      	movs	r2, #3
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	43db      	mvns	r3, r3
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	4013      	ands	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4313      	orrs	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d003      	beq.n	800445c <HAL_GPIO_Init+0xfc>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b12      	cmp	r3, #18
 800445a:	d123      	bne.n	80044a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	08da      	lsrs	r2, r3, #3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3208      	adds	r2, #8
 8004464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004468:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	220f      	movs	r2, #15
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	43db      	mvns	r3, r3
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	4013      	ands	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	4313      	orrs	r3, r2
 8004494:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	08da      	lsrs	r2, r3, #3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3208      	adds	r2, #8
 800449e:	69b9      	ldr	r1, [r7, #24]
 80044a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	2203      	movs	r2, #3
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	43db      	mvns	r3, r3
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4013      	ands	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 0203 	and.w	r2, r3, #3
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 80c0 	beq.w	8004666 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	4b65      	ldr	r3, [pc, #404]	; (8004680 <HAL_GPIO_Init+0x320>)
 80044ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ee:	4a64      	ldr	r2, [pc, #400]	; (8004680 <HAL_GPIO_Init+0x320>)
 80044f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044f4:	6453      	str	r3, [r2, #68]	; 0x44
 80044f6:	4b62      	ldr	r3, [pc, #392]	; (8004680 <HAL_GPIO_Init+0x320>)
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004502:	4a60      	ldr	r2, [pc, #384]	; (8004684 <HAL_GPIO_Init+0x324>)
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	089b      	lsrs	r3, r3, #2
 8004508:	3302      	adds	r3, #2
 800450a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800450e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	220f      	movs	r2, #15
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	43db      	mvns	r3, r3
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	4013      	ands	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a57      	ldr	r2, [pc, #348]	; (8004688 <HAL_GPIO_Init+0x328>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d037      	beq.n	800459e <HAL_GPIO_Init+0x23e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a56      	ldr	r2, [pc, #344]	; (800468c <HAL_GPIO_Init+0x32c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d031      	beq.n	800459a <HAL_GPIO_Init+0x23a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a55      	ldr	r2, [pc, #340]	; (8004690 <HAL_GPIO_Init+0x330>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d02b      	beq.n	8004596 <HAL_GPIO_Init+0x236>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a54      	ldr	r2, [pc, #336]	; (8004694 <HAL_GPIO_Init+0x334>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d025      	beq.n	8004592 <HAL_GPIO_Init+0x232>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a53      	ldr	r2, [pc, #332]	; (8004698 <HAL_GPIO_Init+0x338>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d01f      	beq.n	800458e <HAL_GPIO_Init+0x22e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a52      	ldr	r2, [pc, #328]	; (800469c <HAL_GPIO_Init+0x33c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d019      	beq.n	800458a <HAL_GPIO_Init+0x22a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a51      	ldr	r2, [pc, #324]	; (80046a0 <HAL_GPIO_Init+0x340>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d013      	beq.n	8004586 <HAL_GPIO_Init+0x226>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a50      	ldr	r2, [pc, #320]	; (80046a4 <HAL_GPIO_Init+0x344>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00d      	beq.n	8004582 <HAL_GPIO_Init+0x222>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a4f      	ldr	r2, [pc, #316]	; (80046a8 <HAL_GPIO_Init+0x348>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d007      	beq.n	800457e <HAL_GPIO_Init+0x21e>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a4e      	ldr	r2, [pc, #312]	; (80046ac <HAL_GPIO_Init+0x34c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d101      	bne.n	800457a <HAL_GPIO_Init+0x21a>
 8004576:	2309      	movs	r3, #9
 8004578:	e012      	b.n	80045a0 <HAL_GPIO_Init+0x240>
 800457a:	230a      	movs	r3, #10
 800457c:	e010      	b.n	80045a0 <HAL_GPIO_Init+0x240>
 800457e:	2308      	movs	r3, #8
 8004580:	e00e      	b.n	80045a0 <HAL_GPIO_Init+0x240>
 8004582:	2307      	movs	r3, #7
 8004584:	e00c      	b.n	80045a0 <HAL_GPIO_Init+0x240>
 8004586:	2306      	movs	r3, #6
 8004588:	e00a      	b.n	80045a0 <HAL_GPIO_Init+0x240>
 800458a:	2305      	movs	r3, #5
 800458c:	e008      	b.n	80045a0 <HAL_GPIO_Init+0x240>
 800458e:	2304      	movs	r3, #4
 8004590:	e006      	b.n	80045a0 <HAL_GPIO_Init+0x240>
 8004592:	2303      	movs	r3, #3
 8004594:	e004      	b.n	80045a0 <HAL_GPIO_Init+0x240>
 8004596:	2302      	movs	r3, #2
 8004598:	e002      	b.n	80045a0 <HAL_GPIO_Init+0x240>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <HAL_GPIO_Init+0x240>
 800459e:	2300      	movs	r3, #0
 80045a0:	69fa      	ldr	r2, [r7, #28]
 80045a2:	f002 0203 	and.w	r2, r2, #3
 80045a6:	0092      	lsls	r2, r2, #2
 80045a8:	4093      	lsls	r3, r2
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045b0:	4934      	ldr	r1, [pc, #208]	; (8004684 <HAL_GPIO_Init+0x324>)
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	089b      	lsrs	r3, r3, #2
 80045b6:	3302      	adds	r3, #2
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045be:	4b3c      	ldr	r3, [pc, #240]	; (80046b0 <HAL_GPIO_Init+0x350>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	43db      	mvns	r3, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4013      	ands	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045e2:	4a33      	ldr	r2, [pc, #204]	; (80046b0 <HAL_GPIO_Init+0x350>)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80045e8:	4b31      	ldr	r3, [pc, #196]	; (80046b0 <HAL_GPIO_Init+0x350>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	43db      	mvns	r3, r3
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4013      	ands	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800460c:	4a28      	ldr	r2, [pc, #160]	; (80046b0 <HAL_GPIO_Init+0x350>)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004612:	4b27      	ldr	r3, [pc, #156]	; (80046b0 <HAL_GPIO_Init+0x350>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	43db      	mvns	r3, r3
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4013      	ands	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004636:	4a1e      	ldr	r2, [pc, #120]	; (80046b0 <HAL_GPIO_Init+0x350>)
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800463c:	4b1c      	ldr	r3, [pc, #112]	; (80046b0 <HAL_GPIO_Init+0x350>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	43db      	mvns	r3, r3
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	4013      	ands	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004660:	4a13      	ldr	r2, [pc, #76]	; (80046b0 <HAL_GPIO_Init+0x350>)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	3301      	adds	r3, #1
 800466a:	61fb      	str	r3, [r7, #28]
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	2b0f      	cmp	r3, #15
 8004670:	f67f ae84 	bls.w	800437c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004674:	bf00      	nop
 8004676:	3724      	adds	r7, #36	; 0x24
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40023800 	.word	0x40023800
 8004684:	40013800 	.word	0x40013800
 8004688:	40020000 	.word	0x40020000
 800468c:	40020400 	.word	0x40020400
 8004690:	40020800 	.word	0x40020800
 8004694:	40020c00 	.word	0x40020c00
 8004698:	40021000 	.word	0x40021000
 800469c:	40021400 	.word	0x40021400
 80046a0:	40021800 	.word	0x40021800
 80046a4:	40021c00 	.word	0x40021c00
 80046a8:	40022000 	.word	0x40022000
 80046ac:	40022400 	.word	0x40022400
 80046b0:	40013c00 	.word	0x40013c00

080046b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046be:	2300      	movs	r3, #0
 80046c0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	e0d9      	b.n	8004884 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046d0:	2201      	movs	r2, #1
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	4013      	ands	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	f040 80c9 	bne.w	800487e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80046ec:	4a6a      	ldr	r2, [pc, #424]	; (8004898 <HAL_GPIO_DeInit+0x1e4>)
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	089b      	lsrs	r3, r3, #2
 80046f2:	3302      	adds	r3, #2
 80046f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f003 0303 	and.w	r3, r3, #3
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	220f      	movs	r2, #15
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	4013      	ands	r3, r2
 800470c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a62      	ldr	r2, [pc, #392]	; (800489c <HAL_GPIO_DeInit+0x1e8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d037      	beq.n	8004786 <HAL_GPIO_DeInit+0xd2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a61      	ldr	r2, [pc, #388]	; (80048a0 <HAL_GPIO_DeInit+0x1ec>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d031      	beq.n	8004782 <HAL_GPIO_DeInit+0xce>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a60      	ldr	r2, [pc, #384]	; (80048a4 <HAL_GPIO_DeInit+0x1f0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d02b      	beq.n	800477e <HAL_GPIO_DeInit+0xca>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a5f      	ldr	r2, [pc, #380]	; (80048a8 <HAL_GPIO_DeInit+0x1f4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d025      	beq.n	800477a <HAL_GPIO_DeInit+0xc6>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a5e      	ldr	r2, [pc, #376]	; (80048ac <HAL_GPIO_DeInit+0x1f8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d01f      	beq.n	8004776 <HAL_GPIO_DeInit+0xc2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a5d      	ldr	r2, [pc, #372]	; (80048b0 <HAL_GPIO_DeInit+0x1fc>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d019      	beq.n	8004772 <HAL_GPIO_DeInit+0xbe>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a5c      	ldr	r2, [pc, #368]	; (80048b4 <HAL_GPIO_DeInit+0x200>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d013      	beq.n	800476e <HAL_GPIO_DeInit+0xba>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a5b      	ldr	r2, [pc, #364]	; (80048b8 <HAL_GPIO_DeInit+0x204>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00d      	beq.n	800476a <HAL_GPIO_DeInit+0xb6>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a5a      	ldr	r2, [pc, #360]	; (80048bc <HAL_GPIO_DeInit+0x208>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d007      	beq.n	8004766 <HAL_GPIO_DeInit+0xb2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a59      	ldr	r2, [pc, #356]	; (80048c0 <HAL_GPIO_DeInit+0x20c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d101      	bne.n	8004762 <HAL_GPIO_DeInit+0xae>
 800475e:	2309      	movs	r3, #9
 8004760:	e012      	b.n	8004788 <HAL_GPIO_DeInit+0xd4>
 8004762:	230a      	movs	r3, #10
 8004764:	e010      	b.n	8004788 <HAL_GPIO_DeInit+0xd4>
 8004766:	2308      	movs	r3, #8
 8004768:	e00e      	b.n	8004788 <HAL_GPIO_DeInit+0xd4>
 800476a:	2307      	movs	r3, #7
 800476c:	e00c      	b.n	8004788 <HAL_GPIO_DeInit+0xd4>
 800476e:	2306      	movs	r3, #6
 8004770:	e00a      	b.n	8004788 <HAL_GPIO_DeInit+0xd4>
 8004772:	2305      	movs	r3, #5
 8004774:	e008      	b.n	8004788 <HAL_GPIO_DeInit+0xd4>
 8004776:	2304      	movs	r3, #4
 8004778:	e006      	b.n	8004788 <HAL_GPIO_DeInit+0xd4>
 800477a:	2303      	movs	r3, #3
 800477c:	e004      	b.n	8004788 <HAL_GPIO_DeInit+0xd4>
 800477e:	2302      	movs	r3, #2
 8004780:	e002      	b.n	8004788 <HAL_GPIO_DeInit+0xd4>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <HAL_GPIO_DeInit+0xd4>
 8004786:	2300      	movs	r3, #0
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	f002 0203 	and.w	r2, r2, #3
 800478e:	0092      	lsls	r2, r2, #2
 8004790:	4093      	lsls	r3, r2
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	429a      	cmp	r2, r3
 8004796:	d132      	bne.n	80047fe <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004798:	4b4a      	ldr	r3, [pc, #296]	; (80048c4 <HAL_GPIO_DeInit+0x210>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	43db      	mvns	r3, r3
 80047a0:	4948      	ldr	r1, [pc, #288]	; (80048c4 <HAL_GPIO_DeInit+0x210>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80047a6:	4b47      	ldr	r3, [pc, #284]	; (80048c4 <HAL_GPIO_DeInit+0x210>)
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	4945      	ldr	r1, [pc, #276]	; (80048c4 <HAL_GPIO_DeInit+0x210>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80047b4:	4b43      	ldr	r3, [pc, #268]	; (80048c4 <HAL_GPIO_DeInit+0x210>)
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	43db      	mvns	r3, r3
 80047bc:	4941      	ldr	r1, [pc, #260]	; (80048c4 <HAL_GPIO_DeInit+0x210>)
 80047be:	4013      	ands	r3, r2
 80047c0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80047c2:	4b40      	ldr	r3, [pc, #256]	; (80048c4 <HAL_GPIO_DeInit+0x210>)
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	43db      	mvns	r3, r3
 80047ca:	493e      	ldr	r1, [pc, #248]	; (80048c4 <HAL_GPIO_DeInit+0x210>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	220f      	movs	r2, #15
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80047e0:	4a2d      	ldr	r2, [pc, #180]	; (8004898 <HAL_GPIO_DeInit+0x1e4>)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	089b      	lsrs	r3, r3, #2
 80047e6:	3302      	adds	r3, #2
 80047e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	43da      	mvns	r2, r3
 80047f0:	4829      	ldr	r0, [pc, #164]	; (8004898 <HAL_GPIO_DeInit+0x1e4>)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	089b      	lsrs	r3, r3, #2
 80047f6:	400a      	ands	r2, r1
 80047f8:	3302      	adds	r3, #2
 80047fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	2103      	movs	r1, #3
 8004808:	fa01 f303 	lsl.w	r3, r1, r3
 800480c:	43db      	mvns	r3, r3
 800480e:	401a      	ands	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	08da      	lsrs	r2, r3, #3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3208      	adds	r2, #8
 800481c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	220f      	movs	r2, #15
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	43db      	mvns	r3, r3
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	08d2      	lsrs	r2, r2, #3
 8004834:	4019      	ands	r1, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3208      	adds	r2, #8
 800483a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	2103      	movs	r1, #3
 8004848:	fa01 f303 	lsl.w	r3, r1, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	401a      	ands	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	2101      	movs	r1, #1
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	fa01 f303 	lsl.w	r3, r1, r3
 8004860:	43db      	mvns	r3, r3
 8004862:	401a      	ands	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	2103      	movs	r1, #3
 8004872:	fa01 f303 	lsl.w	r3, r1, r3
 8004876:	43db      	mvns	r3, r3
 8004878:	401a      	ands	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	3301      	adds	r3, #1
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2b0f      	cmp	r3, #15
 8004888:	f67f af22 	bls.w	80046d0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800488c:	bf00      	nop
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	40013800 	.word	0x40013800
 800489c:	40020000 	.word	0x40020000
 80048a0:	40020400 	.word	0x40020400
 80048a4:	40020800 	.word	0x40020800
 80048a8:	40020c00 	.word	0x40020c00
 80048ac:	40021000 	.word	0x40021000
 80048b0:	40021400 	.word	0x40021400
 80048b4:	40021800 	.word	0x40021800
 80048b8:	40021c00 	.word	0x40021c00
 80048bc:	40022000 	.word	0x40022000
 80048c0:	40022400 	.word	0x40022400
 80048c4:	40013c00 	.word	0x40013c00

080048c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	460b      	mov	r3, r1
 80048d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	887b      	ldrh	r3, [r7, #2]
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048e0:	2301      	movs	r3, #1
 80048e2:	73fb      	strb	r3, [r7, #15]
 80048e4:	e001      	b.n	80048ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048e6:	2300      	movs	r3, #0
 80048e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	807b      	strh	r3, [r7, #2]
 8004904:	4613      	mov	r3, r2
 8004906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004908:	787b      	ldrb	r3, [r7, #1]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800490e:	887a      	ldrh	r2, [r7, #2]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004914:	e003      	b.n	800491e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004916:	887b      	ldrh	r3, [r7, #2]
 8004918:	041a      	lsls	r2, r3, #16
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	619a      	str	r2, [r3, #24]
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
	...

0800492c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e11f      	b.n	8004b7e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d106      	bne.n	8004958 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fe f82e 	bl	80029b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2224      	movs	r2, #36	; 0x24
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0201 	bic.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800497e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800498e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004990:	f001 f988 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 8004994:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	4a7b      	ldr	r2, [pc, #492]	; (8004b88 <HAL_I2C_Init+0x25c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d807      	bhi.n	80049b0 <HAL_I2C_Init+0x84>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4a7a      	ldr	r2, [pc, #488]	; (8004b8c <HAL_I2C_Init+0x260>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	bf94      	ite	ls
 80049a8:	2301      	movls	r3, #1
 80049aa:	2300      	movhi	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	e006      	b.n	80049be <HAL_I2C_Init+0x92>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4a77      	ldr	r2, [pc, #476]	; (8004b90 <HAL_I2C_Init+0x264>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	bf94      	ite	ls
 80049b8:	2301      	movls	r3, #1
 80049ba:	2300      	movhi	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e0db      	b.n	8004b7e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4a72      	ldr	r2, [pc, #456]	; (8004b94 <HAL_I2C_Init+0x268>)
 80049ca:	fba2 2303 	umull	r2, r3, r2, r3
 80049ce:	0c9b      	lsrs	r3, r3, #18
 80049d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	4a64      	ldr	r2, [pc, #400]	; (8004b88 <HAL_I2C_Init+0x25c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d802      	bhi.n	8004a00 <HAL_I2C_Init+0xd4>
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	3301      	adds	r3, #1
 80049fe:	e009      	b.n	8004a14 <HAL_I2C_Init+0xe8>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a06:	fb02 f303 	mul.w	r3, r2, r3
 8004a0a:	4a63      	ldr	r2, [pc, #396]	; (8004b98 <HAL_I2C_Init+0x26c>)
 8004a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a10:	099b      	lsrs	r3, r3, #6
 8004a12:	3301      	adds	r3, #1
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6812      	ldr	r2, [r2, #0]
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	4956      	ldr	r1, [pc, #344]	; (8004b88 <HAL_I2C_Init+0x25c>)
 8004a30:	428b      	cmp	r3, r1
 8004a32:	d80d      	bhi.n	8004a50 <HAL_I2C_Init+0x124>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	1e59      	subs	r1, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a42:	3301      	adds	r3, #1
 8004a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	bf38      	it	cc
 8004a4c:	2304      	movcc	r3, #4
 8004a4e:	e04f      	b.n	8004af0 <HAL_I2C_Init+0x1c4>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d111      	bne.n	8004a7c <HAL_I2C_Init+0x150>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	1e58      	subs	r0, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6859      	ldr	r1, [r3, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	440b      	add	r3, r1
 8004a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	bf0c      	ite	eq
 8004a74:	2301      	moveq	r3, #1
 8004a76:	2300      	movne	r3, #0
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	e012      	b.n	8004aa2 <HAL_I2C_Init+0x176>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	1e58      	subs	r0, r3, #1
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6859      	ldr	r1, [r3, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	0099      	lsls	r1, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a92:	3301      	adds	r3, #1
 8004a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	bf0c      	ite	eq
 8004a9c:	2301      	moveq	r3, #1
 8004a9e:	2300      	movne	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <HAL_I2C_Init+0x17e>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e022      	b.n	8004af0 <HAL_I2C_Init+0x1c4>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10e      	bne.n	8004ad0 <HAL_I2C_Init+0x1a4>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1e58      	subs	r0, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6859      	ldr	r1, [r3, #4]
 8004aba:	460b      	mov	r3, r1
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	440b      	add	r3, r1
 8004ac0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ace:	e00f      	b.n	8004af0 <HAL_I2C_Init+0x1c4>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	1e58      	subs	r0, r3, #1
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6859      	ldr	r1, [r3, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	0099      	lsls	r1, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	6809      	ldr	r1, [r1, #0]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69da      	ldr	r2, [r3, #28]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6911      	ldr	r1, [r2, #16]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	68d2      	ldr	r2, [r2, #12]
 8004b2a:	4311      	orrs	r1, r2
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6812      	ldr	r2, [r2, #0]
 8004b30:	430b      	orrs	r3, r1
 8004b32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695a      	ldr	r2, [r3, #20]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	000186a0 	.word	0x000186a0
 8004b8c:	001e847f 	.word	0x001e847f
 8004b90:	003d08ff 	.word	0x003d08ff
 8004b94:	431bde83 	.word	0x431bde83
 8004b98:	10624dd3 	.word	0x10624dd3

08004b9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b20      	cmp	r3, #32
 8004bb0:	d129      	bne.n	8004c06 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2224      	movs	r2, #36	; 0x24
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0201 	bic.w	r2, r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0210 	bic.w	r2, r2, #16
 8004bd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f042 0201 	orr.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	e000      	b.n	8004c08 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004c06:	2302      	movs	r3, #2
  }
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b20      	cmp	r3, #32
 8004c2c:	d12a      	bne.n	8004c84 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2224      	movs	r2, #36	; 0x24
 8004c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0201 	bic.w	r2, r2, #1
 8004c44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004c4e:	89fb      	ldrh	r3, [r7, #14]
 8004c50:	f023 030f 	bic.w	r3, r3, #15
 8004c54:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	89fb      	ldrh	r3, [r7, #14]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	89fa      	ldrh	r2, [r7, #14]
 8004c66:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0201 	orr.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	e000      	b.n	8004c86 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004c84:	2302      	movs	r3, #2
  }
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
	...

08004c94 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e0bf      	b.n	8004e26 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7fd fee4 	bl	8002a88 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699a      	ldr	r2, [r3, #24]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004cd6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6999      	ldr	r1, [r3, #24]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004cec:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6899      	ldr	r1, [r3, #8]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	4b4a      	ldr	r3, [pc, #296]	; (8004e30 <HAL_LTDC_Init+0x19c>)
 8004d08:	400b      	ands	r3, r1
 8004d0a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	041b      	lsls	r3, r3, #16
 8004d12:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6899      	ldr	r1, [r3, #8]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68d9      	ldr	r1, [r3, #12]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	4b3e      	ldr	r3, [pc, #248]	; (8004e30 <HAL_LTDC_Init+0x19c>)
 8004d36:	400b      	ands	r3, r1
 8004d38:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	041b      	lsls	r3, r3, #16
 8004d40:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68d9      	ldr	r1, [r3, #12]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a1a      	ldr	r2, [r3, #32]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6919      	ldr	r1, [r3, #16]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	4b33      	ldr	r3, [pc, #204]	; (8004e30 <HAL_LTDC_Init+0x19c>)
 8004d64:	400b      	ands	r3, r1
 8004d66:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	041b      	lsls	r3, r3, #16
 8004d6e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6919      	ldr	r1, [r3, #16]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6959      	ldr	r1, [r3, #20]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	4b27      	ldr	r3, [pc, #156]	; (8004e30 <HAL_LTDC_Init+0x19c>)
 8004d92:	400b      	ands	r3, r1
 8004d94:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9a:	041b      	lsls	r3, r3, #16
 8004d9c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6959      	ldr	r1, [r3, #20]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004dc4:	041b      	lsls	r3, r3, #16
 8004dc6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0206 	orr.w	r2, r2, #6
 8004e02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	f000f800 	.word	0xf000f800

08004e34 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e42:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f003 0304 	and.w	r3, r3, #4
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d023      	beq.n	8004e9e <HAL_LTDC_IRQHandler+0x6a>
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01e      	beq.n	8004e9e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0204 	bic.w	r2, r2, #4
 8004e6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2204      	movs	r2, #4
 8004e76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e7e:	f043 0201 	orr.w	r2, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2204      	movs	r2, #4
 8004e8c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f86f 	bl	8004f7c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d023      	beq.n	8004ef0 <HAL_LTDC_IRQHandler+0xbc>
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01e      	beq.n	8004ef0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0202 	bic.w	r2, r2, #2
 8004ec0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ed0:	f043 0202 	orr.w	r2, r3, #2
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2204      	movs	r2, #4
 8004ede:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f846 	bl	8004f7c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d01b      	beq.n	8004f32 <HAL_LTDC_IRQHandler+0xfe>
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d016      	beq.n	8004f32 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0201 	bic.w	r2, r2, #1
 8004f12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f82f 	bl	8004f90 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01b      	beq.n	8004f74 <HAL_LTDC_IRQHandler+0x140>
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d016      	beq.n	8004f74 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0208 	bic.w	r2, r2, #8
 8004f54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2208      	movs	r2, #8
 8004f5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fd fa9a 	bl	80024a8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004f74:	bf00      	nop
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004fa4:	b5b0      	push	{r4, r5, r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <HAL_LTDC_ConfigLayer+0x1a>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e02c      	b.n	8005018 <HAL_LTDC_ConfigLayer+0x74>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2202      	movs	r2, #2
 8004fca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2134      	movs	r1, #52	; 0x34
 8004fd4:	fb01 f303 	mul.w	r3, r1, r3
 8004fd8:	4413      	add	r3, r2
 8004fda:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	461d      	mov	r5, r3
 8004fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	68b9      	ldr	r1, [r7, #8]
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 f882 	bl	8005102 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2201      	movs	r2, #1
 8005004:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bdb0      	pop	{r4, r5, r7, pc}

08005020 <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_LTDC_Reload+0x18>
 8005034:	2302      	movs	r3, #2
 8005036:	e01c      	b.n	8005072 <HAL_LTDC_Reload+0x52>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0208 	orr.w	r2, r2, #8
 8005056:	635a      	str	r2, [r3, #52]	; 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <HAL_LTDC_SetWindowPosition_NoReload>:
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition_NoReload(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b086      	sub	sp, #24
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
 800508a:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(X0));
  assert_param(IS_LTDC_CFBLNBR(Y0));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005092:	2b01      	cmp	r3, #1
 8005094:	d101      	bne.n	800509a <HAL_LTDC_SetWindowPosition_NoReload+0x1c>
 8005096:	2302      	movs	r3, #2
 8005098:	e02f      	b.n	80050fa <HAL_LTDC_SetWindowPosition_NoReload+0x7c>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2202      	movs	r2, #2
 80050a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2234      	movs	r2, #52	; 0x34
 80050ae:	fb02 f303 	mul.w	r3, r2, r3
 80050b2:	3338      	adds	r3, #56	; 0x38
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4413      	add	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	441a      	add	r2, r3
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	441a      	add	r2, r3
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	6979      	ldr	r1, [r7, #20]
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 f80d 	bl	8005102 <LTDC_SetConfig>

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005102:	b480      	push	{r7}
 8005104:	b089      	sub	sp, #36	; 0x24
 8005106:	af00      	add	r7, sp, #0
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	60b9      	str	r1, [r7, #8]
 800510c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	0c1b      	lsrs	r3, r3, #16
 800511a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800511e:	4413      	add	r3, r2
 8005120:	041b      	lsls	r3, r3, #16
 8005122:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	461a      	mov	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	01db      	lsls	r3, r3, #7
 800512e:	4413      	add	r3, r2
 8005130:	3384      	adds	r3, #132	; 0x84
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	4611      	mov	r1, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	01d2      	lsls	r2, r2, #7
 800513e:	440a      	add	r2, r1
 8005140:	3284      	adds	r2, #132	; 0x84
 8005142:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005146:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	0c1b      	lsrs	r3, r3, #16
 8005154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005158:	4413      	add	r3, r2
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4619      	mov	r1, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	01db      	lsls	r3, r3, #7
 8005166:	440b      	add	r3, r1
 8005168:	3384      	adds	r3, #132	; 0x84
 800516a:	4619      	mov	r1, r3
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	4313      	orrs	r3, r2
 8005170:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	68da      	ldr	r2, [r3, #12]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005180:	4413      	add	r3, r2
 8005182:	041b      	lsls	r3, r3, #16
 8005184:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	461a      	mov	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	01db      	lsls	r3, r3, #7
 8005190:	4413      	add	r3, r2
 8005192:	3384      	adds	r3, #132	; 0x84
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	6812      	ldr	r2, [r2, #0]
 800519a:	4611      	mov	r1, r2
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	01d2      	lsls	r2, r2, #7
 80051a0:	440a      	add	r2, r1
 80051a2:	3284      	adds	r2, #132	; 0x84
 80051a4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80051a8:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051b8:	4413      	add	r3, r2
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4619      	mov	r1, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	01db      	lsls	r3, r3, #7
 80051c6:	440b      	add	r3, r1
 80051c8:	3384      	adds	r3, #132	; 0x84
 80051ca:	4619      	mov	r1, r3
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	01db      	lsls	r3, r3, #7
 80051dc:	4413      	add	r3, r2
 80051de:	3384      	adds	r3, #132	; 0x84
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	6812      	ldr	r2, [r2, #0]
 80051e6:	4611      	mov	r1, r2
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	01d2      	lsls	r2, r2, #7
 80051ec:	440a      	add	r2, r1
 80051ee:	3284      	adds	r2, #132	; 0x84
 80051f0:	f023 0307 	bic.w	r3, r3, #7
 80051f4:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	01db      	lsls	r3, r3, #7
 8005200:	4413      	add	r3, r2
 8005202:	3384      	adds	r3, #132	; 0x84
 8005204:	461a      	mov	r2, r3
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005212:	021b      	lsls	r3, r3, #8
 8005214:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800521c:	041b      	lsls	r3, r3, #16
 800521e:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	061b      	lsls	r3, r3, #24
 8005226:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	461a      	mov	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	01db      	lsls	r3, r3, #7
 8005232:	4413      	add	r3, r2
 8005234:	3384      	adds	r3, #132	; 0x84
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	461a      	mov	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	01db      	lsls	r3, r3, #7
 8005242:	4413      	add	r3, r2
 8005244:	3384      	adds	r3, #132	; 0x84
 8005246:	461a      	mov	r2, r3
 8005248:	2300      	movs	r3, #0
 800524a:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005252:	461a      	mov	r2, r3
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	431a      	orrs	r2, r3
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	431a      	orrs	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4619      	mov	r1, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	01db      	lsls	r3, r3, #7
 8005266:	440b      	add	r3, r1
 8005268:	3384      	adds	r3, #132	; 0x84
 800526a:	4619      	mov	r1, r3
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	4313      	orrs	r3, r2
 8005270:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	01db      	lsls	r3, r3, #7
 800527c:	4413      	add	r3, r2
 800527e:	3384      	adds	r3, #132	; 0x84
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	6812      	ldr	r2, [r2, #0]
 8005286:	4611      	mov	r1, r2
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	01d2      	lsls	r2, r2, #7
 800528c:	440a      	add	r2, r1
 800528e:	3284      	adds	r2, #132	; 0x84
 8005290:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005294:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	01db      	lsls	r3, r3, #7
 80052a0:	4413      	add	r3, r2
 80052a2:	3384      	adds	r3, #132	; 0x84
 80052a4:	461a      	mov	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	01db      	lsls	r3, r3, #7
 80052b6:	4413      	add	r3, r2
 80052b8:	3384      	adds	r3, #132	; 0x84
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	6812      	ldr	r2, [r2, #0]
 80052c0:	4611      	mov	r1, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	01d2      	lsls	r2, r2, #7
 80052c6:	440a      	add	r2, r1
 80052c8:	3284      	adds	r2, #132	; 0x84
 80052ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80052ce:	f023 0307 	bic.w	r3, r3, #7
 80052d2:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	68f9      	ldr	r1, [r7, #12]
 80052de:	6809      	ldr	r1, [r1, #0]
 80052e0:	4608      	mov	r0, r1
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	01c9      	lsls	r1, r1, #7
 80052e6:	4401      	add	r1, r0
 80052e8:	3184      	adds	r1, #132	; 0x84
 80052ea:	4313      	orrs	r3, r2
 80052ec:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	01db      	lsls	r3, r3, #7
 80052f8:	4413      	add	r3, r2
 80052fa:	3384      	adds	r3, #132	; 0x84
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	01db      	lsls	r3, r3, #7
 8005308:	4413      	add	r3, r2
 800530a:	3384      	adds	r3, #132	; 0x84
 800530c:	461a      	mov	r2, r3
 800530e:	2300      	movs	r3, #0
 8005310:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	01db      	lsls	r3, r3, #7
 800531c:	4413      	add	r3, r2
 800531e:	3384      	adds	r3, #132	; 0x84
 8005320:	461a      	mov	r2, r3
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d102      	bne.n	8005336 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005330:	2304      	movs	r3, #4
 8005332:	61fb      	str	r3, [r7, #28]
 8005334:	e01b      	b.n	800536e <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d102      	bne.n	8005344 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800533e:	2303      	movs	r3, #3
 8005340:	61fb      	str	r3, [r7, #28]
 8005342:	e014      	b.n	800536e <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	2b04      	cmp	r3, #4
 800534a:	d00b      	beq.n	8005364 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005350:	2b02      	cmp	r3, #2
 8005352:	d007      	beq.n	8005364 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005358:	2b03      	cmp	r3, #3
 800535a:	d003      	beq.n	8005364 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005360:	2b07      	cmp	r3, #7
 8005362:	d102      	bne.n	800536a <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005364:	2302      	movs	r3, #2
 8005366:	61fb      	str	r3, [r7, #28]
 8005368:	e001      	b.n	800536e <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800536a:	2301      	movs	r3, #1
 800536c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	01db      	lsls	r3, r3, #7
 8005378:	4413      	add	r3, r2
 800537a:	3384      	adds	r3, #132	; 0x84
 800537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	6812      	ldr	r2, [r2, #0]
 8005382:	4611      	mov	r1, r2
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	01d2      	lsls	r2, r2, #7
 8005388:	440a      	add	r2, r1
 800538a:	3284      	adds	r2, #132	; 0x84
 800538c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005390:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005396:	69fa      	ldr	r2, [r7, #28]
 8005398:	fb02 f303 	mul.w	r3, r2, r3
 800539c:	041a      	lsls	r2, r3, #16
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	6859      	ldr	r1, [r3, #4]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	1acb      	subs	r3, r1, r3
 80053a8:	69f9      	ldr	r1, [r7, #28]
 80053aa:	fb01 f303 	mul.w	r3, r1, r3
 80053ae:	3303      	adds	r3, #3
 80053b0:	68f9      	ldr	r1, [r7, #12]
 80053b2:	6809      	ldr	r1, [r1, #0]
 80053b4:	4608      	mov	r0, r1
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	01c9      	lsls	r1, r1, #7
 80053ba:	4401      	add	r1, r0
 80053bc:	3184      	adds	r1, #132	; 0x84
 80053be:	4313      	orrs	r3, r2
 80053c0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	461a      	mov	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	01db      	lsls	r3, r3, #7
 80053cc:	4413      	add	r3, r2
 80053ce:	3384      	adds	r3, #132	; 0x84
 80053d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	6812      	ldr	r2, [r2, #0]
 80053d6:	4611      	mov	r1, r2
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	01d2      	lsls	r2, r2, #7
 80053dc:	440a      	add	r2, r1
 80053de:	3284      	adds	r2, #132	; 0x84
 80053e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80053e4:	f023 0307 	bic.w	r3, r3, #7
 80053e8:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	01db      	lsls	r3, r3, #7
 80053f4:	4413      	add	r3, r2
 80053f6:	3384      	adds	r3, #132	; 0x84
 80053f8:	461a      	mov	r2, r3
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	461a      	mov	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	01db      	lsls	r3, r3, #7
 800540a:	4413      	add	r3, r2
 800540c:	3384      	adds	r3, #132	; 0x84
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	6812      	ldr	r2, [r2, #0]
 8005414:	4611      	mov	r1, r2
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	01d2      	lsls	r2, r2, #7
 800541a:	440a      	add	r2, r1
 800541c:	3284      	adds	r2, #132	; 0x84
 800541e:	f043 0301 	orr.w	r3, r3, #1
 8005422:	6013      	str	r3, [r2, #0]
}
 8005424:	bf00      	nop
 8005426:	3724      	adds	r7, #36	; 0x24
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e25b      	b.n	80058fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d075      	beq.n	800553a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800544e:	4ba3      	ldr	r3, [pc, #652]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 030c 	and.w	r3, r3, #12
 8005456:	2b04      	cmp	r3, #4
 8005458:	d00c      	beq.n	8005474 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800545a:	4ba0      	ldr	r3, [pc, #640]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005462:	2b08      	cmp	r3, #8
 8005464:	d112      	bne.n	800548c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005466:	4b9d      	ldr	r3, [pc, #628]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800546e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005472:	d10b      	bne.n	800548c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005474:	4b99      	ldr	r3, [pc, #612]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d05b      	beq.n	8005538 <HAL_RCC_OscConfig+0x108>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d157      	bne.n	8005538 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e236      	b.n	80058fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005494:	d106      	bne.n	80054a4 <HAL_RCC_OscConfig+0x74>
 8005496:	4b91      	ldr	r3, [pc, #580]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a90      	ldr	r2, [pc, #576]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 800549c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	e01d      	b.n	80054e0 <HAL_RCC_OscConfig+0xb0>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054ac:	d10c      	bne.n	80054c8 <HAL_RCC_OscConfig+0x98>
 80054ae:	4b8b      	ldr	r3, [pc, #556]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a8a      	ldr	r2, [pc, #552]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80054b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	4b88      	ldr	r3, [pc, #544]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a87      	ldr	r2, [pc, #540]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80054c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	e00b      	b.n	80054e0 <HAL_RCC_OscConfig+0xb0>
 80054c8:	4b84      	ldr	r3, [pc, #528]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a83      	ldr	r2, [pc, #524]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80054ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	4b81      	ldr	r3, [pc, #516]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a80      	ldr	r2, [pc, #512]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80054da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d013      	beq.n	8005510 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e8:	f7fd fe90 	bl	800320c <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054f0:	f7fd fe8c 	bl	800320c <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b64      	cmp	r3, #100	; 0x64
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e1fb      	b.n	80058fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005502:	4b76      	ldr	r3, [pc, #472]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0f0      	beq.n	80054f0 <HAL_RCC_OscConfig+0xc0>
 800550e:	e014      	b.n	800553a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005510:	f7fd fe7c 	bl	800320c <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005518:	f7fd fe78 	bl	800320c <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b64      	cmp	r3, #100	; 0x64
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e1e7      	b.n	80058fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800552a:	4b6c      	ldr	r3, [pc, #432]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1f0      	bne.n	8005518 <HAL_RCC_OscConfig+0xe8>
 8005536:	e000      	b.n	800553a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d063      	beq.n	800560e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005546:	4b65      	ldr	r3, [pc, #404]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 030c 	and.w	r3, r3, #12
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00b      	beq.n	800556a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005552:	4b62      	ldr	r3, [pc, #392]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800555a:	2b08      	cmp	r3, #8
 800555c:	d11c      	bne.n	8005598 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800555e:	4b5f      	ldr	r3, [pc, #380]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d116      	bne.n	8005598 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800556a:	4b5c      	ldr	r3, [pc, #368]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d005      	beq.n	8005582 <HAL_RCC_OscConfig+0x152>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d001      	beq.n	8005582 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e1bb      	b.n	80058fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005582:	4b56      	ldr	r3, [pc, #344]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	4952      	ldr	r1, [pc, #328]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005592:	4313      	orrs	r3, r2
 8005594:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005596:	e03a      	b.n	800560e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d020      	beq.n	80055e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055a0:	4b4f      	ldr	r3, [pc, #316]	; (80056e0 <HAL_RCC_OscConfig+0x2b0>)
 80055a2:	2201      	movs	r2, #1
 80055a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a6:	f7fd fe31 	bl	800320c <HAL_GetTick>
 80055aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ac:	e008      	b.n	80055c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ae:	f7fd fe2d 	bl	800320c <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e19c      	b.n	80058fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055c0:	4b46      	ldr	r3, [pc, #280]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0f0      	beq.n	80055ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055cc:	4b43      	ldr	r3, [pc, #268]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	00db      	lsls	r3, r3, #3
 80055da:	4940      	ldr	r1, [pc, #256]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	600b      	str	r3, [r1, #0]
 80055e0:	e015      	b.n	800560e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055e2:	4b3f      	ldr	r3, [pc, #252]	; (80056e0 <HAL_RCC_OscConfig+0x2b0>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e8:	f7fd fe10 	bl	800320c <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055f0:	f7fd fe0c 	bl	800320c <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e17b      	b.n	80058fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005602:	4b36      	ldr	r3, [pc, #216]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1f0      	bne.n	80055f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0308 	and.w	r3, r3, #8
 8005616:	2b00      	cmp	r3, #0
 8005618:	d030      	beq.n	800567c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d016      	beq.n	8005650 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005622:	4b30      	ldr	r3, [pc, #192]	; (80056e4 <HAL_RCC_OscConfig+0x2b4>)
 8005624:	2201      	movs	r2, #1
 8005626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005628:	f7fd fdf0 	bl	800320c <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005630:	f7fd fdec 	bl	800320c <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e15b      	b.n	80058fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005642:	4b26      	ldr	r3, [pc, #152]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0f0      	beq.n	8005630 <HAL_RCC_OscConfig+0x200>
 800564e:	e015      	b.n	800567c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005650:	4b24      	ldr	r3, [pc, #144]	; (80056e4 <HAL_RCC_OscConfig+0x2b4>)
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005656:	f7fd fdd9 	bl	800320c <HAL_GetTick>
 800565a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800565c:	e008      	b.n	8005670 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800565e:	f7fd fdd5 	bl	800320c <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d901      	bls.n	8005670 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e144      	b.n	80058fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005670:	4b1a      	ldr	r3, [pc, #104]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1f0      	bne.n	800565e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 80a0 	beq.w	80057ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800568a:	2300      	movs	r3, #0
 800568c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800568e:	4b13      	ldr	r3, [pc, #76]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10f      	bne.n	80056ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800569a:	2300      	movs	r3, #0
 800569c:	60bb      	str	r3, [r7, #8]
 800569e:	4b0f      	ldr	r3, [pc, #60]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	4a0e      	ldr	r2, [pc, #56]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80056a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a8:	6413      	str	r3, [r2, #64]	; 0x40
 80056aa:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <HAL_RCC_OscConfig+0x2ac>)
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b2:	60bb      	str	r3, [r7, #8]
 80056b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056b6:	2301      	movs	r3, #1
 80056b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ba:	4b0b      	ldr	r3, [pc, #44]	; (80056e8 <HAL_RCC_OscConfig+0x2b8>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d121      	bne.n	800570a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056c6:	4b08      	ldr	r3, [pc, #32]	; (80056e8 <HAL_RCC_OscConfig+0x2b8>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a07      	ldr	r2, [pc, #28]	; (80056e8 <HAL_RCC_OscConfig+0x2b8>)
 80056cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056d2:	f7fd fd9b 	bl	800320c <HAL_GetTick>
 80056d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d8:	e011      	b.n	80056fe <HAL_RCC_OscConfig+0x2ce>
 80056da:	bf00      	nop
 80056dc:	40023800 	.word	0x40023800
 80056e0:	42470000 	.word	0x42470000
 80056e4:	42470e80 	.word	0x42470e80
 80056e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ec:	f7fd fd8e 	bl	800320c <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e0fd      	b.n	80058fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056fe:	4b81      	ldr	r3, [pc, #516]	; (8005904 <HAL_RCC_OscConfig+0x4d4>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0f0      	beq.n	80056ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d106      	bne.n	8005720 <HAL_RCC_OscConfig+0x2f0>
 8005712:	4b7d      	ldr	r3, [pc, #500]	; (8005908 <HAL_RCC_OscConfig+0x4d8>)
 8005714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005716:	4a7c      	ldr	r2, [pc, #496]	; (8005908 <HAL_RCC_OscConfig+0x4d8>)
 8005718:	f043 0301 	orr.w	r3, r3, #1
 800571c:	6713      	str	r3, [r2, #112]	; 0x70
 800571e:	e01c      	b.n	800575a <HAL_RCC_OscConfig+0x32a>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	2b05      	cmp	r3, #5
 8005726:	d10c      	bne.n	8005742 <HAL_RCC_OscConfig+0x312>
 8005728:	4b77      	ldr	r3, [pc, #476]	; (8005908 <HAL_RCC_OscConfig+0x4d8>)
 800572a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572c:	4a76      	ldr	r2, [pc, #472]	; (8005908 <HAL_RCC_OscConfig+0x4d8>)
 800572e:	f043 0304 	orr.w	r3, r3, #4
 8005732:	6713      	str	r3, [r2, #112]	; 0x70
 8005734:	4b74      	ldr	r3, [pc, #464]	; (8005908 <HAL_RCC_OscConfig+0x4d8>)
 8005736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005738:	4a73      	ldr	r2, [pc, #460]	; (8005908 <HAL_RCC_OscConfig+0x4d8>)
 800573a:	f043 0301 	orr.w	r3, r3, #1
 800573e:	6713      	str	r3, [r2, #112]	; 0x70
 8005740:	e00b      	b.n	800575a <HAL_RCC_OscConfig+0x32a>
 8005742:	4b71      	ldr	r3, [pc, #452]	; (8005908 <HAL_RCC_OscConfig+0x4d8>)
 8005744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005746:	4a70      	ldr	r2, [pc, #448]	; (8005908 <HAL_RCC_OscConfig+0x4d8>)
 8005748:	f023 0301 	bic.w	r3, r3, #1
 800574c:	6713      	str	r3, [r2, #112]	; 0x70
 800574e:	4b6e      	ldr	r3, [pc, #440]	; (8005908 <HAL_RCC_OscConfig+0x4d8>)
 8005750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005752:	4a6d      	ldr	r2, [pc, #436]	; (8005908 <HAL_RCC_OscConfig+0x4d8>)
 8005754:	f023 0304 	bic.w	r3, r3, #4
 8005758:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d015      	beq.n	800578e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005762:	f7fd fd53 	bl	800320c <HAL_GetTick>
 8005766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005768:	e00a      	b.n	8005780 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800576a:	f7fd fd4f 	bl	800320c <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	f241 3288 	movw	r2, #5000	; 0x1388
 8005778:	4293      	cmp	r3, r2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e0bc      	b.n	80058fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005780:	4b61      	ldr	r3, [pc, #388]	; (8005908 <HAL_RCC_OscConfig+0x4d8>)
 8005782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0ee      	beq.n	800576a <HAL_RCC_OscConfig+0x33a>
 800578c:	e014      	b.n	80057b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800578e:	f7fd fd3d 	bl	800320c <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005794:	e00a      	b.n	80057ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005796:	f7fd fd39 	bl	800320c <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d901      	bls.n	80057ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e0a6      	b.n	80058fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ac:	4b56      	ldr	r3, [pc, #344]	; (8005908 <HAL_RCC_OscConfig+0x4d8>)
 80057ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1ee      	bne.n	8005796 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d105      	bne.n	80057ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057be:	4b52      	ldr	r3, [pc, #328]	; (8005908 <HAL_RCC_OscConfig+0x4d8>)
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	4a51      	ldr	r2, [pc, #324]	; (8005908 <HAL_RCC_OscConfig+0x4d8>)
 80057c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 8092 	beq.w	80058f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057d4:	4b4c      	ldr	r3, [pc, #304]	; (8005908 <HAL_RCC_OscConfig+0x4d8>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f003 030c 	and.w	r3, r3, #12
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d05c      	beq.n	800589a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d141      	bne.n	800586c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057e8:	4b48      	ldr	r3, [pc, #288]	; (800590c <HAL_RCC_OscConfig+0x4dc>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ee:	f7fd fd0d 	bl	800320c <HAL_GetTick>
 80057f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057f6:	f7fd fd09 	bl	800320c <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e078      	b.n	80058fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005808:	4b3f      	ldr	r3, [pc, #252]	; (8005908 <HAL_RCC_OscConfig+0x4d8>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1f0      	bne.n	80057f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	69da      	ldr	r2, [r3, #28]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	431a      	orrs	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	019b      	lsls	r3, r3, #6
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582a:	085b      	lsrs	r3, r3, #1
 800582c:	3b01      	subs	r3, #1
 800582e:	041b      	lsls	r3, r3, #16
 8005830:	431a      	orrs	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005836:	061b      	lsls	r3, r3, #24
 8005838:	4933      	ldr	r1, [pc, #204]	; (8005908 <HAL_RCC_OscConfig+0x4d8>)
 800583a:	4313      	orrs	r3, r2
 800583c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800583e:	4b33      	ldr	r3, [pc, #204]	; (800590c <HAL_RCC_OscConfig+0x4dc>)
 8005840:	2201      	movs	r2, #1
 8005842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005844:	f7fd fce2 	bl	800320c <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800584c:	f7fd fcde 	bl	800320c <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e04d      	b.n	80058fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800585e:	4b2a      	ldr	r3, [pc, #168]	; (8005908 <HAL_RCC_OscConfig+0x4d8>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0f0      	beq.n	800584c <HAL_RCC_OscConfig+0x41c>
 800586a:	e045      	b.n	80058f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800586c:	4b27      	ldr	r3, [pc, #156]	; (800590c <HAL_RCC_OscConfig+0x4dc>)
 800586e:	2200      	movs	r2, #0
 8005870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005872:	f7fd fccb 	bl	800320c <HAL_GetTick>
 8005876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005878:	e008      	b.n	800588c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800587a:	f7fd fcc7 	bl	800320c <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d901      	bls.n	800588c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e036      	b.n	80058fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800588c:	4b1e      	ldr	r3, [pc, #120]	; (8005908 <HAL_RCC_OscConfig+0x4d8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1f0      	bne.n	800587a <HAL_RCC_OscConfig+0x44a>
 8005898:	e02e      	b.n	80058f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d101      	bne.n	80058a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e029      	b.n	80058fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058a6:	4b18      	ldr	r3, [pc, #96]	; (8005908 <HAL_RCC_OscConfig+0x4d8>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d11c      	bne.n	80058f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d115      	bne.n	80058f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058ce:	4013      	ands	r3, r2
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d10d      	bne.n	80058f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d106      	bne.n	80058f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d001      	beq.n	80058f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e000      	b.n	80058fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	40007000 	.word	0x40007000
 8005908:	40023800 	.word	0x40023800
 800590c:	42470060 	.word	0x42470060

08005910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e0cc      	b.n	8005abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005924:	4b68      	ldr	r3, [pc, #416]	; (8005ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 030f 	and.w	r3, r3, #15
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	429a      	cmp	r2, r3
 8005930:	d90c      	bls.n	800594c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005932:	4b65      	ldr	r3, [pc, #404]	; (8005ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800593a:	4b63      	ldr	r3, [pc, #396]	; (8005ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d001      	beq.n	800594c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e0b8      	b.n	8005abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d020      	beq.n	800599a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005964:	4b59      	ldr	r3, [pc, #356]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	4a58      	ldr	r2, [pc, #352]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 800596a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800596e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0308 	and.w	r3, r3, #8
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800597c:	4b53      	ldr	r3, [pc, #332]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	4a52      	ldr	r2, [pc, #328]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 8005982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005988:	4b50      	ldr	r3, [pc, #320]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	494d      	ldr	r1, [pc, #308]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 8005996:	4313      	orrs	r3, r2
 8005998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d044      	beq.n	8005a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d107      	bne.n	80059be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ae:	4b47      	ldr	r3, [pc, #284]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d119      	bne.n	80059ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e07f      	b.n	8005abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d003      	beq.n	80059ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d107      	bne.n	80059de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ce:	4b3f      	ldr	r3, [pc, #252]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d109      	bne.n	80059ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e06f      	b.n	8005abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059de:	4b3b      	ldr	r3, [pc, #236]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e067      	b.n	8005abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ee:	4b37      	ldr	r3, [pc, #220]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f023 0203 	bic.w	r2, r3, #3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	4934      	ldr	r1, [pc, #208]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a00:	f7fd fc04 	bl	800320c <HAL_GetTick>
 8005a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a06:	e00a      	b.n	8005a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a08:	f7fd fc00 	bl	800320c <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e04f      	b.n	8005abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a1e:	4b2b      	ldr	r3, [pc, #172]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 020c 	and.w	r2, r3, #12
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d1eb      	bne.n	8005a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a30:	4b25      	ldr	r3, [pc, #148]	; (8005ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 030f 	and.w	r3, r3, #15
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d20c      	bcs.n	8005a58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3e:	4b22      	ldr	r3, [pc, #136]	; (8005ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a46:	4b20      	ldr	r3, [pc, #128]	; (8005ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d001      	beq.n	8005a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e032      	b.n	8005abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d008      	beq.n	8005a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a64:	4b19      	ldr	r3, [pc, #100]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	4916      	ldr	r1, [pc, #88]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0308 	and.w	r3, r3, #8
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d009      	beq.n	8005a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a82:	4b12      	ldr	r3, [pc, #72]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	490e      	ldr	r1, [pc, #56]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a96:	f000 f821 	bl	8005adc <HAL_RCC_GetSysClockFreq>
 8005a9a:	4601      	mov	r1, r0
 8005a9c:	4b0b      	ldr	r3, [pc, #44]	; (8005acc <HAL_RCC_ClockConfig+0x1bc>)
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	091b      	lsrs	r3, r3, #4
 8005aa2:	f003 030f 	and.w	r3, r3, #15
 8005aa6:	4a0a      	ldr	r2, [pc, #40]	; (8005ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8005aa8:	5cd3      	ldrb	r3, [r2, r3]
 8005aaa:	fa21 f303 	lsr.w	r3, r1, r3
 8005aae:	4a09      	ldr	r2, [pc, #36]	; (8005ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ab2:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fd fa7c 	bl	8002fb4 <HAL_InitTick>

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	40023c00 	.word	0x40023c00
 8005acc:	40023800 	.word	0x40023800
 8005ad0:	08009f2c 	.word	0x08009f2c
 8005ad4:	20000004 	.word	0x20000004
 8005ad8:	20000008 	.word	0x20000008

08005adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	607b      	str	r3, [r7, #4]
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	2300      	movs	r3, #0
 8005aec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005af2:	4b63      	ldr	r3, [pc, #396]	; (8005c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 030c 	and.w	r3, r3, #12
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d007      	beq.n	8005b0e <HAL_RCC_GetSysClockFreq+0x32>
 8005afe:	2b08      	cmp	r3, #8
 8005b00:	d008      	beq.n	8005b14 <HAL_RCC_GetSysClockFreq+0x38>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f040 80b4 	bne.w	8005c70 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b08:	4b5e      	ldr	r3, [pc, #376]	; (8005c84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005b0a:	60bb      	str	r3, [r7, #8]
       break;
 8005b0c:	e0b3      	b.n	8005c76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b0e:	4b5e      	ldr	r3, [pc, #376]	; (8005c88 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005b10:	60bb      	str	r3, [r7, #8]
      break;
 8005b12:	e0b0      	b.n	8005c76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b14:	4b5a      	ldr	r3, [pc, #360]	; (8005c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b1e:	4b58      	ldr	r3, [pc, #352]	; (8005c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d04a      	beq.n	8005bc0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b2a:	4b55      	ldr	r3, [pc, #340]	; (8005c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	099b      	lsrs	r3, r3, #6
 8005b30:	f04f 0400 	mov.w	r4, #0
 8005b34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005b38:	f04f 0200 	mov.w	r2, #0
 8005b3c:	ea03 0501 	and.w	r5, r3, r1
 8005b40:	ea04 0602 	and.w	r6, r4, r2
 8005b44:	4629      	mov	r1, r5
 8005b46:	4632      	mov	r2, r6
 8005b48:	f04f 0300 	mov.w	r3, #0
 8005b4c:	f04f 0400 	mov.w	r4, #0
 8005b50:	0154      	lsls	r4, r2, #5
 8005b52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b56:	014b      	lsls	r3, r1, #5
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4622      	mov	r2, r4
 8005b5c:	1b49      	subs	r1, r1, r5
 8005b5e:	eb62 0206 	sbc.w	r2, r2, r6
 8005b62:	f04f 0300 	mov.w	r3, #0
 8005b66:	f04f 0400 	mov.w	r4, #0
 8005b6a:	0194      	lsls	r4, r2, #6
 8005b6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005b70:	018b      	lsls	r3, r1, #6
 8005b72:	1a5b      	subs	r3, r3, r1
 8005b74:	eb64 0402 	sbc.w	r4, r4, r2
 8005b78:	f04f 0100 	mov.w	r1, #0
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	00e2      	lsls	r2, r4, #3
 8005b82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005b86:	00d9      	lsls	r1, r3, #3
 8005b88:	460b      	mov	r3, r1
 8005b8a:	4614      	mov	r4, r2
 8005b8c:	195b      	adds	r3, r3, r5
 8005b8e:	eb44 0406 	adc.w	r4, r4, r6
 8005b92:	f04f 0100 	mov.w	r1, #0
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	0262      	lsls	r2, r4, #9
 8005b9c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005ba0:	0259      	lsls	r1, r3, #9
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4614      	mov	r4, r2
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	4621      	mov	r1, r4
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f04f 0400 	mov.w	r4, #0
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	4623      	mov	r3, r4
 8005bb4:	f7fa ff3a 	bl	8000a2c <__aeabi_uldivmod>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	460c      	mov	r4, r1
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	e049      	b.n	8005c54 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bc0:	4b2f      	ldr	r3, [pc, #188]	; (8005c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	099b      	lsrs	r3, r3, #6
 8005bc6:	f04f 0400 	mov.w	r4, #0
 8005bca:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005bce:	f04f 0200 	mov.w	r2, #0
 8005bd2:	ea03 0501 	and.w	r5, r3, r1
 8005bd6:	ea04 0602 	and.w	r6, r4, r2
 8005bda:	4629      	mov	r1, r5
 8005bdc:	4632      	mov	r2, r6
 8005bde:	f04f 0300 	mov.w	r3, #0
 8005be2:	f04f 0400 	mov.w	r4, #0
 8005be6:	0154      	lsls	r4, r2, #5
 8005be8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005bec:	014b      	lsls	r3, r1, #5
 8005bee:	4619      	mov	r1, r3
 8005bf0:	4622      	mov	r2, r4
 8005bf2:	1b49      	subs	r1, r1, r5
 8005bf4:	eb62 0206 	sbc.w	r2, r2, r6
 8005bf8:	f04f 0300 	mov.w	r3, #0
 8005bfc:	f04f 0400 	mov.w	r4, #0
 8005c00:	0194      	lsls	r4, r2, #6
 8005c02:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005c06:	018b      	lsls	r3, r1, #6
 8005c08:	1a5b      	subs	r3, r3, r1
 8005c0a:	eb64 0402 	sbc.w	r4, r4, r2
 8005c0e:	f04f 0100 	mov.w	r1, #0
 8005c12:	f04f 0200 	mov.w	r2, #0
 8005c16:	00e2      	lsls	r2, r4, #3
 8005c18:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005c1c:	00d9      	lsls	r1, r3, #3
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4614      	mov	r4, r2
 8005c22:	195b      	adds	r3, r3, r5
 8005c24:	eb44 0406 	adc.w	r4, r4, r6
 8005c28:	f04f 0100 	mov.w	r1, #0
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	02a2      	lsls	r2, r4, #10
 8005c32:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005c36:	0299      	lsls	r1, r3, #10
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4614      	mov	r4, r2
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	4621      	mov	r1, r4
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f04f 0400 	mov.w	r4, #0
 8005c46:	461a      	mov	r2, r3
 8005c48:	4623      	mov	r3, r4
 8005c4a:	f7fa feef 	bl	8000a2c <__aeabi_uldivmod>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	460c      	mov	r4, r1
 8005c52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c54:	4b0a      	ldr	r3, [pc, #40]	; (8005c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	0c1b      	lsrs	r3, r3, #16
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	3301      	adds	r3, #1
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6c:	60bb      	str	r3, [r7, #8]
      break;
 8005c6e:	e002      	b.n	8005c76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c70:	4b04      	ldr	r3, [pc, #16]	; (8005c84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005c72:	60bb      	str	r3, [r7, #8]
      break;
 8005c74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c76:	68bb      	ldr	r3, [r7, #8]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c80:	40023800 	.word	0x40023800
 8005c84:	00f42400 	.word	0x00f42400
 8005c88:	007a1200 	.word	0x007a1200

08005c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c90:	4b03      	ldr	r3, [pc, #12]	; (8005ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c92:	681b      	ldr	r3, [r3, #0]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	20000004 	.word	0x20000004

08005ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ca8:	f7ff fff0 	bl	8005c8c <HAL_RCC_GetHCLKFreq>
 8005cac:	4601      	mov	r1, r0
 8005cae:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	0a9b      	lsrs	r3, r3, #10
 8005cb4:	f003 0307 	and.w	r3, r3, #7
 8005cb8:	4a03      	ldr	r2, [pc, #12]	; (8005cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cba:	5cd3      	ldrb	r3, [r2, r3]
 8005cbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	40023800 	.word	0x40023800
 8005cc8:	08009f3c 	.word	0x08009f3c

08005ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005cd0:	f7ff ffdc 	bl	8005c8c <HAL_RCC_GetHCLKFreq>
 8005cd4:	4601      	mov	r1, r0
 8005cd6:	4b05      	ldr	r3, [pc, #20]	; (8005cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	0b5b      	lsrs	r3, r3, #13
 8005cdc:	f003 0307 	and.w	r3, r3, #7
 8005ce0:	4a03      	ldr	r2, [pc, #12]	; (8005cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ce2:	5cd3      	ldrb	r3, [r2, r3]
 8005ce4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	40023800 	.word	0x40023800
 8005cf0:	08009f3c 	.word	0x08009f3c

08005cf4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	220f      	movs	r2, #15
 8005d02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d04:	4b12      	ldr	r3, [pc, #72]	; (8005d50 <HAL_RCC_GetClockConfig+0x5c>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f003 0203 	and.w	r2, r3, #3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d10:	4b0f      	ldr	r3, [pc, #60]	; (8005d50 <HAL_RCC_GetClockConfig+0x5c>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d1c:	4b0c      	ldr	r3, [pc, #48]	; (8005d50 <HAL_RCC_GetClockConfig+0x5c>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005d28:	4b09      	ldr	r3, [pc, #36]	; (8005d50 <HAL_RCC_GetClockConfig+0x5c>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	08db      	lsrs	r3, r3, #3
 8005d2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d36:	4b07      	ldr	r3, [pc, #28]	; (8005d54 <HAL_RCC_GetClockConfig+0x60>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 020f 	and.w	r2, r3, #15
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	601a      	str	r2, [r3, #0]
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40023800 	.word	0x40023800
 8005d54:	40023c00 	.word	0x40023c00

08005d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10b      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d105      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d075      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d8c:	4bad      	ldr	r3, [pc, #692]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d92:	f7fd fa3b 	bl	800320c <HAL_GetTick>
 8005d96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d98:	e008      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d9a:	f7fd fa37 	bl	800320c <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d901      	bls.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e18b      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005dac:	4ba6      	ldr	r3, [pc, #664]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1f0      	bne.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d009      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	019a      	lsls	r2, r3, #6
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	071b      	lsls	r3, r3, #28
 8005dd0:	499d      	ldr	r1, [pc, #628]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d01f      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005de4:	4b98      	ldr	r3, [pc, #608]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dea:	0f1b      	lsrs	r3, r3, #28
 8005dec:	f003 0307 	and.w	r3, r3, #7
 8005df0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	019a      	lsls	r2, r3, #6
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	061b      	lsls	r3, r3, #24
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	071b      	lsls	r3, r3, #28
 8005e04:	4990      	ldr	r1, [pc, #576]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005e0c:	4b8e      	ldr	r3, [pc, #568]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e12:	f023 021f 	bic.w	r2, r3, #31
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	498a      	ldr	r1, [pc, #552]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00d      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	019a      	lsls	r2, r3, #6
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	061b      	lsls	r3, r3, #24
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	071b      	lsls	r3, r3, #28
 8005e44:	4980      	ldr	r1, [pc, #512]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e4c:	4b7d      	ldr	r3, [pc, #500]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005e4e:	2201      	movs	r2, #1
 8005e50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e52:	f7fd f9db 	bl	800320c <HAL_GetTick>
 8005e56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e58:	e008      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e5a:	f7fd f9d7 	bl	800320c <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d901      	bls.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e12b      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e6c:	4b76      	ldr	r3, [pc, #472]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0f0      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d105      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d079      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e90:	4b6e      	ldr	r3, [pc, #440]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e96:	f7fd f9b9 	bl	800320c <HAL_GetTick>
 8005e9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e9c:	e008      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005e9e:	f7fd f9b5 	bl	800320c <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d901      	bls.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e109      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005eb0:	4b65      	ldr	r3, [pc, #404]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ebc:	d0ef      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d020      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005eca:	4b5f      	ldr	r3, [pc, #380]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed0:	0f1b      	lsrs	r3, r3, #28
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	019a      	lsls	r2, r3, #6
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	061b      	lsls	r3, r3, #24
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	071b      	lsls	r3, r3, #28
 8005eea:	4957      	ldr	r1, [pc, #348]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ef2:	4b55      	ldr	r3, [pc, #340]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ef8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	3b01      	subs	r3, #1
 8005f02:	021b      	lsls	r3, r3, #8
 8005f04:	4950      	ldr	r1, [pc, #320]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0308 	and.w	r3, r3, #8
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d01e      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f18:	4b4b      	ldr	r3, [pc, #300]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1e:	0e1b      	lsrs	r3, r3, #24
 8005f20:	f003 030f 	and.w	r3, r3, #15
 8005f24:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	019a      	lsls	r2, r3, #6
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	061b      	lsls	r3, r3, #24
 8005f30:	431a      	orrs	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	071b      	lsls	r3, r3, #28
 8005f38:	4943      	ldr	r1, [pc, #268]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f40:	4b41      	ldr	r3, [pc, #260]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	493e      	ldr	r1, [pc, #248]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f56:	4b3d      	ldr	r3, [pc, #244]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f58:	2201      	movs	r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f5c:	f7fd f956 	bl	800320c <HAL_GetTick>
 8005f60:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f62:	e008      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005f64:	f7fd f952 	bl	800320c <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e0a6      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f76:	4b34      	ldr	r3, [pc, #208]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f82:	d1ef      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0320 	and.w	r3, r3, #32
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 808d 	beq.w	80060ac <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f92:	2300      	movs	r3, #0
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	4b2c      	ldr	r3, [pc, #176]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	4a2b      	ldr	r2, [pc, #172]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8005fa2:	4b29      	ldr	r3, [pc, #164]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005fae:	4b28      	ldr	r3, [pc, #160]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a27      	ldr	r2, [pc, #156]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fba:	f7fd f927 	bl	800320c <HAL_GetTick>
 8005fbe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005fc0:	e008      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005fc2:	f7fd f923 	bl	800320c <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d901      	bls.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e077      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005fd4:	4b1e      	ldr	r3, [pc, #120]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0f0      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005fe0:	4b19      	ldr	r3, [pc, #100]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fe8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d039      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d032      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ffe:	4b12      	ldr	r3, [pc, #72]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006006:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006008:	4b12      	ldr	r3, [pc, #72]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800600a:	2201      	movs	r2, #1
 800600c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800600e:	4b11      	ldr	r3, [pc, #68]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006014:	4a0c      	ldr	r2, [pc, #48]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800601a:	4b0b      	ldr	r3, [pc, #44]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800601c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b01      	cmp	r3, #1
 8006024:	d11e      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006026:	f7fd f8f1 	bl	800320c <HAL_GetTick>
 800602a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800602c:	e014      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800602e:	f7fd f8ed 	bl	800320c <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	f241 3288 	movw	r2, #5000	; 0x1388
 800603c:	4293      	cmp	r3, r2
 800603e:	d90b      	bls.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e03f      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006044:	42470068 	.word	0x42470068
 8006048:	40023800 	.word	0x40023800
 800604c:	42470070 	.word	0x42470070
 8006050:	40007000 	.word	0x40007000
 8006054:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006058:	4b1c      	ldr	r3, [pc, #112]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800605a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0e4      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800606c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006070:	d10d      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006072:	4b16      	ldr	r3, [pc, #88]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006086:	4911      	ldr	r1, [pc, #68]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006088:	4313      	orrs	r3, r2
 800608a:	608b      	str	r3, [r1, #8]
 800608c:	e005      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800608e:	4b0f      	ldr	r3, [pc, #60]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	4a0e      	ldr	r2, [pc, #56]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006094:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006098:	6093      	str	r3, [r2, #8]
 800609a:	4b0c      	ldr	r3, [pc, #48]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800609c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060a6:	4909      	ldr	r1, [pc, #36]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d004      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80060be:	4b04      	ldr	r3, [pc, #16]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80060c0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40023800 	.word	0x40023800
 80060d0:	424711e0 	.word	0x424711e0

080060d4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e025      	b.n	8006134 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d106      	bne.n	8006102 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f7fc ff4f 	bl	8002fa0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2202      	movs	r2, #2
 8006106:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3304      	adds	r3, #4
 8006112:	4619      	mov	r1, r3
 8006114:	4610      	mov	r0, r2
 8006116:	f001 fc1b 	bl	8007950 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6818      	ldr	r0, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	461a      	mov	r2, r3
 8006124:	6839      	ldr	r1, [r7, #0]
 8006126:	f001 fc86 	bl	8007a36 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e056      	b.n	80061fc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d106      	bne.n	800616e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7fc fda3 	bl	8002cb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2202      	movs	r2, #2
 8006172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006184:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	431a      	orrs	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	431a      	orrs	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	431a      	orrs	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061aa:	431a      	orrs	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	431a      	orrs	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	ea42 0103 	orr.w	r1, r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	0c1b      	lsrs	r3, r3, #16
 80061cc:	f003 0104 	and.w	r1, r3, #4
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	430a      	orrs	r2, r1
 80061da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	69da      	ldr	r2, [r3, #28]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e01a      	b.n	800624c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2202      	movs	r2, #2
 800621a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800622c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fc fd88 	bl	8002d44 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b088      	sub	sp, #32
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	4613      	mov	r3, r2
 8006262:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006264:	2300      	movs	r3, #0
 8006266:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800626e:	2b01      	cmp	r3, #1
 8006270:	d101      	bne.n	8006276 <HAL_SPI_Transmit+0x22>
 8006272:	2302      	movs	r3, #2
 8006274:	e11e      	b.n	80064b4 <HAL_SPI_Transmit+0x260>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800627e:	f7fc ffc5 	bl	800320c <HAL_GetTick>
 8006282:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006284:	88fb      	ldrh	r3, [r7, #6]
 8006286:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b01      	cmp	r3, #1
 8006292:	d002      	beq.n	800629a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006294:	2302      	movs	r3, #2
 8006296:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006298:	e103      	b.n	80064a2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <HAL_SPI_Transmit+0x52>
 80062a0:	88fb      	ldrh	r3, [r7, #6]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d102      	bne.n	80062ac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062aa:	e0fa      	b.n	80064a2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2203      	movs	r2, #3
 80062b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	88fa      	ldrh	r2, [r7, #6]
 80062c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	88fa      	ldrh	r2, [r7, #6]
 80062ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062f2:	d107      	bne.n	8006304 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006302:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630e:	2b40      	cmp	r3, #64	; 0x40
 8006310:	d007      	beq.n	8006322 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006320:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800632a:	d14b      	bne.n	80063c4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <HAL_SPI_Transmit+0xe6>
 8006334:	8afb      	ldrh	r3, [r7, #22]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d13e      	bne.n	80063b8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633e:	881a      	ldrh	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634a:	1c9a      	adds	r2, r3, #2
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006354:	b29b      	uxth	r3, r3
 8006356:	3b01      	subs	r3, #1
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800635e:	e02b      	b.n	80063b8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b02      	cmp	r3, #2
 800636c:	d112      	bne.n	8006394 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006372:	881a      	ldrh	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637e:	1c9a      	adds	r2, r3, #2
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006388:	b29b      	uxth	r3, r3
 800638a:	3b01      	subs	r3, #1
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	86da      	strh	r2, [r3, #54]	; 0x36
 8006392:	e011      	b.n	80063b8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006394:	f7fc ff3a 	bl	800320c <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d803      	bhi.n	80063ac <HAL_SPI_Transmit+0x158>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063aa:	d102      	bne.n	80063b2 <HAL_SPI_Transmit+0x15e>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d102      	bne.n	80063b8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063b6:	e074      	b.n	80064a2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063bc:	b29b      	uxth	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1ce      	bne.n	8006360 <HAL_SPI_Transmit+0x10c>
 80063c2:	e04c      	b.n	800645e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d002      	beq.n	80063d2 <HAL_SPI_Transmit+0x17e>
 80063cc:	8afb      	ldrh	r3, [r7, #22]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d140      	bne.n	8006454 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	330c      	adds	r3, #12
 80063dc:	7812      	ldrb	r2, [r2, #0]
 80063de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e4:	1c5a      	adds	r2, r3, #1
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	3b01      	subs	r3, #1
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80063f8:	e02c      	b.n	8006454 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b02      	cmp	r3, #2
 8006406:	d113      	bne.n	8006430 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	330c      	adds	r3, #12
 8006412:	7812      	ldrb	r2, [r2, #0]
 8006414:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006424:	b29b      	uxth	r3, r3
 8006426:	3b01      	subs	r3, #1
 8006428:	b29a      	uxth	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	86da      	strh	r2, [r3, #54]	; 0x36
 800642e:	e011      	b.n	8006454 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006430:	f7fc feec 	bl	800320c <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	429a      	cmp	r2, r3
 800643e:	d803      	bhi.n	8006448 <HAL_SPI_Transmit+0x1f4>
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006446:	d102      	bne.n	800644e <HAL_SPI_Transmit+0x1fa>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d102      	bne.n	8006454 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006452:	e026      	b.n	80064a2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1cd      	bne.n	80063fa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	6839      	ldr	r1, [r7, #0]
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 fa44 	bl	80068f0 <SPI_EndRxTxTransaction>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2220      	movs	r2, #32
 8006472:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10a      	bne.n	8006492 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800647c:	2300      	movs	r3, #0
 800647e:	613b      	str	r3, [r7, #16]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	613b      	str	r3, [r7, #16]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	613b      	str	r3, [r7, #16]
 8006490:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	77fb      	strb	r3, [r7, #31]
 800649e:	e000      	b.n	80064a2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80064a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3720      	adds	r7, #32
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08c      	sub	sp, #48	; 0x30
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064ca:	2301      	movs	r3, #1
 80064cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d101      	bne.n	80064e2 <HAL_SPI_TransmitReceive+0x26>
 80064de:	2302      	movs	r3, #2
 80064e0:	e18a      	b.n	80067f8 <HAL_SPI_TransmitReceive+0x33c>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064ea:	f7fc fe8f 	bl	800320c <HAL_GetTick>
 80064ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006500:	887b      	ldrh	r3, [r7, #2]
 8006502:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006504:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006508:	2b01      	cmp	r3, #1
 800650a:	d00f      	beq.n	800652c <HAL_SPI_TransmitReceive+0x70>
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006512:	d107      	bne.n	8006524 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d103      	bne.n	8006524 <HAL_SPI_TransmitReceive+0x68>
 800651c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006520:	2b04      	cmp	r3, #4
 8006522:	d003      	beq.n	800652c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006524:	2302      	movs	r3, #2
 8006526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800652a:	e15b      	b.n	80067e4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d005      	beq.n	800653e <HAL_SPI_TransmitReceive+0x82>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <HAL_SPI_TransmitReceive+0x82>
 8006538:	887b      	ldrh	r3, [r7, #2]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d103      	bne.n	8006546 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006544:	e14e      	b.n	80067e4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b04      	cmp	r3, #4
 8006550:	d003      	beq.n	800655a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2205      	movs	r2, #5
 8006556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	887a      	ldrh	r2, [r7, #2]
 800656a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	887a      	ldrh	r2, [r7, #2]
 8006570:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	887a      	ldrh	r2, [r7, #2]
 800657c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	887a      	ldrh	r2, [r7, #2]
 8006582:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659a:	2b40      	cmp	r3, #64	; 0x40
 800659c:	d007      	beq.n	80065ae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065b6:	d178      	bne.n	80066aa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <HAL_SPI_TransmitReceive+0x10a>
 80065c0:	8b7b      	ldrh	r3, [r7, #26]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d166      	bne.n	8006694 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ca:	881a      	ldrh	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d6:	1c9a      	adds	r2, r3, #2
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	3b01      	subs	r3, #1
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065ea:	e053      	b.n	8006694 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d11b      	bne.n	8006632 <HAL_SPI_TransmitReceive+0x176>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065fe:	b29b      	uxth	r3, r3
 8006600:	2b00      	cmp	r3, #0
 8006602:	d016      	beq.n	8006632 <HAL_SPI_TransmitReceive+0x176>
 8006604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006606:	2b01      	cmp	r3, #1
 8006608:	d113      	bne.n	8006632 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660e:	881a      	ldrh	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661a:	1c9a      	adds	r2, r3, #2
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006624:	b29b      	uxth	r3, r3
 8006626:	3b01      	subs	r3, #1
 8006628:	b29a      	uxth	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b01      	cmp	r3, #1
 800663e:	d119      	bne.n	8006674 <HAL_SPI_TransmitReceive+0x1b8>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006644:	b29b      	uxth	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d014      	beq.n	8006674 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006654:	b292      	uxth	r2, r2
 8006656:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665c:	1c9a      	adds	r2, r3, #2
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006666:	b29b      	uxth	r3, r3
 8006668:	3b01      	subs	r3, #1
 800666a:	b29a      	uxth	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006670:	2301      	movs	r3, #1
 8006672:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006674:	f7fc fdca 	bl	800320c <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006680:	429a      	cmp	r2, r3
 8006682:	d807      	bhi.n	8006694 <HAL_SPI_TransmitReceive+0x1d8>
 8006684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668a:	d003      	beq.n	8006694 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006692:	e0a7      	b.n	80067e4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1a6      	bne.n	80065ec <HAL_SPI_TransmitReceive+0x130>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1a1      	bne.n	80065ec <HAL_SPI_TransmitReceive+0x130>
 80066a8:	e07c      	b.n	80067a4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <HAL_SPI_TransmitReceive+0x1fc>
 80066b2:	8b7b      	ldrh	r3, [r7, #26]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d16b      	bne.n	8006790 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	330c      	adds	r3, #12
 80066c2:	7812      	ldrb	r2, [r2, #0]
 80066c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	3b01      	subs	r3, #1
 80066d8:	b29a      	uxth	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066de:	e057      	b.n	8006790 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d11c      	bne.n	8006728 <HAL_SPI_TransmitReceive+0x26c>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d017      	beq.n	8006728 <HAL_SPI_TransmitReceive+0x26c>
 80066f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d114      	bne.n	8006728 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	330c      	adds	r3, #12
 8006708:	7812      	ldrb	r2, [r2, #0]
 800670a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800671a:	b29b      	uxth	r3, r3
 800671c:	3b01      	subs	r3, #1
 800671e:	b29a      	uxth	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b01      	cmp	r3, #1
 8006734:	d119      	bne.n	800676a <HAL_SPI_TransmitReceive+0x2ae>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800673a:	b29b      	uxth	r3, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	d014      	beq.n	800676a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674a:	b2d2      	uxtb	r2, r2
 800674c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800675c:	b29b      	uxth	r3, r3
 800675e:	3b01      	subs	r3, #1
 8006760:	b29a      	uxth	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006766:	2301      	movs	r3, #1
 8006768:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800676a:	f7fc fd4f 	bl	800320c <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006776:	429a      	cmp	r2, r3
 8006778:	d803      	bhi.n	8006782 <HAL_SPI_TransmitReceive+0x2c6>
 800677a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006780:	d102      	bne.n	8006788 <HAL_SPI_TransmitReceive+0x2cc>
 8006782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006784:	2b00      	cmp	r3, #0
 8006786:	d103      	bne.n	8006790 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800678e:	e029      	b.n	80067e4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006794:	b29b      	uxth	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1a2      	bne.n	80066e0 <HAL_SPI_TransmitReceive+0x224>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800679e:	b29b      	uxth	r3, r3
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d19d      	bne.n	80066e0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 f8a1 	bl	80068f0 <SPI_EndRxTxTransaction>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d006      	beq.n	80067c2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2220      	movs	r2, #32
 80067be:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80067c0:	e010      	b.n	80067e4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10b      	bne.n	80067e2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067ca:	2300      	movs	r3, #0
 80067cc:	617b      	str	r3, [r7, #20]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	617b      	str	r3, [r7, #20]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	617b      	str	r3, [r7, #20]
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	e000      	b.n	80067e4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80067e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80067f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3730      	adds	r7, #48	; 0x30
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800680e:	b2db      	uxtb	r3, r3
}
 8006810:	4618      	mov	r0, r3
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	603b      	str	r3, [r7, #0]
 8006828:	4613      	mov	r3, r2
 800682a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800682c:	e04c      	b.n	80068c8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006834:	d048      	beq.n	80068c8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006836:	f7fc fce9 	bl	800320c <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	429a      	cmp	r2, r3
 8006844:	d902      	bls.n	800684c <SPI_WaitFlagStateUntilTimeout+0x30>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d13d      	bne.n	80068c8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800685a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006864:	d111      	bne.n	800688a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800686e:	d004      	beq.n	800687a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006878:	d107      	bne.n	800688a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006888:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006892:	d10f      	bne.n	80068b4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e00f      	b.n	80068e8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689a      	ldr	r2, [r3, #8]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	4013      	ands	r3, r2
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	bf0c      	ite	eq
 80068d8:	2301      	moveq	r3, #1
 80068da:	2300      	movne	r3, #0
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	461a      	mov	r2, r3
 80068e0:	79fb      	ldrb	r3, [r7, #7]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d1a3      	bne.n	800682e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af02      	add	r7, sp, #8
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80068fc:	4b1b      	ldr	r3, [pc, #108]	; (800696c <SPI_EndRxTxTransaction+0x7c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a1b      	ldr	r2, [pc, #108]	; (8006970 <SPI_EndRxTxTransaction+0x80>)
 8006902:	fba2 2303 	umull	r2, r3, r2, r3
 8006906:	0d5b      	lsrs	r3, r3, #21
 8006908:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800690c:	fb02 f303 	mul.w	r3, r2, r3
 8006910:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800691a:	d112      	bne.n	8006942 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2200      	movs	r2, #0
 8006924:	2180      	movs	r1, #128	; 0x80
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f7ff ff78 	bl	800681c <SPI_WaitFlagStateUntilTimeout>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d016      	beq.n	8006960 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006936:	f043 0220 	orr.w	r2, r3, #32
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e00f      	b.n	8006962 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00a      	beq.n	800695e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	3b01      	subs	r3, #1
 800694c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006958:	2b80      	cmp	r3, #128	; 0x80
 800695a:	d0f2      	beq.n	8006942 <SPI_EndRxTxTransaction+0x52>
 800695c:	e000      	b.n	8006960 <SPI_EndRxTxTransaction+0x70>
        break;
 800695e:	bf00      	nop
  }

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3718      	adds	r7, #24
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	20000004 	.word	0x20000004
 8006970:	165e9f81 	.word	0x165e9f81

08006974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e01d      	b.n	80069c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d106      	bne.n	80069a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fc f9f0 	bl	8002d80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3304      	adds	r3, #4
 80069b0:	4619      	mov	r1, r3
 80069b2:	4610      	mov	r0, r2
 80069b4:	f000 fa38 	bl	8006e28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b085      	sub	sp, #20
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2202      	movs	r2, #2
 80069d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f003 0307 	and.w	r3, r3, #7
 80069e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2b06      	cmp	r3, #6
 80069ea:	d007      	beq.n	80069fc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0201 	orr.w	r2, r2, #1
 80069fa:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b085      	sub	sp, #20
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68da      	ldr	r2, [r3, #12]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f042 0201 	orr.w	r2, r2, #1
 8006a28:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f003 0307 	and.w	r3, r3, #7
 8006a34:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b06      	cmp	r3, #6
 8006a3a:	d007      	beq.n	8006a4c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f042 0201 	orr.w	r2, r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b082      	sub	sp, #8
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	f003 0302 	and.w	r3, r3, #2
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d122      	bne.n	8006ab6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d11b      	bne.n	8006ab6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f06f 0202 	mvn.w	r2, #2
 8006a86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	f003 0303 	and.w	r3, r3, #3
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f9a5 	bl	8006dec <HAL_TIM_IC_CaptureCallback>
 8006aa2:	e005      	b.n	8006ab0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f997 	bl	8006dd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f9a8 	bl	8006e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	d122      	bne.n	8006b0a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f003 0304 	and.w	r3, r3, #4
 8006ace:	2b04      	cmp	r3, #4
 8006ad0:	d11b      	bne.n	8006b0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f06f 0204 	mvn.w	r2, #4
 8006ada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f97b 	bl	8006dec <HAL_TIM_IC_CaptureCallback>
 8006af6:	e005      	b.n	8006b04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f96d 	bl	8006dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f97e 	bl	8006e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	f003 0308 	and.w	r3, r3, #8
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	d122      	bne.n	8006b5e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f003 0308 	and.w	r3, r3, #8
 8006b22:	2b08      	cmp	r3, #8
 8006b24:	d11b      	bne.n	8006b5e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f06f 0208 	mvn.w	r2, #8
 8006b2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2204      	movs	r2, #4
 8006b34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	f003 0303 	and.w	r3, r3, #3
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f951 	bl	8006dec <HAL_TIM_IC_CaptureCallback>
 8006b4a:	e005      	b.n	8006b58 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f943 	bl	8006dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f954 	bl	8006e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	f003 0310 	and.w	r3, r3, #16
 8006b68:	2b10      	cmp	r3, #16
 8006b6a:	d122      	bne.n	8006bb2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	f003 0310 	and.w	r3, r3, #16
 8006b76:	2b10      	cmp	r3, #16
 8006b78:	d11b      	bne.n	8006bb2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f06f 0210 	mvn.w	r2, #16
 8006b82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2208      	movs	r2, #8
 8006b88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f927 	bl	8006dec <HAL_TIM_IC_CaptureCallback>
 8006b9e:	e005      	b.n	8006bac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f919 	bl	8006dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f92a 	bl	8006e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d10e      	bne.n	8006bde <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d107      	bne.n	8006bde <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f06f 0201 	mvn.w	r2, #1
 8006bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7fb fc75 	bl	80024c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be8:	2b80      	cmp	r3, #128	; 0x80
 8006bea:	d10e      	bne.n	8006c0a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf6:	2b80      	cmp	r3, #128	; 0x80
 8006bf8:	d107      	bne.n	8006c0a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 facf 	bl	80071a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c14:	2b40      	cmp	r3, #64	; 0x40
 8006c16:	d10e      	bne.n	8006c36 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c22:	2b40      	cmp	r3, #64	; 0x40
 8006c24:	d107      	bne.n	8006c36 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f8ef 	bl	8006e14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	f003 0320 	and.w	r3, r3, #32
 8006c40:	2b20      	cmp	r3, #32
 8006c42:	d10e      	bne.n	8006c62 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f003 0320 	and.w	r3, r3, #32
 8006c4e:	2b20      	cmp	r3, #32
 8006c50:	d107      	bne.n	8006c62 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f06f 0220 	mvn.w	r2, #32
 8006c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fa99 	bl	8007194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c62:	bf00      	nop
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d101      	bne.n	8006c82 <HAL_TIM_ConfigClockSource+0x18>
 8006c7e:	2302      	movs	r3, #2
 8006c80:	e0a6      	b.n	8006dd0 <HAL_TIM_ConfigClockSource+0x166>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ca0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ca8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b40      	cmp	r3, #64	; 0x40
 8006cb8:	d067      	beq.n	8006d8a <HAL_TIM_ConfigClockSource+0x120>
 8006cba:	2b40      	cmp	r3, #64	; 0x40
 8006cbc:	d80b      	bhi.n	8006cd6 <HAL_TIM_ConfigClockSource+0x6c>
 8006cbe:	2b10      	cmp	r3, #16
 8006cc0:	d073      	beq.n	8006daa <HAL_TIM_ConfigClockSource+0x140>
 8006cc2:	2b10      	cmp	r3, #16
 8006cc4:	d802      	bhi.n	8006ccc <HAL_TIM_ConfigClockSource+0x62>
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d06f      	beq.n	8006daa <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006cca:	e078      	b.n	8006dbe <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006ccc:	2b20      	cmp	r3, #32
 8006cce:	d06c      	beq.n	8006daa <HAL_TIM_ConfigClockSource+0x140>
 8006cd0:	2b30      	cmp	r3, #48	; 0x30
 8006cd2:	d06a      	beq.n	8006daa <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006cd4:	e073      	b.n	8006dbe <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006cd6:	2b70      	cmp	r3, #112	; 0x70
 8006cd8:	d00d      	beq.n	8006cf6 <HAL_TIM_ConfigClockSource+0x8c>
 8006cda:	2b70      	cmp	r3, #112	; 0x70
 8006cdc:	d804      	bhi.n	8006ce8 <HAL_TIM_ConfigClockSource+0x7e>
 8006cde:	2b50      	cmp	r3, #80	; 0x50
 8006ce0:	d033      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0xe0>
 8006ce2:	2b60      	cmp	r3, #96	; 0x60
 8006ce4:	d041      	beq.n	8006d6a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006ce6:	e06a      	b.n	8006dbe <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cec:	d066      	beq.n	8006dbc <HAL_TIM_ConfigClockSource+0x152>
 8006cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cf2:	d017      	beq.n	8006d24 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006cf4:	e063      	b.n	8006dbe <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6818      	ldr	r0, [r3, #0]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	6899      	ldr	r1, [r3, #8]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f000 f9a9 	bl	800705c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d18:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	609a      	str	r2, [r3, #8]
      break;
 8006d22:	e04c      	b.n	8006dbe <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6818      	ldr	r0, [r3, #0]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	6899      	ldr	r1, [r3, #8]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	f000 f992 	bl	800705c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689a      	ldr	r2, [r3, #8]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d46:	609a      	str	r2, [r3, #8]
      break;
 8006d48:	e039      	b.n	8006dbe <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6818      	ldr	r0, [r3, #0]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	6859      	ldr	r1, [r3, #4]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	461a      	mov	r2, r3
 8006d58:	f000 f906 	bl	8006f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2150      	movs	r1, #80	; 0x50
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 f95f 	bl	8007026 <TIM_ITRx_SetConfig>
      break;
 8006d68:	e029      	b.n	8006dbe <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6818      	ldr	r0, [r3, #0]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	6859      	ldr	r1, [r3, #4]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	461a      	mov	r2, r3
 8006d78:	f000 f925 	bl	8006fc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2160      	movs	r1, #96	; 0x60
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 f94f 	bl	8007026 <TIM_ITRx_SetConfig>
      break;
 8006d88:	e019      	b.n	8006dbe <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6818      	ldr	r0, [r3, #0]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	6859      	ldr	r1, [r3, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	461a      	mov	r2, r3
 8006d98:	f000 f8e6 	bl	8006f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2140      	movs	r1, #64	; 0x40
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 f93f 	bl	8007026 <TIM_ITRx_SetConfig>
      break;
 8006da8:	e009      	b.n	8006dbe <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4619      	mov	r1, r3
 8006db4:	4610      	mov	r0, r2
 8006db6:	f000 f936 	bl	8007026 <TIM_ITRx_SetConfig>
      break;
 8006dba:	e000      	b.n	8006dbe <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006dbc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a40      	ldr	r2, [pc, #256]	; (8006f3c <TIM_Base_SetConfig+0x114>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d013      	beq.n	8006e68 <TIM_Base_SetConfig+0x40>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e46:	d00f      	beq.n	8006e68 <TIM_Base_SetConfig+0x40>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a3d      	ldr	r2, [pc, #244]	; (8006f40 <TIM_Base_SetConfig+0x118>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d00b      	beq.n	8006e68 <TIM_Base_SetConfig+0x40>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a3c      	ldr	r2, [pc, #240]	; (8006f44 <TIM_Base_SetConfig+0x11c>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d007      	beq.n	8006e68 <TIM_Base_SetConfig+0x40>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a3b      	ldr	r2, [pc, #236]	; (8006f48 <TIM_Base_SetConfig+0x120>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d003      	beq.n	8006e68 <TIM_Base_SetConfig+0x40>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a3a      	ldr	r2, [pc, #232]	; (8006f4c <TIM_Base_SetConfig+0x124>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d108      	bne.n	8006e7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a2f      	ldr	r2, [pc, #188]	; (8006f3c <TIM_Base_SetConfig+0x114>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d02b      	beq.n	8006eda <TIM_Base_SetConfig+0xb2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e88:	d027      	beq.n	8006eda <TIM_Base_SetConfig+0xb2>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a2c      	ldr	r2, [pc, #176]	; (8006f40 <TIM_Base_SetConfig+0x118>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d023      	beq.n	8006eda <TIM_Base_SetConfig+0xb2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a2b      	ldr	r2, [pc, #172]	; (8006f44 <TIM_Base_SetConfig+0x11c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d01f      	beq.n	8006eda <TIM_Base_SetConfig+0xb2>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a2a      	ldr	r2, [pc, #168]	; (8006f48 <TIM_Base_SetConfig+0x120>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d01b      	beq.n	8006eda <TIM_Base_SetConfig+0xb2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a29      	ldr	r2, [pc, #164]	; (8006f4c <TIM_Base_SetConfig+0x124>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d017      	beq.n	8006eda <TIM_Base_SetConfig+0xb2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a28      	ldr	r2, [pc, #160]	; (8006f50 <TIM_Base_SetConfig+0x128>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d013      	beq.n	8006eda <TIM_Base_SetConfig+0xb2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a27      	ldr	r2, [pc, #156]	; (8006f54 <TIM_Base_SetConfig+0x12c>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d00f      	beq.n	8006eda <TIM_Base_SetConfig+0xb2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a26      	ldr	r2, [pc, #152]	; (8006f58 <TIM_Base_SetConfig+0x130>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d00b      	beq.n	8006eda <TIM_Base_SetConfig+0xb2>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a25      	ldr	r2, [pc, #148]	; (8006f5c <TIM_Base_SetConfig+0x134>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d007      	beq.n	8006eda <TIM_Base_SetConfig+0xb2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a24      	ldr	r2, [pc, #144]	; (8006f60 <TIM_Base_SetConfig+0x138>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d003      	beq.n	8006eda <TIM_Base_SetConfig+0xb2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a23      	ldr	r2, [pc, #140]	; (8006f64 <TIM_Base_SetConfig+0x13c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d108      	bne.n	8006eec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	689a      	ldr	r2, [r3, #8]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a0a      	ldr	r2, [pc, #40]	; (8006f3c <TIM_Base_SetConfig+0x114>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d003      	beq.n	8006f20 <TIM_Base_SetConfig+0xf8>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a0c      	ldr	r2, [pc, #48]	; (8006f4c <TIM_Base_SetConfig+0x124>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d103      	bne.n	8006f28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	615a      	str	r2, [r3, #20]
}
 8006f2e:	bf00      	nop
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	40010000 	.word	0x40010000
 8006f40:	40000400 	.word	0x40000400
 8006f44:	40000800 	.word	0x40000800
 8006f48:	40000c00 	.word	0x40000c00
 8006f4c:	40010400 	.word	0x40010400
 8006f50:	40014000 	.word	0x40014000
 8006f54:	40014400 	.word	0x40014400
 8006f58:	40014800 	.word	0x40014800
 8006f5c:	40001800 	.word	0x40001800
 8006f60:	40001c00 	.word	0x40001c00
 8006f64:	40002000 	.word	0x40002000

08006f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b087      	sub	sp, #28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6a1b      	ldr	r3, [r3, #32]
 8006f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	f023 0201 	bic.w	r2, r3, #1
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	011b      	lsls	r3, r3, #4
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f023 030a 	bic.w	r3, r3, #10
 8006fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	621a      	str	r2, [r3, #32]
}
 8006fba:	bf00      	nop
 8006fbc:	371c      	adds	r7, #28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b087      	sub	sp, #28
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	60f8      	str	r0, [r7, #12]
 8006fce:	60b9      	str	r1, [r7, #8]
 8006fd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	f023 0210 	bic.w	r2, r3, #16
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ff0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	031b      	lsls	r3, r3, #12
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007002:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	011b      	lsls	r3, r3, #4
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	4313      	orrs	r3, r2
 800700c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	621a      	str	r2, [r3, #32]
}
 800701a:	bf00      	nop
 800701c:	371c      	adds	r7, #28
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007026:	b480      	push	{r7}
 8007028:	b085      	sub	sp, #20
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
 800702e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4313      	orrs	r3, r2
 8007044:	f043 0307 	orr.w	r3, r3, #7
 8007048:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	609a      	str	r2, [r3, #8]
}
 8007050:	bf00      	nop
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007076:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	021a      	lsls	r2, r3, #8
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	431a      	orrs	r2, r3
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	4313      	orrs	r3, r2
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	4313      	orrs	r3, r2
 8007088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	609a      	str	r2, [r3, #8]
}
 8007090:	bf00      	nop
 8007092:	371c      	adds	r7, #28
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d101      	bne.n	80070b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070b0:	2302      	movs	r3, #2
 80070b2:	e05a      	b.n	800716a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2202      	movs	r2, #2
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a21      	ldr	r2, [pc, #132]	; (8007178 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d022      	beq.n	800713e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007100:	d01d      	beq.n	800713e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a1d      	ldr	r2, [pc, #116]	; (800717c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d018      	beq.n	800713e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a1b      	ldr	r2, [pc, #108]	; (8007180 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d013      	beq.n	800713e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a1a      	ldr	r2, [pc, #104]	; (8007184 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d00e      	beq.n	800713e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a18      	ldr	r2, [pc, #96]	; (8007188 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d009      	beq.n	800713e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a17      	ldr	r2, [pc, #92]	; (800718c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d004      	beq.n	800713e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a15      	ldr	r2, [pc, #84]	; (8007190 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d10c      	bne.n	8007158 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007144:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	4313      	orrs	r3, r2
 800714e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	40010000 	.word	0x40010000
 800717c:	40000400 	.word	0x40000400
 8007180:	40000800 	.word	0x40000800
 8007184:	40000c00 	.word	0x40000c00
 8007188:	40010400 	.word	0x40010400
 800718c:	40014000 	.word	0x40014000
 8007190:	40001800 	.word	0x40001800

08007194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e03f      	b.n	800724e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d106      	bne.n	80071e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7fb fe02 	bl	8002dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2224      	movs	r2, #36	; 0x24
 80071ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68da      	ldr	r2, [r3, #12]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f829 	bl	8007258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	691a      	ldr	r2, [r3, #16]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007214:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	695a      	ldr	r2, [r3, #20]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007224:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007234:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2220      	movs	r2, #32
 8007240:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2220      	movs	r2, #32
 8007248:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725c:	b085      	sub	sp, #20
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68da      	ldr	r2, [r3, #12]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	431a      	orrs	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	431a      	orrs	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	4313      	orrs	r3, r2
 800728e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800729a:	f023 030c 	bic.w	r3, r3, #12
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	6812      	ldr	r2, [r2, #0]
 80072a2:	68f9      	ldr	r1, [r7, #12]
 80072a4:	430b      	orrs	r3, r1
 80072a6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	699a      	ldr	r2, [r3, #24]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072c6:	f040 818b 	bne.w	80075e0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4ac1      	ldr	r2, [pc, #772]	; (80075d4 <UART_SetConfig+0x37c>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d005      	beq.n	80072e0 <UART_SetConfig+0x88>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4abf      	ldr	r2, [pc, #764]	; (80075d8 <UART_SetConfig+0x380>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	f040 80bd 	bne.w	800745a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072e0:	f7fe fcf4 	bl	8005ccc <HAL_RCC_GetPCLK2Freq>
 80072e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	461d      	mov	r5, r3
 80072ea:	f04f 0600 	mov.w	r6, #0
 80072ee:	46a8      	mov	r8, r5
 80072f0:	46b1      	mov	r9, r6
 80072f2:	eb18 0308 	adds.w	r3, r8, r8
 80072f6:	eb49 0409 	adc.w	r4, r9, r9
 80072fa:	4698      	mov	r8, r3
 80072fc:	46a1      	mov	r9, r4
 80072fe:	eb18 0805 	adds.w	r8, r8, r5
 8007302:	eb49 0906 	adc.w	r9, r9, r6
 8007306:	f04f 0100 	mov.w	r1, #0
 800730a:	f04f 0200 	mov.w	r2, #0
 800730e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007312:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007316:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800731a:	4688      	mov	r8, r1
 800731c:	4691      	mov	r9, r2
 800731e:	eb18 0005 	adds.w	r0, r8, r5
 8007322:	eb49 0106 	adc.w	r1, r9, r6
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	461d      	mov	r5, r3
 800732c:	f04f 0600 	mov.w	r6, #0
 8007330:	196b      	adds	r3, r5, r5
 8007332:	eb46 0406 	adc.w	r4, r6, r6
 8007336:	461a      	mov	r2, r3
 8007338:	4623      	mov	r3, r4
 800733a:	f7f9 fb77 	bl	8000a2c <__aeabi_uldivmod>
 800733e:	4603      	mov	r3, r0
 8007340:	460c      	mov	r4, r1
 8007342:	461a      	mov	r2, r3
 8007344:	4ba5      	ldr	r3, [pc, #660]	; (80075dc <UART_SetConfig+0x384>)
 8007346:	fba3 2302 	umull	r2, r3, r3, r2
 800734a:	095b      	lsrs	r3, r3, #5
 800734c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	461d      	mov	r5, r3
 8007354:	f04f 0600 	mov.w	r6, #0
 8007358:	46a9      	mov	r9, r5
 800735a:	46b2      	mov	sl, r6
 800735c:	eb19 0309 	adds.w	r3, r9, r9
 8007360:	eb4a 040a 	adc.w	r4, sl, sl
 8007364:	4699      	mov	r9, r3
 8007366:	46a2      	mov	sl, r4
 8007368:	eb19 0905 	adds.w	r9, r9, r5
 800736c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007370:	f04f 0100 	mov.w	r1, #0
 8007374:	f04f 0200 	mov.w	r2, #0
 8007378:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800737c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007380:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007384:	4689      	mov	r9, r1
 8007386:	4692      	mov	sl, r2
 8007388:	eb19 0005 	adds.w	r0, r9, r5
 800738c:	eb4a 0106 	adc.w	r1, sl, r6
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	461d      	mov	r5, r3
 8007396:	f04f 0600 	mov.w	r6, #0
 800739a:	196b      	adds	r3, r5, r5
 800739c:	eb46 0406 	adc.w	r4, r6, r6
 80073a0:	461a      	mov	r2, r3
 80073a2:	4623      	mov	r3, r4
 80073a4:	f7f9 fb42 	bl	8000a2c <__aeabi_uldivmod>
 80073a8:	4603      	mov	r3, r0
 80073aa:	460c      	mov	r4, r1
 80073ac:	461a      	mov	r2, r3
 80073ae:	4b8b      	ldr	r3, [pc, #556]	; (80075dc <UART_SetConfig+0x384>)
 80073b0:	fba3 1302 	umull	r1, r3, r3, r2
 80073b4:	095b      	lsrs	r3, r3, #5
 80073b6:	2164      	movs	r1, #100	; 0x64
 80073b8:	fb01 f303 	mul.w	r3, r1, r3
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	00db      	lsls	r3, r3, #3
 80073c0:	3332      	adds	r3, #50	; 0x32
 80073c2:	4a86      	ldr	r2, [pc, #536]	; (80075dc <UART_SetConfig+0x384>)
 80073c4:	fba2 2303 	umull	r2, r3, r2, r3
 80073c8:	095b      	lsrs	r3, r3, #5
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073d0:	4498      	add	r8, r3
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	461d      	mov	r5, r3
 80073d6:	f04f 0600 	mov.w	r6, #0
 80073da:	46a9      	mov	r9, r5
 80073dc:	46b2      	mov	sl, r6
 80073de:	eb19 0309 	adds.w	r3, r9, r9
 80073e2:	eb4a 040a 	adc.w	r4, sl, sl
 80073e6:	4699      	mov	r9, r3
 80073e8:	46a2      	mov	sl, r4
 80073ea:	eb19 0905 	adds.w	r9, r9, r5
 80073ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80073f2:	f04f 0100 	mov.w	r1, #0
 80073f6:	f04f 0200 	mov.w	r2, #0
 80073fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007402:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007406:	4689      	mov	r9, r1
 8007408:	4692      	mov	sl, r2
 800740a:	eb19 0005 	adds.w	r0, r9, r5
 800740e:	eb4a 0106 	adc.w	r1, sl, r6
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	461d      	mov	r5, r3
 8007418:	f04f 0600 	mov.w	r6, #0
 800741c:	196b      	adds	r3, r5, r5
 800741e:	eb46 0406 	adc.w	r4, r6, r6
 8007422:	461a      	mov	r2, r3
 8007424:	4623      	mov	r3, r4
 8007426:	f7f9 fb01 	bl	8000a2c <__aeabi_uldivmod>
 800742a:	4603      	mov	r3, r0
 800742c:	460c      	mov	r4, r1
 800742e:	461a      	mov	r2, r3
 8007430:	4b6a      	ldr	r3, [pc, #424]	; (80075dc <UART_SetConfig+0x384>)
 8007432:	fba3 1302 	umull	r1, r3, r3, r2
 8007436:	095b      	lsrs	r3, r3, #5
 8007438:	2164      	movs	r1, #100	; 0x64
 800743a:	fb01 f303 	mul.w	r3, r1, r3
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	00db      	lsls	r3, r3, #3
 8007442:	3332      	adds	r3, #50	; 0x32
 8007444:	4a65      	ldr	r2, [pc, #404]	; (80075dc <UART_SetConfig+0x384>)
 8007446:	fba2 2303 	umull	r2, r3, r2, r3
 800744a:	095b      	lsrs	r3, r3, #5
 800744c:	f003 0207 	and.w	r2, r3, #7
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4442      	add	r2, r8
 8007456:	609a      	str	r2, [r3, #8]
 8007458:	e26f      	b.n	800793a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800745a:	f7fe fc23 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 800745e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	461d      	mov	r5, r3
 8007464:	f04f 0600 	mov.w	r6, #0
 8007468:	46a8      	mov	r8, r5
 800746a:	46b1      	mov	r9, r6
 800746c:	eb18 0308 	adds.w	r3, r8, r8
 8007470:	eb49 0409 	adc.w	r4, r9, r9
 8007474:	4698      	mov	r8, r3
 8007476:	46a1      	mov	r9, r4
 8007478:	eb18 0805 	adds.w	r8, r8, r5
 800747c:	eb49 0906 	adc.w	r9, r9, r6
 8007480:	f04f 0100 	mov.w	r1, #0
 8007484:	f04f 0200 	mov.w	r2, #0
 8007488:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800748c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007490:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007494:	4688      	mov	r8, r1
 8007496:	4691      	mov	r9, r2
 8007498:	eb18 0005 	adds.w	r0, r8, r5
 800749c:	eb49 0106 	adc.w	r1, r9, r6
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	461d      	mov	r5, r3
 80074a6:	f04f 0600 	mov.w	r6, #0
 80074aa:	196b      	adds	r3, r5, r5
 80074ac:	eb46 0406 	adc.w	r4, r6, r6
 80074b0:	461a      	mov	r2, r3
 80074b2:	4623      	mov	r3, r4
 80074b4:	f7f9 faba 	bl	8000a2c <__aeabi_uldivmod>
 80074b8:	4603      	mov	r3, r0
 80074ba:	460c      	mov	r4, r1
 80074bc:	461a      	mov	r2, r3
 80074be:	4b47      	ldr	r3, [pc, #284]	; (80075dc <UART_SetConfig+0x384>)
 80074c0:	fba3 2302 	umull	r2, r3, r3, r2
 80074c4:	095b      	lsrs	r3, r3, #5
 80074c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	461d      	mov	r5, r3
 80074ce:	f04f 0600 	mov.w	r6, #0
 80074d2:	46a9      	mov	r9, r5
 80074d4:	46b2      	mov	sl, r6
 80074d6:	eb19 0309 	adds.w	r3, r9, r9
 80074da:	eb4a 040a 	adc.w	r4, sl, sl
 80074de:	4699      	mov	r9, r3
 80074e0:	46a2      	mov	sl, r4
 80074e2:	eb19 0905 	adds.w	r9, r9, r5
 80074e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80074ea:	f04f 0100 	mov.w	r1, #0
 80074ee:	f04f 0200 	mov.w	r2, #0
 80074f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80074fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80074fe:	4689      	mov	r9, r1
 8007500:	4692      	mov	sl, r2
 8007502:	eb19 0005 	adds.w	r0, r9, r5
 8007506:	eb4a 0106 	adc.w	r1, sl, r6
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	461d      	mov	r5, r3
 8007510:	f04f 0600 	mov.w	r6, #0
 8007514:	196b      	adds	r3, r5, r5
 8007516:	eb46 0406 	adc.w	r4, r6, r6
 800751a:	461a      	mov	r2, r3
 800751c:	4623      	mov	r3, r4
 800751e:	f7f9 fa85 	bl	8000a2c <__aeabi_uldivmod>
 8007522:	4603      	mov	r3, r0
 8007524:	460c      	mov	r4, r1
 8007526:	461a      	mov	r2, r3
 8007528:	4b2c      	ldr	r3, [pc, #176]	; (80075dc <UART_SetConfig+0x384>)
 800752a:	fba3 1302 	umull	r1, r3, r3, r2
 800752e:	095b      	lsrs	r3, r3, #5
 8007530:	2164      	movs	r1, #100	; 0x64
 8007532:	fb01 f303 	mul.w	r3, r1, r3
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	00db      	lsls	r3, r3, #3
 800753a:	3332      	adds	r3, #50	; 0x32
 800753c:	4a27      	ldr	r2, [pc, #156]	; (80075dc <UART_SetConfig+0x384>)
 800753e:	fba2 2303 	umull	r2, r3, r2, r3
 8007542:	095b      	lsrs	r3, r3, #5
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800754a:	4498      	add	r8, r3
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	461d      	mov	r5, r3
 8007550:	f04f 0600 	mov.w	r6, #0
 8007554:	46a9      	mov	r9, r5
 8007556:	46b2      	mov	sl, r6
 8007558:	eb19 0309 	adds.w	r3, r9, r9
 800755c:	eb4a 040a 	adc.w	r4, sl, sl
 8007560:	4699      	mov	r9, r3
 8007562:	46a2      	mov	sl, r4
 8007564:	eb19 0905 	adds.w	r9, r9, r5
 8007568:	eb4a 0a06 	adc.w	sl, sl, r6
 800756c:	f04f 0100 	mov.w	r1, #0
 8007570:	f04f 0200 	mov.w	r2, #0
 8007574:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007578:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800757c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007580:	4689      	mov	r9, r1
 8007582:	4692      	mov	sl, r2
 8007584:	eb19 0005 	adds.w	r0, r9, r5
 8007588:	eb4a 0106 	adc.w	r1, sl, r6
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	461d      	mov	r5, r3
 8007592:	f04f 0600 	mov.w	r6, #0
 8007596:	196b      	adds	r3, r5, r5
 8007598:	eb46 0406 	adc.w	r4, r6, r6
 800759c:	461a      	mov	r2, r3
 800759e:	4623      	mov	r3, r4
 80075a0:	f7f9 fa44 	bl	8000a2c <__aeabi_uldivmod>
 80075a4:	4603      	mov	r3, r0
 80075a6:	460c      	mov	r4, r1
 80075a8:	461a      	mov	r2, r3
 80075aa:	4b0c      	ldr	r3, [pc, #48]	; (80075dc <UART_SetConfig+0x384>)
 80075ac:	fba3 1302 	umull	r1, r3, r3, r2
 80075b0:	095b      	lsrs	r3, r3, #5
 80075b2:	2164      	movs	r1, #100	; 0x64
 80075b4:	fb01 f303 	mul.w	r3, r1, r3
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	00db      	lsls	r3, r3, #3
 80075bc:	3332      	adds	r3, #50	; 0x32
 80075be:	4a07      	ldr	r2, [pc, #28]	; (80075dc <UART_SetConfig+0x384>)
 80075c0:	fba2 2303 	umull	r2, r3, r2, r3
 80075c4:	095b      	lsrs	r3, r3, #5
 80075c6:	f003 0207 	and.w	r2, r3, #7
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4442      	add	r2, r8
 80075d0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80075d2:	e1b2      	b.n	800793a <UART_SetConfig+0x6e2>
 80075d4:	40011000 	.word	0x40011000
 80075d8:	40011400 	.word	0x40011400
 80075dc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4ad7      	ldr	r2, [pc, #860]	; (8007944 <UART_SetConfig+0x6ec>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d005      	beq.n	80075f6 <UART_SetConfig+0x39e>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4ad6      	ldr	r2, [pc, #856]	; (8007948 <UART_SetConfig+0x6f0>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	f040 80d1 	bne.w	8007798 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80075f6:	f7fe fb69 	bl	8005ccc <HAL_RCC_GetPCLK2Freq>
 80075fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	469a      	mov	sl, r3
 8007600:	f04f 0b00 	mov.w	fp, #0
 8007604:	46d0      	mov	r8, sl
 8007606:	46d9      	mov	r9, fp
 8007608:	eb18 0308 	adds.w	r3, r8, r8
 800760c:	eb49 0409 	adc.w	r4, r9, r9
 8007610:	4698      	mov	r8, r3
 8007612:	46a1      	mov	r9, r4
 8007614:	eb18 080a 	adds.w	r8, r8, sl
 8007618:	eb49 090b 	adc.w	r9, r9, fp
 800761c:	f04f 0100 	mov.w	r1, #0
 8007620:	f04f 0200 	mov.w	r2, #0
 8007624:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007628:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800762c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007630:	4688      	mov	r8, r1
 8007632:	4691      	mov	r9, r2
 8007634:	eb1a 0508 	adds.w	r5, sl, r8
 8007638:	eb4b 0609 	adc.w	r6, fp, r9
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	4619      	mov	r1, r3
 8007642:	f04f 0200 	mov.w	r2, #0
 8007646:	f04f 0300 	mov.w	r3, #0
 800764a:	f04f 0400 	mov.w	r4, #0
 800764e:	0094      	lsls	r4, r2, #2
 8007650:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007654:	008b      	lsls	r3, r1, #2
 8007656:	461a      	mov	r2, r3
 8007658:	4623      	mov	r3, r4
 800765a:	4628      	mov	r0, r5
 800765c:	4631      	mov	r1, r6
 800765e:	f7f9 f9e5 	bl	8000a2c <__aeabi_uldivmod>
 8007662:	4603      	mov	r3, r0
 8007664:	460c      	mov	r4, r1
 8007666:	461a      	mov	r2, r3
 8007668:	4bb8      	ldr	r3, [pc, #736]	; (800794c <UART_SetConfig+0x6f4>)
 800766a:	fba3 2302 	umull	r2, r3, r3, r2
 800766e:	095b      	lsrs	r3, r3, #5
 8007670:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	469b      	mov	fp, r3
 8007678:	f04f 0c00 	mov.w	ip, #0
 800767c:	46d9      	mov	r9, fp
 800767e:	46e2      	mov	sl, ip
 8007680:	eb19 0309 	adds.w	r3, r9, r9
 8007684:	eb4a 040a 	adc.w	r4, sl, sl
 8007688:	4699      	mov	r9, r3
 800768a:	46a2      	mov	sl, r4
 800768c:	eb19 090b 	adds.w	r9, r9, fp
 8007690:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007694:	f04f 0100 	mov.w	r1, #0
 8007698:	f04f 0200 	mov.w	r2, #0
 800769c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076a8:	4689      	mov	r9, r1
 80076aa:	4692      	mov	sl, r2
 80076ac:	eb1b 0509 	adds.w	r5, fp, r9
 80076b0:	eb4c 060a 	adc.w	r6, ip, sl
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	4619      	mov	r1, r3
 80076ba:	f04f 0200 	mov.w	r2, #0
 80076be:	f04f 0300 	mov.w	r3, #0
 80076c2:	f04f 0400 	mov.w	r4, #0
 80076c6:	0094      	lsls	r4, r2, #2
 80076c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80076cc:	008b      	lsls	r3, r1, #2
 80076ce:	461a      	mov	r2, r3
 80076d0:	4623      	mov	r3, r4
 80076d2:	4628      	mov	r0, r5
 80076d4:	4631      	mov	r1, r6
 80076d6:	f7f9 f9a9 	bl	8000a2c <__aeabi_uldivmod>
 80076da:	4603      	mov	r3, r0
 80076dc:	460c      	mov	r4, r1
 80076de:	461a      	mov	r2, r3
 80076e0:	4b9a      	ldr	r3, [pc, #616]	; (800794c <UART_SetConfig+0x6f4>)
 80076e2:	fba3 1302 	umull	r1, r3, r3, r2
 80076e6:	095b      	lsrs	r3, r3, #5
 80076e8:	2164      	movs	r1, #100	; 0x64
 80076ea:	fb01 f303 	mul.w	r3, r1, r3
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	011b      	lsls	r3, r3, #4
 80076f2:	3332      	adds	r3, #50	; 0x32
 80076f4:	4a95      	ldr	r2, [pc, #596]	; (800794c <UART_SetConfig+0x6f4>)
 80076f6:	fba2 2303 	umull	r2, r3, r2, r3
 80076fa:	095b      	lsrs	r3, r3, #5
 80076fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007700:	4498      	add	r8, r3
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	469b      	mov	fp, r3
 8007706:	f04f 0c00 	mov.w	ip, #0
 800770a:	46d9      	mov	r9, fp
 800770c:	46e2      	mov	sl, ip
 800770e:	eb19 0309 	adds.w	r3, r9, r9
 8007712:	eb4a 040a 	adc.w	r4, sl, sl
 8007716:	4699      	mov	r9, r3
 8007718:	46a2      	mov	sl, r4
 800771a:	eb19 090b 	adds.w	r9, r9, fp
 800771e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007722:	f04f 0100 	mov.w	r1, #0
 8007726:	f04f 0200 	mov.w	r2, #0
 800772a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800772e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007732:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007736:	4689      	mov	r9, r1
 8007738:	4692      	mov	sl, r2
 800773a:	eb1b 0509 	adds.w	r5, fp, r9
 800773e:	eb4c 060a 	adc.w	r6, ip, sl
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	4619      	mov	r1, r3
 8007748:	f04f 0200 	mov.w	r2, #0
 800774c:	f04f 0300 	mov.w	r3, #0
 8007750:	f04f 0400 	mov.w	r4, #0
 8007754:	0094      	lsls	r4, r2, #2
 8007756:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800775a:	008b      	lsls	r3, r1, #2
 800775c:	461a      	mov	r2, r3
 800775e:	4623      	mov	r3, r4
 8007760:	4628      	mov	r0, r5
 8007762:	4631      	mov	r1, r6
 8007764:	f7f9 f962 	bl	8000a2c <__aeabi_uldivmod>
 8007768:	4603      	mov	r3, r0
 800776a:	460c      	mov	r4, r1
 800776c:	461a      	mov	r2, r3
 800776e:	4b77      	ldr	r3, [pc, #476]	; (800794c <UART_SetConfig+0x6f4>)
 8007770:	fba3 1302 	umull	r1, r3, r3, r2
 8007774:	095b      	lsrs	r3, r3, #5
 8007776:	2164      	movs	r1, #100	; 0x64
 8007778:	fb01 f303 	mul.w	r3, r1, r3
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	011b      	lsls	r3, r3, #4
 8007780:	3332      	adds	r3, #50	; 0x32
 8007782:	4a72      	ldr	r2, [pc, #456]	; (800794c <UART_SetConfig+0x6f4>)
 8007784:	fba2 2303 	umull	r2, r3, r2, r3
 8007788:	095b      	lsrs	r3, r3, #5
 800778a:	f003 020f 	and.w	r2, r3, #15
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4442      	add	r2, r8
 8007794:	609a      	str	r2, [r3, #8]
 8007796:	e0d0      	b.n	800793a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007798:	f7fe fa84 	bl	8005ca4 <HAL_RCC_GetPCLK1Freq>
 800779c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	469a      	mov	sl, r3
 80077a2:	f04f 0b00 	mov.w	fp, #0
 80077a6:	46d0      	mov	r8, sl
 80077a8:	46d9      	mov	r9, fp
 80077aa:	eb18 0308 	adds.w	r3, r8, r8
 80077ae:	eb49 0409 	adc.w	r4, r9, r9
 80077b2:	4698      	mov	r8, r3
 80077b4:	46a1      	mov	r9, r4
 80077b6:	eb18 080a 	adds.w	r8, r8, sl
 80077ba:	eb49 090b 	adc.w	r9, r9, fp
 80077be:	f04f 0100 	mov.w	r1, #0
 80077c2:	f04f 0200 	mov.w	r2, #0
 80077c6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80077ca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80077ce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80077d2:	4688      	mov	r8, r1
 80077d4:	4691      	mov	r9, r2
 80077d6:	eb1a 0508 	adds.w	r5, sl, r8
 80077da:	eb4b 0609 	adc.w	r6, fp, r9
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	4619      	mov	r1, r3
 80077e4:	f04f 0200 	mov.w	r2, #0
 80077e8:	f04f 0300 	mov.w	r3, #0
 80077ec:	f04f 0400 	mov.w	r4, #0
 80077f0:	0094      	lsls	r4, r2, #2
 80077f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80077f6:	008b      	lsls	r3, r1, #2
 80077f8:	461a      	mov	r2, r3
 80077fa:	4623      	mov	r3, r4
 80077fc:	4628      	mov	r0, r5
 80077fe:	4631      	mov	r1, r6
 8007800:	f7f9 f914 	bl	8000a2c <__aeabi_uldivmod>
 8007804:	4603      	mov	r3, r0
 8007806:	460c      	mov	r4, r1
 8007808:	461a      	mov	r2, r3
 800780a:	4b50      	ldr	r3, [pc, #320]	; (800794c <UART_SetConfig+0x6f4>)
 800780c:	fba3 2302 	umull	r2, r3, r3, r2
 8007810:	095b      	lsrs	r3, r3, #5
 8007812:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	469b      	mov	fp, r3
 800781a:	f04f 0c00 	mov.w	ip, #0
 800781e:	46d9      	mov	r9, fp
 8007820:	46e2      	mov	sl, ip
 8007822:	eb19 0309 	adds.w	r3, r9, r9
 8007826:	eb4a 040a 	adc.w	r4, sl, sl
 800782a:	4699      	mov	r9, r3
 800782c:	46a2      	mov	sl, r4
 800782e:	eb19 090b 	adds.w	r9, r9, fp
 8007832:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007836:	f04f 0100 	mov.w	r1, #0
 800783a:	f04f 0200 	mov.w	r2, #0
 800783e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007842:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007846:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800784a:	4689      	mov	r9, r1
 800784c:	4692      	mov	sl, r2
 800784e:	eb1b 0509 	adds.w	r5, fp, r9
 8007852:	eb4c 060a 	adc.w	r6, ip, sl
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	4619      	mov	r1, r3
 800785c:	f04f 0200 	mov.w	r2, #0
 8007860:	f04f 0300 	mov.w	r3, #0
 8007864:	f04f 0400 	mov.w	r4, #0
 8007868:	0094      	lsls	r4, r2, #2
 800786a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800786e:	008b      	lsls	r3, r1, #2
 8007870:	461a      	mov	r2, r3
 8007872:	4623      	mov	r3, r4
 8007874:	4628      	mov	r0, r5
 8007876:	4631      	mov	r1, r6
 8007878:	f7f9 f8d8 	bl	8000a2c <__aeabi_uldivmod>
 800787c:	4603      	mov	r3, r0
 800787e:	460c      	mov	r4, r1
 8007880:	461a      	mov	r2, r3
 8007882:	4b32      	ldr	r3, [pc, #200]	; (800794c <UART_SetConfig+0x6f4>)
 8007884:	fba3 1302 	umull	r1, r3, r3, r2
 8007888:	095b      	lsrs	r3, r3, #5
 800788a:	2164      	movs	r1, #100	; 0x64
 800788c:	fb01 f303 	mul.w	r3, r1, r3
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	011b      	lsls	r3, r3, #4
 8007894:	3332      	adds	r3, #50	; 0x32
 8007896:	4a2d      	ldr	r2, [pc, #180]	; (800794c <UART_SetConfig+0x6f4>)
 8007898:	fba2 2303 	umull	r2, r3, r2, r3
 800789c:	095b      	lsrs	r3, r3, #5
 800789e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078a2:	4498      	add	r8, r3
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	469b      	mov	fp, r3
 80078a8:	f04f 0c00 	mov.w	ip, #0
 80078ac:	46d9      	mov	r9, fp
 80078ae:	46e2      	mov	sl, ip
 80078b0:	eb19 0309 	adds.w	r3, r9, r9
 80078b4:	eb4a 040a 	adc.w	r4, sl, sl
 80078b8:	4699      	mov	r9, r3
 80078ba:	46a2      	mov	sl, r4
 80078bc:	eb19 090b 	adds.w	r9, r9, fp
 80078c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80078c4:	f04f 0100 	mov.w	r1, #0
 80078c8:	f04f 0200 	mov.w	r2, #0
 80078cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078d8:	4689      	mov	r9, r1
 80078da:	4692      	mov	sl, r2
 80078dc:	eb1b 0509 	adds.w	r5, fp, r9
 80078e0:	eb4c 060a 	adc.w	r6, ip, sl
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	4619      	mov	r1, r3
 80078ea:	f04f 0200 	mov.w	r2, #0
 80078ee:	f04f 0300 	mov.w	r3, #0
 80078f2:	f04f 0400 	mov.w	r4, #0
 80078f6:	0094      	lsls	r4, r2, #2
 80078f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80078fc:	008b      	lsls	r3, r1, #2
 80078fe:	461a      	mov	r2, r3
 8007900:	4623      	mov	r3, r4
 8007902:	4628      	mov	r0, r5
 8007904:	4631      	mov	r1, r6
 8007906:	f7f9 f891 	bl	8000a2c <__aeabi_uldivmod>
 800790a:	4603      	mov	r3, r0
 800790c:	460c      	mov	r4, r1
 800790e:	461a      	mov	r2, r3
 8007910:	4b0e      	ldr	r3, [pc, #56]	; (800794c <UART_SetConfig+0x6f4>)
 8007912:	fba3 1302 	umull	r1, r3, r3, r2
 8007916:	095b      	lsrs	r3, r3, #5
 8007918:	2164      	movs	r1, #100	; 0x64
 800791a:	fb01 f303 	mul.w	r3, r1, r3
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	011b      	lsls	r3, r3, #4
 8007922:	3332      	adds	r3, #50	; 0x32
 8007924:	4a09      	ldr	r2, [pc, #36]	; (800794c <UART_SetConfig+0x6f4>)
 8007926:	fba2 2303 	umull	r2, r3, r2, r3
 800792a:	095b      	lsrs	r3, r3, #5
 800792c:	f003 020f 	and.w	r2, r3, #15
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4442      	add	r2, r8
 8007936:	609a      	str	r2, [r3, #8]
}
 8007938:	e7ff      	b.n	800793a <UART_SetConfig+0x6e2>
 800793a:	bf00      	nop
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007944:	40011000 	.word	0x40011000
 8007948:	40011400 	.word	0x40011400
 800794c:	51eb851f 	.word	0x51eb851f

08007950 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800795e:	2300      	movs	r3, #0
 8007960:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d029      	beq.n	80079be <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007976:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800797a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007984:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800798a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8007990:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8007996:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800799c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80079a2:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80079a8:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80079ae:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	e034      	b.n	8007a28 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079ca:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80079d4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80079da:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	4313      	orrs	r3, r2
 80079e0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80079ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079f2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80079fc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8007a02:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8007a08:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8007a0e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007a14:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b087      	sub	sp, #28
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	60f8      	str	r0, [r7, #12]
 8007a3e:	60b9      	str	r1, [r7, #8]
 8007a40:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d02e      	beq.n	8007aae <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007a5c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007a6c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	3b01      	subs	r3, #1
 8007a74:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007a76:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007a80:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	3b01      	subs	r3, #1
 8007a88:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007a8a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007a94:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	609a      	str	r2, [r3, #8]
 8007aac:	e03b      	b.n	8007b26 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007aba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007abe:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	3b01      	subs	r3, #1
 8007ace:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007ae4:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007af4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	3b01      	subs	r3, #1
 8007afc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007afe:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	3b01      	subs	r3, #1
 8007b06:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007b08:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007b12:	4313      	orrs	r3, r2
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	371c      	adds	r7, #28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <__libc_init_array>:
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	4e0d      	ldr	r6, [pc, #52]	; (8007b6c <__libc_init_array+0x38>)
 8007b38:	4c0d      	ldr	r4, [pc, #52]	; (8007b70 <__libc_init_array+0x3c>)
 8007b3a:	1ba4      	subs	r4, r4, r6
 8007b3c:	10a4      	asrs	r4, r4, #2
 8007b3e:	2500      	movs	r5, #0
 8007b40:	42a5      	cmp	r5, r4
 8007b42:	d109      	bne.n	8007b58 <__libc_init_array+0x24>
 8007b44:	4e0b      	ldr	r6, [pc, #44]	; (8007b74 <__libc_init_array+0x40>)
 8007b46:	4c0c      	ldr	r4, [pc, #48]	; (8007b78 <__libc_init_array+0x44>)
 8007b48:	f000 fd6c 	bl	8008624 <_init>
 8007b4c:	1ba4      	subs	r4, r4, r6
 8007b4e:	10a4      	asrs	r4, r4, #2
 8007b50:	2500      	movs	r5, #0
 8007b52:	42a5      	cmp	r5, r4
 8007b54:	d105      	bne.n	8007b62 <__libc_init_array+0x2e>
 8007b56:	bd70      	pop	{r4, r5, r6, pc}
 8007b58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b5c:	4798      	blx	r3
 8007b5e:	3501      	adds	r5, #1
 8007b60:	e7ee      	b.n	8007b40 <__libc_init_array+0xc>
 8007b62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b66:	4798      	blx	r3
 8007b68:	3501      	adds	r5, #1
 8007b6a:	e7f2      	b.n	8007b52 <__libc_init_array+0x1e>
 8007b6c:	0800a324 	.word	0x0800a324
 8007b70:	0800a324 	.word	0x0800a324
 8007b74:	0800a324 	.word	0x0800a324
 8007b78:	0800a328 	.word	0x0800a328

08007b7c <memset>:
 8007b7c:	4402      	add	r2, r0
 8007b7e:	4603      	mov	r3, r0
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d100      	bne.n	8007b86 <memset+0xa>
 8007b84:	4770      	bx	lr
 8007b86:	f803 1b01 	strb.w	r1, [r3], #1
 8007b8a:	e7f9      	b.n	8007b80 <memset+0x4>

08007b8c <sinf>:
 8007b8c:	ee10 3a10 	vmov	r3, s0
 8007b90:	b507      	push	{r0, r1, r2, lr}
 8007b92:	4a1d      	ldr	r2, [pc, #116]	; (8007c08 <sinf+0x7c>)
 8007b94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	dc05      	bgt.n	8007ba8 <sinf+0x1c>
 8007b9c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8007c0c <sinf+0x80>
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	f000 fc41 	bl	8008428 <__kernel_sinf>
 8007ba6:	e004      	b.n	8007bb2 <sinf+0x26>
 8007ba8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007bac:	db04      	blt.n	8007bb8 <sinf+0x2c>
 8007bae:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007bb2:	b003      	add	sp, #12
 8007bb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8007bb8:	4668      	mov	r0, sp
 8007bba:	f000 f829 	bl	8007c10 <__ieee754_rem_pio2f>
 8007bbe:	f000 0003 	and.w	r0, r0, #3
 8007bc2:	2801      	cmp	r0, #1
 8007bc4:	d008      	beq.n	8007bd8 <sinf+0x4c>
 8007bc6:	2802      	cmp	r0, #2
 8007bc8:	d00d      	beq.n	8007be6 <sinf+0x5a>
 8007bca:	b9b0      	cbnz	r0, 8007bfa <sinf+0x6e>
 8007bcc:	2001      	movs	r0, #1
 8007bce:	eddd 0a01 	vldr	s1, [sp, #4]
 8007bd2:	ed9d 0a00 	vldr	s0, [sp]
 8007bd6:	e7e4      	b.n	8007ba2 <sinf+0x16>
 8007bd8:	eddd 0a01 	vldr	s1, [sp, #4]
 8007bdc:	ed9d 0a00 	vldr	s0, [sp]
 8007be0:	f000 f942 	bl	8007e68 <__kernel_cosf>
 8007be4:	e7e5      	b.n	8007bb2 <sinf+0x26>
 8007be6:	2001      	movs	r0, #1
 8007be8:	eddd 0a01 	vldr	s1, [sp, #4]
 8007bec:	ed9d 0a00 	vldr	s0, [sp]
 8007bf0:	f000 fc1a 	bl	8008428 <__kernel_sinf>
 8007bf4:	eeb1 0a40 	vneg.f32	s0, s0
 8007bf8:	e7db      	b.n	8007bb2 <sinf+0x26>
 8007bfa:	eddd 0a01 	vldr	s1, [sp, #4]
 8007bfe:	ed9d 0a00 	vldr	s0, [sp]
 8007c02:	f000 f931 	bl	8007e68 <__kernel_cosf>
 8007c06:	e7f5      	b.n	8007bf4 <sinf+0x68>
 8007c08:	3f490fd8 	.word	0x3f490fd8
 8007c0c:	00000000 	.word	0x00000000

08007c10 <__ieee754_rem_pio2f>:
 8007c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c12:	ee10 6a10 	vmov	r6, s0
 8007c16:	4b86      	ldr	r3, [pc, #536]	; (8007e30 <__ieee754_rem_pio2f+0x220>)
 8007c18:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8007c1c:	429c      	cmp	r4, r3
 8007c1e:	b087      	sub	sp, #28
 8007c20:	4605      	mov	r5, r0
 8007c22:	dc05      	bgt.n	8007c30 <__ieee754_rem_pio2f+0x20>
 8007c24:	2300      	movs	r3, #0
 8007c26:	ed85 0a00 	vstr	s0, [r5]
 8007c2a:	6043      	str	r3, [r0, #4]
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	e020      	b.n	8007c72 <__ieee754_rem_pio2f+0x62>
 8007c30:	4b80      	ldr	r3, [pc, #512]	; (8007e34 <__ieee754_rem_pio2f+0x224>)
 8007c32:	429c      	cmp	r4, r3
 8007c34:	dc38      	bgt.n	8007ca8 <__ieee754_rem_pio2f+0x98>
 8007c36:	2e00      	cmp	r6, #0
 8007c38:	f024 040f 	bic.w	r4, r4, #15
 8007c3c:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8007e38 <__ieee754_rem_pio2f+0x228>
 8007c40:	4b7e      	ldr	r3, [pc, #504]	; (8007e3c <__ieee754_rem_pio2f+0x22c>)
 8007c42:	dd18      	ble.n	8007c76 <__ieee754_rem_pio2f+0x66>
 8007c44:	429c      	cmp	r4, r3
 8007c46:	ee70 7a47 	vsub.f32	s15, s0, s14
 8007c4a:	bf09      	itett	eq
 8007c4c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8007e40 <__ieee754_rem_pio2f+0x230>
 8007c50:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8007e44 <__ieee754_rem_pio2f+0x234>
 8007c54:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007c58:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8007e48 <__ieee754_rem_pio2f+0x238>
 8007c5c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007c60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007c64:	edc0 6a00 	vstr	s13, [r0]
 8007c68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c6c:	edc0 7a01 	vstr	s15, [r0, #4]
 8007c70:	2001      	movs	r0, #1
 8007c72:	b007      	add	sp, #28
 8007c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c76:	429c      	cmp	r4, r3
 8007c78:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007c7c:	bf09      	itett	eq
 8007c7e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8007e40 <__ieee754_rem_pio2f+0x230>
 8007c82:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8007e44 <__ieee754_rem_pio2f+0x234>
 8007c86:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8007c8a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8007e48 <__ieee754_rem_pio2f+0x238>
 8007c8e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007c92:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007c96:	edc0 6a00 	vstr	s13, [r0]
 8007c9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c9e:	edc0 7a01 	vstr	s15, [r0, #4]
 8007ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca6:	e7e4      	b.n	8007c72 <__ieee754_rem_pio2f+0x62>
 8007ca8:	4b68      	ldr	r3, [pc, #416]	; (8007e4c <__ieee754_rem_pio2f+0x23c>)
 8007caa:	429c      	cmp	r4, r3
 8007cac:	dc71      	bgt.n	8007d92 <__ieee754_rem_pio2f+0x182>
 8007cae:	f000 fc03 	bl	80084b8 <fabsf>
 8007cb2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007e50 <__ieee754_rem_pio2f+0x240>
 8007cb6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007cba:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007cbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007cc2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8007cc6:	ee17 0a90 	vmov	r0, s15
 8007cca:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007e38 <__ieee754_rem_pio2f+0x228>
 8007cce:	eeb1 7a46 	vneg.f32	s14, s12
 8007cd2:	eea7 0a27 	vfma.f32	s0, s14, s15
 8007cd6:	281f      	cmp	r0, #31
 8007cd8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007e44 <__ieee754_rem_pio2f+0x234>
 8007cdc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007ce0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007ce4:	ee16 3a90 	vmov	r3, s13
 8007ce8:	dc1c      	bgt.n	8007d24 <__ieee754_rem_pio2f+0x114>
 8007cea:	1e47      	subs	r7, r0, #1
 8007cec:	4959      	ldr	r1, [pc, #356]	; (8007e54 <__ieee754_rem_pio2f+0x244>)
 8007cee:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007cf2:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8007cf6:	428a      	cmp	r2, r1
 8007cf8:	d014      	beq.n	8007d24 <__ieee754_rem_pio2f+0x114>
 8007cfa:	602b      	str	r3, [r5, #0]
 8007cfc:	ed95 7a00 	vldr	s14, [r5]
 8007d00:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007d04:	2e00      	cmp	r6, #0
 8007d06:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007d0a:	ed85 0a01 	vstr	s0, [r5, #4]
 8007d0e:	dab0      	bge.n	8007c72 <__ieee754_rem_pio2f+0x62>
 8007d10:	eeb1 7a47 	vneg.f32	s14, s14
 8007d14:	eeb1 0a40 	vneg.f32	s0, s0
 8007d18:	ed85 7a00 	vstr	s14, [r5]
 8007d1c:	ed85 0a01 	vstr	s0, [r5, #4]
 8007d20:	4240      	negs	r0, r0
 8007d22:	e7a6      	b.n	8007c72 <__ieee754_rem_pio2f+0x62>
 8007d24:	15e4      	asrs	r4, r4, #23
 8007d26:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007d2a:	1aa2      	subs	r2, r4, r2
 8007d2c:	2a08      	cmp	r2, #8
 8007d2e:	dde4      	ble.n	8007cfa <__ieee754_rem_pio2f+0xea>
 8007d30:	eddf 7a43 	vldr	s15, [pc, #268]	; 8007e40 <__ieee754_rem_pio2f+0x230>
 8007d34:	eef0 6a40 	vmov.f32	s13, s0
 8007d38:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007d3c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007d40:	eea7 0a27 	vfma.f32	s0, s14, s15
 8007d44:	eddf 7a40 	vldr	s15, [pc, #256]	; 8007e48 <__ieee754_rem_pio2f+0x238>
 8007d48:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8007d4c:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8007d50:	eef0 7a40 	vmov.f32	s15, s0
 8007d54:	ee15 3a90 	vmov	r3, s11
 8007d58:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007d5c:	1aa4      	subs	r4, r4, r2
 8007d5e:	2c19      	cmp	r4, #25
 8007d60:	dc04      	bgt.n	8007d6c <__ieee754_rem_pio2f+0x15c>
 8007d62:	edc5 5a00 	vstr	s11, [r5]
 8007d66:	eeb0 0a66 	vmov.f32	s0, s13
 8007d6a:	e7c7      	b.n	8007cfc <__ieee754_rem_pio2f+0xec>
 8007d6c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007e58 <__ieee754_rem_pio2f+0x248>
 8007d70:	eeb0 0a66 	vmov.f32	s0, s13
 8007d74:	eea7 0a25 	vfma.f32	s0, s14, s11
 8007d78:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007d7c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007d80:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007e5c <__ieee754_rem_pio2f+0x24c>
 8007d84:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8007d88:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007d8c:	ed85 7a00 	vstr	s14, [r5]
 8007d90:	e7b4      	b.n	8007cfc <__ieee754_rem_pio2f+0xec>
 8007d92:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007d96:	db06      	blt.n	8007da6 <__ieee754_rem_pio2f+0x196>
 8007d98:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007d9c:	edc0 7a01 	vstr	s15, [r0, #4]
 8007da0:	edc0 7a00 	vstr	s15, [r0]
 8007da4:	e742      	b.n	8007c2c <__ieee754_rem_pio2f+0x1c>
 8007da6:	15e2      	asrs	r2, r4, #23
 8007da8:	3a86      	subs	r2, #134	; 0x86
 8007daa:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8007dae:	ee07 3a90 	vmov	s15, r3
 8007db2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007db6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8007e60 <__ieee754_rem_pio2f+0x250>
 8007dba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007dbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007dc2:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007dc6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007dca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007dce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007dd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007dd6:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007dda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007dde:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007de6:	edcd 7a05 	vstr	s15, [sp, #20]
 8007dea:	d11e      	bne.n	8007e2a <__ieee754_rem_pio2f+0x21a>
 8007dec:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007df4:	bf0c      	ite	eq
 8007df6:	2301      	moveq	r3, #1
 8007df8:	2302      	movne	r3, #2
 8007dfa:	491a      	ldr	r1, [pc, #104]	; (8007e64 <__ieee754_rem_pio2f+0x254>)
 8007dfc:	9101      	str	r1, [sp, #4]
 8007dfe:	2102      	movs	r1, #2
 8007e00:	9100      	str	r1, [sp, #0]
 8007e02:	a803      	add	r0, sp, #12
 8007e04:	4629      	mov	r1, r5
 8007e06:	f000 f88d 	bl	8007f24 <__kernel_rem_pio2f>
 8007e0a:	2e00      	cmp	r6, #0
 8007e0c:	f6bf af31 	bge.w	8007c72 <__ieee754_rem_pio2f+0x62>
 8007e10:	edd5 7a00 	vldr	s15, [r5]
 8007e14:	eef1 7a67 	vneg.f32	s15, s15
 8007e18:	edc5 7a00 	vstr	s15, [r5]
 8007e1c:	edd5 7a01 	vldr	s15, [r5, #4]
 8007e20:	eef1 7a67 	vneg.f32	s15, s15
 8007e24:	edc5 7a01 	vstr	s15, [r5, #4]
 8007e28:	e77a      	b.n	8007d20 <__ieee754_rem_pio2f+0x110>
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e7e5      	b.n	8007dfa <__ieee754_rem_pio2f+0x1ea>
 8007e2e:	bf00      	nop
 8007e30:	3f490fd8 	.word	0x3f490fd8
 8007e34:	4016cbe3 	.word	0x4016cbe3
 8007e38:	3fc90f80 	.word	0x3fc90f80
 8007e3c:	3fc90fd0 	.word	0x3fc90fd0
 8007e40:	37354400 	.word	0x37354400
 8007e44:	37354443 	.word	0x37354443
 8007e48:	2e85a308 	.word	0x2e85a308
 8007e4c:	43490f80 	.word	0x43490f80
 8007e50:	3f22f984 	.word	0x3f22f984
 8007e54:	08009f4c 	.word	0x08009f4c
 8007e58:	2e85a300 	.word	0x2e85a300
 8007e5c:	248d3132 	.word	0x248d3132
 8007e60:	43800000 	.word	0x43800000
 8007e64:	08009fcc 	.word	0x08009fcc

08007e68 <__kernel_cosf>:
 8007e68:	ee10 3a10 	vmov	r3, s0
 8007e6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e70:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007e74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e78:	da05      	bge.n	8007e86 <__kernel_cosf+0x1e>
 8007e7a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007e7e:	ee17 2a90 	vmov	r2, s15
 8007e82:	2a00      	cmp	r2, #0
 8007e84:	d03b      	beq.n	8007efe <__kernel_cosf+0x96>
 8007e86:	ee20 6a00 	vmul.f32	s12, s0, s0
 8007e8a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007e8e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007f04 <__kernel_cosf+0x9c>
 8007e92:	4a1d      	ldr	r2, [pc, #116]	; (8007f08 <__kernel_cosf+0xa0>)
 8007e94:	ee66 7a07 	vmul.f32	s15, s12, s14
 8007e98:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8007f0c <__kernel_cosf+0xa4>
 8007e9c:	eea6 7a25 	vfma.f32	s14, s12, s11
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8007f10 <__kernel_cosf+0xa8>
 8007ea6:	eee7 5a06 	vfma.f32	s11, s14, s12
 8007eaa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007f14 <__kernel_cosf+0xac>
 8007eae:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007eb2:	eddf 5a19 	vldr	s11, [pc, #100]	; 8007f18 <__kernel_cosf+0xb0>
 8007eb6:	eee7 5a06 	vfma.f32	s11, s14, s12
 8007eba:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007f1c <__kernel_cosf+0xb4>
 8007ebe:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007ec2:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8007ec6:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007eca:	eee6 0a07 	vfma.f32	s1, s12, s14
 8007ece:	dc04      	bgt.n	8007eda <__kernel_cosf+0x72>
 8007ed0:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8007ed4:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8007ed8:	4770      	bx	lr
 8007eda:	4a11      	ldr	r2, [pc, #68]	; (8007f20 <__kernel_cosf+0xb8>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	bfda      	itte	le
 8007ee0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007ee4:	ee07 3a10 	vmovle	s14, r3
 8007ee8:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8007eec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ef0:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8007ef4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007ef8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007efc:	4770      	bx	lr
 8007efe:	eeb0 0a66 	vmov.f32	s0, s13
 8007f02:	4770      	bx	lr
 8007f04:	ad47d74e 	.word	0xad47d74e
 8007f08:	3e999999 	.word	0x3e999999
 8007f0c:	310f74f6 	.word	0x310f74f6
 8007f10:	b493f27c 	.word	0xb493f27c
 8007f14:	37d00d01 	.word	0x37d00d01
 8007f18:	bab60b61 	.word	0xbab60b61
 8007f1c:	3d2aaaab 	.word	0x3d2aaaab
 8007f20:	3f480000 	.word	0x3f480000

08007f24 <__kernel_rem_pio2f>:
 8007f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f28:	ed2d 8b04 	vpush	{d8-d9}
 8007f2c:	b0d7      	sub	sp, #348	; 0x15c
 8007f2e:	469b      	mov	fp, r3
 8007f30:	460e      	mov	r6, r1
 8007f32:	4bbe      	ldr	r3, [pc, #760]	; (800822c <__kernel_rem_pio2f+0x308>)
 8007f34:	9964      	ldr	r1, [sp, #400]	; 0x190
 8007f36:	9002      	str	r0, [sp, #8]
 8007f38:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8007f3c:	9865      	ldr	r0, [sp, #404]	; 0x194
 8007f3e:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800823c <__kernel_rem_pio2f+0x318>
 8007f42:	1ed1      	subs	r1, r2, #3
 8007f44:	2308      	movs	r3, #8
 8007f46:	fb91 f1f3 	sdiv	r1, r1, r3
 8007f4a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8007f4e:	f10b 3aff 	add.w	sl, fp, #4294967295
 8007f52:	1c4c      	adds	r4, r1, #1
 8007f54:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8007f58:	eba1 050a 	sub.w	r5, r1, sl
 8007f5c:	aa1a      	add	r2, sp, #104	; 0x68
 8007f5e:	eb09 070a 	add.w	r7, r9, sl
 8007f62:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8007f66:	4696      	mov	lr, r2
 8007f68:	2300      	movs	r3, #0
 8007f6a:	42bb      	cmp	r3, r7
 8007f6c:	dd0f      	ble.n	8007f8e <__kernel_rem_pio2f+0x6a>
 8007f6e:	af42      	add	r7, sp, #264	; 0x108
 8007f70:	2200      	movs	r2, #0
 8007f72:	454a      	cmp	r2, r9
 8007f74:	dc27      	bgt.n	8007fc6 <__kernel_rem_pio2f+0xa2>
 8007f76:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8007f7a:	eb0b 0302 	add.w	r3, fp, r2
 8007f7e:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8007f82:	9d02      	ldr	r5, [sp, #8]
 8007f84:	eddf 7aad 	vldr	s15, [pc, #692]	; 800823c <__kernel_rem_pio2f+0x318>
 8007f88:	f04f 0c00 	mov.w	ip, #0
 8007f8c:	e015      	b.n	8007fba <__kernel_rem_pio2f+0x96>
 8007f8e:	42dd      	cmn	r5, r3
 8007f90:	bf5d      	ittte	pl
 8007f92:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8007f96:	ee07 2a90 	vmovpl	s15, r2
 8007f9a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007f9e:	eef0 7a47 	vmovmi.f32	s15, s14
 8007fa2:	ecee 7a01 	vstmia	lr!, {s15}
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	e7df      	b.n	8007f6a <__kernel_rem_pio2f+0x46>
 8007faa:	ecf5 6a01 	vldmia	r5!, {s13}
 8007fae:	ed33 7a01 	vldmdb	r3!, {s14}
 8007fb2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007fb6:	f10c 0c01 	add.w	ip, ip, #1
 8007fba:	45d4      	cmp	ip, sl
 8007fbc:	ddf5      	ble.n	8007faa <__kernel_rem_pio2f+0x86>
 8007fbe:	ece7 7a01 	vstmia	r7!, {s15}
 8007fc2:	3201      	adds	r2, #1
 8007fc4:	e7d5      	b.n	8007f72 <__kernel_rem_pio2f+0x4e>
 8007fc6:	ab06      	add	r3, sp, #24
 8007fc8:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8007fcc:	9304      	str	r3, [sp, #16]
 8007fce:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8008238 <__kernel_rem_pio2f+0x314>
 8007fd2:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8008234 <__kernel_rem_pio2f+0x310>
 8007fd6:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8007fda:	9303      	str	r3, [sp, #12]
 8007fdc:	464d      	mov	r5, r9
 8007fde:	ab56      	add	r3, sp, #344	; 0x158
 8007fe0:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8007fe4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8007fe8:	3f01      	subs	r7, #1
 8007fea:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8007fee:	00bf      	lsls	r7, r7, #2
 8007ff0:	ab56      	add	r3, sp, #344	; 0x158
 8007ff2:	19da      	adds	r2, r3, r7
 8007ff4:	3a4c      	subs	r2, #76	; 0x4c
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	1ae9      	subs	r1, r5, r3
 8007ffa:	2900      	cmp	r1, #0
 8007ffc:	dc4c      	bgt.n	8008098 <__kernel_rem_pio2f+0x174>
 8007ffe:	4620      	mov	r0, r4
 8008000:	f000 faa4 	bl	800854c <scalbnf>
 8008004:	eeb0 8a40 	vmov.f32	s16, s0
 8008008:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800800c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008010:	f000 fa5a 	bl	80084c8 <floorf>
 8008014:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008018:	eea0 8a67 	vfms.f32	s16, s0, s15
 800801c:	2c00      	cmp	r4, #0
 800801e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008022:	edcd 7a01 	vstr	s15, [sp, #4]
 8008026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800802a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800802e:	dd48      	ble.n	80080c2 <__kernel_rem_pio2f+0x19e>
 8008030:	1e69      	subs	r1, r5, #1
 8008032:	ab06      	add	r3, sp, #24
 8008034:	f1c4 0008 	rsb	r0, r4, #8
 8008038:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800803c:	9a01      	ldr	r2, [sp, #4]
 800803e:	fa4c f300 	asr.w	r3, ip, r0
 8008042:	441a      	add	r2, r3
 8008044:	4083      	lsls	r3, r0
 8008046:	9201      	str	r2, [sp, #4]
 8008048:	ebac 0203 	sub.w	r2, ip, r3
 800804c:	ab06      	add	r3, sp, #24
 800804e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8008052:	f1c4 0307 	rsb	r3, r4, #7
 8008056:	fa42 f803 	asr.w	r8, r2, r3
 800805a:	f1b8 0f00 	cmp.w	r8, #0
 800805e:	dd41      	ble.n	80080e4 <__kernel_rem_pio2f+0x1c0>
 8008060:	9b01      	ldr	r3, [sp, #4]
 8008062:	2000      	movs	r0, #0
 8008064:	3301      	adds	r3, #1
 8008066:	9301      	str	r3, [sp, #4]
 8008068:	4601      	mov	r1, r0
 800806a:	4285      	cmp	r5, r0
 800806c:	dc6d      	bgt.n	800814a <__kernel_rem_pio2f+0x226>
 800806e:	2c00      	cmp	r4, #0
 8008070:	dd04      	ble.n	800807c <__kernel_rem_pio2f+0x158>
 8008072:	2c01      	cmp	r4, #1
 8008074:	d07e      	beq.n	8008174 <__kernel_rem_pio2f+0x250>
 8008076:	2c02      	cmp	r4, #2
 8008078:	f000 8086 	beq.w	8008188 <__kernel_rem_pio2f+0x264>
 800807c:	f1b8 0f02 	cmp.w	r8, #2
 8008080:	d130      	bne.n	80080e4 <__kernel_rem_pio2f+0x1c0>
 8008082:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008086:	ee30 8a48 	vsub.f32	s16, s0, s16
 800808a:	b359      	cbz	r1, 80080e4 <__kernel_rem_pio2f+0x1c0>
 800808c:	4620      	mov	r0, r4
 800808e:	f000 fa5d 	bl	800854c <scalbnf>
 8008092:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008096:	e025      	b.n	80080e4 <__kernel_rem_pio2f+0x1c0>
 8008098:	ee60 7a28 	vmul.f32	s15, s0, s17
 800809c:	a806      	add	r0, sp, #24
 800809e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080a6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80080aa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80080ae:	ee10 1a10 	vmov	r1, s0
 80080b2:	ed32 0a01 	vldmdb	r2!, {s0}
 80080b6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80080ba:	ee37 0a80 	vadd.f32	s0, s15, s0
 80080be:	3301      	adds	r3, #1
 80080c0:	e79a      	b.n	8007ff8 <__kernel_rem_pio2f+0xd4>
 80080c2:	d106      	bne.n	80080d2 <__kernel_rem_pio2f+0x1ae>
 80080c4:	1e6b      	subs	r3, r5, #1
 80080c6:	aa06      	add	r2, sp, #24
 80080c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80080cc:	ea4f 2822 	mov.w	r8, r2, asr #8
 80080d0:	e7c3      	b.n	800805a <__kernel_rem_pio2f+0x136>
 80080d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80080d6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80080da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080de:	da31      	bge.n	8008144 <__kernel_rem_pio2f+0x220>
 80080e0:	f04f 0800 	mov.w	r8, #0
 80080e4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80080e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ec:	f040 80a8 	bne.w	8008240 <__kernel_rem_pio2f+0x31c>
 80080f0:	1e6b      	subs	r3, r5, #1
 80080f2:	4618      	mov	r0, r3
 80080f4:	2200      	movs	r2, #0
 80080f6:	4548      	cmp	r0, r9
 80080f8:	da4d      	bge.n	8008196 <__kernel_rem_pio2f+0x272>
 80080fa:	2a00      	cmp	r2, #0
 80080fc:	f000 8087 	beq.w	800820e <__kernel_rem_pio2f+0x2ea>
 8008100:	aa06      	add	r2, sp, #24
 8008102:	3c08      	subs	r4, #8
 8008104:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008108:	2900      	cmp	r1, #0
 800810a:	f000 808d 	beq.w	8008228 <__kernel_rem_pio2f+0x304>
 800810e:	4620      	mov	r0, r4
 8008110:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008114:	9302      	str	r3, [sp, #8]
 8008116:	f000 fa19 	bl	800854c <scalbnf>
 800811a:	9b02      	ldr	r3, [sp, #8]
 800811c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8008238 <__kernel_rem_pio2f+0x314>
 8008120:	0099      	lsls	r1, r3, #2
 8008122:	aa42      	add	r2, sp, #264	; 0x108
 8008124:	1850      	adds	r0, r2, r1
 8008126:	1d05      	adds	r5, r0, #4
 8008128:	461c      	mov	r4, r3
 800812a:	2c00      	cmp	r4, #0
 800812c:	f280 80b8 	bge.w	80082a0 <__kernel_rem_pio2f+0x37c>
 8008130:	2500      	movs	r5, #0
 8008132:	1b5c      	subs	r4, r3, r5
 8008134:	2c00      	cmp	r4, #0
 8008136:	f2c0 80d8 	blt.w	80082ea <__kernel_rem_pio2f+0x3c6>
 800813a:	4f3d      	ldr	r7, [pc, #244]	; (8008230 <__kernel_rem_pio2f+0x30c>)
 800813c:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800823c <__kernel_rem_pio2f+0x318>
 8008140:	2400      	movs	r4, #0
 8008142:	e0c6      	b.n	80082d2 <__kernel_rem_pio2f+0x3ae>
 8008144:	f04f 0802 	mov.w	r8, #2
 8008148:	e78a      	b.n	8008060 <__kernel_rem_pio2f+0x13c>
 800814a:	ab06      	add	r3, sp, #24
 800814c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008150:	b949      	cbnz	r1, 8008166 <__kernel_rem_pio2f+0x242>
 8008152:	b12b      	cbz	r3, 8008160 <__kernel_rem_pio2f+0x23c>
 8008154:	aa06      	add	r2, sp, #24
 8008156:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800815a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800815e:	2301      	movs	r3, #1
 8008160:	3001      	adds	r0, #1
 8008162:	4619      	mov	r1, r3
 8008164:	e781      	b.n	800806a <__kernel_rem_pio2f+0x146>
 8008166:	aa06      	add	r2, sp, #24
 8008168:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800816c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008170:	460b      	mov	r3, r1
 8008172:	e7f5      	b.n	8008160 <__kernel_rem_pio2f+0x23c>
 8008174:	1e68      	subs	r0, r5, #1
 8008176:	ab06      	add	r3, sp, #24
 8008178:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800817c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008180:	aa06      	add	r2, sp, #24
 8008182:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008186:	e779      	b.n	800807c <__kernel_rem_pio2f+0x158>
 8008188:	1e68      	subs	r0, r5, #1
 800818a:	ab06      	add	r3, sp, #24
 800818c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008194:	e7f4      	b.n	8008180 <__kernel_rem_pio2f+0x25c>
 8008196:	a906      	add	r1, sp, #24
 8008198:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800819c:	3801      	subs	r0, #1
 800819e:	430a      	orrs	r2, r1
 80081a0:	e7a9      	b.n	80080f6 <__kernel_rem_pio2f+0x1d2>
 80081a2:	f10c 0c01 	add.w	ip, ip, #1
 80081a6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80081aa:	2a00      	cmp	r2, #0
 80081ac:	d0f9      	beq.n	80081a2 <__kernel_rem_pio2f+0x27e>
 80081ae:	eb0b 0305 	add.w	r3, fp, r5
 80081b2:	aa1a      	add	r2, sp, #104	; 0x68
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	1898      	adds	r0, r3, r2
 80081b8:	3004      	adds	r0, #4
 80081ba:	1c69      	adds	r1, r5, #1
 80081bc:	3704      	adds	r7, #4
 80081be:	2200      	movs	r2, #0
 80081c0:	4465      	add	r5, ip
 80081c2:	9005      	str	r0, [sp, #20]
 80081c4:	428d      	cmp	r5, r1
 80081c6:	f6ff af0a 	blt.w	8007fde <__kernel_rem_pio2f+0xba>
 80081ca:	a81a      	add	r0, sp, #104	; 0x68
 80081cc:	eb02 0c03 	add.w	ip, r2, r3
 80081d0:	4484      	add	ip, r0
 80081d2:	9803      	ldr	r0, [sp, #12]
 80081d4:	f8dd e008 	ldr.w	lr, [sp, #8]
 80081d8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80081dc:	9001      	str	r0, [sp, #4]
 80081de:	ee07 0a90 	vmov	s15, r0
 80081e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081e6:	9805      	ldr	r0, [sp, #20]
 80081e8:	edcc 7a00 	vstr	s15, [ip]
 80081ec:	eddf 7a13 	vldr	s15, [pc, #76]	; 800823c <__kernel_rem_pio2f+0x318>
 80081f0:	eb00 0802 	add.w	r8, r0, r2
 80081f4:	f04f 0c00 	mov.w	ip, #0
 80081f8:	45d4      	cmp	ip, sl
 80081fa:	dd0c      	ble.n	8008216 <__kernel_rem_pio2f+0x2f2>
 80081fc:	eb02 0c07 	add.w	ip, r2, r7
 8008200:	a842      	add	r0, sp, #264	; 0x108
 8008202:	4484      	add	ip, r0
 8008204:	edcc 7a01 	vstr	s15, [ip, #4]
 8008208:	3101      	adds	r1, #1
 800820a:	3204      	adds	r2, #4
 800820c:	e7da      	b.n	80081c4 <__kernel_rem_pio2f+0x2a0>
 800820e:	9b04      	ldr	r3, [sp, #16]
 8008210:	f04f 0c01 	mov.w	ip, #1
 8008214:	e7c7      	b.n	80081a6 <__kernel_rem_pio2f+0x282>
 8008216:	ecfe 6a01 	vldmia	lr!, {s13}
 800821a:	ed38 7a01 	vldmdb	r8!, {s14}
 800821e:	f10c 0c01 	add.w	ip, ip, #1
 8008222:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008226:	e7e7      	b.n	80081f8 <__kernel_rem_pio2f+0x2d4>
 8008228:	3b01      	subs	r3, #1
 800822a:	e769      	b.n	8008100 <__kernel_rem_pio2f+0x1dc>
 800822c:	0800a310 	.word	0x0800a310
 8008230:	0800a2e4 	.word	0x0800a2e4
 8008234:	43800000 	.word	0x43800000
 8008238:	3b800000 	.word	0x3b800000
 800823c:	00000000 	.word	0x00000000
 8008240:	4260      	negs	r0, r4
 8008242:	eeb0 0a48 	vmov.f32	s0, s16
 8008246:	f000 f981 	bl	800854c <scalbnf>
 800824a:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8008234 <__kernel_rem_pio2f+0x310>
 800824e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008256:	db1a      	blt.n	800828e <__kernel_rem_pio2f+0x36a>
 8008258:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008238 <__kernel_rem_pio2f+0x314>
 800825c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008260:	aa06      	add	r2, sp, #24
 8008262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008266:	a906      	add	r1, sp, #24
 8008268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800826c:	3408      	adds	r4, #8
 800826e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008276:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800827a:	ee10 3a10 	vmov	r3, s0
 800827e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008282:	1c6b      	adds	r3, r5, #1
 8008284:	ee17 2a90 	vmov	r2, s15
 8008288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800828c:	e73f      	b.n	800810e <__kernel_rem_pio2f+0x1ea>
 800828e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008292:	aa06      	add	r2, sp, #24
 8008294:	ee10 3a10 	vmov	r3, s0
 8008298:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800829c:	462b      	mov	r3, r5
 800829e:	e736      	b.n	800810e <__kernel_rem_pio2f+0x1ea>
 80082a0:	aa06      	add	r2, sp, #24
 80082a2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80082a6:	9202      	str	r2, [sp, #8]
 80082a8:	ee07 2a90 	vmov	s15, r2
 80082ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082b0:	3c01      	subs	r4, #1
 80082b2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80082b6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80082ba:	ed65 7a01 	vstmdb	r5!, {s15}
 80082be:	e734      	b.n	800812a <__kernel_rem_pio2f+0x206>
 80082c0:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80082c4:	ecf7 6a01 	vldmia	r7!, {s13}
 80082c8:	ed9c 7a00 	vldr	s14, [ip]
 80082cc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80082d0:	3401      	adds	r4, #1
 80082d2:	454c      	cmp	r4, r9
 80082d4:	dc01      	bgt.n	80082da <__kernel_rem_pio2f+0x3b6>
 80082d6:	42a5      	cmp	r5, r4
 80082d8:	daf2      	bge.n	80082c0 <__kernel_rem_pio2f+0x39c>
 80082da:	aa56      	add	r2, sp, #344	; 0x158
 80082dc:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80082e0:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80082e4:	3501      	adds	r5, #1
 80082e6:	3804      	subs	r0, #4
 80082e8:	e723      	b.n	8008132 <__kernel_rem_pio2f+0x20e>
 80082ea:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80082ec:	2a03      	cmp	r2, #3
 80082ee:	d84d      	bhi.n	800838c <__kernel_rem_pio2f+0x468>
 80082f0:	e8df f002 	tbb	[pc, r2]
 80082f4:	021f1f3e 	.word	0x021f1f3e
 80082f8:	aa56      	add	r2, sp, #344	; 0x158
 80082fa:	4411      	add	r1, r2
 80082fc:	399c      	subs	r1, #156	; 0x9c
 80082fe:	4608      	mov	r0, r1
 8008300:	461c      	mov	r4, r3
 8008302:	2c00      	cmp	r4, #0
 8008304:	dc5f      	bgt.n	80083c6 <__kernel_rem_pio2f+0x4a2>
 8008306:	4608      	mov	r0, r1
 8008308:	461c      	mov	r4, r3
 800830a:	2c01      	cmp	r4, #1
 800830c:	dc6b      	bgt.n	80083e6 <__kernel_rem_pio2f+0x4c2>
 800830e:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800823c <__kernel_rem_pio2f+0x318>
 8008312:	2b01      	cmp	r3, #1
 8008314:	dc77      	bgt.n	8008406 <__kernel_rem_pio2f+0x4e2>
 8008316:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800831a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800831e:	f1b8 0f00 	cmp.w	r8, #0
 8008322:	d176      	bne.n	8008412 <__kernel_rem_pio2f+0x4ee>
 8008324:	edc6 6a00 	vstr	s13, [r6]
 8008328:	ed86 7a01 	vstr	s14, [r6, #4]
 800832c:	edc6 7a02 	vstr	s15, [r6, #8]
 8008330:	e02c      	b.n	800838c <__kernel_rem_pio2f+0x468>
 8008332:	aa56      	add	r2, sp, #344	; 0x158
 8008334:	4411      	add	r1, r2
 8008336:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800823c <__kernel_rem_pio2f+0x318>
 800833a:	399c      	subs	r1, #156	; 0x9c
 800833c:	4618      	mov	r0, r3
 800833e:	2800      	cmp	r0, #0
 8008340:	da32      	bge.n	80083a8 <__kernel_rem_pio2f+0x484>
 8008342:	f1b8 0f00 	cmp.w	r8, #0
 8008346:	d035      	beq.n	80083b4 <__kernel_rem_pio2f+0x490>
 8008348:	eef1 7a47 	vneg.f32	s15, s14
 800834c:	edc6 7a00 	vstr	s15, [r6]
 8008350:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8008354:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008358:	a82f      	add	r0, sp, #188	; 0xbc
 800835a:	2101      	movs	r1, #1
 800835c:	428b      	cmp	r3, r1
 800835e:	da2c      	bge.n	80083ba <__kernel_rem_pio2f+0x496>
 8008360:	f1b8 0f00 	cmp.w	r8, #0
 8008364:	d001      	beq.n	800836a <__kernel_rem_pio2f+0x446>
 8008366:	eef1 7a67 	vneg.f32	s15, s15
 800836a:	edc6 7a01 	vstr	s15, [r6, #4]
 800836e:	e00d      	b.n	800838c <__kernel_rem_pio2f+0x468>
 8008370:	aa56      	add	r2, sp, #344	; 0x158
 8008372:	4411      	add	r1, r2
 8008374:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800823c <__kernel_rem_pio2f+0x318>
 8008378:	399c      	subs	r1, #156	; 0x9c
 800837a:	2b00      	cmp	r3, #0
 800837c:	da0e      	bge.n	800839c <__kernel_rem_pio2f+0x478>
 800837e:	f1b8 0f00 	cmp.w	r8, #0
 8008382:	d001      	beq.n	8008388 <__kernel_rem_pio2f+0x464>
 8008384:	eef1 7a67 	vneg.f32	s15, s15
 8008388:	edc6 7a00 	vstr	s15, [r6]
 800838c:	9b01      	ldr	r3, [sp, #4]
 800838e:	f003 0007 	and.w	r0, r3, #7
 8008392:	b057      	add	sp, #348	; 0x15c
 8008394:	ecbd 8b04 	vpop	{d8-d9}
 8008398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800839c:	ed31 7a01 	vldmdb	r1!, {s14}
 80083a0:	3b01      	subs	r3, #1
 80083a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80083a6:	e7e8      	b.n	800837a <__kernel_rem_pio2f+0x456>
 80083a8:	ed71 7a01 	vldmdb	r1!, {s15}
 80083ac:	3801      	subs	r0, #1
 80083ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80083b2:	e7c4      	b.n	800833e <__kernel_rem_pio2f+0x41a>
 80083b4:	eef0 7a47 	vmov.f32	s15, s14
 80083b8:	e7c8      	b.n	800834c <__kernel_rem_pio2f+0x428>
 80083ba:	ecb0 7a01 	vldmia	r0!, {s14}
 80083be:	3101      	adds	r1, #1
 80083c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80083c4:	e7ca      	b.n	800835c <__kernel_rem_pio2f+0x438>
 80083c6:	ed50 7a02 	vldr	s15, [r0, #-8]
 80083ca:	ed70 6a01 	vldmdb	r0!, {s13}
 80083ce:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80083d2:	3c01      	subs	r4, #1
 80083d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80083d8:	ed00 7a01 	vstr	s14, [r0, #-4]
 80083dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083e0:	edc0 7a00 	vstr	s15, [r0]
 80083e4:	e78d      	b.n	8008302 <__kernel_rem_pio2f+0x3de>
 80083e6:	ed50 7a02 	vldr	s15, [r0, #-8]
 80083ea:	ed70 6a01 	vldmdb	r0!, {s13}
 80083ee:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80083f2:	3c01      	subs	r4, #1
 80083f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80083f8:	ed00 7a01 	vstr	s14, [r0, #-4]
 80083fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008400:	edc0 7a00 	vstr	s15, [r0]
 8008404:	e781      	b.n	800830a <__kernel_rem_pio2f+0x3e6>
 8008406:	ed31 7a01 	vldmdb	r1!, {s14}
 800840a:	3b01      	subs	r3, #1
 800840c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008410:	e77f      	b.n	8008312 <__kernel_rem_pio2f+0x3ee>
 8008412:	eef1 6a66 	vneg.f32	s13, s13
 8008416:	eeb1 7a47 	vneg.f32	s14, s14
 800841a:	edc6 6a00 	vstr	s13, [r6]
 800841e:	ed86 7a01 	vstr	s14, [r6, #4]
 8008422:	eef1 7a67 	vneg.f32	s15, s15
 8008426:	e781      	b.n	800832c <__kernel_rem_pio2f+0x408>

08008428 <__kernel_sinf>:
 8008428:	ee10 3a10 	vmov	r3, s0
 800842c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008430:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008434:	da04      	bge.n	8008440 <__kernel_sinf+0x18>
 8008436:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800843a:	ee17 3a90 	vmov	r3, s15
 800843e:	b35b      	cbz	r3, 8008498 <__kernel_sinf+0x70>
 8008440:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008444:	eddf 7a15 	vldr	s15, [pc, #84]	; 800849c <__kernel_sinf+0x74>
 8008448:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80084a0 <__kernel_sinf+0x78>
 800844c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008450:	eddf 7a14 	vldr	s15, [pc, #80]	; 80084a4 <__kernel_sinf+0x7c>
 8008454:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008458:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80084a8 <__kernel_sinf+0x80>
 800845c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008460:	eddf 7a12 	vldr	s15, [pc, #72]	; 80084ac <__kernel_sinf+0x84>
 8008464:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008468:	eee6 7a07 	vfma.f32	s15, s12, s14
 800846c:	b930      	cbnz	r0, 800847c <__kernel_sinf+0x54>
 800846e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80084b0 <__kernel_sinf+0x88>
 8008472:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008476:	eea6 0a26 	vfma.f32	s0, s12, s13
 800847a:	4770      	bx	lr
 800847c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008480:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008484:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008488:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800848c:	eddf 7a09 	vldr	s15, [pc, #36]	; 80084b4 <__kernel_sinf+0x8c>
 8008490:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008494:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	2f2ec9d3 	.word	0x2f2ec9d3
 80084a0:	b2d72f34 	.word	0xb2d72f34
 80084a4:	3638ef1b 	.word	0x3638ef1b
 80084a8:	b9500d01 	.word	0xb9500d01
 80084ac:	3c088889 	.word	0x3c088889
 80084b0:	be2aaaab 	.word	0xbe2aaaab
 80084b4:	3e2aaaab 	.word	0x3e2aaaab

080084b8 <fabsf>:
 80084b8:	ee10 3a10 	vmov	r3, s0
 80084bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084c0:	ee00 3a10 	vmov	s0, r3
 80084c4:	4770      	bx	lr
	...

080084c8 <floorf>:
 80084c8:	ee10 3a10 	vmov	r3, s0
 80084cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80084d0:	0dca      	lsrs	r2, r1, #23
 80084d2:	3a7f      	subs	r2, #127	; 0x7f
 80084d4:	2a16      	cmp	r2, #22
 80084d6:	dc2a      	bgt.n	800852e <floorf+0x66>
 80084d8:	2a00      	cmp	r2, #0
 80084da:	da11      	bge.n	8008500 <floorf+0x38>
 80084dc:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008540 <floorf+0x78>
 80084e0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80084e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80084e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ec:	dd05      	ble.n	80084fa <floorf+0x32>
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	da23      	bge.n	800853a <floorf+0x72>
 80084f2:	4a14      	ldr	r2, [pc, #80]	; (8008544 <floorf+0x7c>)
 80084f4:	2900      	cmp	r1, #0
 80084f6:	bf18      	it	ne
 80084f8:	4613      	movne	r3, r2
 80084fa:	ee00 3a10 	vmov	s0, r3
 80084fe:	4770      	bx	lr
 8008500:	4911      	ldr	r1, [pc, #68]	; (8008548 <floorf+0x80>)
 8008502:	4111      	asrs	r1, r2
 8008504:	420b      	tst	r3, r1
 8008506:	d0fa      	beq.n	80084fe <floorf+0x36>
 8008508:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008540 <floorf+0x78>
 800850c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008510:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008518:	ddef      	ble.n	80084fa <floorf+0x32>
 800851a:	2b00      	cmp	r3, #0
 800851c:	bfbe      	ittt	lt
 800851e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008522:	fa40 f202 	asrlt.w	r2, r0, r2
 8008526:	189b      	addlt	r3, r3, r2
 8008528:	ea23 0301 	bic.w	r3, r3, r1
 800852c:	e7e5      	b.n	80084fa <floorf+0x32>
 800852e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008532:	d3e4      	bcc.n	80084fe <floorf+0x36>
 8008534:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008538:	4770      	bx	lr
 800853a:	2300      	movs	r3, #0
 800853c:	e7dd      	b.n	80084fa <floorf+0x32>
 800853e:	bf00      	nop
 8008540:	7149f2ca 	.word	0x7149f2ca
 8008544:	bf800000 	.word	0xbf800000
 8008548:	007fffff 	.word	0x007fffff

0800854c <scalbnf>:
 800854c:	b508      	push	{r3, lr}
 800854e:	ee10 2a10 	vmov	r2, s0
 8008552:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8008556:	ed2d 8b02 	vpush	{d8}
 800855a:	eef0 0a40 	vmov.f32	s1, s0
 800855e:	d004      	beq.n	800856a <scalbnf+0x1e>
 8008560:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008564:	d306      	bcc.n	8008574 <scalbnf+0x28>
 8008566:	ee70 0a00 	vadd.f32	s1, s0, s0
 800856a:	ecbd 8b02 	vpop	{d8}
 800856e:	eeb0 0a60 	vmov.f32	s0, s1
 8008572:	bd08      	pop	{r3, pc}
 8008574:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008578:	d21c      	bcs.n	80085b4 <scalbnf+0x68>
 800857a:	4b1f      	ldr	r3, [pc, #124]	; (80085f8 <scalbnf+0xac>)
 800857c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80085fc <scalbnf+0xb0>
 8008580:	4298      	cmp	r0, r3
 8008582:	ee60 0a27 	vmul.f32	s1, s0, s15
 8008586:	db10      	blt.n	80085aa <scalbnf+0x5e>
 8008588:	ee10 2a90 	vmov	r2, s1
 800858c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8008590:	3b19      	subs	r3, #25
 8008592:	4403      	add	r3, r0
 8008594:	2bfe      	cmp	r3, #254	; 0xfe
 8008596:	dd0f      	ble.n	80085b8 <scalbnf+0x6c>
 8008598:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8008600 <scalbnf+0xb4>
 800859c:	eeb0 0a48 	vmov.f32	s0, s16
 80085a0:	f000 f834 	bl	800860c <copysignf>
 80085a4:	ee60 0a08 	vmul.f32	s1, s0, s16
 80085a8:	e7df      	b.n	800856a <scalbnf+0x1e>
 80085aa:	eddf 7a16 	vldr	s15, [pc, #88]	; 8008604 <scalbnf+0xb8>
 80085ae:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80085b2:	e7da      	b.n	800856a <scalbnf+0x1e>
 80085b4:	0ddb      	lsrs	r3, r3, #23
 80085b6:	e7ec      	b.n	8008592 <scalbnf+0x46>
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	dd06      	ble.n	80085ca <scalbnf+0x7e>
 80085bc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80085c0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80085c4:	ee00 3a90 	vmov	s1, r3
 80085c8:	e7cf      	b.n	800856a <scalbnf+0x1e>
 80085ca:	f113 0f16 	cmn.w	r3, #22
 80085ce:	da06      	bge.n	80085de <scalbnf+0x92>
 80085d0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80085d4:	4298      	cmp	r0, r3
 80085d6:	dcdf      	bgt.n	8008598 <scalbnf+0x4c>
 80085d8:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8008604 <scalbnf+0xb8>
 80085dc:	e7de      	b.n	800859c <scalbnf+0x50>
 80085de:	3319      	adds	r3, #25
 80085e0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80085e4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80085e8:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008608 <scalbnf+0xbc>
 80085ec:	ee07 3a10 	vmov	s14, r3
 80085f0:	ee67 0a27 	vmul.f32	s1, s14, s15
 80085f4:	e7b9      	b.n	800856a <scalbnf+0x1e>
 80085f6:	bf00      	nop
 80085f8:	ffff3cb0 	.word	0xffff3cb0
 80085fc:	4c000000 	.word	0x4c000000
 8008600:	7149f2ca 	.word	0x7149f2ca
 8008604:	0da24260 	.word	0x0da24260
 8008608:	33000000 	.word	0x33000000

0800860c <copysignf>:
 800860c:	ee10 3a10 	vmov	r3, s0
 8008610:	ee10 2a90 	vmov	r2, s1
 8008614:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008618:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800861c:	4313      	orrs	r3, r2
 800861e:	ee00 3a10 	vmov	s0, r3
 8008622:	4770      	bx	lr

08008624 <_init>:
 8008624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008626:	bf00      	nop
 8008628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800862a:	bc08      	pop	{r3}
 800862c:	469e      	mov	lr, r3
 800862e:	4770      	bx	lr

08008630 <_fini>:
 8008630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008632:	bf00      	nop
 8008634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008636:	bc08      	pop	{r3}
 8008638:	469e      	mov	lr, r3
 800863a:	4770      	bx	lr
