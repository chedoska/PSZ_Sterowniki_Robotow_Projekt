#include "ball_sound.h"

void generateSineWave(uint32_t frequency, uint32_t amplitude, uint32_t timer_frequency)
{
	amplitude /= 2;
	if(amplitude > 2047) amplitude = 2047;

	float period = 1.0 / timer_frequency;
	for(int t = 0; t < SAMPLE_NUMBER; t++)
	{
		sound_wav[t] =	amplitude * (sinf(2.0 * PI_CONST_SOUND * t * period * frequency) + 1);
	}
}

void addSineWaveAt(uint32_t frequency, uint32_t amplitude, uint32_t timer_frequency, uint32_t begin, uint32_t end)
{
	amplitude /= 2;
	float period = 1.0 / timer_frequency;
	if(end > SAMPLE_NUMBER)
	{
		end = SAMPLE_NUMBER;
	}
	for(int t = begin; t < end; t++)
	{
		int sample = amplitude * sinf(2.0 * PI_CONST_SOUND * t * period * frequency);
		sound_wav[t] = sample + (int)sound_wav[t];
		if(sound_wav[t] > 4095) sound_wav[t] = 4095;
	}
}

void initMelody_1(){
	generateSineWave(2000, 000, 10000);
	addSineWaveAt(500, 4000, 20000, 0, 500);
	addSineWaveAt(800, 4000, 20000, 500, 1000);
	addSineWaveAt(650, 4000, 20000, 1000, 1500);
	addSineWaveAt(900, 4000, 20000, 1500, 2000);
	addSineWaveAt(1200, 4000, 20000, 2000, 2500);
	addSineWaveAt(1600, 4000, 20000, 2500, 3000);
	addSineWaveAt(650, 4000, 20000, 3000, 3500);
	addSineWaveAt(800, 4000, 20000, 3500, 4000);
	addSineWaveAt(1000, 4000, 20000, 4000, 4500);
	addSineWaveAt(700, 4000, 20000, 4500, 5000);
	addSineWaveAt(2300, 4000, 20000, 5000, 5500);
	addSineWaveAt(2500, 4000, 20000, 5500, 6000);
	addSineWaveAt(3000, 4000, 20000, 6000, 6300);
}

void initMelody_2(){
	generateSineWave(2000, 000, 10000);
	int current_sample = 0;
	int resolution = 300;

	while(current_sample + resolution < SAMPLE_NUMBER)
	{

	}
}
