
ball_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b10  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08007cc0  08007cc0  00017cc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f58  08007f58  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007f58  08007f58  00017f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f60  08007f60  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f60  08007f60  00017f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f64  08007f64  00017f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  200001dc  08008144  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  08008144  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014132  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002942  00000000  00000000  0003433e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012d8  00000000  00000000  00036c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001180  00000000  00000000  00037f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000258d5  00000000  00000000  000390d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ed19  00000000  00000000  0005e9ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e1c7a  00000000  00000000  0006d6c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014f340  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d4  00000000  00000000  0014f3bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007ca8 	.word	0x08007ca8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08007ca8 	.word	0x08007ca8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b972 	b.w	8000f64 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14b      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4615      	mov	r5, r2
 8000caa:	d967      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0720 	rsb	r7, r2, #32
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	fa20 f707 	lsr.w	r7, r0, r7
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	ea47 0803 	orr.w	r8, r7, r3
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd0:	fa1f fc85 	uxth.w	ip, r5
 8000cd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cea:	f080 811b 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8118 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000cf4:	3f02      	subs	r7, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8107 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	f240 8104 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000d20:	3802      	subs	r0, #2
 8000d22:	442c      	add	r4, r5
 8000d24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	b11e      	cbz	r6, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c6 4300 	strd	r4, r3, [r6]
 8000d38:	4639      	mov	r1, r7
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xbe>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80eb 	beq.w	8000f1e <__udivmoddi4+0x286>
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4639      	mov	r1, r7
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f783 	clz	r7, r3
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d147      	bne.n	8000dee <__udivmoddi4+0x156>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd0>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80fa 	bhi.w	8000f5c <__udivmoddi4+0x2c4>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4698      	mov	r8, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000d76:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xe8>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 808f 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d8a:	1b49      	subs	r1, r1, r5
 8000d8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d90:	fa1f f885 	uxth.w	r8, r5
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb08 f10c 	mul.w	r1, r8, ip
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000dac:	18eb      	adds	r3, r5, r3
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	f200 80cd 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x14c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x14a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80b6 	bhi.w	8000f4e <__udivmoddi4+0x2b6>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e79f      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dee:	f1c7 0c20 	rsb	ip, r7, #32
 8000df2:	40bb      	lsls	r3, r7
 8000df4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000df8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000e00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e0c:	4325      	orrs	r5, r4
 8000e0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e12:	0c2c      	lsrs	r4, r5, #16
 8000e14:	fb08 3319 	mls	r3, r8, r9, r3
 8000e18:	fa1f fa8e 	uxth.w	sl, lr
 8000e1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e20:	fb09 f40a 	mul.w	r4, r9, sl
 8000e24:	429c      	cmp	r4, r3
 8000e26:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1e 0303 	adds.w	r3, lr, r3
 8000e34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e38:	f080 8087 	bcs.w	8000f4a <__udivmoddi4+0x2b2>
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	f240 8084 	bls.w	8000f4a <__udivmoddi4+0x2b2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4473      	add	r3, lr
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	b2ad      	uxth	r5, r5
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1e 0404 	adds.w	r4, lr, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e68:	d26b      	bcs.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6a:	45a2      	cmp	sl, r4
 8000e6c:	d969      	bls.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4474      	add	r4, lr
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7a:	eba4 040a 	sub.w	r4, r4, sl
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c2      	mov	sl, r8
 8000e82:	464b      	mov	r3, r9
 8000e84:	d354      	bcc.n	8000f30 <__udivmoddi4+0x298>
 8000e86:	d051      	beq.n	8000f2c <__udivmoddi4+0x294>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d069      	beq.n	8000f60 <__udivmoddi4+0x2c8>
 8000e8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e90:	eb64 0403 	sbc.w	r4, r4, r3
 8000e94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	40fc      	lsrs	r4, r7
 8000e9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ebe:	4338      	orrs	r0, r7
 8000ec0:	0c01      	lsrs	r1, r0, #16
 8000ec2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ec6:	fa1f f885 	uxth.w	r8, r5
 8000eca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb07 f308 	mul.w	r3, r7, r8
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	fa04 f402 	lsl.w	r4, r4, r2
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x256>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ee4:	d22f      	bcs.n	8000f46 <__udivmoddi4+0x2ae>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d92d      	bls.n	8000f46 <__udivmoddi4+0x2ae>
 8000eea:	3f02      	subs	r7, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	b281      	uxth	r1, r0
 8000ef2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb00 f308 	mul.w	r3, r0, r8
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x27e>
 8000f06:	1869      	adds	r1, r5, r1
 8000f08:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0c:	d217      	bcs.n	8000f3e <__udivmoddi4+0x2a6>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d915      	bls.n	8000f3e <__udivmoddi4+0x2a6>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4429      	add	r1, r5
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f1c:	e73b      	b.n	8000d96 <__udivmoddi4+0xfe>
 8000f1e:	4637      	mov	r7, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	e709      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f24:	4607      	mov	r7, r0
 8000f26:	e6e7      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fb      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f2c:	4541      	cmp	r1, r8
 8000f2e:	d2ab      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f34:	eb69 020e 	sbc.w	r2, r9, lr
 8000f38:	3801      	subs	r0, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	e7a4      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f3e:	4660      	mov	r0, ip
 8000f40:	e7e9      	b.n	8000f16 <__udivmoddi4+0x27e>
 8000f42:	4618      	mov	r0, r3
 8000f44:	e795      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f46:	4667      	mov	r7, ip
 8000f48:	e7d1      	b.n	8000eee <__udivmoddi4+0x256>
 8000f4a:	4681      	mov	r9, r0
 8000f4c:	e77c      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	442c      	add	r4, r5
 8000f52:	e747      	b.n	8000de4 <__udivmoddi4+0x14c>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	442b      	add	r3, r5
 8000f5a:	e72f      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	e708      	b.n	8000d72 <__udivmoddi4+0xda>
 8000f60:	4637      	mov	r7, r6
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0xa0>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <L3GD20_init>:
 */
#include "gyroscope.h"

struct L3GD20 L3GD20_data;

int L3GD20_init(SPI_HandleTypeDef *m_hspi_handle){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	L3GD20_data.hspi_handle = m_hspi_handle;
 8000f70:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <L3GD20_init+0x54>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2102      	movs	r1, #2
 8000f7a:	4811      	ldr	r0, [pc, #68]	; (8000fc0 <L3GD20_init+0x58>)
 8000f7c:	f001 fe9a 	bl	8002cb4 <HAL_GPIO_WritePin>

	if(L3GD20_recive(L3GD20_WHO_AM_I) != 212)
 8000f80:	200f      	movs	r0, #15
 8000f82:	f000 f847 	bl	8001014 <L3GD20_recive>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2bd4      	cmp	r3, #212	; 0xd4
 8000f8a:	d001      	beq.n	8000f90 <L3GD20_init+0x28>
	{
		return 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e010      	b.n	8000fb2 <L3GD20_init+0x4a>
	}

	L3GD20_send(L3GD20_CTRL_REG1, 0x0F); // aktywuje żyroskop
 8000f90:	210f      	movs	r1, #15
 8000f92:	2020      	movs	r0, #32
 8000f94:	f000 f816 	bl	8000fc4 <L3GD20_send>
	L3GD20_send(L3GD20_CTRL_REG4, 0x20); // Okreslenie skali
 8000f98:	2120      	movs	r1, #32
 8000f9a:	2023      	movs	r0, #35	; 0x23
 8000f9c:	f000 f812 	bl	8000fc4 <L3GD20_send>
	L3GD20_send(L3GD20_CTRL_REG2, 0x00); // ustawia filtr górnoprzepustowy
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2021      	movs	r0, #33	; 0x21
 8000fa4:	f000 f80e 	bl	8000fc4 <L3GD20_send>
	L3GD20_send(L3GD20_CTRL_REG5, 0x10); // włącza filtr górnoprzepustowy
 8000fa8:	2110      	movs	r1, #16
 8000faa:	2024      	movs	r0, #36	; 0x24
 8000fac:	f000 f80a 	bl	8000fc4 <L3GD20_send>

	return 1;
 8000fb0:	2301      	movs	r3, #1
	address_var[0] = 0x00 | L3GD20_CTRL_REG5;
	address_var[1] = 0x10;
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi5, address_var, 2, 500);
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);*/
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000208 	.word	0x20000208
 8000fc0:	40020800 	.word	0x40020800

08000fc4 <L3GD20_send>:

void L3GD20_send(uint8_t address, uint8_t data)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	460a      	mov	r2, r1
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	71bb      	strb	r3, [r7, #6]
	uint8_t transmit_data[2];
	transmit_data[0] = address;
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	733b      	strb	r3, [r7, #12]
	transmit_data[1] = data;
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2102      	movs	r1, #2
 8000fe0:	480a      	ldr	r0, [pc, #40]	; (800100c <L3GD20_send+0x48>)
 8000fe2:	f001 fe67 	bl	8002cb4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(L3GD20_data.hspi_handle, transmit_data, 2, L3GD20_SPI_WAIT_TIME);
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <L3GD20_send+0x4c>)
 8000fe8:	6818      	ldr	r0, [r3, #0]
 8000fea:	f107 010c 	add.w	r1, r7, #12
 8000fee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	f003 f8ca 	bl	800418c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <L3GD20_send+0x48>)
 8000ffe:	f001 fe59 	bl	8002cb4 <HAL_GPIO_WritePin>
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40020800 	.word	0x40020800
 8001010:	20000208 	.word	0x20000208

08001014 <L3GD20_recive>:

uint8_t L3GD20_recive(uint8_t addres)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af02      	add	r7, sp, #8
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
	uint8_t transmit_data[2];
	uint8_t recive_data[2];
	transmit_data[0] = addres | 0x80;
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001024:	b2db      	uxtb	r3, r3
 8001026:	733b      	strb	r3, [r7, #12]
	transmit_data[1] = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	737b      	strb	r3, [r7, #13]
	recive_data[1] = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	727b      	strb	r3, [r7, #9]
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	2102      	movs	r1, #2
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <L3GD20_recive+0x54>)
 8001036:	f001 fe3d 	bl	8002cb4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(L3GD20_data.hspi_handle, transmit_data, recive_data, 2, L3GD20_SPI_WAIT_TIME);
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <L3GD20_recive+0x58>)
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	f107 0208 	add.w	r2, r7, #8
 8001042:	f107 010c 	add.w	r1, r7, #12
 8001046:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2302      	movs	r3, #2
 800104e:	f003 f9d1 	bl	80043f4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	2102      	movs	r1, #2
 8001056:	4804      	ldr	r0, [pc, #16]	; (8001068 <L3GD20_recive+0x54>)
 8001058:	f001 fe2c 	bl	8002cb4 <HAL_GPIO_WritePin>
	return recive_data[1];
 800105c:	7a7b      	ldrb	r3, [r7, #9]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40020800 	.word	0x40020800
 800106c:	20000208 	.word	0x20000208

08001070 <L3GD20_readRawData>:

void L3GD20_readRawData()
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	L3GD20_data.X_raw = L3GD20_recive(L3GD20_OUT_X_L);
 8001074:	2028      	movs	r0, #40	; 0x28
 8001076:	f7ff ffcd 	bl	8001014 <L3GD20_recive>
 800107a:	4603      	mov	r3, r0
 800107c:	b21a      	sxth	r2, r3
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <L3GD20_readRawData+0x80>)
 8001080:	809a      	strh	r2, [r3, #4]
	L3GD20_data.X_raw |= L3GD20_recive(L3GD20_OUT_X_H) << 8;
 8001082:	2029      	movs	r0, #41	; 0x29
 8001084:	f7ff ffc6 	bl	8001014 <L3GD20_recive>
 8001088:	4603      	mov	r3, r0
 800108a:	0219      	lsls	r1, r3, #8
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <L3GD20_readRawData+0x80>)
 800108e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001092:	b20b      	sxth	r3, r1
 8001094:	4313      	orrs	r3, r2
 8001096:	b21a      	sxth	r2, r3
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <L3GD20_readRawData+0x80>)
 800109a:	809a      	strh	r2, [r3, #4]

	L3GD20_data.Y_raw = L3GD20_recive(L3GD20_OUT_Y_L);
 800109c:	202a      	movs	r0, #42	; 0x2a
 800109e:	f7ff ffb9 	bl	8001014 <L3GD20_recive>
 80010a2:	4603      	mov	r3, r0
 80010a4:	b21a      	sxth	r2, r3
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <L3GD20_readRawData+0x80>)
 80010a8:	80da      	strh	r2, [r3, #6]
	L3GD20_data.Y_raw |= L3GD20_recive(L3GD20_OUT_Y_H) << 8;
 80010aa:	202b      	movs	r0, #43	; 0x2b
 80010ac:	f7ff ffb2 	bl	8001014 <L3GD20_recive>
 80010b0:	4603      	mov	r3, r0
 80010b2:	0219      	lsls	r1, r3, #8
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <L3GD20_readRawData+0x80>)
 80010b6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80010ba:	b20b      	sxth	r3, r1
 80010bc:	4313      	orrs	r3, r2
 80010be:	b21a      	sxth	r2, r3
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <L3GD20_readRawData+0x80>)
 80010c2:	80da      	strh	r2, [r3, #6]

	L3GD20_data.Z_raw = L3GD20_recive(L3GD20_OUT_Z_L);
 80010c4:	202c      	movs	r0, #44	; 0x2c
 80010c6:	f7ff ffa5 	bl	8001014 <L3GD20_recive>
 80010ca:	4603      	mov	r3, r0
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <L3GD20_readRawData+0x80>)
 80010d0:	811a      	strh	r2, [r3, #8]
	L3GD20_data.Z_raw |= L3GD20_recive(L3GD20_OUT_Z_H) << 8;
 80010d2:	202d      	movs	r0, #45	; 0x2d
 80010d4:	f7ff ff9e 	bl	8001014 <L3GD20_recive>
 80010d8:	4603      	mov	r3, r0
 80010da:	0219      	lsls	r1, r3, #8
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <L3GD20_readRawData+0x80>)
 80010de:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80010e2:	b20b      	sxth	r3, r1
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	4b01      	ldr	r3, [pc, #4]	; (80010f0 <L3GD20_readRawData+0x80>)
 80010ea:	811a      	strh	r2, [r3, #8]
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000208 	.word	0x20000208
 80010f4:	00000000 	.word	0x00000000

080010f8 <L3GD20_convertRawData>:

void L3GD20_convertRawData()
{
 80010f8:	b598      	push	{r3, r4, r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	L3GD20_data.X_val = (L3GD20_data.X_raw + L3GD20_X_OFFSET) * 0.09;
 80010fc:	4b22      	ldr	r3, [pc, #136]	; (8001188 <L3GD20_convertRawData+0x90>)
 80010fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001102:	3b1e      	subs	r3, #30
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fa1d 	bl	8000544 <__aeabi_i2d>
 800110a:	a31d      	add	r3, pc, #116	; (adr r3, 8001180 <L3GD20_convertRawData+0x88>)
 800110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001110:	f7ff fa82 	bl	8000618 <__aeabi_dmul>
 8001114:	4603      	mov	r3, r0
 8001116:	460c      	mov	r4, r1
 8001118:	4618      	mov	r0, r3
 800111a:	4621      	mov	r1, r4
 800111c:	f7ff fd54 	bl	8000bc8 <__aeabi_d2f>
 8001120:	4602      	mov	r2, r0
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <L3GD20_convertRawData+0x90>)
 8001124:	60da      	str	r2, [r3, #12]
	L3GD20_data.Y_val = (L3GD20_data.Y_raw + L3GD20_Y_OFFSET) * 0.09;
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <L3GD20_convertRawData+0x90>)
 8001128:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800112c:	3b05      	subs	r3, #5
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fa08 	bl	8000544 <__aeabi_i2d>
 8001134:	a312      	add	r3, pc, #72	; (adr r3, 8001180 <L3GD20_convertRawData+0x88>)
 8001136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113a:	f7ff fa6d 	bl	8000618 <__aeabi_dmul>
 800113e:	4603      	mov	r3, r0
 8001140:	460c      	mov	r4, r1
 8001142:	4618      	mov	r0, r3
 8001144:	4621      	mov	r1, r4
 8001146:	f7ff fd3f 	bl	8000bc8 <__aeabi_d2f>
 800114a:	4602      	mov	r2, r0
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <L3GD20_convertRawData+0x90>)
 800114e:	611a      	str	r2, [r3, #16]
	L3GD20_data.Z_val = (L3GD20_data.Z_raw + L3GD20_Z_OFFSET) * 0.09;
 8001150:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <L3GD20_convertRawData+0x90>)
 8001152:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001156:	330d      	adds	r3, #13
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f9f3 	bl	8000544 <__aeabi_i2d>
 800115e:	a308      	add	r3, pc, #32	; (adr r3, 8001180 <L3GD20_convertRawData+0x88>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff fa58 	bl	8000618 <__aeabi_dmul>
 8001168:	4603      	mov	r3, r0
 800116a:	460c      	mov	r4, r1
 800116c:	4618      	mov	r0, r3
 800116e:	4621      	mov	r1, r4
 8001170:	f7ff fd2a 	bl	8000bc8 <__aeabi_d2f>
 8001174:	4602      	mov	r2, r0
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <L3GD20_convertRawData+0x90>)
 8001178:	615a      	str	r2, [r3, #20]
}
 800117a:	bf00      	nop
 800117c:	bd98      	pop	{r3, r4, r7, pc}
 800117e:	bf00      	nop
 8001180:	70a3d70a 	.word	0x70a3d70a
 8001184:	3fb70a3d 	.word	0x3fb70a3d
 8001188:	20000208 	.word	0x20000208
 800118c:	00000000 	.word	0x00000000

08001190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001190:	b5b0      	push	{r4, r5, r7, lr}
 8001192:	b09e      	sub	sp, #120	; 0x78
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001196:	f001 f87d 	bl	8002294 <HAL_Init>
  /* USER CODE BEGIN Init */
  //int status = L3GD20_init(&hspi5);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119a:	f000 f89b 	bl	80012d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119e:	f000 fb17 	bl	80017d0 <MX_GPIO_Init>
  MX_CRC_Init();
 80011a2:	f000 f91b 	bl	80013dc <MX_CRC_Init>
  MX_DMA2D_Init();
 80011a6:	f000 f92d 	bl	8001404 <MX_DMA2D_Init>
  MX_FMC_Init();
 80011aa:	f000 fac1 	bl	8001730 <MX_FMC_Init>
  MX_LTDC_Init();
 80011ae:	f000 f95b 	bl	8001468 <MX_LTDC_Init>
  MX_SPI5_Init();
 80011b2:	f000 fa0d 	bl	80015d0 <MX_SPI5_Init>
  MX_TIM1_Init();
 80011b6:	f000 fa41 	bl	800163c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80011ba:	f000 fa8f 	bl	80016dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(5000);
 80011be:	f241 3088 	movw	r0, #5000	; 0x1388
 80011c2:	f001 f8a9 	bl	8002318 <HAL_Delay>
  HAL_SPI_Transmit(&hspi5, address_var, 2, 500);
  HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
*/
  uint8_t recive_var[2];
  uint8_t address_var[2];
  int viwe = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	677b      	str	r3, [r7, #116]	; 0x74
  char msg[100];

  	  if(!L3GD20_init(&hspi5))
 80011ca:	483b      	ldr	r0, [pc, #236]	; (80012b8 <main+0x128>)
 80011cc:	f7ff fecc 	bl	8000f68 <L3GD20_init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d112      	bne.n	80011fc <main+0x6c>
  	  {
  		sprintf(msg, "not good :(\r\n");
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	4a38      	ldr	r2, [pc, #224]	; (80012bc <main+0x12c>)
 80011da:	461c      	mov	r4, r3
 80011dc:	4613      	mov	r3, r2
 80011de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e0:	c407      	stmia	r4!, {r0, r1, r2}
 80011e2:	8023      	strh	r3, [r4, #0]
  		HAL_UART_Transmit(&huart1, msg, (uint16_t)strlen(msg), 1000);
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f802 	bl	80001f0 <strlen>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	1d39      	adds	r1, r7, #4
 80011f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f6:	4832      	ldr	r0, [pc, #200]	; (80012c0 <main+0x130>)
 80011f8:	f003 ff97 	bl	800512a <HAL_UART_Transmit>
  	  }

  float Y_pos = 0;
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	673b      	str	r3, [r7, #112]	; 0x70
		  sprintf(msg, "OUT_X_H [%d]: %d \r\n", (viwe++)%8, recive_var[1]);
	  else
		  sprintf(msg, "nein [%d] \r\n", (viwe++)&8);
	  HAL_UART_Transmit(&huart1, msg, (uint16_t)strlen(msg), 1000);*/

	  HAL_Delay(10);
 8001202:	200a      	movs	r0, #10
 8001204:	f001 f888 	bl	8002318 <HAL_Delay>
	  L3GD20_readRawData();
 8001208:	f7ff ff32 	bl	8001070 <L3GD20_readRawData>
	  L3GD20_convertRawData();
 800120c:	f7ff ff74 	bl	80010f8 <L3GD20_convertRawData>
	  Y_pos += L3GD20_data.Y_val * 0.01;
 8001210:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001212:	f7ff f9a9 	bl	8000568 <__aeabi_f2d>
 8001216:	4604      	mov	r4, r0
 8001218:	460d      	mov	r5, r1
 800121a:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <main+0x134>)
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f9a2 	bl	8000568 <__aeabi_f2d>
 8001224:	a322      	add	r3, pc, #136	; (adr r3, 80012b0 <main+0x120>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f9f5 	bl	8000618 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4620      	mov	r0, r4
 8001234:	4629      	mov	r1, r5
 8001236:	f7ff f839 	bl	80002ac <__adddf3>
 800123a:	4603      	mov	r3, r0
 800123c:	460c      	mov	r4, r1
 800123e:	4618      	mov	r0, r3
 8001240:	4621      	mov	r1, r4
 8001242:	f7ff fcc1 	bl	8000bc8 <__aeabi_d2f>
 8001246:	4603      	mov	r3, r0
 8001248:	673b      	str	r3, [r7, #112]	; 0x70

	  //sprintf(msg, "XYZ: %d | %d | %d\r\n",L3GD20_data.X_raw, L3GD20_data.Y_raw, L3GD20_data.Z_raw );
	  if(viwe % 10 == 1)
 800124a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800124c:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <main+0x138>)
 800124e:	fb83 2301 	smull	r2, r3, r3, r1
 8001252:	109a      	asrs	r2, r3, #2
 8001254:	17cb      	asrs	r3, r1, #31
 8001256:	1ad2      	subs	r2, r2, r3
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	1aca      	subs	r2, r1, r3
 8001262:	2a01      	cmp	r2, #1
 8001264:	d116      	bne.n	8001294 <main+0x104>
	  {
		  sprintf(msg, "Y_obr = %f \r\n", Y_pos);
 8001266:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001268:	f7ff f97e 	bl	8000568 <__aeabi_f2d>
 800126c:	4603      	mov	r3, r0
 800126e:	460c      	mov	r4, r1
 8001270:	1d38      	adds	r0, r7, #4
 8001272:	461a      	mov	r2, r3
 8001274:	4623      	mov	r3, r4
 8001276:	4915      	ldr	r1, [pc, #84]	; (80012cc <main+0x13c>)
 8001278:	f005 f936 	bl	80064e8 <siprintf>
		  //sprintf(msg, "XYZ: %d | %d | %d\r\n",L3GD20_data.X_raw, L3GD20_data.Y_raw, L3GD20_data.Z_raw );
		  HAL_UART_Transmit(&huart1, msg, (uint16_t)strlen(msg), 1000);
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4618      	mov	r0, r3
 8001280:	f7fe ffb6 	bl	80001f0 <strlen>
 8001284:	4603      	mov	r3, r0
 8001286:	b29a      	uxth	r2, r3
 8001288:	1d39      	adds	r1, r7, #4
 800128a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128e:	480c      	ldr	r0, [pc, #48]	; (80012c0 <main+0x130>)
 8001290:	f003 ff4b 	bl	800512a <HAL_UART_Transmit>
	  }
	  viwe++;
 8001294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001296:	3301      	adds	r3, #1
 8001298:	677b      	str	r3, [r7, #116]	; 0x74

	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 800129a:	2101      	movs	r1, #1
 800129c:	480c      	ldr	r0, [pc, #48]	; (80012d0 <main+0x140>)
 800129e:	f001 fcf1 	bl	8002c84 <HAL_GPIO_ReadPin>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d1ac      	bne.n	8001202 <main+0x72>
	  {
		  Y_pos = 0;
 80012a8:	f04f 0300 	mov.w	r3, #0
 80012ac:	673b      	str	r3, [r7, #112]	; 0x70
	  HAL_Delay(10);
 80012ae:	e7a8      	b.n	8001202 <main+0x72>
 80012b0:	47ae147b 	.word	0x47ae147b
 80012b4:	3f847ae1 	.word	0x3f847ae1
 80012b8:	20000220 	.word	0x20000220
 80012bc:	08007cc0 	.word	0x08007cc0
 80012c0:	20000328 	.word	0x20000328
 80012c4:	20000208 	.word	0x20000208
 80012c8:	66666667 	.word	0x66666667
 80012cc:	08007cd0 	.word	0x08007cd0
 80012d0:	40020000 	.word	0x40020000

080012d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b0a0      	sub	sp, #128	; 0x80
 80012d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80012de:	2230      	movs	r2, #48	; 0x30
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f004 fc9c 	bl	8005c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	2230      	movs	r2, #48	; 0x30
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f004 fc8d 	bl	8005c20 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <SystemClock_Config+0x100>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	4a31      	ldr	r2, [pc, #196]	; (80013d4 <SystemClock_Config+0x100>)
 8001310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001314:	6413      	str	r3, [r2, #64]	; 0x40
 8001316:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <SystemClock_Config+0x100>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <SystemClock_Config+0x104>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800132e:	4a2a      	ldr	r2, [pc, #168]	; (80013d8 <SystemClock_Config+0x104>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <SystemClock_Config+0x104>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001342:	2301      	movs	r3, #1
 8001344:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001346:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800134a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134c:	2302      	movs	r3, #2
 800134e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001350:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001354:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001356:	2304      	movs	r3, #4
 8001358:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 800135a:	2348      	movs	r3, #72	; 0x48
 800135c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800135e:	2302      	movs	r3, #2
 8001360:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001362:	2303      	movs	r3, #3
 8001364:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001366:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800136a:	4618      	mov	r0, r3
 800136c:	f002 f824 	bl	80033b8 <HAL_RCC_OscConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001376:	f000 fb8d 	bl	8001a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137a:	230f      	movs	r3, #15
 800137c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137e:	2302      	movs	r3, #2
 8001380:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001390:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001394:	2102      	movs	r1, #2
 8001396:	4618      	mov	r0, r3
 8001398:	f002 fa7e 	bl	8003898 <HAL_RCC_ClockConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80013a2:	f000 fb77 	bl	8001a94 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80013a6:	2308      	movs	r3, #8
 80013a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80013aa:	2332      	movs	r3, #50	; 0x32
 80013ac:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80013ae:	2302      	movs	r3, #2
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80013b2:	2300      	movs	r3, #0
 80013b4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	4618      	mov	r0, r3
 80013bc:	f002 fc90 	bl	8003ce0 <HAL_RCCEx_PeriphCLKConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80013c6:	f000 fb65 	bl	8001a94 <Error_Handler>
  }
}
 80013ca:	bf00      	nop
 80013cc:	3780      	adds	r7, #128	; 0x80
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40007000 	.word	0x40007000

080013dc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <MX_CRC_Init+0x20>)
 80013e2:	4a07      	ldr	r2, [pc, #28]	; (8001400 <MX_CRC_Init+0x24>)
 80013e4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013e6:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_CRC_Init+0x20>)
 80013e8:	f001 f89a 	bl	8002520 <HAL_CRC_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80013f2:	f000 fb4f 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000278 	.word	0x20000278
 8001400:	40023000 	.word	0x40023000

08001404 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <MX_DMA2D_Init+0x5c>)
 800140a:	4a16      	ldr	r2, [pc, #88]	; (8001464 <MX_DMA2D_Init+0x60>)
 800140c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <MX_DMA2D_Init+0x5c>)
 8001410:	2200      	movs	r2, #0
 8001412:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <MX_DMA2D_Init+0x5c>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <MX_DMA2D_Init+0x5c>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <MX_DMA2D_Init+0x5c>)
 8001422:	2200      	movs	r2, #0
 8001424:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <MX_DMA2D_Init+0x5c>)
 8001428:	2200      	movs	r2, #0
 800142a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_DMA2D_Init+0x5c>)
 800142e:	2200      	movs	r2, #0
 8001430:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <MX_DMA2D_Init+0x5c>)
 8001434:	2200      	movs	r2, #0
 8001436:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001438:	4809      	ldr	r0, [pc, #36]	; (8001460 <MX_DMA2D_Init+0x5c>)
 800143a:	f001 f88d 	bl	8002558 <HAL_DMA2D_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001444:	f000 fb26 	bl	8001a94 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001448:	2101      	movs	r1, #1
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_DMA2D_Init+0x5c>)
 800144c:	f001 f9de 	bl	800280c <HAL_DMA2D_ConfigLayer>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001456:	f000 fb1d 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200003a8 	.word	0x200003a8
 8001464:	4002b000 	.word	0x4002b000

08001468 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b09a      	sub	sp, #104	; 0x68
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800146e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001472:	2234      	movs	r2, #52	; 0x34
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f004 fbd2 	bl	8005c20 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800147c:	463b      	mov	r3, r7
 800147e:	2234      	movs	r2, #52	; 0x34
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f004 fbcc 	bl	8005c20 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001488:	4b4f      	ldr	r3, [pc, #316]	; (80015c8 <MX_LTDC_Init+0x160>)
 800148a:	4a50      	ldr	r2, [pc, #320]	; (80015cc <MX_LTDC_Init+0x164>)
 800148c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800148e:	4b4e      	ldr	r3, [pc, #312]	; (80015c8 <MX_LTDC_Init+0x160>)
 8001490:	2200      	movs	r2, #0
 8001492:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001494:	4b4c      	ldr	r3, [pc, #304]	; (80015c8 <MX_LTDC_Init+0x160>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800149a:	4b4b      	ldr	r3, [pc, #300]	; (80015c8 <MX_LTDC_Init+0x160>)
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80014a0:	4b49      	ldr	r3, [pc, #292]	; (80015c8 <MX_LTDC_Init+0x160>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80014a6:	4b48      	ldr	r3, [pc, #288]	; (80015c8 <MX_LTDC_Init+0x160>)
 80014a8:	2209      	movs	r2, #9
 80014aa:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80014ac:	4b46      	ldr	r3, [pc, #280]	; (80015c8 <MX_LTDC_Init+0x160>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80014b2:	4b45      	ldr	r3, [pc, #276]	; (80015c8 <MX_LTDC_Init+0x160>)
 80014b4:	221d      	movs	r2, #29
 80014b6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80014b8:	4b43      	ldr	r3, [pc, #268]	; (80015c8 <MX_LTDC_Init+0x160>)
 80014ba:	2203      	movs	r2, #3
 80014bc:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80014be:	4b42      	ldr	r3, [pc, #264]	; (80015c8 <MX_LTDC_Init+0x160>)
 80014c0:	f240 120d 	movw	r2, #269	; 0x10d
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80014c6:	4b40      	ldr	r3, [pc, #256]	; (80015c8 <MX_LTDC_Init+0x160>)
 80014c8:	f240 1243 	movw	r2, #323	; 0x143
 80014cc:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80014ce:	4b3e      	ldr	r3, [pc, #248]	; (80015c8 <MX_LTDC_Init+0x160>)
 80014d0:	f240 1217 	movw	r2, #279	; 0x117
 80014d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80014d6:	4b3c      	ldr	r3, [pc, #240]	; (80015c8 <MX_LTDC_Init+0x160>)
 80014d8:	f240 1247 	movw	r2, #327	; 0x147
 80014dc:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80014de:	4b3a      	ldr	r3, [pc, #232]	; (80015c8 <MX_LTDC_Init+0x160>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 100;
 80014e6:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <MX_LTDC_Init+0x160>)
 80014e8:	2264      	movs	r2, #100	; 0x64
 80014ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80014ee:	4b36      	ldr	r3, [pc, #216]	; (80015c8 <MX_LTDC_Init+0x160>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80014f6:	4834      	ldr	r0, [pc, #208]	; (80015c8 <MX_LTDC_Init+0x160>)
 80014f8:	f001 fbf6 	bl	8002ce8 <HAL_LTDC_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001502:	f000 fac7 	bl	8001a94 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 800150a:	23f0      	movs	r3, #240	; 0xf0
 800150c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 8001512:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001516:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001518:	2302      	movs	r3, #2
 800151a:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 800151c:	23ff      	movs	r3, #255	; 0xff
 800151e:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 255;
 8001520:	23ff      	movs	r3, #255	; 0xff
 8001522:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001524:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001528:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800152a:	2307      	movs	r3, #7
 800152c:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 800152e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001532:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8001534:	23f0      	movs	r3, #240	; 0xf0
 8001536:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8001538:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800153c:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 100;
 8001544:	2364      	movs	r3, #100	; 0x64
 8001546:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001550:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001554:	2200      	movs	r2, #0
 8001556:	4619      	mov	r1, r3
 8001558:	481b      	ldr	r0, [pc, #108]	; (80015c8 <MX_LTDC_Init+0x160>)
 800155a:	f001 fd57 	bl	800300c <HAL_LTDC_ConfigLayer>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 8001564:	f000 fa96 	bl	8001a94 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001584:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001586:	2305      	movs	r3, #5
 8001588:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80015a8:	463b      	mov	r3, r7
 80015aa:	2201      	movs	r2, #1
 80015ac:	4619      	mov	r1, r3
 80015ae:	4806      	ldr	r0, [pc, #24]	; (80015c8 <MX_LTDC_Init+0x160>)
 80015b0:	f001 fd2c 	bl	800300c <HAL_LTDC_ConfigLayer>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 80015ba:	f000 fa6b 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	3768      	adds	r7, #104	; 0x68
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000280 	.word	0x20000280
 80015cc:	40016800 	.word	0x40016800

080015d0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <MX_SPI5_Init+0x64>)
 80015d6:	4a18      	ldr	r2, [pc, #96]	; (8001638 <MX_SPI5_Init+0x68>)
 80015d8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <MX_SPI5_Init+0x64>)
 80015dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015e0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <MX_SPI5_Init+0x64>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <MX_SPI5_Init+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <MX_SPI5_Init+0x64>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <MX_SPI5_Init+0x64>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <MX_SPI5_Init+0x64>)
 80015fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001600:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <MX_SPI5_Init+0x64>)
 8001604:	2218      	movs	r2, #24
 8001606:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <MX_SPI5_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <MX_SPI5_Init+0x64>)
 8001610:	2200      	movs	r2, #0
 8001612:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <MX_SPI5_Init+0x64>)
 8001616:	2200      	movs	r2, #0
 8001618:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MX_SPI5_Init+0x64>)
 800161c:	220a      	movs	r2, #10
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001620:	4804      	ldr	r0, [pc, #16]	; (8001634 <MX_SPI5_Init+0x64>)
 8001622:	f002 fd4f 	bl	80040c4 <HAL_SPI_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800162c:	f000 fa32 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000220 	.word	0x20000220
 8001638:	40015000 	.word	0x40015000

0800163c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001642:	f107 0308 	add.w	r3, r7, #8
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001650:	463b      	mov	r3, r7
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001658:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <MX_TIM1_Init+0x98>)
 800165a:	4a1f      	ldr	r2, [pc, #124]	; (80016d8 <MX_TIM1_Init+0x9c>)
 800165c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800165e:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <MX_TIM1_Init+0x98>)
 8001660:	2200      	movs	r2, #0
 8001662:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <MX_TIM1_Init+0x98>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <MX_TIM1_Init+0x98>)
 800166c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001670:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <MX_TIM1_Init+0x98>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001678:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <MX_TIM1_Init+0x98>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <MX_TIM1_Init+0x98>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001684:	4813      	ldr	r0, [pc, #76]	; (80016d4 <MX_TIM1_Init+0x98>)
 8001686:	f003 f903 	bl	8004890 <HAL_TIM_Base_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001690:	f000 fa00 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001698:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	4619      	mov	r1, r3
 80016a0:	480c      	ldr	r0, [pc, #48]	; (80016d4 <MX_TIM1_Init+0x98>)
 80016a2:	f003 fa4c 	bl	8004b3e <HAL_TIM_ConfigClockSource>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80016ac:	f000 f9f2 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b0:	2300      	movs	r3, #0
 80016b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016b8:	463b      	mov	r3, r7
 80016ba:	4619      	mov	r1, r3
 80016bc:	4805      	ldr	r0, [pc, #20]	; (80016d4 <MX_TIM1_Init+0x98>)
 80016be:	f003 fc57 	bl	8004f70 <HAL_TIMEx_MasterConfigSynchronization>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80016c8:	f000 f9e4 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000368 	.word	0x20000368
 80016d8:	40010000 	.word	0x40010000

080016dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <MX_USART1_UART_Init+0x4c>)
 80016e2:	4a12      	ldr	r2, [pc, #72]	; (800172c <MX_USART1_UART_Init+0x50>)
 80016e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <MX_USART1_UART_Init+0x4c>)
 80016e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <MX_USART1_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <MX_USART1_UART_Init+0x4c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <MX_USART1_UART_Init+0x4c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <MX_USART1_UART_Init+0x4c>)
 8001702:	220c      	movs	r2, #12
 8001704:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <MX_USART1_UART_Init+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <MX_USART1_UART_Init+0x4c>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001712:	4805      	ldr	r0, [pc, #20]	; (8001728 <MX_USART1_UART_Init+0x4c>)
 8001714:	f003 fcbc 	bl	8005090 <HAL_UART_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800171e:	f000 f9b9 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000328 	.word	0x20000328
 800172c:	40011000 	.word	0x40011000

08001730 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
 8001744:	615a      	str	r2, [r3, #20]
 8001746:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <MX_FMC_Init+0x98>)
 800174a:	4a20      	ldr	r2, [pc, #128]	; (80017cc <MX_FMC_Init+0x9c>)
 800174c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800174e:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <MX_FMC_Init+0x98>)
 8001750:	2201      	movs	r2, #1
 8001752:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001754:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <MX_FMC_Init+0x98>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800175a:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <MX_FMC_Init+0x98>)
 800175c:	2204      	movs	r2, #4
 800175e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <MX_FMC_Init+0x98>)
 8001762:	2210      	movs	r2, #16
 8001764:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <MX_FMC_Init+0x98>)
 8001768:	2240      	movs	r2, #64	; 0x40
 800176a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800176c:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <MX_FMC_Init+0x98>)
 800176e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001772:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_FMC_Init+0x98>)
 8001776:	2200      	movs	r2, #0
 8001778:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800177a:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <MX_FMC_Init+0x98>)
 800177c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001780:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_FMC_Init+0x98>)
 8001784:	2200      	movs	r2, #0
 8001786:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_FMC_Init+0x98>)
 800178a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800178e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001790:	2302      	movs	r3, #2
 8001792:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001794:	2307      	movs	r3, #7
 8001796:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001798:	2304      	movs	r3, #4
 800179a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800179c:	2307      	movs	r3, #7
 800179e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80017a0:	2303      	movs	r3, #3
 80017a2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80017a4:	2302      	movs	r3, #2
 80017a6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80017a8:	2302      	movs	r3, #2
 80017aa:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_FMC_Init+0x98>)
 80017b2:	f002 fc53 	bl	800405c <HAL_SDRAM_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80017bc:	f000 f96a 	bl	8001a94 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80017c0:	bf00      	nop
 80017c2:	3720      	adds	r7, #32
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200003e8 	.word	0x200003e8
 80017cc:	a0000140 	.word	0xa0000140

080017d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08e      	sub	sp, #56	; 0x38
 80017d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
 80017ea:	4b9a      	ldr	r3, [pc, #616]	; (8001a54 <MX_GPIO_Init+0x284>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a99      	ldr	r2, [pc, #612]	; (8001a54 <MX_GPIO_Init+0x284>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b97      	ldr	r3, [pc, #604]	; (8001a54 <MX_GPIO_Init+0x284>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	623b      	str	r3, [r7, #32]
 8001800:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	4b93      	ldr	r3, [pc, #588]	; (8001a54 <MX_GPIO_Init+0x284>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a92      	ldr	r2, [pc, #584]	; (8001a54 <MX_GPIO_Init+0x284>)
 800180c:	f043 0320 	orr.w	r3, r3, #32
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b90      	ldr	r3, [pc, #576]	; (8001a54 <MX_GPIO_Init+0x284>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0320 	and.w	r3, r3, #32
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
 8001822:	4b8c      	ldr	r3, [pc, #560]	; (8001a54 <MX_GPIO_Init+0x284>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a8b      	ldr	r2, [pc, #556]	; (8001a54 <MX_GPIO_Init+0x284>)
 8001828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b89      	ldr	r3, [pc, #548]	; (8001a54 <MX_GPIO_Init+0x284>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	4b85      	ldr	r3, [pc, #532]	; (8001a54 <MX_GPIO_Init+0x284>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a84      	ldr	r2, [pc, #528]	; (8001a54 <MX_GPIO_Init+0x284>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b82      	ldr	r3, [pc, #520]	; (8001a54 <MX_GPIO_Init+0x284>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b7e      	ldr	r3, [pc, #504]	; (8001a54 <MX_GPIO_Init+0x284>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a7d      	ldr	r2, [pc, #500]	; (8001a54 <MX_GPIO_Init+0x284>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b7b      	ldr	r3, [pc, #492]	; (8001a54 <MX_GPIO_Init+0x284>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b77      	ldr	r3, [pc, #476]	; (8001a54 <MX_GPIO_Init+0x284>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a76      	ldr	r2, [pc, #472]	; (8001a54 <MX_GPIO_Init+0x284>)
 800187c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b74      	ldr	r3, [pc, #464]	; (8001a54 <MX_GPIO_Init+0x284>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	4b70      	ldr	r3, [pc, #448]	; (8001a54 <MX_GPIO_Init+0x284>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a6f      	ldr	r2, [pc, #444]	; (8001a54 <MX_GPIO_Init+0x284>)
 8001898:	f043 0310 	orr.w	r3, r3, #16
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b6d      	ldr	r3, [pc, #436]	; (8001a54 <MX_GPIO_Init+0x284>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b69      	ldr	r3, [pc, #420]	; (8001a54 <MX_GPIO_Init+0x284>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a68      	ldr	r2, [pc, #416]	; (8001a54 <MX_GPIO_Init+0x284>)
 80018b4:	f043 0308 	orr.w	r3, r3, #8
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b66      	ldr	r3, [pc, #408]	; (8001a54 <MX_GPIO_Init+0x284>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2116      	movs	r1, #22
 80018ca:	4863      	ldr	r0, [pc, #396]	; (8001a58 <MX_GPIO_Init+0x288>)
 80018cc:	f001 f9f2 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2180      	movs	r1, #128	; 0x80
 80018d4:	4861      	ldr	r0, [pc, #388]	; (8001a5c <MX_GPIO_Init+0x28c>)
 80018d6:	f001 f9ed 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80018da:	2200      	movs	r2, #0
 80018dc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80018e0:	485f      	ldr	r0, [pc, #380]	; (8001a60 <MX_GPIO_Init+0x290>)
 80018e2:	f001 f9e7 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80018ec:	485d      	ldr	r0, [pc, #372]	; (8001a64 <MX_GPIO_Init+0x294>)
 80018ee:	f001 f9e1 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80018f2:	2316      	movs	r3, #22
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f6:	2301      	movs	r3, #1
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001906:	4619      	mov	r1, r3
 8001908:	4853      	ldr	r0, [pc, #332]	; (8001a58 <MX_GPIO_Init+0x288>)
 800190a:	f001 f811 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800190e:	f248 0307 	movw	r3, #32775	; 0x8007
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001914:	4b54      	ldr	r3, [pc, #336]	; (8001a68 <MX_GPIO_Init+0x298>)
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001920:	4619      	mov	r1, r3
 8001922:	484e      	ldr	r0, [pc, #312]	; (8001a5c <MX_GPIO_Init+0x28c>)
 8001924:	f001 f804 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192c:	2301      	movs	r3, #1
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193c:	4619      	mov	r1, r3
 800193e:	4847      	ldr	r0, [pc, #284]	; (8001a5c <MX_GPIO_Init+0x28c>)
 8001940:	f000 fff6 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001944:	2320      	movs	r3, #32
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001948:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <MX_GPIO_Init+0x298>)
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001954:	4619      	mov	r1, r3
 8001956:	4840      	ldr	r0, [pc, #256]	; (8001a58 <MX_GPIO_Init+0x288>)
 8001958:	f000 ffea 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800195c:	2304      	movs	r3, #4
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001960:	2300      	movs	r3, #0
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196c:	4619      	mov	r1, r3
 800196e:	483f      	ldr	r0, [pc, #252]	; (8001a6c <MX_GPIO_Init+0x29c>)
 8001970:	f000 ffde 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001974:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001986:	230c      	movs	r3, #12
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198e:	4619      	mov	r1, r3
 8001990:	4836      	ldr	r0, [pc, #216]	; (8001a6c <MX_GPIO_Init+0x29c>)
 8001992:	f000 ffcd 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001996:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199c:	2300      	movs	r3, #0
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a8:	4619      	mov	r1, r3
 80019aa:	4830      	ldr	r0, [pc, #192]	; (8001a6c <MX_GPIO_Init+0x29c>)
 80019ac:	f000 ffc0 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80019b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80019be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c2:	4619      	mov	r1, r3
 80019c4:	4826      	ldr	r0, [pc, #152]	; (8001a60 <MX_GPIO_Init+0x290>)
 80019c6:	f000 ffb3 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80019ca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d0:	2301      	movs	r3, #1
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e0:	4619      	mov	r1, r3
 80019e2:	481f      	ldr	r0, [pc, #124]	; (8001a60 <MX_GPIO_Init+0x290>)
 80019e4:	f000 ffa4 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80019e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ee:	2312      	movs	r3, #18
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019fa:	2304      	movs	r3, #4
 80019fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80019fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a02:	4619      	mov	r1, r3
 8001a04:	4814      	ldr	r0, [pc, #80]	; (8001a58 <MX_GPIO_Init+0x288>)
 8001a06:	f000 ff93 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a10:	2312      	movs	r3, #18
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a24:	4619      	mov	r1, r3
 8001a26:	480d      	ldr	r0, [pc, #52]	; (8001a5c <MX_GPIO_Init+0x28c>)
 8001a28:	f000 ff82 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001a2c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a42:	4619      	mov	r1, r3
 8001a44:	4807      	ldr	r0, [pc, #28]	; (8001a64 <MX_GPIO_Init+0x294>)
 8001a46:	f000 ff73 	bl	8002930 <HAL_GPIO_Init>

}
 8001a4a:	bf00      	nop
 8001a4c:	3738      	adds	r7, #56	; 0x38
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020800 	.word	0x40020800
 8001a5c:	40020000 	.word	0x40020000
 8001a60:	40020c00 	.word	0x40020c00
 8001a64:	40021800 	.word	0x40021800
 8001a68:	10120000 	.word	0x10120000
 8001a6c:	40020400 	.word	0x40020400

08001a70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d101      	bne.n	8001a86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a82:	f000 fc29 	bl	80022d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40001000 	.word	0x40001000

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_MspInit+0x54>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	4a11      	ldr	r2, [pc, #68]	; (8001af8 <HAL_MspInit+0x54>)
 8001ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_MspInit+0x54>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_MspInit+0x54>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <HAL_MspInit+0x54>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <HAL_MspInit+0x54>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	210f      	movs	r1, #15
 8001ae6:	f06f 0001 	mvn.w	r0, #1
 8001aea:	f000 fcef 	bl	80024cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800

08001afc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <HAL_CRC_MspInit+0x3c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d10d      	bne.n	8001b2a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_CRC_MspInit+0x40>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <HAL_CRC_MspInit+0x40>)
 8001b18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <HAL_CRC_MspInit+0x40>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b2a:	bf00      	nop
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40023000 	.word	0x40023000
 8001b3c:	40023800 	.word	0x40023800

08001b40 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <HAL_DMA2D_MspInit+0x48>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d115      	bne.n	8001b7e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <HAL_DMA2D_MspInit+0x4c>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a0c      	ldr	r2, [pc, #48]	; (8001b8c <HAL_DMA2D_MspInit+0x4c>)
 8001b5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_DMA2D_MspInit+0x4c>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2105      	movs	r1, #5
 8001b72:	205a      	movs	r0, #90	; 0x5a
 8001b74:	f000 fcaa 	bl	80024cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001b78:	205a      	movs	r0, #90	; 0x5a
 8001b7a:	f000 fcc3 	bl	8002504 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	4002b000 	.word	0x4002b000
 8001b8c:	40023800 	.word	0x40023800

08001b90 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08e      	sub	sp, #56	; 0x38
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a7b      	ldr	r2, [pc, #492]	; (8001d9c <HAL_LTDC_MspInit+0x20c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	f040 80f0 	bne.w	8001d94 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	623b      	str	r3, [r7, #32]
 8001bb8:	4b79      	ldr	r3, [pc, #484]	; (8001da0 <HAL_LTDC_MspInit+0x210>)
 8001bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbc:	4a78      	ldr	r2, [pc, #480]	; (8001da0 <HAL_LTDC_MspInit+0x210>)
 8001bbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bc2:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc4:	4b76      	ldr	r3, [pc, #472]	; (8001da0 <HAL_LTDC_MspInit+0x210>)
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bcc:	623b      	str	r3, [r7, #32]
 8001bce:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
 8001bd4:	4b72      	ldr	r3, [pc, #456]	; (8001da0 <HAL_LTDC_MspInit+0x210>)
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd8:	4a71      	ldr	r2, [pc, #452]	; (8001da0 <HAL_LTDC_MspInit+0x210>)
 8001bda:	f043 0320 	orr.w	r3, r3, #32
 8001bde:	6313      	str	r3, [r2, #48]	; 0x30
 8001be0:	4b6f      	ldr	r3, [pc, #444]	; (8001da0 <HAL_LTDC_MspInit+0x210>)
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	f003 0320 	and.w	r3, r3, #32
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bec:	2300      	movs	r3, #0
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	4b6b      	ldr	r3, [pc, #428]	; (8001da0 <HAL_LTDC_MspInit+0x210>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	4a6a      	ldr	r2, [pc, #424]	; (8001da0 <HAL_LTDC_MspInit+0x210>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfc:	4b68      	ldr	r3, [pc, #416]	; (8001da0 <HAL_LTDC_MspInit+0x210>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	61bb      	str	r3, [r7, #24]
 8001c06:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	4b64      	ldr	r3, [pc, #400]	; (8001da0 <HAL_LTDC_MspInit+0x210>)
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	4a63      	ldr	r2, [pc, #396]	; (8001da0 <HAL_LTDC_MspInit+0x210>)
 8001c12:	f043 0302 	orr.w	r3, r3, #2
 8001c16:	6313      	str	r3, [r2, #48]	; 0x30
 8001c18:	4b61      	ldr	r3, [pc, #388]	; (8001da0 <HAL_LTDC_MspInit+0x210>)
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c24:	2300      	movs	r3, #0
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	4b5d      	ldr	r3, [pc, #372]	; (8001da0 <HAL_LTDC_MspInit+0x210>)
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	4a5c      	ldr	r2, [pc, #368]	; (8001da0 <HAL_LTDC_MspInit+0x210>)
 8001c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c32:	6313      	str	r3, [r2, #48]	; 0x30
 8001c34:	4b5a      	ldr	r3, [pc, #360]	; (8001da0 <HAL_LTDC_MspInit+0x210>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	4b56      	ldr	r3, [pc, #344]	; (8001da0 <HAL_LTDC_MspInit+0x210>)
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c48:	4a55      	ldr	r2, [pc, #340]	; (8001da0 <HAL_LTDC_MspInit+0x210>)
 8001c4a:	f043 0304 	orr.w	r3, r3, #4
 8001c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c50:	4b53      	ldr	r3, [pc, #332]	; (8001da0 <HAL_LTDC_MspInit+0x210>)
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	4b4f      	ldr	r3, [pc, #316]	; (8001da0 <HAL_LTDC_MspInit+0x210>)
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	4a4e      	ldr	r2, [pc, #312]	; (8001da0 <HAL_LTDC_MspInit+0x210>)
 8001c66:	f043 0308 	orr.w	r3, r3, #8
 8001c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6c:	4b4c      	ldr	r3, [pc, #304]	; (8001da0 <HAL_LTDC_MspInit+0x210>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c8a:	230e      	movs	r3, #14
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c92:	4619      	mov	r1, r3
 8001c94:	4843      	ldr	r0, [pc, #268]	; (8001da4 <HAL_LTDC_MspInit+0x214>)
 8001c96:	f000 fe4b 	bl	8002930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001c9a:	f641 0358 	movw	r3, #6232	; 0x1858
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cac:	230e      	movs	r3, #14
 8001cae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	483c      	ldr	r0, [pc, #240]	; (8001da8 <HAL_LTDC_MspInit+0x218>)
 8001cb8:	f000 fe3a 	bl	8002930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ccc:	2309      	movs	r3, #9
 8001cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4835      	ldr	r0, [pc, #212]	; (8001dac <HAL_LTDC_MspInit+0x21c>)
 8001cd8:	f000 fe2a 	bl	8002930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001cdc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cee:	230e      	movs	r3, #14
 8001cf0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	482c      	ldr	r0, [pc, #176]	; (8001dac <HAL_LTDC_MspInit+0x21c>)
 8001cfa:	f000 fe19 	bl	8002930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001cfe:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d10:	230e      	movs	r3, #14
 8001d12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4825      	ldr	r0, [pc, #148]	; (8001db0 <HAL_LTDC_MspInit+0x220>)
 8001d1c:	f000 fe08 	bl	8002930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001d20:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d32:	230e      	movs	r3, #14
 8001d34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	481d      	ldr	r0, [pc, #116]	; (8001db4 <HAL_LTDC_MspInit+0x224>)
 8001d3e:	f000 fdf7 	bl	8002930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001d42:	2348      	movs	r3, #72	; 0x48
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d52:	230e      	movs	r3, #14
 8001d54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4816      	ldr	r0, [pc, #88]	; (8001db8 <HAL_LTDC_MspInit+0x228>)
 8001d5e:	f000 fde7 	bl	8002930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001d62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d74:	2309      	movs	r3, #9
 8001d76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	480c      	ldr	r0, [pc, #48]	; (8001db0 <HAL_LTDC_MspInit+0x220>)
 8001d80:	f000 fdd6 	bl	8002930 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2105      	movs	r1, #5
 8001d88:	2058      	movs	r0, #88	; 0x58
 8001d8a:	f000 fb9f 	bl	80024cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001d8e:	2058      	movs	r0, #88	; 0x58
 8001d90:	f000 fbb8 	bl	8002504 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001d94:	bf00      	nop
 8001d96:	3738      	adds	r7, #56	; 0x38
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40016800 	.word	0x40016800
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40021400 	.word	0x40021400
 8001da8:	40020000 	.word	0x40020000
 8001dac:	40020400 	.word	0x40020400
 8001db0:	40021800 	.word	0x40021800
 8001db4:	40020800 	.word	0x40020800
 8001db8:	40020c00 	.word	0x40020c00

08001dbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	; 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a19      	ldr	r2, [pc, #100]	; (8001e40 <HAL_SPI_MspInit+0x84>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d12c      	bne.n	8001e38 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <HAL_SPI_MspInit+0x88>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	4a17      	ldr	r2, [pc, #92]	; (8001e44 <HAL_SPI_MspInit+0x88>)
 8001de8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dec:	6453      	str	r3, [r2, #68]	; 0x44
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <HAL_SPI_MspInit+0x88>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_SPI_MspInit+0x88>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <HAL_SPI_MspInit+0x88>)
 8001e04:	f043 0320 	orr.w	r3, r3, #32
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_SPI_MspInit+0x88>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0320 	and.w	r3, r3, #32
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001e16:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001e28:	2305      	movs	r3, #5
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	4805      	ldr	r0, [pc, #20]	; (8001e48 <HAL_SPI_MspInit+0x8c>)
 8001e34:	f000 fd7c 	bl	8002930 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001e38:	bf00      	nop
 8001e3a:	3728      	adds	r7, #40	; 0x28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40015000 	.word	0x40015000
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40021400 	.word	0x40021400

08001e4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <HAL_TIM_Base_MspInit+0x3c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d10d      	bne.n	8001e7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_TIM_Base_MspInit+0x40>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	4a09      	ldr	r2, [pc, #36]	; (8001e8c <HAL_TIM_Base_MspInit+0x40>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6e:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <HAL_TIM_Base_MspInit+0x40>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e7a:	bf00      	nop
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	40023800 	.word	0x40023800

08001e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a19      	ldr	r2, [pc, #100]	; (8001f14 <HAL_UART_MspInit+0x84>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d12c      	bne.n	8001f0c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <HAL_UART_MspInit+0x88>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	4a17      	ldr	r2, [pc, #92]	; (8001f18 <HAL_UART_MspInit+0x88>)
 8001ebc:	f043 0310 	orr.w	r3, r3, #16
 8001ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <HAL_UART_MspInit+0x88>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_UART_MspInit+0x88>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a10      	ldr	r2, [pc, #64]	; (8001f18 <HAL_UART_MspInit+0x88>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <HAL_UART_MspInit+0x88>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001eea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001efc:	2307      	movs	r3, #7
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	4619      	mov	r1, r3
 8001f06:	4805      	ldr	r0, [pc, #20]	; (8001f1c <HAL_UART_MspInit+0x8c>)
 8001f08:	f000 fd12 	bl	8002930 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f0c:	bf00      	nop
 8001f0e:	3728      	adds	r7, #40	; 0x28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40011000 	.word	0x40011000
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020000 	.word	0x40020000

08001f20 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001f34:	4b3b      	ldr	r3, [pc, #236]	; (8002024 <HAL_FMC_MspInit+0x104>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d16f      	bne.n	800201c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001f3c:	4b39      	ldr	r3, [pc, #228]	; (8002024 <HAL_FMC_MspInit+0x104>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	603b      	str	r3, [r7, #0]
 8001f46:	4b38      	ldr	r3, [pc, #224]	; (8002028 <HAL_FMC_MspInit+0x108>)
 8001f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4a:	4a37      	ldr	r2, [pc, #220]	; (8002028 <HAL_FMC_MspInit+0x108>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6393      	str	r3, [r2, #56]	; 0x38
 8001f52:	4b35      	ldr	r3, [pc, #212]	; (8002028 <HAL_FMC_MspInit+0x108>)
 8001f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001f5e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001f62:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f70:	230c      	movs	r3, #12
 8001f72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	4619      	mov	r1, r3
 8001f78:	482c      	ldr	r0, [pc, #176]	; (800202c <HAL_FMC_MspInit+0x10c>)
 8001f7a:	f000 fcd9 	bl	8002930 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f8e:	230c      	movs	r3, #12
 8001f90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	4619      	mov	r1, r3
 8001f96:	4826      	ldr	r0, [pc, #152]	; (8002030 <HAL_FMC_MspInit+0x110>)
 8001f98:	f000 fcca 	bl	8002930 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001f9c:	f248 1333 	movw	r3, #33075	; 0x8133
 8001fa0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001faa:	2303      	movs	r3, #3
 8001fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fae:	230c      	movs	r3, #12
 8001fb0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fb2:	1d3b      	adds	r3, r7, #4
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	481f      	ldr	r0, [pc, #124]	; (8002034 <HAL_FMC_MspInit+0x114>)
 8001fb8:	f000 fcba 	bl	8002930 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001fbc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001fc0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fce:	230c      	movs	r3, #12
 8001fd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4818      	ldr	r0, [pc, #96]	; (8002038 <HAL_FMC_MspInit+0x118>)
 8001fd8:	f000 fcaa 	bl	8002930 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001fdc:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001fe0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fea:	2303      	movs	r3, #3
 8001fec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fee:	230c      	movs	r3, #12
 8001ff0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4811      	ldr	r0, [pc, #68]	; (800203c <HAL_FMC_MspInit+0x11c>)
 8001ff8:	f000 fc9a 	bl	8002930 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001ffc:	2360      	movs	r3, #96	; 0x60
 8001ffe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002008:	2303      	movs	r3, #3
 800200a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800200c:	230c      	movs	r3, #12
 800200e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	4619      	mov	r1, r3
 8002014:	480a      	ldr	r0, [pc, #40]	; (8002040 <HAL_FMC_MspInit+0x120>)
 8002016:	f000 fc8b 	bl	8002930 <HAL_GPIO_Init>
 800201a:	e000      	b.n	800201e <HAL_FMC_MspInit+0xfe>
    return;
 800201c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	200001f8 	.word	0x200001f8
 8002028:	40023800 	.word	0x40023800
 800202c:	40021400 	.word	0x40021400
 8002030:	40020800 	.word	0x40020800
 8002034:	40021800 	.word	0x40021800
 8002038:	40021000 	.word	0x40021000
 800203c:	40020c00 	.word	0x40020c00
 8002040:	40020400 	.word	0x40020400

08002044 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800204c:	f7ff ff68 	bl	8001f20 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08c      	sub	sp, #48	; 0x30
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002068:	2200      	movs	r2, #0
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	2036      	movs	r0, #54	; 0x36
 800206e:	f000 fa2d 	bl	80024cc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002072:	2036      	movs	r0, #54	; 0x36
 8002074:	f000 fa46 	bl	8002504 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <HAL_InitTick+0xa4>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	4a1e      	ldr	r2, [pc, #120]	; (80020fc <HAL_InitTick+0xa4>)
 8002082:	f043 0310 	orr.w	r3, r3, #16
 8002086:	6413      	str	r3, [r2, #64]	; 0x40
 8002088:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <HAL_InitTick+0xa4>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002094:	f107 0210 	add.w	r2, r7, #16
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	4611      	mov	r1, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f001 fdec 	bl	8003c7c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80020a4:	f001 fdc2 	bl	8003c2c <HAL_RCC_GetPCLK1Freq>
 80020a8:	4603      	mov	r3, r0
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80020ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b0:	4a13      	ldr	r2, [pc, #76]	; (8002100 <HAL_InitTick+0xa8>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	0c9b      	lsrs	r3, r3, #18
 80020b8:	3b01      	subs	r3, #1
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <HAL_InitTick+0xac>)
 80020be:	4a12      	ldr	r2, [pc, #72]	; (8002108 <HAL_InitTick+0xb0>)
 80020c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <HAL_InitTick+0xac>)
 80020c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020c8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80020ca:	4a0e      	ldr	r2, [pc, #56]	; (8002104 <HAL_InitTick+0xac>)
 80020cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ce:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <HAL_InitTick+0xac>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_InitTick+0xac>)
 80020d8:	2200      	movs	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80020dc:	4809      	ldr	r0, [pc, #36]	; (8002104 <HAL_InitTick+0xac>)
 80020de:	f002 fbd7 	bl	8004890 <HAL_TIM_Base_Init>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d104      	bne.n	80020f2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80020e8:	4806      	ldr	r0, [pc, #24]	; (8002104 <HAL_InitTick+0xac>)
 80020ea:	f002 fbfc 	bl	80048e6 <HAL_TIM_Base_Start_IT>
 80020ee:	4603      	mov	r3, r0
 80020f0:	e000      	b.n	80020f4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3730      	adds	r7, #48	; 0x30
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40023800 	.word	0x40023800
 8002100:	431bde83 	.word	0x431bde83
 8002104:	2000041c 	.word	0x2000041c
 8002108:	40001000 	.word	0x40001000

0800210c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800211e:	e7fe      	b.n	800211e <HardFault_Handler+0x4>

08002120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002124:	e7fe      	b.n	8002124 <MemManage_Handler+0x4>

08002126 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800212a:	e7fe      	b.n	800212a <BusFault_Handler+0x4>

0800212c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002130:	e7fe      	b.n	8002130 <UsageFault_Handler+0x4>

08002132 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002170:	4802      	ldr	r0, [pc, #8]	; (800217c <TIM6_DAC_IRQHandler+0x10>)
 8002172:	f002 fbdc 	bl	800492e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	2000041c 	.word	0x2000041c

08002180 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <LTDC_IRQHandler+0x10>)
 8002186:	f000 fe7f 	bl	8002e88 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000280 	.word	0x20000280

08002194 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <DMA2D_IRQHandler+0x10>)
 800219a:	f000 fa26 	bl	80025ea <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200003a8 	.word	0x200003a8

080021a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b0:	4a14      	ldr	r2, [pc, #80]	; (8002204 <_sbrk+0x5c>)
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <_sbrk+0x60>)
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021bc:	4b13      	ldr	r3, [pc, #76]	; (800220c <_sbrk+0x64>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d102      	bne.n	80021ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <_sbrk+0x64>)
 80021c6:	4a12      	ldr	r2, [pc, #72]	; (8002210 <_sbrk+0x68>)
 80021c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <_sbrk+0x64>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d207      	bcs.n	80021e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d8:	f003 fcf8 	bl	8005bcc <__errno>
 80021dc:	4602      	mov	r2, r0
 80021de:	230c      	movs	r3, #12
 80021e0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80021e2:	f04f 33ff 	mov.w	r3, #4294967295
 80021e6:	e009      	b.n	80021fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <_sbrk+0x64>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <_sbrk+0x64>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	4a05      	ldr	r2, [pc, #20]	; (800220c <_sbrk+0x64>)
 80021f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021fa:	68fb      	ldr	r3, [r7, #12]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20030000 	.word	0x20030000
 8002208:	00000400 	.word	0x00000400
 800220c:	200001fc 	.word	0x200001fc
 8002210:	20000468 	.word	0x20000468

08002214 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002218:	4b08      	ldr	r3, [pc, #32]	; (800223c <SystemInit+0x28>)
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221e:	4a07      	ldr	r2, [pc, #28]	; (800223c <SystemInit+0x28>)
 8002220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002228:	4b04      	ldr	r3, [pc, #16]	; (800223c <SystemInit+0x28>)
 800222a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800222e:	609a      	str	r2, [r3, #8]
#endif
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002278 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002244:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002246:	e003      	b.n	8002250 <LoopCopyDataInit>

08002248 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800224a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800224c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800224e:	3104      	adds	r1, #4

08002250 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002250:	480b      	ldr	r0, [pc, #44]	; (8002280 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002252:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002254:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002256:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002258:	d3f6      	bcc.n	8002248 <CopyDataInit>
  ldr  r2, =_sbss
 800225a:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800225c:	e002      	b.n	8002264 <LoopFillZerobss>

0800225e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800225e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002260:	f842 3b04 	str.w	r3, [r2], #4

08002264 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002264:	4b09      	ldr	r3, [pc, #36]	; (800228c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002266:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002268:	d3f9      	bcc.n	800225e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800226a:	f7ff ffd3 	bl	8002214 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800226e:	f003 fcb3 	bl	8005bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002272:	f7fe ff8d 	bl	8001190 <main>
  bx  lr    
 8002276:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002278:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800227c:	08007f68 	.word	0x08007f68
  ldr  r0, =_sdata
 8002280:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002284:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002288:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800228c:	20000464 	.word	0x20000464

08002290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002290:	e7fe      	b.n	8002290 <ADC_IRQHandler>
	...

08002294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002298:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <HAL_Init+0x40>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0d      	ldr	r2, [pc, #52]	; (80022d4 <HAL_Init+0x40>)
 800229e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_Init+0x40>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <HAL_Init+0x40>)
 80022aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_Init+0x40>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <HAL_Init+0x40>)
 80022b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022bc:	2003      	movs	r0, #3
 80022be:	f000 f8fa 	bl	80024b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022c2:	2000      	movs	r0, #0
 80022c4:	f7ff fec8 	bl	8002058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c8:	f7ff fbec 	bl	8001aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023c00 	.word	0x40023c00

080022d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_IncTick+0x20>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_IncTick+0x24>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	4a04      	ldr	r2, [pc, #16]	; (80022fc <HAL_IncTick+0x24>)
 80022ea:	6013      	str	r3, [r2, #0]
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000008 	.word	0x20000008
 80022fc:	2000045c 	.word	0x2000045c

08002300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return uwTick;
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_GetTick+0x14>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	2000045c 	.word	0x2000045c

08002318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002320:	f7ff ffee 	bl	8002300 <HAL_GetTick>
 8002324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002330:	d005      	beq.n	800233e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_Delay+0x40>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4413      	add	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800233e:	bf00      	nop
 8002340:	f7ff ffde 	bl	8002300 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	429a      	cmp	r2, r3
 800234e:	d8f7      	bhi.n	8002340 <HAL_Delay+0x28>
  {
  }
}
 8002350:	bf00      	nop
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000008 	.word	0x20000008

0800235c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800236c:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <__NVIC_SetPriorityGrouping+0x44>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002378:	4013      	ands	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800238c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238e:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	60d3      	str	r3, [r2, #12]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <__NVIC_GetPriorityGrouping+0x18>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	0a1b      	lsrs	r3, r3, #8
 80023ae:	f003 0307 	and.w	r3, r3, #7
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	db0b      	blt.n	80023ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	f003 021f 	and.w	r2, r3, #31
 80023d8:	4907      	ldr	r1, [pc, #28]	; (80023f8 <__NVIC_EnableIRQ+0x38>)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	2001      	movs	r0, #1
 80023e2:	fa00 f202 	lsl.w	r2, r0, r2
 80023e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000e100 	.word	0xe000e100

080023fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	6039      	str	r1, [r7, #0]
 8002406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240c:	2b00      	cmp	r3, #0
 800240e:	db0a      	blt.n	8002426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	b2da      	uxtb	r2, r3
 8002414:	490c      	ldr	r1, [pc, #48]	; (8002448 <__NVIC_SetPriority+0x4c>)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	0112      	lsls	r2, r2, #4
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	440b      	add	r3, r1
 8002420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002424:	e00a      	b.n	800243c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4908      	ldr	r1, [pc, #32]	; (800244c <__NVIC_SetPriority+0x50>)
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	3b04      	subs	r3, #4
 8002434:	0112      	lsls	r2, r2, #4
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	440b      	add	r3, r1
 800243a:	761a      	strb	r2, [r3, #24]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000e100 	.word	0xe000e100
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002450:	b480      	push	{r7}
 8002452:	b089      	sub	sp, #36	; 0x24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f1c3 0307 	rsb	r3, r3, #7
 800246a:	2b04      	cmp	r3, #4
 800246c:	bf28      	it	cs
 800246e:	2304      	movcs	r3, #4
 8002470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3304      	adds	r3, #4
 8002476:	2b06      	cmp	r3, #6
 8002478:	d902      	bls.n	8002480 <NVIC_EncodePriority+0x30>
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3b03      	subs	r3, #3
 800247e:	e000      	b.n	8002482 <NVIC_EncodePriority+0x32>
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	f04f 32ff 	mov.w	r2, #4294967295
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43da      	mvns	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	401a      	ands	r2, r3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002498:	f04f 31ff 	mov.w	r1, #4294967295
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	43d9      	mvns	r1, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	4313      	orrs	r3, r2
         );
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3724      	adds	r7, #36	; 0x24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff ff4c 	bl	800235c <__NVIC_SetPriorityGrouping>
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024de:	f7ff ff61 	bl	80023a4 <__NVIC_GetPriorityGrouping>
 80024e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	68b9      	ldr	r1, [r7, #8]
 80024e8:	6978      	ldr	r0, [r7, #20]
 80024ea:	f7ff ffb1 	bl	8002450 <NVIC_EncodePriority>
 80024ee:	4602      	mov	r2, r0
 80024f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ff80 	bl	80023fc <__NVIC_SetPriority>
}
 80024fc:	bf00      	nop
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff ff54 	bl	80023c0 <__NVIC_EnableIRQ>
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e00e      	b.n	8002550 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	795b      	ldrb	r3, [r3, #5]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d105      	bne.n	8002548 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff fada 	bl	8001afc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e03b      	b.n	80025e2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff fade 	bl	8001b40 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a8:	f023 0107 	bic.w	r1, r3, #7
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68d1      	ldr	r1, [r2, #12]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	430b      	orrs	r3, r1
 80025d0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	d026      	beq.n	800265a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002612:	2b00      	cmp	r3, #0
 8002614:	d021      	beq.n	800265a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002624:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262a:	f043 0201 	orr.w	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2201      	movs	r2, #1
 8002638:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2204      	movs	r2, #4
 800263e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d026      	beq.n	80026b2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d021      	beq.n	80026b2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800267c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2220      	movs	r2, #32
 8002684:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268a:	f043 0202 	orr.w	r2, r3, #2
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2204      	movs	r2, #4
 8002696:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d026      	beq.n	800270a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d021      	beq.n	800270a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026d4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2208      	movs	r2, #8
 80026dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e2:	f043 0204 	orr.w	r2, r3, #4
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2204      	movs	r2, #4
 80026ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d013      	beq.n	800273c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00e      	beq.n	800273c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800272c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2204      	movs	r2, #4
 8002734:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f853 	bl	80027e2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d024      	beq.n	8002790 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800274c:	2b00      	cmp	r3, #0
 800274e:	d01f      	beq.n	8002790 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800275e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2202      	movs	r2, #2
 8002766:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b00      	cmp	r3, #0
 8002798:	d01f      	beq.n	80027da <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d01a      	beq.n	80027da <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027b2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2210      	movs	r2, #16
 80027ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f80e 	bl	80027f6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80027da:	bf00      	nop
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_DMA2D_ConfigLayer+0x20>
 8002828:	2302      	movs	r3, #2
 800282a:	e079      	b.n	8002920 <HAL_DMA2D_ConfigLayer+0x114>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	3318      	adds	r3, #24
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	041b      	lsls	r3, r3, #16
 8002852:	4313      	orrs	r3, r2
 8002854:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002856:	4b35      	ldr	r3, [pc, #212]	; (800292c <HAL_DMA2D_ConfigLayer+0x120>)
 8002858:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b0a      	cmp	r3, #10
 8002860:	d003      	beq.n	800286a <HAL_DMA2D_ConfigLayer+0x5e>
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b09      	cmp	r3, #9
 8002868:	d107      	bne.n	800287a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4313      	orrs	r3, r2
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	e005      	b.n	8002886 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	061b      	lsls	r3, r3, #24
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4313      	orrs	r3, r2
 8002884:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d120      	bne.n	80028ce <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	43db      	mvns	r3, r3
 8002896:	ea02 0103 	and.w	r1, r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b0a      	cmp	r3, #10
 80028b4:	d003      	beq.n	80028be <HAL_DMA2D_ConfigLayer+0xb2>
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b09      	cmp	r3, #9
 80028bc:	d127      	bne.n	800290e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28
 80028cc:	e01f      	b.n	800290e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69da      	ldr	r2, [r3, #28]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	43db      	mvns	r3, r3
 80028d8:	ea02 0103 	and.w	r1, r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	6812      	ldr	r2, [r2, #0]
 80028ee:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b0a      	cmp	r3, #10
 80028f6:	d003      	beq.n	8002900 <HAL_DMA2D_ConfigLayer+0xf4>
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b09      	cmp	r3, #9
 80028fe:	d106      	bne.n	800290e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800290c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	371c      	adds	r7, #28
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	ff03000f 	.word	0xff03000f

08002930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	; 0x24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
 800294a:	e177      	b.n	8002c3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800294c:	2201      	movs	r2, #1
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	429a      	cmp	r2, r3
 8002966:	f040 8166 	bne.w	8002c36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d00b      	beq.n	800298a <HAL_GPIO_Init+0x5a>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d007      	beq.n	800298a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800297e:	2b11      	cmp	r3, #17
 8002980:	d003      	beq.n	800298a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b12      	cmp	r3, #18
 8002988:	d130      	bne.n	80029ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	2203      	movs	r2, #3
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c0:	2201      	movs	r2, #1
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 0201 	and.w	r2, r3, #1
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	2203      	movs	r2, #3
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0xfc>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b12      	cmp	r3, #18
 8002a2a:	d123      	bne.n	8002a74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	08da      	lsrs	r2, r3, #3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3208      	adds	r2, #8
 8002a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	220f      	movs	r2, #15
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	08da      	lsrs	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3208      	adds	r2, #8
 8002a6e:	69b9      	ldr	r1, [r7, #24]
 8002a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	2203      	movs	r2, #3
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0203 	and.w	r2, r3, #3
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80c0 	beq.w	8002c36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	4b65      	ldr	r3, [pc, #404]	; (8002c50 <HAL_GPIO_Init+0x320>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	4a64      	ldr	r2, [pc, #400]	; (8002c50 <HAL_GPIO_Init+0x320>)
 8002ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac6:	4b62      	ldr	r3, [pc, #392]	; (8002c50 <HAL_GPIO_Init+0x320>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ad2:	4a60      	ldr	r2, [pc, #384]	; (8002c54 <HAL_GPIO_Init+0x324>)
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	089b      	lsrs	r3, r3, #2
 8002ad8:	3302      	adds	r3, #2
 8002ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	220f      	movs	r2, #15
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a57      	ldr	r2, [pc, #348]	; (8002c58 <HAL_GPIO_Init+0x328>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d037      	beq.n	8002b6e <HAL_GPIO_Init+0x23e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a56      	ldr	r2, [pc, #344]	; (8002c5c <HAL_GPIO_Init+0x32c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d031      	beq.n	8002b6a <HAL_GPIO_Init+0x23a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a55      	ldr	r2, [pc, #340]	; (8002c60 <HAL_GPIO_Init+0x330>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d02b      	beq.n	8002b66 <HAL_GPIO_Init+0x236>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a54      	ldr	r2, [pc, #336]	; (8002c64 <HAL_GPIO_Init+0x334>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d025      	beq.n	8002b62 <HAL_GPIO_Init+0x232>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a53      	ldr	r2, [pc, #332]	; (8002c68 <HAL_GPIO_Init+0x338>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d01f      	beq.n	8002b5e <HAL_GPIO_Init+0x22e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a52      	ldr	r2, [pc, #328]	; (8002c6c <HAL_GPIO_Init+0x33c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d019      	beq.n	8002b5a <HAL_GPIO_Init+0x22a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a51      	ldr	r2, [pc, #324]	; (8002c70 <HAL_GPIO_Init+0x340>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d013      	beq.n	8002b56 <HAL_GPIO_Init+0x226>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a50      	ldr	r2, [pc, #320]	; (8002c74 <HAL_GPIO_Init+0x344>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00d      	beq.n	8002b52 <HAL_GPIO_Init+0x222>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a4f      	ldr	r2, [pc, #316]	; (8002c78 <HAL_GPIO_Init+0x348>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d007      	beq.n	8002b4e <HAL_GPIO_Init+0x21e>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a4e      	ldr	r2, [pc, #312]	; (8002c7c <HAL_GPIO_Init+0x34c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d101      	bne.n	8002b4a <HAL_GPIO_Init+0x21a>
 8002b46:	2309      	movs	r3, #9
 8002b48:	e012      	b.n	8002b70 <HAL_GPIO_Init+0x240>
 8002b4a:	230a      	movs	r3, #10
 8002b4c:	e010      	b.n	8002b70 <HAL_GPIO_Init+0x240>
 8002b4e:	2308      	movs	r3, #8
 8002b50:	e00e      	b.n	8002b70 <HAL_GPIO_Init+0x240>
 8002b52:	2307      	movs	r3, #7
 8002b54:	e00c      	b.n	8002b70 <HAL_GPIO_Init+0x240>
 8002b56:	2306      	movs	r3, #6
 8002b58:	e00a      	b.n	8002b70 <HAL_GPIO_Init+0x240>
 8002b5a:	2305      	movs	r3, #5
 8002b5c:	e008      	b.n	8002b70 <HAL_GPIO_Init+0x240>
 8002b5e:	2304      	movs	r3, #4
 8002b60:	e006      	b.n	8002b70 <HAL_GPIO_Init+0x240>
 8002b62:	2303      	movs	r3, #3
 8002b64:	e004      	b.n	8002b70 <HAL_GPIO_Init+0x240>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e002      	b.n	8002b70 <HAL_GPIO_Init+0x240>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <HAL_GPIO_Init+0x240>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	69fa      	ldr	r2, [r7, #28]
 8002b72:	f002 0203 	and.w	r2, r2, #3
 8002b76:	0092      	lsls	r2, r2, #2
 8002b78:	4093      	lsls	r3, r2
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b80:	4934      	ldr	r1, [pc, #208]	; (8002c54 <HAL_GPIO_Init+0x324>)
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	089b      	lsrs	r3, r3, #2
 8002b86:	3302      	adds	r3, #2
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b8e:	4b3c      	ldr	r3, [pc, #240]	; (8002c80 <HAL_GPIO_Init+0x350>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bb2:	4a33      	ldr	r2, [pc, #204]	; (8002c80 <HAL_GPIO_Init+0x350>)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bb8:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <HAL_GPIO_Init+0x350>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bdc:	4a28      	ldr	r2, [pc, #160]	; (8002c80 <HAL_GPIO_Init+0x350>)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002be2:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <HAL_GPIO_Init+0x350>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	43db      	mvns	r3, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c06:	4a1e      	ldr	r2, [pc, #120]	; (8002c80 <HAL_GPIO_Init+0x350>)
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c0c:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <HAL_GPIO_Init+0x350>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c30:	4a13      	ldr	r2, [pc, #76]	; (8002c80 <HAL_GPIO_Init+0x350>)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	61fb      	str	r3, [r7, #28]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	2b0f      	cmp	r3, #15
 8002c40:	f67f ae84 	bls.w	800294c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c44:	bf00      	nop
 8002c46:	3724      	adds	r7, #36	; 0x24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40013800 	.word	0x40013800
 8002c58:	40020000 	.word	0x40020000
 8002c5c:	40020400 	.word	0x40020400
 8002c60:	40020800 	.word	0x40020800
 8002c64:	40020c00 	.word	0x40020c00
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40021400 	.word	0x40021400
 8002c70:	40021800 	.word	0x40021800
 8002c74:	40021c00 	.word	0x40021c00
 8002c78:	40022000 	.word	0x40022000
 8002c7c:	40022400 	.word	0x40022400
 8002c80:	40013c00 	.word	0x40013c00

08002c84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	887b      	ldrh	r3, [r7, #2]
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
 8002ca0:	e001      	b.n	8002ca6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	807b      	strh	r3, [r7, #2]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cc4:	787b      	ldrb	r3, [r7, #1]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cca:	887a      	ldrh	r2, [r7, #2]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cd0:	e003      	b.n	8002cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cd2:	887b      	ldrh	r3, [r7, #2]
 8002cd4:	041a      	lsls	r2, r3, #16
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	619a      	str	r2, [r3, #24]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e0bf      	b.n	8002e7a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fe ff3e 	bl	8001b90 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002d2a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6999      	ldr	r1, [r3, #24]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002d40:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6899      	ldr	r1, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4b4a      	ldr	r3, [pc, #296]	; (8002e84 <HAL_LTDC_Init+0x19c>)
 8002d5c:	400b      	ands	r3, r1
 8002d5e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	041b      	lsls	r3, r3, #16
 8002d66:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6899      	ldr	r1, [r3, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68d9      	ldr	r1, [r3, #12]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b3e      	ldr	r3, [pc, #248]	; (8002e84 <HAL_LTDC_Init+0x19c>)
 8002d8a:	400b      	ands	r3, r1
 8002d8c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	041b      	lsls	r3, r3, #16
 8002d94:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68d9      	ldr	r1, [r3, #12]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1a      	ldr	r2, [r3, #32]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6919      	ldr	r1, [r3, #16]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	4b33      	ldr	r3, [pc, #204]	; (8002e84 <HAL_LTDC_Init+0x19c>)
 8002db8:	400b      	ands	r3, r1
 8002dba:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	041b      	lsls	r3, r3, #16
 8002dc2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6919      	ldr	r1, [r3, #16]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6959      	ldr	r1, [r3, #20]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <HAL_LTDC_Init+0x19c>)
 8002de6:	400b      	ands	r3, r1
 8002de8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	041b      	lsls	r3, r3, #16
 8002df0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6959      	ldr	r1, [r3, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002e18:	041b      	lsls	r3, r3, #16
 8002e1a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0206 	orr.w	r2, r2, #6
 8002e56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699a      	ldr	r2, [r3, #24]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	f000f800 	.word	0xf000f800

08002e88 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e96:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d023      	beq.n	8002ef2 <HAL_LTDC_IRQHandler+0x6a>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d01e      	beq.n	8002ef2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0204 	bic.w	r2, r2, #4
 8002ec2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2204      	movs	r2, #4
 8002eca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ed2:	f043 0201 	orr.w	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2204      	movs	r2, #4
 8002ee0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f86f 	bl	8002fd0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d023      	beq.n	8002f44 <HAL_LTDC_IRQHandler+0xbc>
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01e      	beq.n	8002f44 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0202 	bic.w	r2, r2, #2
 8002f14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f24:	f043 0202 	orr.w	r2, r3, #2
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2204      	movs	r2, #4
 8002f32:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f846 	bl	8002fd0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01b      	beq.n	8002f86 <HAL_LTDC_IRQHandler+0xfe>
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d016      	beq.n	8002f86 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0201 	bic.w	r2, r2, #1
 8002f66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f82f 	bl	8002fe4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d01b      	beq.n	8002fc8 <HAL_LTDC_IRQHandler+0x140>
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d016      	beq.n	8002fc8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0208 	bic.w	r2, r2, #8
 8002fa8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2208      	movs	r2, #8
 8002fb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f818 	bl	8002ff8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800300c:	b5b0      	push	{r4, r5, r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_LTDC_ConfigLayer+0x1a>
 8003022:	2302      	movs	r3, #2
 8003024:	e02c      	b.n	8003080 <HAL_LTDC_ConfigLayer+0x74>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2202      	movs	r2, #2
 8003032:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2134      	movs	r1, #52	; 0x34
 800303c:	fb01 f303 	mul.w	r3, r1, r3
 8003040:	4413      	add	r3, r2
 8003042:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4614      	mov	r4, r2
 800304a:	461d      	mov	r5, r3
 800304c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800304e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003058:	682b      	ldr	r3, [r5, #0]
 800305a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f811 	bl	8003088 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2201      	movs	r2, #1
 800306c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bdb0      	pop	{r4, r5, r7, pc}

08003088 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003088:	b480      	push	{r7}
 800308a:	b089      	sub	sp, #36	; 0x24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	0c1b      	lsrs	r3, r3, #16
 80030a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a4:	4413      	add	r3, r2
 80030a6:	041b      	lsls	r3, r3, #16
 80030a8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	01db      	lsls	r3, r3, #7
 80030b4:	4413      	add	r3, r2
 80030b6:	3384      	adds	r3, #132	; 0x84
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	4611      	mov	r1, r2
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	01d2      	lsls	r2, r2, #7
 80030c4:	440a      	add	r2, r1
 80030c6:	3284      	adds	r2, #132	; 0x84
 80030c8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80030cc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030de:	4413      	add	r3, r2
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4619      	mov	r1, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	01db      	lsls	r3, r3, #7
 80030ec:	440b      	add	r3, r1
 80030ee:	3384      	adds	r3, #132	; 0x84
 80030f0:	4619      	mov	r1, r3
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003106:	4413      	add	r3, r2
 8003108:	041b      	lsls	r3, r3, #16
 800310a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	01db      	lsls	r3, r3, #7
 8003116:	4413      	add	r3, r2
 8003118:	3384      	adds	r3, #132	; 0x84
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	4611      	mov	r1, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	01d2      	lsls	r2, r2, #7
 8003126:	440a      	add	r2, r1
 8003128:	3284      	adds	r2, #132	; 0x84
 800312a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800312e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800313e:	4413      	add	r3, r2
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4619      	mov	r1, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	01db      	lsls	r3, r3, #7
 800314c:	440b      	add	r3, r1
 800314e:	3384      	adds	r3, #132	; 0x84
 8003150:	4619      	mov	r1, r3
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	4313      	orrs	r3, r2
 8003156:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	461a      	mov	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	01db      	lsls	r3, r3, #7
 8003162:	4413      	add	r3, r2
 8003164:	3384      	adds	r3, #132	; 0x84
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	4611      	mov	r1, r2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	01d2      	lsls	r2, r2, #7
 8003172:	440a      	add	r2, r1
 8003174:	3284      	adds	r2, #132	; 0x84
 8003176:	f023 0307 	bic.w	r3, r3, #7
 800317a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	01db      	lsls	r3, r3, #7
 8003186:	4413      	add	r3, r2
 8003188:	3384      	adds	r3, #132	; 0x84
 800318a:	461a      	mov	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80031a2:	041b      	lsls	r3, r3, #16
 80031a4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	061b      	lsls	r3, r3, #24
 80031ac:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	01db      	lsls	r3, r3, #7
 80031b8:	4413      	add	r3, r2
 80031ba:	3384      	adds	r3, #132	; 0x84
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	01db      	lsls	r3, r3, #7
 80031c8:	4413      	add	r3, r2
 80031ca:	3384      	adds	r3, #132	; 0x84
 80031cc:	461a      	mov	r2, r3
 80031ce:	2300      	movs	r3, #0
 80031d0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031d8:	461a      	mov	r2, r3
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	431a      	orrs	r2, r3
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	431a      	orrs	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4619      	mov	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	01db      	lsls	r3, r3, #7
 80031ec:	440b      	add	r3, r1
 80031ee:	3384      	adds	r3, #132	; 0x84
 80031f0:	4619      	mov	r1, r3
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	01db      	lsls	r3, r3, #7
 8003202:	4413      	add	r3, r2
 8003204:	3384      	adds	r3, #132	; 0x84
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	4611      	mov	r1, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	01d2      	lsls	r2, r2, #7
 8003212:	440a      	add	r2, r1
 8003214:	3284      	adds	r2, #132	; 0x84
 8003216:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800321a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	01db      	lsls	r3, r3, #7
 8003226:	4413      	add	r3, r2
 8003228:	3384      	adds	r3, #132	; 0x84
 800322a:	461a      	mov	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	01db      	lsls	r3, r3, #7
 800323c:	4413      	add	r3, r2
 800323e:	3384      	adds	r3, #132	; 0x84
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	4611      	mov	r1, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	01d2      	lsls	r2, r2, #7
 800324c:	440a      	add	r2, r1
 800324e:	3284      	adds	r2, #132	; 0x84
 8003250:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003254:	f023 0307 	bic.w	r3, r3, #7
 8003258:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	69da      	ldr	r2, [r3, #28]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	68f9      	ldr	r1, [r7, #12]
 8003264:	6809      	ldr	r1, [r1, #0]
 8003266:	4608      	mov	r0, r1
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	01c9      	lsls	r1, r1, #7
 800326c:	4401      	add	r1, r0
 800326e:	3184      	adds	r1, #132	; 0x84
 8003270:	4313      	orrs	r3, r2
 8003272:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	01db      	lsls	r3, r3, #7
 800327e:	4413      	add	r3, r2
 8003280:	3384      	adds	r3, #132	; 0x84
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	01db      	lsls	r3, r3, #7
 800328e:	4413      	add	r3, r2
 8003290:	3384      	adds	r3, #132	; 0x84
 8003292:	461a      	mov	r2, r3
 8003294:	2300      	movs	r3, #0
 8003296:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	01db      	lsls	r3, r3, #7
 80032a2:	4413      	add	r3, r2
 80032a4:	3384      	adds	r3, #132	; 0x84
 80032a6:	461a      	mov	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80032b6:	2304      	movs	r3, #4
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	e01b      	b.n	80032f4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d102      	bne.n	80032ca <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80032c4:	2303      	movs	r3, #3
 80032c6:	61fb      	str	r3, [r7, #28]
 80032c8:	e014      	b.n	80032f4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d00b      	beq.n	80032ea <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d007      	beq.n	80032ea <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d003      	beq.n	80032ea <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80032e6:	2b07      	cmp	r3, #7
 80032e8:	d102      	bne.n	80032f0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80032ea:	2302      	movs	r3, #2
 80032ec:	61fb      	str	r3, [r7, #28]
 80032ee:	e001      	b.n	80032f4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80032f0:	2301      	movs	r3, #1
 80032f2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	01db      	lsls	r3, r3, #7
 80032fe:	4413      	add	r3, r2
 8003300:	3384      	adds	r3, #132	; 0x84
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	4611      	mov	r1, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	01d2      	lsls	r2, r2, #7
 800330e:	440a      	add	r2, r1
 8003310:	3284      	adds	r2, #132	; 0x84
 8003312:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003316:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	fb02 f303 	mul.w	r3, r2, r3
 8003322:	041a      	lsls	r2, r3, #16
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	6859      	ldr	r1, [r3, #4]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	1acb      	subs	r3, r1, r3
 800332e:	69f9      	ldr	r1, [r7, #28]
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	3303      	adds	r3, #3
 8003336:	68f9      	ldr	r1, [r7, #12]
 8003338:	6809      	ldr	r1, [r1, #0]
 800333a:	4608      	mov	r0, r1
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	01c9      	lsls	r1, r1, #7
 8003340:	4401      	add	r1, r0
 8003342:	3184      	adds	r1, #132	; 0x84
 8003344:	4313      	orrs	r3, r2
 8003346:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	01db      	lsls	r3, r3, #7
 8003352:	4413      	add	r3, r2
 8003354:	3384      	adds	r3, #132	; 0x84
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	4611      	mov	r1, r2
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	01d2      	lsls	r2, r2, #7
 8003362:	440a      	add	r2, r1
 8003364:	3284      	adds	r2, #132	; 0x84
 8003366:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800336a:	f023 0307 	bic.w	r3, r3, #7
 800336e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	01db      	lsls	r3, r3, #7
 800337a:	4413      	add	r3, r2
 800337c:	3384      	adds	r3, #132	; 0x84
 800337e:	461a      	mov	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	01db      	lsls	r3, r3, #7
 8003390:	4413      	add	r3, r2
 8003392:	3384      	adds	r3, #132	; 0x84
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	4611      	mov	r1, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	01d2      	lsls	r2, r2, #7
 80033a0:	440a      	add	r2, r1
 80033a2:	3284      	adds	r2, #132	; 0x84
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	6013      	str	r3, [r2, #0]
}
 80033aa:	bf00      	nop
 80033ac:	3724      	adds	r7, #36	; 0x24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e25b      	b.n	8003882 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d075      	beq.n	80034c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033d6:	4ba3      	ldr	r3, [pc, #652]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d00c      	beq.n	80033fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033e2:	4ba0      	ldr	r3, [pc, #640]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d112      	bne.n	8003414 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ee:	4b9d      	ldr	r3, [pc, #628]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033fa:	d10b      	bne.n	8003414 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fc:	4b99      	ldr	r3, [pc, #612]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d05b      	beq.n	80034c0 <HAL_RCC_OscConfig+0x108>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d157      	bne.n	80034c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e236      	b.n	8003882 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800341c:	d106      	bne.n	800342c <HAL_RCC_OscConfig+0x74>
 800341e:	4b91      	ldr	r3, [pc, #580]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a90      	ldr	r2, [pc, #576]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	e01d      	b.n	8003468 <HAL_RCC_OscConfig+0xb0>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0x98>
 8003436:	4b8b      	ldr	r3, [pc, #556]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a8a      	ldr	r2, [pc, #552]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800343c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b88      	ldr	r3, [pc, #544]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a87      	ldr	r2, [pc, #540]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	e00b      	b.n	8003468 <HAL_RCC_OscConfig+0xb0>
 8003450:	4b84      	ldr	r3, [pc, #528]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a83      	ldr	r2, [pc, #524]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	4b81      	ldr	r3, [pc, #516]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a80      	ldr	r2, [pc, #512]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d013      	beq.n	8003498 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7fe ff46 	bl	8002300 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003478:	f7fe ff42 	bl	8002300 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b64      	cmp	r3, #100	; 0x64
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e1fb      	b.n	8003882 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348a:	4b76      	ldr	r3, [pc, #472]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0xc0>
 8003496:	e014      	b.n	80034c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003498:	f7fe ff32 	bl	8002300 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a0:	f7fe ff2e 	bl	8002300 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b64      	cmp	r3, #100	; 0x64
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e1e7      	b.n	8003882 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b2:	4b6c      	ldr	r3, [pc, #432]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0xe8>
 80034be:	e000      	b.n	80034c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d063      	beq.n	8003596 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ce:	4b65      	ldr	r3, [pc, #404]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00b      	beq.n	80034f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034da:	4b62      	ldr	r3, [pc, #392]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d11c      	bne.n	8003520 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034e6:	4b5f      	ldr	r3, [pc, #380]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d116      	bne.n	8003520 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f2:	4b5c      	ldr	r3, [pc, #368]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d005      	beq.n	800350a <HAL_RCC_OscConfig+0x152>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d001      	beq.n	800350a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e1bb      	b.n	8003882 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350a:	4b56      	ldr	r3, [pc, #344]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4952      	ldr	r1, [pc, #328]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800351a:	4313      	orrs	r3, r2
 800351c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351e:	e03a      	b.n	8003596 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d020      	beq.n	800356a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003528:	4b4f      	ldr	r3, [pc, #316]	; (8003668 <HAL_RCC_OscConfig+0x2b0>)
 800352a:	2201      	movs	r2, #1
 800352c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352e:	f7fe fee7 	bl	8002300 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003536:	f7fe fee3 	bl	8002300 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e19c      	b.n	8003882 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003548:	4b46      	ldr	r3, [pc, #280]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f0      	beq.n	8003536 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003554:	4b43      	ldr	r3, [pc, #268]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4940      	ldr	r1, [pc, #256]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003564:	4313      	orrs	r3, r2
 8003566:	600b      	str	r3, [r1, #0]
 8003568:	e015      	b.n	8003596 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800356a:	4b3f      	ldr	r3, [pc, #252]	; (8003668 <HAL_RCC_OscConfig+0x2b0>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fe fec6 	bl	8002300 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003578:	f7fe fec2 	bl	8002300 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e17b      	b.n	8003882 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358a:	4b36      	ldr	r3, [pc, #216]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d030      	beq.n	8003604 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d016      	beq.n	80035d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035aa:	4b30      	ldr	r3, [pc, #192]	; (800366c <HAL_RCC_OscConfig+0x2b4>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b0:	f7fe fea6 	bl	8002300 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b8:	f7fe fea2 	bl	8002300 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e15b      	b.n	8003882 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ca:	4b26      	ldr	r3, [pc, #152]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80035cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0x200>
 80035d6:	e015      	b.n	8003604 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d8:	4b24      	ldr	r3, [pc, #144]	; (800366c <HAL_RCC_OscConfig+0x2b4>)
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035de:	f7fe fe8f 	bl	8002300 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e6:	f7fe fe8b 	bl	8002300 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e144      	b.n	8003882 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f8:	4b1a      	ldr	r3, [pc, #104]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80035fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f0      	bne.n	80035e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80a0 	beq.w	8003752 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003612:	2300      	movs	r3, #0
 8003614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003616:	4b13      	ldr	r3, [pc, #76]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10f      	bne.n	8003642 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	4a0e      	ldr	r2, [pc, #56]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800362c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003630:	6413      	str	r3, [r2, #64]	; 0x40
 8003632:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363e:	2301      	movs	r3, #1
 8003640:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003642:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <HAL_RCC_OscConfig+0x2b8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364a:	2b00      	cmp	r3, #0
 800364c:	d121      	bne.n	8003692 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364e:	4b08      	ldr	r3, [pc, #32]	; (8003670 <HAL_RCC_OscConfig+0x2b8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a07      	ldr	r2, [pc, #28]	; (8003670 <HAL_RCC_OscConfig+0x2b8>)
 8003654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800365a:	f7fe fe51 	bl	8002300 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003660:	e011      	b.n	8003686 <HAL_RCC_OscConfig+0x2ce>
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800
 8003668:	42470000 	.word	0x42470000
 800366c:	42470e80 	.word	0x42470e80
 8003670:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003674:	f7fe fe44 	bl	8002300 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e0fd      	b.n	8003882 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003686:	4b81      	ldr	r3, [pc, #516]	; (800388c <HAL_RCC_OscConfig+0x4d4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d106      	bne.n	80036a8 <HAL_RCC_OscConfig+0x2f0>
 800369a:	4b7d      	ldr	r3, [pc, #500]	; (8003890 <HAL_RCC_OscConfig+0x4d8>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	4a7c      	ldr	r2, [pc, #496]	; (8003890 <HAL_RCC_OscConfig+0x4d8>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	6713      	str	r3, [r2, #112]	; 0x70
 80036a6:	e01c      	b.n	80036e2 <HAL_RCC_OscConfig+0x32a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b05      	cmp	r3, #5
 80036ae:	d10c      	bne.n	80036ca <HAL_RCC_OscConfig+0x312>
 80036b0:	4b77      	ldr	r3, [pc, #476]	; (8003890 <HAL_RCC_OscConfig+0x4d8>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b4:	4a76      	ldr	r2, [pc, #472]	; (8003890 <HAL_RCC_OscConfig+0x4d8>)
 80036b6:	f043 0304 	orr.w	r3, r3, #4
 80036ba:	6713      	str	r3, [r2, #112]	; 0x70
 80036bc:	4b74      	ldr	r3, [pc, #464]	; (8003890 <HAL_RCC_OscConfig+0x4d8>)
 80036be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c0:	4a73      	ldr	r2, [pc, #460]	; (8003890 <HAL_RCC_OscConfig+0x4d8>)
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	6713      	str	r3, [r2, #112]	; 0x70
 80036c8:	e00b      	b.n	80036e2 <HAL_RCC_OscConfig+0x32a>
 80036ca:	4b71      	ldr	r3, [pc, #452]	; (8003890 <HAL_RCC_OscConfig+0x4d8>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	4a70      	ldr	r2, [pc, #448]	; (8003890 <HAL_RCC_OscConfig+0x4d8>)
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	6713      	str	r3, [r2, #112]	; 0x70
 80036d6:	4b6e      	ldr	r3, [pc, #440]	; (8003890 <HAL_RCC_OscConfig+0x4d8>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	4a6d      	ldr	r2, [pc, #436]	; (8003890 <HAL_RCC_OscConfig+0x4d8>)
 80036dc:	f023 0304 	bic.w	r3, r3, #4
 80036e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d015      	beq.n	8003716 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fe fe09 	bl	8002300 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f0:	e00a      	b.n	8003708 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f2:	f7fe fe05 	bl	8002300 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003700:	4293      	cmp	r3, r2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e0bc      	b.n	8003882 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003708:	4b61      	ldr	r3, [pc, #388]	; (8003890 <HAL_RCC_OscConfig+0x4d8>)
 800370a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0ee      	beq.n	80036f2 <HAL_RCC_OscConfig+0x33a>
 8003714:	e014      	b.n	8003740 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003716:	f7fe fdf3 	bl	8002300 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371c:	e00a      	b.n	8003734 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800371e:	f7fe fdef 	bl	8002300 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	f241 3288 	movw	r2, #5000	; 0x1388
 800372c:	4293      	cmp	r3, r2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e0a6      	b.n	8003882 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003734:	4b56      	ldr	r3, [pc, #344]	; (8003890 <HAL_RCC_OscConfig+0x4d8>)
 8003736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1ee      	bne.n	800371e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003740:	7dfb      	ldrb	r3, [r7, #23]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d105      	bne.n	8003752 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003746:	4b52      	ldr	r3, [pc, #328]	; (8003890 <HAL_RCC_OscConfig+0x4d8>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	4a51      	ldr	r2, [pc, #324]	; (8003890 <HAL_RCC_OscConfig+0x4d8>)
 800374c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003750:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 8092 	beq.w	8003880 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800375c:	4b4c      	ldr	r3, [pc, #304]	; (8003890 <HAL_RCC_OscConfig+0x4d8>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 030c 	and.w	r3, r3, #12
 8003764:	2b08      	cmp	r3, #8
 8003766:	d05c      	beq.n	8003822 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	2b02      	cmp	r3, #2
 800376e:	d141      	bne.n	80037f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003770:	4b48      	ldr	r3, [pc, #288]	; (8003894 <HAL_RCC_OscConfig+0x4dc>)
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003776:	f7fe fdc3 	bl	8002300 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800377e:	f7fe fdbf 	bl	8002300 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e078      	b.n	8003882 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003790:	4b3f      	ldr	r3, [pc, #252]	; (8003890 <HAL_RCC_OscConfig+0x4d8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1f0      	bne.n	800377e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69da      	ldr	r2, [r3, #28]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	019b      	lsls	r3, r3, #6
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	3b01      	subs	r3, #1
 80037b6:	041b      	lsls	r3, r3, #16
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	061b      	lsls	r3, r3, #24
 80037c0:	4933      	ldr	r1, [pc, #204]	; (8003890 <HAL_RCC_OscConfig+0x4d8>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037c6:	4b33      	ldr	r3, [pc, #204]	; (8003894 <HAL_RCC_OscConfig+0x4dc>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037cc:	f7fe fd98 	bl	8002300 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d4:	f7fe fd94 	bl	8002300 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e04d      	b.n	8003882 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e6:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <HAL_RCC_OscConfig+0x4d8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x41c>
 80037f2:	e045      	b.n	8003880 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f4:	4b27      	ldr	r3, [pc, #156]	; (8003894 <HAL_RCC_OscConfig+0x4dc>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fa:	f7fe fd81 	bl	8002300 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003802:	f7fe fd7d 	bl	8002300 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e036      	b.n	8003882 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003814:	4b1e      	ldr	r3, [pc, #120]	; (8003890 <HAL_RCC_OscConfig+0x4d8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f0      	bne.n	8003802 <HAL_RCC_OscConfig+0x44a>
 8003820:	e02e      	b.n	8003880 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e029      	b.n	8003882 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800382e:	4b18      	ldr	r3, [pc, #96]	; (8003890 <HAL_RCC_OscConfig+0x4d8>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	429a      	cmp	r2, r3
 8003840:	d11c      	bne.n	800387c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384c:	429a      	cmp	r2, r3
 800384e:	d115      	bne.n	800387c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003856:	4013      	ands	r3, r2
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800385c:	4293      	cmp	r3, r2
 800385e:	d10d      	bne.n	800387c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800386a:	429a      	cmp	r2, r3
 800386c:	d106      	bne.n	800387c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003878:	429a      	cmp	r2, r3
 800387a:	d001      	beq.n	8003880 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40007000 	.word	0x40007000
 8003890:	40023800 	.word	0x40023800
 8003894:	42470060 	.word	0x42470060

08003898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0cc      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038ac:	4b68      	ldr	r3, [pc, #416]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d90c      	bls.n	80038d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ba:	4b65      	ldr	r3, [pc, #404]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c2:	4b63      	ldr	r3, [pc, #396]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0b8      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d020      	beq.n	8003922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038ec:	4b59      	ldr	r3, [pc, #356]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4a58      	ldr	r2, [pc, #352]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003904:	4b53      	ldr	r3, [pc, #332]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	4a52      	ldr	r2, [pc, #328]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800390e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003910:	4b50      	ldr	r3, [pc, #320]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	494d      	ldr	r1, [pc, #308]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d044      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d107      	bne.n	8003946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003936:	4b47      	ldr	r3, [pc, #284]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d119      	bne.n	8003976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e07f      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d003      	beq.n	8003956 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003952:	2b03      	cmp	r3, #3
 8003954:	d107      	bne.n	8003966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003956:	4b3f      	ldr	r3, [pc, #252]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d109      	bne.n	8003976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e06f      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003966:	4b3b      	ldr	r3, [pc, #236]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e067      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003976:	4b37      	ldr	r3, [pc, #220]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f023 0203 	bic.w	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	4934      	ldr	r1, [pc, #208]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	4313      	orrs	r3, r2
 8003986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003988:	f7fe fcba 	bl	8002300 <HAL_GetTick>
 800398c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398e:	e00a      	b.n	80039a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003990:	f7fe fcb6 	bl	8002300 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	f241 3288 	movw	r2, #5000	; 0x1388
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e04f      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a6:	4b2b      	ldr	r3, [pc, #172]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 020c 	and.w	r2, r3, #12
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d1eb      	bne.n	8003990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039b8:	4b25      	ldr	r3, [pc, #148]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 030f 	and.w	r3, r3, #15
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d20c      	bcs.n	80039e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c6:	4b22      	ldr	r3, [pc, #136]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ce:	4b20      	ldr	r3, [pc, #128]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e032      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ec:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	4916      	ldr	r1, [pc, #88]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a0a:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	490e      	ldr	r1, [pc, #56]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a1e:	f000 f821 	bl	8003a64 <HAL_RCC_GetSysClockFreq>
 8003a22:	4601      	mov	r1, r0
 8003a24:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	091b      	lsrs	r3, r3, #4
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	4a0a      	ldr	r2, [pc, #40]	; (8003a58 <HAL_RCC_ClockConfig+0x1c0>)
 8003a30:	5cd3      	ldrb	r3, [r2, r3]
 8003a32:	fa21 f303 	lsr.w	r3, r1, r3
 8003a36:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a3a:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe fb0a 	bl	8002058 <HAL_InitTick>

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40023c00 	.word	0x40023c00
 8003a54:	40023800 	.word	0x40023800
 8003a58:	08007ce0 	.word	0x08007ce0
 8003a5c:	20000000 	.word	0x20000000
 8003a60:	20000004 	.word	0x20000004

08003a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	607b      	str	r3, [r7, #4]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	2300      	movs	r3, #0
 8003a74:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a7a:	4b63      	ldr	r3, [pc, #396]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d007      	beq.n	8003a96 <HAL_RCC_GetSysClockFreq+0x32>
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d008      	beq.n	8003a9c <HAL_RCC_GetSysClockFreq+0x38>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f040 80b4 	bne.w	8003bf8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a90:	4b5e      	ldr	r3, [pc, #376]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003a92:	60bb      	str	r3, [r7, #8]
       break;
 8003a94:	e0b3      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a96:	4b5e      	ldr	r3, [pc, #376]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003a98:	60bb      	str	r3, [r7, #8]
      break;
 8003a9a:	e0b0      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a9c:	4b5a      	ldr	r3, [pc, #360]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aa4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aa6:	4b58      	ldr	r3, [pc, #352]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d04a      	beq.n	8003b48 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab2:	4b55      	ldr	r3, [pc, #340]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	099b      	lsrs	r3, r3, #6
 8003ab8:	f04f 0400 	mov.w	r4, #0
 8003abc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	ea03 0501 	and.w	r5, r3, r1
 8003ac8:	ea04 0602 	and.w	r6, r4, r2
 8003acc:	4629      	mov	r1, r5
 8003ace:	4632      	mov	r2, r6
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	f04f 0400 	mov.w	r4, #0
 8003ad8:	0154      	lsls	r4, r2, #5
 8003ada:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ade:	014b      	lsls	r3, r1, #5
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4622      	mov	r2, r4
 8003ae4:	1b49      	subs	r1, r1, r5
 8003ae6:	eb62 0206 	sbc.w	r2, r2, r6
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	f04f 0400 	mov.w	r4, #0
 8003af2:	0194      	lsls	r4, r2, #6
 8003af4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003af8:	018b      	lsls	r3, r1, #6
 8003afa:	1a5b      	subs	r3, r3, r1
 8003afc:	eb64 0402 	sbc.w	r4, r4, r2
 8003b00:	f04f 0100 	mov.w	r1, #0
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	00e2      	lsls	r2, r4, #3
 8003b0a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b0e:	00d9      	lsls	r1, r3, #3
 8003b10:	460b      	mov	r3, r1
 8003b12:	4614      	mov	r4, r2
 8003b14:	195b      	adds	r3, r3, r5
 8003b16:	eb44 0406 	adc.w	r4, r4, r6
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	0262      	lsls	r2, r4, #9
 8003b24:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003b28:	0259      	lsls	r1, r3, #9
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4614      	mov	r4, r2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	4621      	mov	r1, r4
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f04f 0400 	mov.w	r4, #0
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4623      	mov	r3, r4
 8003b3c:	f7fd f894 	bl	8000c68 <__aeabi_uldivmod>
 8003b40:	4603      	mov	r3, r0
 8003b42:	460c      	mov	r4, r1
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	e049      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b48:	4b2f      	ldr	r3, [pc, #188]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	099b      	lsrs	r3, r3, #6
 8003b4e:	f04f 0400 	mov.w	r4, #0
 8003b52:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	ea03 0501 	and.w	r5, r3, r1
 8003b5e:	ea04 0602 	and.w	r6, r4, r2
 8003b62:	4629      	mov	r1, r5
 8003b64:	4632      	mov	r2, r6
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	f04f 0400 	mov.w	r4, #0
 8003b6e:	0154      	lsls	r4, r2, #5
 8003b70:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b74:	014b      	lsls	r3, r1, #5
 8003b76:	4619      	mov	r1, r3
 8003b78:	4622      	mov	r2, r4
 8003b7a:	1b49      	subs	r1, r1, r5
 8003b7c:	eb62 0206 	sbc.w	r2, r2, r6
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	f04f 0400 	mov.w	r4, #0
 8003b88:	0194      	lsls	r4, r2, #6
 8003b8a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b8e:	018b      	lsls	r3, r1, #6
 8003b90:	1a5b      	subs	r3, r3, r1
 8003b92:	eb64 0402 	sbc.w	r4, r4, r2
 8003b96:	f04f 0100 	mov.w	r1, #0
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	00e2      	lsls	r2, r4, #3
 8003ba0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ba4:	00d9      	lsls	r1, r3, #3
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4614      	mov	r4, r2
 8003baa:	195b      	adds	r3, r3, r5
 8003bac:	eb44 0406 	adc.w	r4, r4, r6
 8003bb0:	f04f 0100 	mov.w	r1, #0
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	02a2      	lsls	r2, r4, #10
 8003bba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003bbe:	0299      	lsls	r1, r3, #10
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4614      	mov	r4, r2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f04f 0400 	mov.w	r4, #0
 8003bce:	461a      	mov	r2, r3
 8003bd0:	4623      	mov	r3, r4
 8003bd2:	f7fd f849 	bl	8000c68 <__aeabi_uldivmod>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	460c      	mov	r4, r1
 8003bda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	3301      	adds	r3, #1
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	60bb      	str	r3, [r7, #8]
      break;
 8003bf6:	e002      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bf8:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003bfa:	60bb      	str	r3, [r7, #8]
      break;
 8003bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	00f42400 	.word	0x00f42400
 8003c10:	007a1200 	.word	0x007a1200

08003c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c18:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	20000000 	.word	0x20000000

08003c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c30:	f7ff fff0 	bl	8003c14 <HAL_RCC_GetHCLKFreq>
 8003c34:	4601      	mov	r1, r0
 8003c36:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	0a9b      	lsrs	r3, r3, #10
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	4a03      	ldr	r2, [pc, #12]	; (8003c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c42:	5cd3      	ldrb	r3, [r2, r3]
 8003c44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	08007cf0 	.word	0x08007cf0

08003c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c58:	f7ff ffdc 	bl	8003c14 <HAL_RCC_GetHCLKFreq>
 8003c5c:	4601      	mov	r1, r0
 8003c5e:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	0b5b      	lsrs	r3, r3, #13
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	4a03      	ldr	r2, [pc, #12]	; (8003c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c6a:	5cd3      	ldrb	r3, [r2, r3]
 8003c6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40023800 	.word	0x40023800
 8003c78:	08007cf0 	.word	0x08007cf0

08003c7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	220f      	movs	r2, #15
 8003c8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c8c:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 0203 	and.w	r2, r3, #3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c98:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003cb0:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	08db      	lsrs	r3, r3, #3
 8003cb6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cbe:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <HAL_RCC_GetClockConfig+0x60>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 020f 	and.w	r2, r3, #15
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	601a      	str	r2, [r3, #0]
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40023c00 	.word	0x40023c00

08003ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10b      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d105      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d075      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d14:	4bad      	ldr	r3, [pc, #692]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d1a:	f7fe faf1 	bl	8002300 <HAL_GetTick>
 8003d1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d20:	e008      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d22:	f7fe faed 	bl	8002300 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e18b      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d34:	4ba6      	ldr	r3, [pc, #664]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f0      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d009      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	019a      	lsls	r2, r3, #6
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	071b      	lsls	r3, r3, #28
 8003d58:	499d      	ldr	r1, [pc, #628]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01f      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d6c:	4b98      	ldr	r3, [pc, #608]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d72:	0f1b      	lsrs	r3, r3, #28
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	019a      	lsls	r2, r3, #6
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	061b      	lsls	r3, r3, #24
 8003d86:	431a      	orrs	r2, r3
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	071b      	lsls	r3, r3, #28
 8003d8c:	4990      	ldr	r1, [pc, #576]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d94:	4b8e      	ldr	r3, [pc, #568]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d9a:	f023 021f 	bic.w	r2, r3, #31
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	498a      	ldr	r1, [pc, #552]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00d      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	019a      	lsls	r2, r3, #6
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	061b      	lsls	r3, r3, #24
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	071b      	lsls	r3, r3, #28
 8003dcc:	4980      	ldr	r1, [pc, #512]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003dd4:	4b7d      	ldr	r3, [pc, #500]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dda:	f7fe fa91 	bl	8002300 <HAL_GetTick>
 8003dde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003de0:	e008      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003de2:	f7fe fa8d 	bl	8002300 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e12b      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003df4:	4b76      	ldr	r3, [pc, #472]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d105      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d079      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e18:	4b6e      	ldr	r3, [pc, #440]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e1e:	f7fe fa6f 	bl	8002300 <HAL_GetTick>
 8003e22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e24:	e008      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e26:	f7fe fa6b 	bl	8002300 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e109      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e38:	4b65      	ldr	r3, [pc, #404]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e44:	d0ef      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d020      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e52:	4b5f      	ldr	r3, [pc, #380]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e58:	0f1b      	lsrs	r3, r3, #28
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	019a      	lsls	r2, r3, #6
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	061b      	lsls	r3, r3, #24
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	071b      	lsls	r3, r3, #28
 8003e72:	4957      	ldr	r1, [pc, #348]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e7a:	4b55      	ldr	r3, [pc, #340]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e80:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	021b      	lsls	r3, r3, #8
 8003e8c:	4950      	ldr	r1, [pc, #320]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01e      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ea0:	4b4b      	ldr	r3, [pc, #300]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	0e1b      	lsrs	r3, r3, #24
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	019a      	lsls	r2, r3, #6
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	061b      	lsls	r3, r3, #24
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	071b      	lsls	r3, r3, #28
 8003ec0:	4943      	ldr	r1, [pc, #268]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ec8:	4b41      	ldr	r3, [pc, #260]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ece:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	493e      	ldr	r1, [pc, #248]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ede:	4b3d      	ldr	r3, [pc, #244]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ee4:	f7fe fa0c 	bl	8002300 <HAL_GetTick>
 8003ee8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003eec:	f7fe fa08 	bl	8002300 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e0a6      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003efe:	4b34      	ldr	r3, [pc, #208]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f0a:	d1ef      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 808d 	beq.w	8004034 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	4b2c      	ldr	r3, [pc, #176]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	4a2b      	ldr	r2, [pc, #172]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f28:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2a:	4b29      	ldr	r3, [pc, #164]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f36:	4b28      	ldr	r3, [pc, #160]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a27      	ldr	r2, [pc, #156]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f40:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f42:	f7fe f9dd 	bl	8002300 <HAL_GetTick>
 8003f46:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f48:	e008      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f4a:	f7fe f9d9 	bl	8002300 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e077      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f5c:	4b1e      	ldr	r3, [pc, #120]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0f0      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f68:	4b19      	ldr	r3, [pc, #100]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f70:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d039      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d032      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f86:	4b12      	ldr	r3, [pc, #72]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f8e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f90:	4b12      	ldr	r3, [pc, #72]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f96:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f9c:	4a0c      	ldr	r2, [pc, #48]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fa2:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d11e      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003fae:	f7fe f9a7 	bl	8002300 <HAL_GetTick>
 8003fb2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb4:	e014      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb6:	f7fe f9a3 	bl	8002300 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d90b      	bls.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e03f      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8003fcc:	42470068 	.word	0x42470068
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	42470070 	.word	0x42470070
 8003fd8:	40007000 	.word	0x40007000
 8003fdc:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe0:	4b1c      	ldr	r3, [pc, #112]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0e4      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ff8:	d10d      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003ffa:	4b16      	ldr	r3, [pc, #88]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800400a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800400e:	4911      	ldr	r1, [pc, #68]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004010:	4313      	orrs	r3, r2
 8004012:	608b      	str	r3, [r1, #8]
 8004014:	e005      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004016:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	4a0e      	ldr	r2, [pc, #56]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800401c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004020:	6093      	str	r3, [r2, #8]
 8004022:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004024:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800402e:	4909      	ldr	r1, [pc, #36]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004030:	4313      	orrs	r3, r2
 8004032:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0310 	and.w	r3, r3, #16
 800403c:	2b00      	cmp	r3, #0
 800403e:	d004      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004046:	4b04      	ldr	r3, [pc, #16]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004048:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40023800 	.word	0x40023800
 8004058:	424711e0 	.word	0x424711e0

0800405c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e025      	b.n	80040bc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d106      	bne.n	800408a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7fd ffdd 	bl	8002044 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2202      	movs	r2, #2
 800408e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3304      	adds	r3, #4
 800409a:	4619      	mov	r1, r3
 800409c:	4610      	mov	r0, r2
 800409e:	f001 fca3 	bl	80059e8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	461a      	mov	r2, r3
 80040ac:	6839      	ldr	r1, [r7, #0]
 80040ae:	f001 fd0e 	bl	8005ace <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e056      	b.n	8004184 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d106      	bne.n	80040f6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7fd fe63 	bl	8001dbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2202      	movs	r2, #2
 80040fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800410c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	ea42 0103 	orr.w	r1, r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	0c1b      	lsrs	r3, r3, #16
 8004154:	f003 0104 	and.w	r1, r3, #4
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	69da      	ldr	r2, [r3, #28]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004172:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	4613      	mov	r3, r2
 800419a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_SPI_Transmit+0x22>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e11e      	b.n	80043ec <HAL_SPI_Transmit+0x260>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041b6:	f7fe f8a3 	bl	8002300 <HAL_GetTick>
 80041ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041bc:	88fb      	ldrh	r3, [r7, #6]
 80041be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d002      	beq.n	80041d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041cc:	2302      	movs	r3, #2
 80041ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041d0:	e103      	b.n	80043da <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <HAL_SPI_Transmit+0x52>
 80041d8:	88fb      	ldrh	r3, [r7, #6]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d102      	bne.n	80041e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041e2:	e0fa      	b.n	80043da <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2203      	movs	r2, #3
 80041e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	88fa      	ldrh	r2, [r7, #6]
 80041fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	88fa      	ldrh	r2, [r7, #6]
 8004202:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800422a:	d107      	bne.n	800423c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800423a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004246:	2b40      	cmp	r3, #64	; 0x40
 8004248:	d007      	beq.n	800425a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004258:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004262:	d14b      	bne.n	80042fc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <HAL_SPI_Transmit+0xe6>
 800426c:	8afb      	ldrh	r3, [r7, #22]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d13e      	bne.n	80042f0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	881a      	ldrh	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	1c9a      	adds	r2, r3, #2
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004296:	e02b      	b.n	80042f0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d112      	bne.n	80042cc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	881a      	ldrh	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	1c9a      	adds	r2, r3, #2
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80042ca:	e011      	b.n	80042f0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042cc:	f7fe f818 	bl	8002300 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d803      	bhi.n	80042e4 <HAL_SPI_Transmit+0x158>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e2:	d102      	bne.n	80042ea <HAL_SPI_Transmit+0x15e>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d102      	bne.n	80042f0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80042ee:	e074      	b.n	80043da <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1ce      	bne.n	8004298 <HAL_SPI_Transmit+0x10c>
 80042fa:	e04c      	b.n	8004396 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <HAL_SPI_Transmit+0x17e>
 8004304:	8afb      	ldrh	r3, [r7, #22]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d140      	bne.n	800438c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	330c      	adds	r3, #12
 8004314:	7812      	ldrb	r2, [r2, #0]
 8004316:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004330:	e02c      	b.n	800438c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b02      	cmp	r3, #2
 800433e:	d113      	bne.n	8004368 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	330c      	adds	r3, #12
 800434a:	7812      	ldrb	r2, [r2, #0]
 800434c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800435c:	b29b      	uxth	r3, r3
 800435e:	3b01      	subs	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	86da      	strh	r2, [r3, #54]	; 0x36
 8004366:	e011      	b.n	800438c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004368:	f7fd ffca 	bl	8002300 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d803      	bhi.n	8004380 <HAL_SPI_Transmit+0x1f4>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437e:	d102      	bne.n	8004386 <HAL_SPI_Transmit+0x1fa>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d102      	bne.n	800438c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	77fb      	strb	r3, [r7, #31]
          goto error;
 800438a:	e026      	b.n	80043da <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1cd      	bne.n	8004332 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	6839      	ldr	r1, [r7, #0]
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 fa36 	bl	800480c <SPI_EndRxTxTransaction>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2220      	movs	r2, #32
 80043aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10a      	bne.n	80043ca <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043b4:	2300      	movs	r3, #0
 80043b6:	613b      	str	r3, [r7, #16]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	613b      	str	r3, [r7, #16]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	77fb      	strb	r3, [r7, #31]
 80043d6:	e000      	b.n	80043da <HAL_SPI_Transmit+0x24e>
  }

error:
 80043d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3720      	adds	r7, #32
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08c      	sub	sp, #48	; 0x30
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004402:	2301      	movs	r3, #1
 8004404:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <HAL_SPI_TransmitReceive+0x26>
 8004416:	2302      	movs	r3, #2
 8004418:	e18a      	b.n	8004730 <HAL_SPI_TransmitReceive+0x33c>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004422:	f7fd ff6d 	bl	8002300 <HAL_GetTick>
 8004426:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800442e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004438:	887b      	ldrh	r3, [r7, #2]
 800443a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800443c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004440:	2b01      	cmp	r3, #1
 8004442:	d00f      	beq.n	8004464 <HAL_SPI_TransmitReceive+0x70>
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800444a:	d107      	bne.n	800445c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d103      	bne.n	800445c <HAL_SPI_TransmitReceive+0x68>
 8004454:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004458:	2b04      	cmp	r3, #4
 800445a:	d003      	beq.n	8004464 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800445c:	2302      	movs	r3, #2
 800445e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004462:	e15b      	b.n	800471c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d005      	beq.n	8004476 <HAL_SPI_TransmitReceive+0x82>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <HAL_SPI_TransmitReceive+0x82>
 8004470:	887b      	ldrh	r3, [r7, #2]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d103      	bne.n	800447e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800447c:	e14e      	b.n	800471c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b04      	cmp	r3, #4
 8004488:	d003      	beq.n	8004492 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2205      	movs	r2, #5
 800448e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	887a      	ldrh	r2, [r7, #2]
 80044a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	887a      	ldrh	r2, [r7, #2]
 80044a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	887a      	ldrh	r2, [r7, #2]
 80044b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	887a      	ldrh	r2, [r7, #2]
 80044ba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d2:	2b40      	cmp	r3, #64	; 0x40
 80044d4:	d007      	beq.n	80044e6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ee:	d178      	bne.n	80045e2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <HAL_SPI_TransmitReceive+0x10a>
 80044f8:	8b7b      	ldrh	r3, [r7, #26]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d166      	bne.n	80045cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	881a      	ldrh	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	1c9a      	adds	r2, r3, #2
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004522:	e053      	b.n	80045cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b02      	cmp	r3, #2
 8004530:	d11b      	bne.n	800456a <HAL_SPI_TransmitReceive+0x176>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d016      	beq.n	800456a <HAL_SPI_TransmitReceive+0x176>
 800453c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453e:	2b01      	cmp	r3, #1
 8004540:	d113      	bne.n	800456a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	881a      	ldrh	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	1c9a      	adds	r2, r3, #2
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800455c:	b29b      	uxth	r3, r3
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b01      	cmp	r3, #1
 8004576:	d119      	bne.n	80045ac <HAL_SPI_TransmitReceive+0x1b8>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d014      	beq.n	80045ac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	b292      	uxth	r2, r2
 800458e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	1c9a      	adds	r2, r3, #2
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045a8:	2301      	movs	r3, #1
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045ac:	f7fd fea8 	bl	8002300 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d807      	bhi.n	80045cc <HAL_SPI_TransmitReceive+0x1d8>
 80045bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c2:	d003      	beq.n	80045cc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80045ca:	e0a7      	b.n	800471c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1a6      	bne.n	8004524 <HAL_SPI_TransmitReceive+0x130>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045da:	b29b      	uxth	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1a1      	bne.n	8004524 <HAL_SPI_TransmitReceive+0x130>
 80045e0:	e07c      	b.n	80046dc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <HAL_SPI_TransmitReceive+0x1fc>
 80045ea:	8b7b      	ldrh	r3, [r7, #26]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d16b      	bne.n	80046c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	330c      	adds	r3, #12
 80045fa:	7812      	ldrb	r2, [r2, #0]
 80045fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004616:	e057      	b.n	80046c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b02      	cmp	r3, #2
 8004624:	d11c      	bne.n	8004660 <HAL_SPI_TransmitReceive+0x26c>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800462a:	b29b      	uxth	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d017      	beq.n	8004660 <HAL_SPI_TransmitReceive+0x26c>
 8004630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004632:	2b01      	cmp	r3, #1
 8004634:	d114      	bne.n	8004660 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	330c      	adds	r3, #12
 8004640:	7812      	ldrb	r2, [r2, #0]
 8004642:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b01      	cmp	r3, #1
 800466c:	d119      	bne.n	80046a2 <HAL_SPI_TransmitReceive+0x2ae>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d014      	beq.n	80046a2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800469e:	2301      	movs	r3, #1
 80046a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046a2:	f7fd fe2d 	bl	8002300 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d803      	bhi.n	80046ba <HAL_SPI_TransmitReceive+0x2c6>
 80046b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d102      	bne.n	80046c0 <HAL_SPI_TransmitReceive+0x2cc>
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d103      	bne.n	80046c8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80046c6:	e029      	b.n	800471c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1a2      	bne.n	8004618 <HAL_SPI_TransmitReceive+0x224>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d19d      	bne.n	8004618 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f893 	bl	800480c <SPI_EndRxTxTransaction>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d006      	beq.n	80046fa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80046f8:	e010      	b.n	800471c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10b      	bne.n	800471a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	e000      	b.n	800471c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800471a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800472c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004730:	4618      	mov	r0, r3
 8004732:	3730      	adds	r7, #48	; 0x30
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004748:	e04c      	b.n	80047e4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004750:	d048      	beq.n	80047e4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004752:	f7fd fdd5 	bl	8002300 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d902      	bls.n	8004768 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d13d      	bne.n	80047e4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004776:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004780:	d111      	bne.n	80047a6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800478a:	d004      	beq.n	8004796 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004794:	d107      	bne.n	80047a6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ae:	d10f      	bne.n	80047d0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e00f      	b.n	8004804 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	4013      	ands	r3, r2
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	bf0c      	ite	eq
 80047f4:	2301      	moveq	r3, #1
 80047f6:	2300      	movne	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	461a      	mov	r2, r3
 80047fc:	79fb      	ldrb	r3, [r7, #7]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d1a3      	bne.n	800474a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af02      	add	r7, sp, #8
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004818:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <SPI_EndRxTxTransaction+0x7c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a1b      	ldr	r2, [pc, #108]	; (800488c <SPI_EndRxTxTransaction+0x80>)
 800481e:	fba2 2303 	umull	r2, r3, r2, r3
 8004822:	0d5b      	lsrs	r3, r3, #21
 8004824:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004828:	fb02 f303 	mul.w	r3, r2, r3
 800482c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004836:	d112      	bne.n	800485e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2200      	movs	r2, #0
 8004840:	2180      	movs	r1, #128	; 0x80
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f7ff ff78 	bl	8004738 <SPI_WaitFlagStateUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d016      	beq.n	800487c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004852:	f043 0220 	orr.w	r2, r3, #32
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e00f      	b.n	800487e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	3b01      	subs	r3, #1
 8004868:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004874:	2b80      	cmp	r3, #128	; 0x80
 8004876:	d0f2      	beq.n	800485e <SPI_EndRxTxTransaction+0x52>
 8004878:	e000      	b.n	800487c <SPI_EndRxTxTransaction+0x70>
        break;
 800487a:	bf00      	nop
  }

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000000 	.word	0x20000000
 800488c:	165e9f81 	.word	0x165e9f81

08004890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e01d      	b.n	80048de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fd fac8 	bl	8001e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3304      	adds	r3, #4
 80048cc:	4619      	mov	r1, r3
 80048ce:	4610      	mov	r0, r2
 80048d0:	f000 fa14 	bl	8004cfc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b085      	sub	sp, #20
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0201 	orr.w	r2, r2, #1
 80048fc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b06      	cmp	r3, #6
 800490e:	d007      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b082      	sub	sp, #8
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b02      	cmp	r3, #2
 8004942:	d122      	bne.n	800498a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b02      	cmp	r3, #2
 8004950:	d11b      	bne.n	800498a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f06f 0202 	mvn.w	r2, #2
 800495a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	f003 0303 	and.w	r3, r3, #3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f9a5 	bl	8004cc0 <HAL_TIM_IC_CaptureCallback>
 8004976:	e005      	b.n	8004984 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f997 	bl	8004cac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f9a8 	bl	8004cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b04      	cmp	r3, #4
 8004996:	d122      	bne.n	80049de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d11b      	bne.n	80049de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f06f 0204 	mvn.w	r2, #4
 80049ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2202      	movs	r2, #2
 80049b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f97b 	bl	8004cc0 <HAL_TIM_IC_CaptureCallback>
 80049ca:	e005      	b.n	80049d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f96d 	bl	8004cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f97e 	bl	8004cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d122      	bne.n	8004a32 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b08      	cmp	r3, #8
 80049f8:	d11b      	bne.n	8004a32 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f06f 0208 	mvn.w	r2, #8
 8004a02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2204      	movs	r2, #4
 8004a08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	f003 0303 	and.w	r3, r3, #3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f951 	bl	8004cc0 <HAL_TIM_IC_CaptureCallback>
 8004a1e:	e005      	b.n	8004a2c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f943 	bl	8004cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f954 	bl	8004cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f003 0310 	and.w	r3, r3, #16
 8004a3c:	2b10      	cmp	r3, #16
 8004a3e:	d122      	bne.n	8004a86 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f003 0310 	and.w	r3, r3, #16
 8004a4a:	2b10      	cmp	r3, #16
 8004a4c:	d11b      	bne.n	8004a86 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f06f 0210 	mvn.w	r2, #16
 8004a56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2208      	movs	r2, #8
 8004a5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f927 	bl	8004cc0 <HAL_TIM_IC_CaptureCallback>
 8004a72:	e005      	b.n	8004a80 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f919 	bl	8004cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f92a 	bl	8004cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d10e      	bne.n	8004ab2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d107      	bne.n	8004ab2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f06f 0201 	mvn.w	r2, #1
 8004aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7fc ffdf 	bl	8001a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abc:	2b80      	cmp	r3, #128	; 0x80
 8004abe:	d10e      	bne.n	8004ade <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aca:	2b80      	cmp	r3, #128	; 0x80
 8004acc:	d107      	bne.n	8004ade <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 facf 	bl	800507c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae8:	2b40      	cmp	r3, #64	; 0x40
 8004aea:	d10e      	bne.n	8004b0a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af6:	2b40      	cmp	r3, #64	; 0x40
 8004af8:	d107      	bne.n	8004b0a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f8ef 	bl	8004ce8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d10e      	bne.n	8004b36 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b20      	cmp	r3, #32
 8004b24:	d107      	bne.n	8004b36 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f06f 0220 	mvn.w	r2, #32
 8004b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fa99 	bl	8005068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b36:	bf00      	nop
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d101      	bne.n	8004b56 <HAL_TIM_ConfigClockSource+0x18>
 8004b52:	2302      	movs	r3, #2
 8004b54:	e0a6      	b.n	8004ca4 <HAL_TIM_ConfigClockSource+0x166>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2202      	movs	r2, #2
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b74:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b7c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b40      	cmp	r3, #64	; 0x40
 8004b8c:	d067      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0x120>
 8004b8e:	2b40      	cmp	r3, #64	; 0x40
 8004b90:	d80b      	bhi.n	8004baa <HAL_TIM_ConfigClockSource+0x6c>
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	d073      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0x140>
 8004b96:	2b10      	cmp	r3, #16
 8004b98:	d802      	bhi.n	8004ba0 <HAL_TIM_ConfigClockSource+0x62>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d06f      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004b9e:	e078      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d06c      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0x140>
 8004ba4:	2b30      	cmp	r3, #48	; 0x30
 8004ba6:	d06a      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004ba8:	e073      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004baa:	2b70      	cmp	r3, #112	; 0x70
 8004bac:	d00d      	beq.n	8004bca <HAL_TIM_ConfigClockSource+0x8c>
 8004bae:	2b70      	cmp	r3, #112	; 0x70
 8004bb0:	d804      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x7e>
 8004bb2:	2b50      	cmp	r3, #80	; 0x50
 8004bb4:	d033      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0xe0>
 8004bb6:	2b60      	cmp	r3, #96	; 0x60
 8004bb8:	d041      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004bba:	e06a      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc0:	d066      	beq.n	8004c90 <HAL_TIM_ConfigClockSource+0x152>
 8004bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc6:	d017      	beq.n	8004bf8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004bc8:	e063      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6818      	ldr	r0, [r3, #0]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	6899      	ldr	r1, [r3, #8]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f000 f9a9 	bl	8004f30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	609a      	str	r2, [r3, #8]
      break;
 8004bf6:	e04c      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6818      	ldr	r0, [r3, #0]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	6899      	ldr	r1, [r3, #8]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f000 f992 	bl	8004f30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689a      	ldr	r2, [r3, #8]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c1a:	609a      	str	r2, [r3, #8]
      break;
 8004c1c:	e039      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	6859      	ldr	r1, [r3, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f000 f906 	bl	8004e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2150      	movs	r1, #80	; 0x50
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 f95f 	bl	8004efa <TIM_ITRx_SetConfig>
      break;
 8004c3c:	e029      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6818      	ldr	r0, [r3, #0]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	6859      	ldr	r1, [r3, #4]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f000 f925 	bl	8004e9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2160      	movs	r1, #96	; 0x60
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 f94f 	bl	8004efa <TIM_ITRx_SetConfig>
      break;
 8004c5c:	e019      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6859      	ldr	r1, [r3, #4]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f000 f8e6 	bl	8004e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2140      	movs	r1, #64	; 0x40
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 f93f 	bl	8004efa <TIM_ITRx_SetConfig>
      break;
 8004c7c:	e009      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4619      	mov	r1, r3
 8004c88:	4610      	mov	r0, r2
 8004c8a:	f000 f936 	bl	8004efa <TIM_ITRx_SetConfig>
      break;
 8004c8e:	e000      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004c90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a40      	ldr	r2, [pc, #256]	; (8004e10 <TIM_Base_SetConfig+0x114>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d013      	beq.n	8004d3c <TIM_Base_SetConfig+0x40>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d1a:	d00f      	beq.n	8004d3c <TIM_Base_SetConfig+0x40>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a3d      	ldr	r2, [pc, #244]	; (8004e14 <TIM_Base_SetConfig+0x118>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d00b      	beq.n	8004d3c <TIM_Base_SetConfig+0x40>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a3c      	ldr	r2, [pc, #240]	; (8004e18 <TIM_Base_SetConfig+0x11c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d007      	beq.n	8004d3c <TIM_Base_SetConfig+0x40>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a3b      	ldr	r2, [pc, #236]	; (8004e1c <TIM_Base_SetConfig+0x120>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d003      	beq.n	8004d3c <TIM_Base_SetConfig+0x40>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a3a      	ldr	r2, [pc, #232]	; (8004e20 <TIM_Base_SetConfig+0x124>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d108      	bne.n	8004d4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a2f      	ldr	r2, [pc, #188]	; (8004e10 <TIM_Base_SetConfig+0x114>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d02b      	beq.n	8004dae <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5c:	d027      	beq.n	8004dae <TIM_Base_SetConfig+0xb2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a2c      	ldr	r2, [pc, #176]	; (8004e14 <TIM_Base_SetConfig+0x118>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d023      	beq.n	8004dae <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a2b      	ldr	r2, [pc, #172]	; (8004e18 <TIM_Base_SetConfig+0x11c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d01f      	beq.n	8004dae <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a2a      	ldr	r2, [pc, #168]	; (8004e1c <TIM_Base_SetConfig+0x120>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d01b      	beq.n	8004dae <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a29      	ldr	r2, [pc, #164]	; (8004e20 <TIM_Base_SetConfig+0x124>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d017      	beq.n	8004dae <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a28      	ldr	r2, [pc, #160]	; (8004e24 <TIM_Base_SetConfig+0x128>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d013      	beq.n	8004dae <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a27      	ldr	r2, [pc, #156]	; (8004e28 <TIM_Base_SetConfig+0x12c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00f      	beq.n	8004dae <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a26      	ldr	r2, [pc, #152]	; (8004e2c <TIM_Base_SetConfig+0x130>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00b      	beq.n	8004dae <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a25      	ldr	r2, [pc, #148]	; (8004e30 <TIM_Base_SetConfig+0x134>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d007      	beq.n	8004dae <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a24      	ldr	r2, [pc, #144]	; (8004e34 <TIM_Base_SetConfig+0x138>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d003      	beq.n	8004dae <TIM_Base_SetConfig+0xb2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a23      	ldr	r2, [pc, #140]	; (8004e38 <TIM_Base_SetConfig+0x13c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d108      	bne.n	8004dc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a0a      	ldr	r2, [pc, #40]	; (8004e10 <TIM_Base_SetConfig+0x114>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d003      	beq.n	8004df4 <TIM_Base_SetConfig+0xf8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a0c      	ldr	r2, [pc, #48]	; (8004e20 <TIM_Base_SetConfig+0x124>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d103      	bne.n	8004dfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	615a      	str	r2, [r3, #20]
}
 8004e02:	bf00      	nop
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40010000 	.word	0x40010000
 8004e14:	40000400 	.word	0x40000400
 8004e18:	40000800 	.word	0x40000800
 8004e1c:	40000c00 	.word	0x40000c00
 8004e20:	40010400 	.word	0x40010400
 8004e24:	40014000 	.word	0x40014000
 8004e28:	40014400 	.word	0x40014400
 8004e2c:	40014800 	.word	0x40014800
 8004e30:	40001800 	.word	0x40001800
 8004e34:	40001c00 	.word	0x40001c00
 8004e38:	40002000 	.word	0x40002000

08004e3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	f023 0201 	bic.w	r2, r3, #1
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f023 030a 	bic.w	r3, r3, #10
 8004e78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	621a      	str	r2, [r3, #32]
}
 8004e8e:	bf00      	nop
 8004e90:	371c      	adds	r7, #28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b087      	sub	sp, #28
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	f023 0210 	bic.w	r2, r3, #16
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ec4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	031b      	lsls	r3, r3, #12
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ed6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	621a      	str	r2, [r3, #32]
}
 8004eee:	bf00      	nop
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b085      	sub	sp, #20
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	f043 0307 	orr.w	r3, r3, #7
 8004f1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	609a      	str	r2, [r3, #8]
}
 8004f24:	bf00      	nop
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	021a      	lsls	r2, r3, #8
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	431a      	orrs	r2, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	609a      	str	r2, [r3, #8]
}
 8004f64:	bf00      	nop
 8004f66:	371c      	adds	r7, #28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e05a      	b.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a21      	ldr	r2, [pc, #132]	; (800504c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d022      	beq.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd4:	d01d      	beq.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a1d      	ldr	r2, [pc, #116]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d018      	beq.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a1b      	ldr	r2, [pc, #108]	; (8005054 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d013      	beq.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1a      	ldr	r2, [pc, #104]	; (8005058 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00e      	beq.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a18      	ldr	r2, [pc, #96]	; (800505c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d009      	beq.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a17      	ldr	r2, [pc, #92]	; (8005060 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d004      	beq.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a15      	ldr	r2, [pc, #84]	; (8005064 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d10c      	bne.n	800502c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005018:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	4313      	orrs	r3, r2
 8005022:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40010000 	.word	0x40010000
 8005050:	40000400 	.word	0x40000400
 8005054:	40000800 	.word	0x40000800
 8005058:	40000c00 	.word	0x40000c00
 800505c:	40010400 	.word	0x40010400
 8005060:	40014000 	.word	0x40014000
 8005064:	40001800 	.word	0x40001800

08005068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e03f      	b.n	8005122 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d106      	bne.n	80050bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7fc feea 	bl	8001e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2224      	movs	r2, #36	; 0x24
 80050c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f90b 	bl	80052f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695a      	ldr	r2, [r3, #20]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005108:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b088      	sub	sp, #32
 800512e:	af02      	add	r7, sp, #8
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	603b      	str	r3, [r7, #0]
 8005136:	4613      	mov	r3, r2
 8005138:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800513a:	2300      	movs	r3, #0
 800513c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b20      	cmp	r3, #32
 8005148:	f040 8083 	bne.w	8005252 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <HAL_UART_Transmit+0x2e>
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e07b      	b.n	8005254 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <HAL_UART_Transmit+0x40>
 8005166:	2302      	movs	r3, #2
 8005168:	e074      	b.n	8005254 <HAL_UART_Transmit+0x12a>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2221      	movs	r2, #33	; 0x21
 800517c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005180:	f7fd f8be 	bl	8002300 <HAL_GetTick>
 8005184:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	88fa      	ldrh	r2, [r7, #6]
 800518a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	88fa      	ldrh	r2, [r7, #6]
 8005190:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800519a:	e042      	b.n	8005222 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b2:	d122      	bne.n	80051fa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2200      	movs	r2, #0
 80051bc:	2180      	movs	r1, #128	; 0x80
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 f84c 	bl	800525c <UART_WaitOnFlagUntilTimeout>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e042      	b.n	8005254 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051e0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d103      	bne.n	80051f2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	3302      	adds	r3, #2
 80051ee:	60bb      	str	r3, [r7, #8]
 80051f0:	e017      	b.n	8005222 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	3301      	adds	r3, #1
 80051f6:	60bb      	str	r3, [r7, #8]
 80051f8:	e013      	b.n	8005222 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2200      	movs	r2, #0
 8005202:	2180      	movs	r1, #128	; 0x80
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 f829 	bl	800525c <UART_WaitOnFlagUntilTimeout>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e01f      	b.n	8005254 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	60ba      	str	r2, [r7, #8]
 800521a:	781a      	ldrb	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005226:	b29b      	uxth	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1b7      	bne.n	800519c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2200      	movs	r2, #0
 8005234:	2140      	movs	r1, #64	; 0x40
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 f810 	bl	800525c <UART_WaitOnFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e006      	b.n	8005254 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2220      	movs	r2, #32
 800524a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800524e:	2300      	movs	r3, #0
 8005250:	e000      	b.n	8005254 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005252:	2302      	movs	r3, #2
  }
}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	603b      	str	r3, [r7, #0]
 8005268:	4613      	mov	r3, r2
 800526a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800526c:	e02c      	b.n	80052c8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005274:	d028      	beq.n	80052c8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d007      	beq.n	800528c <UART_WaitOnFlagUntilTimeout+0x30>
 800527c:	f7fd f840 	bl	8002300 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	429a      	cmp	r2, r3
 800528a:	d21d      	bcs.n	80052c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800529a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695a      	ldr	r2, [r3, #20]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0201 	bic.w	r2, r2, #1
 80052aa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e00f      	b.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	4013      	ands	r3, r2
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	bf0c      	ite	eq
 80052d8:	2301      	moveq	r3, #1
 80052da:	2300      	movne	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	461a      	mov	r2, r3
 80052e0:	79fb      	ldrb	r3, [r7, #7]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d0c3      	beq.n	800526e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f4:	b085      	sub	sp, #20
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	431a      	orrs	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	4313      	orrs	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005332:	f023 030c 	bic.w	r3, r3, #12
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	68f9      	ldr	r1, [r7, #12]
 800533c:	430b      	orrs	r3, r1
 800533e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800535e:	f040 818b 	bne.w	8005678 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4ac1      	ldr	r2, [pc, #772]	; (800566c <UART_SetConfig+0x37c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d005      	beq.n	8005378 <UART_SetConfig+0x88>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4abf      	ldr	r2, [pc, #764]	; (8005670 <UART_SetConfig+0x380>)
 8005372:	4293      	cmp	r3, r2
 8005374:	f040 80bd 	bne.w	80054f2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005378:	f7fe fc6c 	bl	8003c54 <HAL_RCC_GetPCLK2Freq>
 800537c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	461d      	mov	r5, r3
 8005382:	f04f 0600 	mov.w	r6, #0
 8005386:	46a8      	mov	r8, r5
 8005388:	46b1      	mov	r9, r6
 800538a:	eb18 0308 	adds.w	r3, r8, r8
 800538e:	eb49 0409 	adc.w	r4, r9, r9
 8005392:	4698      	mov	r8, r3
 8005394:	46a1      	mov	r9, r4
 8005396:	eb18 0805 	adds.w	r8, r8, r5
 800539a:	eb49 0906 	adc.w	r9, r9, r6
 800539e:	f04f 0100 	mov.w	r1, #0
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80053aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80053ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80053b2:	4688      	mov	r8, r1
 80053b4:	4691      	mov	r9, r2
 80053b6:	eb18 0005 	adds.w	r0, r8, r5
 80053ba:	eb49 0106 	adc.w	r1, r9, r6
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	461d      	mov	r5, r3
 80053c4:	f04f 0600 	mov.w	r6, #0
 80053c8:	196b      	adds	r3, r5, r5
 80053ca:	eb46 0406 	adc.w	r4, r6, r6
 80053ce:	461a      	mov	r2, r3
 80053d0:	4623      	mov	r3, r4
 80053d2:	f7fb fc49 	bl	8000c68 <__aeabi_uldivmod>
 80053d6:	4603      	mov	r3, r0
 80053d8:	460c      	mov	r4, r1
 80053da:	461a      	mov	r2, r3
 80053dc:	4ba5      	ldr	r3, [pc, #660]	; (8005674 <UART_SetConfig+0x384>)
 80053de:	fba3 2302 	umull	r2, r3, r3, r2
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	461d      	mov	r5, r3
 80053ec:	f04f 0600 	mov.w	r6, #0
 80053f0:	46a9      	mov	r9, r5
 80053f2:	46b2      	mov	sl, r6
 80053f4:	eb19 0309 	adds.w	r3, r9, r9
 80053f8:	eb4a 040a 	adc.w	r4, sl, sl
 80053fc:	4699      	mov	r9, r3
 80053fe:	46a2      	mov	sl, r4
 8005400:	eb19 0905 	adds.w	r9, r9, r5
 8005404:	eb4a 0a06 	adc.w	sl, sl, r6
 8005408:	f04f 0100 	mov.w	r1, #0
 800540c:	f04f 0200 	mov.w	r2, #0
 8005410:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005414:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005418:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800541c:	4689      	mov	r9, r1
 800541e:	4692      	mov	sl, r2
 8005420:	eb19 0005 	adds.w	r0, r9, r5
 8005424:	eb4a 0106 	adc.w	r1, sl, r6
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	461d      	mov	r5, r3
 800542e:	f04f 0600 	mov.w	r6, #0
 8005432:	196b      	adds	r3, r5, r5
 8005434:	eb46 0406 	adc.w	r4, r6, r6
 8005438:	461a      	mov	r2, r3
 800543a:	4623      	mov	r3, r4
 800543c:	f7fb fc14 	bl	8000c68 <__aeabi_uldivmod>
 8005440:	4603      	mov	r3, r0
 8005442:	460c      	mov	r4, r1
 8005444:	461a      	mov	r2, r3
 8005446:	4b8b      	ldr	r3, [pc, #556]	; (8005674 <UART_SetConfig+0x384>)
 8005448:	fba3 1302 	umull	r1, r3, r3, r2
 800544c:	095b      	lsrs	r3, r3, #5
 800544e:	2164      	movs	r1, #100	; 0x64
 8005450:	fb01 f303 	mul.w	r3, r1, r3
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	3332      	adds	r3, #50	; 0x32
 800545a:	4a86      	ldr	r2, [pc, #536]	; (8005674 <UART_SetConfig+0x384>)
 800545c:	fba2 2303 	umull	r2, r3, r2, r3
 8005460:	095b      	lsrs	r3, r3, #5
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005468:	4498      	add	r8, r3
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	461d      	mov	r5, r3
 800546e:	f04f 0600 	mov.w	r6, #0
 8005472:	46a9      	mov	r9, r5
 8005474:	46b2      	mov	sl, r6
 8005476:	eb19 0309 	adds.w	r3, r9, r9
 800547a:	eb4a 040a 	adc.w	r4, sl, sl
 800547e:	4699      	mov	r9, r3
 8005480:	46a2      	mov	sl, r4
 8005482:	eb19 0905 	adds.w	r9, r9, r5
 8005486:	eb4a 0a06 	adc.w	sl, sl, r6
 800548a:	f04f 0100 	mov.w	r1, #0
 800548e:	f04f 0200 	mov.w	r2, #0
 8005492:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005496:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800549a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800549e:	4689      	mov	r9, r1
 80054a0:	4692      	mov	sl, r2
 80054a2:	eb19 0005 	adds.w	r0, r9, r5
 80054a6:	eb4a 0106 	adc.w	r1, sl, r6
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	461d      	mov	r5, r3
 80054b0:	f04f 0600 	mov.w	r6, #0
 80054b4:	196b      	adds	r3, r5, r5
 80054b6:	eb46 0406 	adc.w	r4, r6, r6
 80054ba:	461a      	mov	r2, r3
 80054bc:	4623      	mov	r3, r4
 80054be:	f7fb fbd3 	bl	8000c68 <__aeabi_uldivmod>
 80054c2:	4603      	mov	r3, r0
 80054c4:	460c      	mov	r4, r1
 80054c6:	461a      	mov	r2, r3
 80054c8:	4b6a      	ldr	r3, [pc, #424]	; (8005674 <UART_SetConfig+0x384>)
 80054ca:	fba3 1302 	umull	r1, r3, r3, r2
 80054ce:	095b      	lsrs	r3, r3, #5
 80054d0:	2164      	movs	r1, #100	; 0x64
 80054d2:	fb01 f303 	mul.w	r3, r1, r3
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	3332      	adds	r3, #50	; 0x32
 80054dc:	4a65      	ldr	r2, [pc, #404]	; (8005674 <UART_SetConfig+0x384>)
 80054de:	fba2 2303 	umull	r2, r3, r2, r3
 80054e2:	095b      	lsrs	r3, r3, #5
 80054e4:	f003 0207 	and.w	r2, r3, #7
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4442      	add	r2, r8
 80054ee:	609a      	str	r2, [r3, #8]
 80054f0:	e26f      	b.n	80059d2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054f2:	f7fe fb9b 	bl	8003c2c <HAL_RCC_GetPCLK1Freq>
 80054f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	461d      	mov	r5, r3
 80054fc:	f04f 0600 	mov.w	r6, #0
 8005500:	46a8      	mov	r8, r5
 8005502:	46b1      	mov	r9, r6
 8005504:	eb18 0308 	adds.w	r3, r8, r8
 8005508:	eb49 0409 	adc.w	r4, r9, r9
 800550c:	4698      	mov	r8, r3
 800550e:	46a1      	mov	r9, r4
 8005510:	eb18 0805 	adds.w	r8, r8, r5
 8005514:	eb49 0906 	adc.w	r9, r9, r6
 8005518:	f04f 0100 	mov.w	r1, #0
 800551c:	f04f 0200 	mov.w	r2, #0
 8005520:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005524:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005528:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800552c:	4688      	mov	r8, r1
 800552e:	4691      	mov	r9, r2
 8005530:	eb18 0005 	adds.w	r0, r8, r5
 8005534:	eb49 0106 	adc.w	r1, r9, r6
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	461d      	mov	r5, r3
 800553e:	f04f 0600 	mov.w	r6, #0
 8005542:	196b      	adds	r3, r5, r5
 8005544:	eb46 0406 	adc.w	r4, r6, r6
 8005548:	461a      	mov	r2, r3
 800554a:	4623      	mov	r3, r4
 800554c:	f7fb fb8c 	bl	8000c68 <__aeabi_uldivmod>
 8005550:	4603      	mov	r3, r0
 8005552:	460c      	mov	r4, r1
 8005554:	461a      	mov	r2, r3
 8005556:	4b47      	ldr	r3, [pc, #284]	; (8005674 <UART_SetConfig+0x384>)
 8005558:	fba3 2302 	umull	r2, r3, r3, r2
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	461d      	mov	r5, r3
 8005566:	f04f 0600 	mov.w	r6, #0
 800556a:	46a9      	mov	r9, r5
 800556c:	46b2      	mov	sl, r6
 800556e:	eb19 0309 	adds.w	r3, r9, r9
 8005572:	eb4a 040a 	adc.w	r4, sl, sl
 8005576:	4699      	mov	r9, r3
 8005578:	46a2      	mov	sl, r4
 800557a:	eb19 0905 	adds.w	r9, r9, r5
 800557e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005582:	f04f 0100 	mov.w	r1, #0
 8005586:	f04f 0200 	mov.w	r2, #0
 800558a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800558e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005592:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005596:	4689      	mov	r9, r1
 8005598:	4692      	mov	sl, r2
 800559a:	eb19 0005 	adds.w	r0, r9, r5
 800559e:	eb4a 0106 	adc.w	r1, sl, r6
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	461d      	mov	r5, r3
 80055a8:	f04f 0600 	mov.w	r6, #0
 80055ac:	196b      	adds	r3, r5, r5
 80055ae:	eb46 0406 	adc.w	r4, r6, r6
 80055b2:	461a      	mov	r2, r3
 80055b4:	4623      	mov	r3, r4
 80055b6:	f7fb fb57 	bl	8000c68 <__aeabi_uldivmod>
 80055ba:	4603      	mov	r3, r0
 80055bc:	460c      	mov	r4, r1
 80055be:	461a      	mov	r2, r3
 80055c0:	4b2c      	ldr	r3, [pc, #176]	; (8005674 <UART_SetConfig+0x384>)
 80055c2:	fba3 1302 	umull	r1, r3, r3, r2
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	2164      	movs	r1, #100	; 0x64
 80055ca:	fb01 f303 	mul.w	r3, r1, r3
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	3332      	adds	r3, #50	; 0x32
 80055d4:	4a27      	ldr	r2, [pc, #156]	; (8005674 <UART_SetConfig+0x384>)
 80055d6:	fba2 2303 	umull	r2, r3, r2, r3
 80055da:	095b      	lsrs	r3, r3, #5
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055e2:	4498      	add	r8, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	461d      	mov	r5, r3
 80055e8:	f04f 0600 	mov.w	r6, #0
 80055ec:	46a9      	mov	r9, r5
 80055ee:	46b2      	mov	sl, r6
 80055f0:	eb19 0309 	adds.w	r3, r9, r9
 80055f4:	eb4a 040a 	adc.w	r4, sl, sl
 80055f8:	4699      	mov	r9, r3
 80055fa:	46a2      	mov	sl, r4
 80055fc:	eb19 0905 	adds.w	r9, r9, r5
 8005600:	eb4a 0a06 	adc.w	sl, sl, r6
 8005604:	f04f 0100 	mov.w	r1, #0
 8005608:	f04f 0200 	mov.w	r2, #0
 800560c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005610:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005614:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005618:	4689      	mov	r9, r1
 800561a:	4692      	mov	sl, r2
 800561c:	eb19 0005 	adds.w	r0, r9, r5
 8005620:	eb4a 0106 	adc.w	r1, sl, r6
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	461d      	mov	r5, r3
 800562a:	f04f 0600 	mov.w	r6, #0
 800562e:	196b      	adds	r3, r5, r5
 8005630:	eb46 0406 	adc.w	r4, r6, r6
 8005634:	461a      	mov	r2, r3
 8005636:	4623      	mov	r3, r4
 8005638:	f7fb fb16 	bl	8000c68 <__aeabi_uldivmod>
 800563c:	4603      	mov	r3, r0
 800563e:	460c      	mov	r4, r1
 8005640:	461a      	mov	r2, r3
 8005642:	4b0c      	ldr	r3, [pc, #48]	; (8005674 <UART_SetConfig+0x384>)
 8005644:	fba3 1302 	umull	r1, r3, r3, r2
 8005648:	095b      	lsrs	r3, r3, #5
 800564a:	2164      	movs	r1, #100	; 0x64
 800564c:	fb01 f303 	mul.w	r3, r1, r3
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	3332      	adds	r3, #50	; 0x32
 8005656:	4a07      	ldr	r2, [pc, #28]	; (8005674 <UART_SetConfig+0x384>)
 8005658:	fba2 2303 	umull	r2, r3, r2, r3
 800565c:	095b      	lsrs	r3, r3, #5
 800565e:	f003 0207 	and.w	r2, r3, #7
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4442      	add	r2, r8
 8005668:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800566a:	e1b2      	b.n	80059d2 <UART_SetConfig+0x6e2>
 800566c:	40011000 	.word	0x40011000
 8005670:	40011400 	.word	0x40011400
 8005674:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4ad7      	ldr	r2, [pc, #860]	; (80059dc <UART_SetConfig+0x6ec>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d005      	beq.n	800568e <UART_SetConfig+0x39e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4ad6      	ldr	r2, [pc, #856]	; (80059e0 <UART_SetConfig+0x6f0>)
 8005688:	4293      	cmp	r3, r2
 800568a:	f040 80d1 	bne.w	8005830 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800568e:	f7fe fae1 	bl	8003c54 <HAL_RCC_GetPCLK2Freq>
 8005692:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	469a      	mov	sl, r3
 8005698:	f04f 0b00 	mov.w	fp, #0
 800569c:	46d0      	mov	r8, sl
 800569e:	46d9      	mov	r9, fp
 80056a0:	eb18 0308 	adds.w	r3, r8, r8
 80056a4:	eb49 0409 	adc.w	r4, r9, r9
 80056a8:	4698      	mov	r8, r3
 80056aa:	46a1      	mov	r9, r4
 80056ac:	eb18 080a 	adds.w	r8, r8, sl
 80056b0:	eb49 090b 	adc.w	r9, r9, fp
 80056b4:	f04f 0100 	mov.w	r1, #0
 80056b8:	f04f 0200 	mov.w	r2, #0
 80056bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80056c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80056c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80056c8:	4688      	mov	r8, r1
 80056ca:	4691      	mov	r9, r2
 80056cc:	eb1a 0508 	adds.w	r5, sl, r8
 80056d0:	eb4b 0609 	adc.w	r6, fp, r9
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	4619      	mov	r1, r3
 80056da:	f04f 0200 	mov.w	r2, #0
 80056de:	f04f 0300 	mov.w	r3, #0
 80056e2:	f04f 0400 	mov.w	r4, #0
 80056e6:	0094      	lsls	r4, r2, #2
 80056e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80056ec:	008b      	lsls	r3, r1, #2
 80056ee:	461a      	mov	r2, r3
 80056f0:	4623      	mov	r3, r4
 80056f2:	4628      	mov	r0, r5
 80056f4:	4631      	mov	r1, r6
 80056f6:	f7fb fab7 	bl	8000c68 <__aeabi_uldivmod>
 80056fa:	4603      	mov	r3, r0
 80056fc:	460c      	mov	r4, r1
 80056fe:	461a      	mov	r2, r3
 8005700:	4bb8      	ldr	r3, [pc, #736]	; (80059e4 <UART_SetConfig+0x6f4>)
 8005702:	fba3 2302 	umull	r2, r3, r3, r2
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	469b      	mov	fp, r3
 8005710:	f04f 0c00 	mov.w	ip, #0
 8005714:	46d9      	mov	r9, fp
 8005716:	46e2      	mov	sl, ip
 8005718:	eb19 0309 	adds.w	r3, r9, r9
 800571c:	eb4a 040a 	adc.w	r4, sl, sl
 8005720:	4699      	mov	r9, r3
 8005722:	46a2      	mov	sl, r4
 8005724:	eb19 090b 	adds.w	r9, r9, fp
 8005728:	eb4a 0a0c 	adc.w	sl, sl, ip
 800572c:	f04f 0100 	mov.w	r1, #0
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005738:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800573c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005740:	4689      	mov	r9, r1
 8005742:	4692      	mov	sl, r2
 8005744:	eb1b 0509 	adds.w	r5, fp, r9
 8005748:	eb4c 060a 	adc.w	r6, ip, sl
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	4619      	mov	r1, r3
 8005752:	f04f 0200 	mov.w	r2, #0
 8005756:	f04f 0300 	mov.w	r3, #0
 800575a:	f04f 0400 	mov.w	r4, #0
 800575e:	0094      	lsls	r4, r2, #2
 8005760:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005764:	008b      	lsls	r3, r1, #2
 8005766:	461a      	mov	r2, r3
 8005768:	4623      	mov	r3, r4
 800576a:	4628      	mov	r0, r5
 800576c:	4631      	mov	r1, r6
 800576e:	f7fb fa7b 	bl	8000c68 <__aeabi_uldivmod>
 8005772:	4603      	mov	r3, r0
 8005774:	460c      	mov	r4, r1
 8005776:	461a      	mov	r2, r3
 8005778:	4b9a      	ldr	r3, [pc, #616]	; (80059e4 <UART_SetConfig+0x6f4>)
 800577a:	fba3 1302 	umull	r1, r3, r3, r2
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	2164      	movs	r1, #100	; 0x64
 8005782:	fb01 f303 	mul.w	r3, r1, r3
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	3332      	adds	r3, #50	; 0x32
 800578c:	4a95      	ldr	r2, [pc, #596]	; (80059e4 <UART_SetConfig+0x6f4>)
 800578e:	fba2 2303 	umull	r2, r3, r2, r3
 8005792:	095b      	lsrs	r3, r3, #5
 8005794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005798:	4498      	add	r8, r3
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	469b      	mov	fp, r3
 800579e:	f04f 0c00 	mov.w	ip, #0
 80057a2:	46d9      	mov	r9, fp
 80057a4:	46e2      	mov	sl, ip
 80057a6:	eb19 0309 	adds.w	r3, r9, r9
 80057aa:	eb4a 040a 	adc.w	r4, sl, sl
 80057ae:	4699      	mov	r9, r3
 80057b0:	46a2      	mov	sl, r4
 80057b2:	eb19 090b 	adds.w	r9, r9, fp
 80057b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80057ba:	f04f 0100 	mov.w	r1, #0
 80057be:	f04f 0200 	mov.w	r2, #0
 80057c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057ce:	4689      	mov	r9, r1
 80057d0:	4692      	mov	sl, r2
 80057d2:	eb1b 0509 	adds.w	r5, fp, r9
 80057d6:	eb4c 060a 	adc.w	r6, ip, sl
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	4619      	mov	r1, r3
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	f04f 0300 	mov.w	r3, #0
 80057e8:	f04f 0400 	mov.w	r4, #0
 80057ec:	0094      	lsls	r4, r2, #2
 80057ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057f2:	008b      	lsls	r3, r1, #2
 80057f4:	461a      	mov	r2, r3
 80057f6:	4623      	mov	r3, r4
 80057f8:	4628      	mov	r0, r5
 80057fa:	4631      	mov	r1, r6
 80057fc:	f7fb fa34 	bl	8000c68 <__aeabi_uldivmod>
 8005800:	4603      	mov	r3, r0
 8005802:	460c      	mov	r4, r1
 8005804:	461a      	mov	r2, r3
 8005806:	4b77      	ldr	r3, [pc, #476]	; (80059e4 <UART_SetConfig+0x6f4>)
 8005808:	fba3 1302 	umull	r1, r3, r3, r2
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	2164      	movs	r1, #100	; 0x64
 8005810:	fb01 f303 	mul.w	r3, r1, r3
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	3332      	adds	r3, #50	; 0x32
 800581a:	4a72      	ldr	r2, [pc, #456]	; (80059e4 <UART_SetConfig+0x6f4>)
 800581c:	fba2 2303 	umull	r2, r3, r2, r3
 8005820:	095b      	lsrs	r3, r3, #5
 8005822:	f003 020f 	and.w	r2, r3, #15
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4442      	add	r2, r8
 800582c:	609a      	str	r2, [r3, #8]
 800582e:	e0d0      	b.n	80059d2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005830:	f7fe f9fc 	bl	8003c2c <HAL_RCC_GetPCLK1Freq>
 8005834:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	469a      	mov	sl, r3
 800583a:	f04f 0b00 	mov.w	fp, #0
 800583e:	46d0      	mov	r8, sl
 8005840:	46d9      	mov	r9, fp
 8005842:	eb18 0308 	adds.w	r3, r8, r8
 8005846:	eb49 0409 	adc.w	r4, r9, r9
 800584a:	4698      	mov	r8, r3
 800584c:	46a1      	mov	r9, r4
 800584e:	eb18 080a 	adds.w	r8, r8, sl
 8005852:	eb49 090b 	adc.w	r9, r9, fp
 8005856:	f04f 0100 	mov.w	r1, #0
 800585a:	f04f 0200 	mov.w	r2, #0
 800585e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005862:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005866:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800586a:	4688      	mov	r8, r1
 800586c:	4691      	mov	r9, r2
 800586e:	eb1a 0508 	adds.w	r5, sl, r8
 8005872:	eb4b 0609 	adc.w	r6, fp, r9
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	4619      	mov	r1, r3
 800587c:	f04f 0200 	mov.w	r2, #0
 8005880:	f04f 0300 	mov.w	r3, #0
 8005884:	f04f 0400 	mov.w	r4, #0
 8005888:	0094      	lsls	r4, r2, #2
 800588a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800588e:	008b      	lsls	r3, r1, #2
 8005890:	461a      	mov	r2, r3
 8005892:	4623      	mov	r3, r4
 8005894:	4628      	mov	r0, r5
 8005896:	4631      	mov	r1, r6
 8005898:	f7fb f9e6 	bl	8000c68 <__aeabi_uldivmod>
 800589c:	4603      	mov	r3, r0
 800589e:	460c      	mov	r4, r1
 80058a0:	461a      	mov	r2, r3
 80058a2:	4b50      	ldr	r3, [pc, #320]	; (80059e4 <UART_SetConfig+0x6f4>)
 80058a4:	fba3 2302 	umull	r2, r3, r3, r2
 80058a8:	095b      	lsrs	r3, r3, #5
 80058aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	469b      	mov	fp, r3
 80058b2:	f04f 0c00 	mov.w	ip, #0
 80058b6:	46d9      	mov	r9, fp
 80058b8:	46e2      	mov	sl, ip
 80058ba:	eb19 0309 	adds.w	r3, r9, r9
 80058be:	eb4a 040a 	adc.w	r4, sl, sl
 80058c2:	4699      	mov	r9, r3
 80058c4:	46a2      	mov	sl, r4
 80058c6:	eb19 090b 	adds.w	r9, r9, fp
 80058ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80058ce:	f04f 0100 	mov.w	r1, #0
 80058d2:	f04f 0200 	mov.w	r2, #0
 80058d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058e2:	4689      	mov	r9, r1
 80058e4:	4692      	mov	sl, r2
 80058e6:	eb1b 0509 	adds.w	r5, fp, r9
 80058ea:	eb4c 060a 	adc.w	r6, ip, sl
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	4619      	mov	r1, r3
 80058f4:	f04f 0200 	mov.w	r2, #0
 80058f8:	f04f 0300 	mov.w	r3, #0
 80058fc:	f04f 0400 	mov.w	r4, #0
 8005900:	0094      	lsls	r4, r2, #2
 8005902:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005906:	008b      	lsls	r3, r1, #2
 8005908:	461a      	mov	r2, r3
 800590a:	4623      	mov	r3, r4
 800590c:	4628      	mov	r0, r5
 800590e:	4631      	mov	r1, r6
 8005910:	f7fb f9aa 	bl	8000c68 <__aeabi_uldivmod>
 8005914:	4603      	mov	r3, r0
 8005916:	460c      	mov	r4, r1
 8005918:	461a      	mov	r2, r3
 800591a:	4b32      	ldr	r3, [pc, #200]	; (80059e4 <UART_SetConfig+0x6f4>)
 800591c:	fba3 1302 	umull	r1, r3, r3, r2
 8005920:	095b      	lsrs	r3, r3, #5
 8005922:	2164      	movs	r1, #100	; 0x64
 8005924:	fb01 f303 	mul.w	r3, r1, r3
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	3332      	adds	r3, #50	; 0x32
 800592e:	4a2d      	ldr	r2, [pc, #180]	; (80059e4 <UART_SetConfig+0x6f4>)
 8005930:	fba2 2303 	umull	r2, r3, r2, r3
 8005934:	095b      	lsrs	r3, r3, #5
 8005936:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800593a:	4498      	add	r8, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	469b      	mov	fp, r3
 8005940:	f04f 0c00 	mov.w	ip, #0
 8005944:	46d9      	mov	r9, fp
 8005946:	46e2      	mov	sl, ip
 8005948:	eb19 0309 	adds.w	r3, r9, r9
 800594c:	eb4a 040a 	adc.w	r4, sl, sl
 8005950:	4699      	mov	r9, r3
 8005952:	46a2      	mov	sl, r4
 8005954:	eb19 090b 	adds.w	r9, r9, fp
 8005958:	eb4a 0a0c 	adc.w	sl, sl, ip
 800595c:	f04f 0100 	mov.w	r1, #0
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005968:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800596c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005970:	4689      	mov	r9, r1
 8005972:	4692      	mov	sl, r2
 8005974:	eb1b 0509 	adds.w	r5, fp, r9
 8005978:	eb4c 060a 	adc.w	r6, ip, sl
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	4619      	mov	r1, r3
 8005982:	f04f 0200 	mov.w	r2, #0
 8005986:	f04f 0300 	mov.w	r3, #0
 800598a:	f04f 0400 	mov.w	r4, #0
 800598e:	0094      	lsls	r4, r2, #2
 8005990:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005994:	008b      	lsls	r3, r1, #2
 8005996:	461a      	mov	r2, r3
 8005998:	4623      	mov	r3, r4
 800599a:	4628      	mov	r0, r5
 800599c:	4631      	mov	r1, r6
 800599e:	f7fb f963 	bl	8000c68 <__aeabi_uldivmod>
 80059a2:	4603      	mov	r3, r0
 80059a4:	460c      	mov	r4, r1
 80059a6:	461a      	mov	r2, r3
 80059a8:	4b0e      	ldr	r3, [pc, #56]	; (80059e4 <UART_SetConfig+0x6f4>)
 80059aa:	fba3 1302 	umull	r1, r3, r3, r2
 80059ae:	095b      	lsrs	r3, r3, #5
 80059b0:	2164      	movs	r1, #100	; 0x64
 80059b2:	fb01 f303 	mul.w	r3, r1, r3
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	3332      	adds	r3, #50	; 0x32
 80059bc:	4a09      	ldr	r2, [pc, #36]	; (80059e4 <UART_SetConfig+0x6f4>)
 80059be:	fba2 2303 	umull	r2, r3, r2, r3
 80059c2:	095b      	lsrs	r3, r3, #5
 80059c4:	f003 020f 	and.w	r2, r3, #15
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4442      	add	r2, r8
 80059ce:	609a      	str	r2, [r3, #8]
}
 80059d0:	e7ff      	b.n	80059d2 <UART_SetConfig+0x6e2>
 80059d2:	bf00      	nop
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059dc:	40011000 	.word	0x40011000
 80059e0:	40011400 	.word	0x40011400
 80059e4:	51eb851f 	.word	0x51eb851f

080059e8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d029      	beq.n	8005a56 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005a0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a12:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a1c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8005a22:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8005a28:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8005a2e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8005a34:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8005a3a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8005a40:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8005a46:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	e034      	b.n	8005ac0 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a62:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005a6c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005a72:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005a86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a8a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a94:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8005a9a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8005aa0:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8005aa6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8005aac:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b087      	sub	sp, #28
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d02e      	beq.n	8005b46 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005af4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005b04:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005b0e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005b18:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005b22:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005b2c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005b36:	4313      	orrs	r3, r2
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	609a      	str	r2, [r3, #8]
 8005b44:	e03b      	b.n	8005bbe <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b56:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005b7c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005b8c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	3b01      	subs	r3, #1
 8005b94:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005b96:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005ba0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005baa:	4313      	orrs	r3, r2
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	371c      	adds	r7, #28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <__errno>:
 8005bcc:	4b01      	ldr	r3, [pc, #4]	; (8005bd4 <__errno+0x8>)
 8005bce:	6818      	ldr	r0, [r3, #0]
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	2000000c 	.word	0x2000000c

08005bd8 <__libc_init_array>:
 8005bd8:	b570      	push	{r4, r5, r6, lr}
 8005bda:	4e0d      	ldr	r6, [pc, #52]	; (8005c10 <__libc_init_array+0x38>)
 8005bdc:	4c0d      	ldr	r4, [pc, #52]	; (8005c14 <__libc_init_array+0x3c>)
 8005bde:	1ba4      	subs	r4, r4, r6
 8005be0:	10a4      	asrs	r4, r4, #2
 8005be2:	2500      	movs	r5, #0
 8005be4:	42a5      	cmp	r5, r4
 8005be6:	d109      	bne.n	8005bfc <__libc_init_array+0x24>
 8005be8:	4e0b      	ldr	r6, [pc, #44]	; (8005c18 <__libc_init_array+0x40>)
 8005bea:	4c0c      	ldr	r4, [pc, #48]	; (8005c1c <__libc_init_array+0x44>)
 8005bec:	f002 f85c 	bl	8007ca8 <_init>
 8005bf0:	1ba4      	subs	r4, r4, r6
 8005bf2:	10a4      	asrs	r4, r4, #2
 8005bf4:	2500      	movs	r5, #0
 8005bf6:	42a5      	cmp	r5, r4
 8005bf8:	d105      	bne.n	8005c06 <__libc_init_array+0x2e>
 8005bfa:	bd70      	pop	{r4, r5, r6, pc}
 8005bfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c00:	4798      	blx	r3
 8005c02:	3501      	adds	r5, #1
 8005c04:	e7ee      	b.n	8005be4 <__libc_init_array+0xc>
 8005c06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c0a:	4798      	blx	r3
 8005c0c:	3501      	adds	r5, #1
 8005c0e:	e7f2      	b.n	8005bf6 <__libc_init_array+0x1e>
 8005c10:	08007f60 	.word	0x08007f60
 8005c14:	08007f60 	.word	0x08007f60
 8005c18:	08007f60 	.word	0x08007f60
 8005c1c:	08007f64 	.word	0x08007f64

08005c20 <memset>:
 8005c20:	4402      	add	r2, r0
 8005c22:	4603      	mov	r3, r0
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d100      	bne.n	8005c2a <memset+0xa>
 8005c28:	4770      	bx	lr
 8005c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c2e:	e7f9      	b.n	8005c24 <memset+0x4>

08005c30 <__cvt>:
 8005c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c34:	ec55 4b10 	vmov	r4, r5, d0
 8005c38:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005c3a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005c3e:	2d00      	cmp	r5, #0
 8005c40:	460e      	mov	r6, r1
 8005c42:	4691      	mov	r9, r2
 8005c44:	4619      	mov	r1, r3
 8005c46:	bfb8      	it	lt
 8005c48:	4622      	movlt	r2, r4
 8005c4a:	462b      	mov	r3, r5
 8005c4c:	f027 0720 	bic.w	r7, r7, #32
 8005c50:	bfbb      	ittet	lt
 8005c52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c56:	461d      	movlt	r5, r3
 8005c58:	2300      	movge	r3, #0
 8005c5a:	232d      	movlt	r3, #45	; 0x2d
 8005c5c:	bfb8      	it	lt
 8005c5e:	4614      	movlt	r4, r2
 8005c60:	2f46      	cmp	r7, #70	; 0x46
 8005c62:	700b      	strb	r3, [r1, #0]
 8005c64:	d004      	beq.n	8005c70 <__cvt+0x40>
 8005c66:	2f45      	cmp	r7, #69	; 0x45
 8005c68:	d100      	bne.n	8005c6c <__cvt+0x3c>
 8005c6a:	3601      	adds	r6, #1
 8005c6c:	2102      	movs	r1, #2
 8005c6e:	e000      	b.n	8005c72 <__cvt+0x42>
 8005c70:	2103      	movs	r1, #3
 8005c72:	ab03      	add	r3, sp, #12
 8005c74:	9301      	str	r3, [sp, #4]
 8005c76:	ab02      	add	r3, sp, #8
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	4632      	mov	r2, r6
 8005c7c:	4653      	mov	r3, sl
 8005c7e:	ec45 4b10 	vmov	d0, r4, r5
 8005c82:	f000 fcdd 	bl	8006640 <_dtoa_r>
 8005c86:	2f47      	cmp	r7, #71	; 0x47
 8005c88:	4680      	mov	r8, r0
 8005c8a:	d102      	bne.n	8005c92 <__cvt+0x62>
 8005c8c:	f019 0f01 	tst.w	r9, #1
 8005c90:	d026      	beq.n	8005ce0 <__cvt+0xb0>
 8005c92:	2f46      	cmp	r7, #70	; 0x46
 8005c94:	eb08 0906 	add.w	r9, r8, r6
 8005c98:	d111      	bne.n	8005cbe <__cvt+0x8e>
 8005c9a:	f898 3000 	ldrb.w	r3, [r8]
 8005c9e:	2b30      	cmp	r3, #48	; 0x30
 8005ca0:	d10a      	bne.n	8005cb8 <__cvt+0x88>
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	4629      	mov	r1, r5
 8005caa:	f7fa ff1d 	bl	8000ae8 <__aeabi_dcmpeq>
 8005cae:	b918      	cbnz	r0, 8005cb8 <__cvt+0x88>
 8005cb0:	f1c6 0601 	rsb	r6, r6, #1
 8005cb4:	f8ca 6000 	str.w	r6, [sl]
 8005cb8:	f8da 3000 	ldr.w	r3, [sl]
 8005cbc:	4499      	add	r9, r3
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	f7fa ff0f 	bl	8000ae8 <__aeabi_dcmpeq>
 8005cca:	b938      	cbnz	r0, 8005cdc <__cvt+0xac>
 8005ccc:	2230      	movs	r2, #48	; 0x30
 8005cce:	9b03      	ldr	r3, [sp, #12]
 8005cd0:	454b      	cmp	r3, r9
 8005cd2:	d205      	bcs.n	8005ce0 <__cvt+0xb0>
 8005cd4:	1c59      	adds	r1, r3, #1
 8005cd6:	9103      	str	r1, [sp, #12]
 8005cd8:	701a      	strb	r2, [r3, #0]
 8005cda:	e7f8      	b.n	8005cce <__cvt+0x9e>
 8005cdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ce0:	9b03      	ldr	r3, [sp, #12]
 8005ce2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ce4:	eba3 0308 	sub.w	r3, r3, r8
 8005ce8:	4640      	mov	r0, r8
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	b004      	add	sp, #16
 8005cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005cf2 <__exponent>:
 8005cf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cf4:	2900      	cmp	r1, #0
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	bfba      	itte	lt
 8005cfa:	4249      	neglt	r1, r1
 8005cfc:	232d      	movlt	r3, #45	; 0x2d
 8005cfe:	232b      	movge	r3, #43	; 0x2b
 8005d00:	2909      	cmp	r1, #9
 8005d02:	f804 2b02 	strb.w	r2, [r4], #2
 8005d06:	7043      	strb	r3, [r0, #1]
 8005d08:	dd20      	ble.n	8005d4c <__exponent+0x5a>
 8005d0a:	f10d 0307 	add.w	r3, sp, #7
 8005d0e:	461f      	mov	r7, r3
 8005d10:	260a      	movs	r6, #10
 8005d12:	fb91 f5f6 	sdiv	r5, r1, r6
 8005d16:	fb06 1115 	mls	r1, r6, r5, r1
 8005d1a:	3130      	adds	r1, #48	; 0x30
 8005d1c:	2d09      	cmp	r5, #9
 8005d1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005d22:	f103 32ff 	add.w	r2, r3, #4294967295
 8005d26:	4629      	mov	r1, r5
 8005d28:	dc09      	bgt.n	8005d3e <__exponent+0x4c>
 8005d2a:	3130      	adds	r1, #48	; 0x30
 8005d2c:	3b02      	subs	r3, #2
 8005d2e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005d32:	42bb      	cmp	r3, r7
 8005d34:	4622      	mov	r2, r4
 8005d36:	d304      	bcc.n	8005d42 <__exponent+0x50>
 8005d38:	1a10      	subs	r0, r2, r0
 8005d3a:	b003      	add	sp, #12
 8005d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d3e:	4613      	mov	r3, r2
 8005d40:	e7e7      	b.n	8005d12 <__exponent+0x20>
 8005d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d46:	f804 2b01 	strb.w	r2, [r4], #1
 8005d4a:	e7f2      	b.n	8005d32 <__exponent+0x40>
 8005d4c:	2330      	movs	r3, #48	; 0x30
 8005d4e:	4419      	add	r1, r3
 8005d50:	7083      	strb	r3, [r0, #2]
 8005d52:	1d02      	adds	r2, r0, #4
 8005d54:	70c1      	strb	r1, [r0, #3]
 8005d56:	e7ef      	b.n	8005d38 <__exponent+0x46>

08005d58 <_printf_float>:
 8005d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5c:	b08d      	sub	sp, #52	; 0x34
 8005d5e:	460c      	mov	r4, r1
 8005d60:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005d64:	4616      	mov	r6, r2
 8005d66:	461f      	mov	r7, r3
 8005d68:	4605      	mov	r5, r0
 8005d6a:	f001 fa21 	bl	80071b0 <_localeconv_r>
 8005d6e:	6803      	ldr	r3, [r0, #0]
 8005d70:	9304      	str	r3, [sp, #16]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fa fa3c 	bl	80001f0 <strlen>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	930a      	str	r3, [sp, #40]	; 0x28
 8005d7c:	f8d8 3000 	ldr.w	r3, [r8]
 8005d80:	9005      	str	r0, [sp, #20]
 8005d82:	3307      	adds	r3, #7
 8005d84:	f023 0307 	bic.w	r3, r3, #7
 8005d88:	f103 0208 	add.w	r2, r3, #8
 8005d8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005d90:	f8d4 b000 	ldr.w	fp, [r4]
 8005d94:	f8c8 2000 	str.w	r2, [r8]
 8005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005da0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005da4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005da8:	9307      	str	r3, [sp, #28]
 8005daa:	f8cd 8018 	str.w	r8, [sp, #24]
 8005dae:	f04f 32ff 	mov.w	r2, #4294967295
 8005db2:	4ba7      	ldr	r3, [pc, #668]	; (8006050 <_printf_float+0x2f8>)
 8005db4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005db8:	f7fa fec8 	bl	8000b4c <__aeabi_dcmpun>
 8005dbc:	bb70      	cbnz	r0, 8005e1c <_printf_float+0xc4>
 8005dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc2:	4ba3      	ldr	r3, [pc, #652]	; (8006050 <_printf_float+0x2f8>)
 8005dc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dc8:	f7fa fea2 	bl	8000b10 <__aeabi_dcmple>
 8005dcc:	bb30      	cbnz	r0, 8005e1c <_printf_float+0xc4>
 8005dce:	2200      	movs	r2, #0
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	4640      	mov	r0, r8
 8005dd4:	4649      	mov	r1, r9
 8005dd6:	f7fa fe91 	bl	8000afc <__aeabi_dcmplt>
 8005dda:	b110      	cbz	r0, 8005de2 <_printf_float+0x8a>
 8005ddc:	232d      	movs	r3, #45	; 0x2d
 8005dde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005de2:	4a9c      	ldr	r2, [pc, #624]	; (8006054 <_printf_float+0x2fc>)
 8005de4:	4b9c      	ldr	r3, [pc, #624]	; (8006058 <_printf_float+0x300>)
 8005de6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005dea:	bf8c      	ite	hi
 8005dec:	4690      	movhi	r8, r2
 8005dee:	4698      	movls	r8, r3
 8005df0:	2303      	movs	r3, #3
 8005df2:	f02b 0204 	bic.w	r2, fp, #4
 8005df6:	6123      	str	r3, [r4, #16]
 8005df8:	6022      	str	r2, [r4, #0]
 8005dfa:	f04f 0900 	mov.w	r9, #0
 8005dfe:	9700      	str	r7, [sp, #0]
 8005e00:	4633      	mov	r3, r6
 8005e02:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e04:	4621      	mov	r1, r4
 8005e06:	4628      	mov	r0, r5
 8005e08:	f000 f9e6 	bl	80061d8 <_printf_common>
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	f040 808d 	bne.w	8005f2c <_printf_float+0x1d4>
 8005e12:	f04f 30ff 	mov.w	r0, #4294967295
 8005e16:	b00d      	add	sp, #52	; 0x34
 8005e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e1c:	4642      	mov	r2, r8
 8005e1e:	464b      	mov	r3, r9
 8005e20:	4640      	mov	r0, r8
 8005e22:	4649      	mov	r1, r9
 8005e24:	f7fa fe92 	bl	8000b4c <__aeabi_dcmpun>
 8005e28:	b110      	cbz	r0, 8005e30 <_printf_float+0xd8>
 8005e2a:	4a8c      	ldr	r2, [pc, #560]	; (800605c <_printf_float+0x304>)
 8005e2c:	4b8c      	ldr	r3, [pc, #560]	; (8006060 <_printf_float+0x308>)
 8005e2e:	e7da      	b.n	8005de6 <_printf_float+0x8e>
 8005e30:	6861      	ldr	r1, [r4, #4]
 8005e32:	1c4b      	adds	r3, r1, #1
 8005e34:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005e38:	a80a      	add	r0, sp, #40	; 0x28
 8005e3a:	d13e      	bne.n	8005eba <_printf_float+0x162>
 8005e3c:	2306      	movs	r3, #6
 8005e3e:	6063      	str	r3, [r4, #4]
 8005e40:	2300      	movs	r3, #0
 8005e42:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005e46:	ab09      	add	r3, sp, #36	; 0x24
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	ec49 8b10 	vmov	d0, r8, r9
 8005e4e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005e52:	6022      	str	r2, [r4, #0]
 8005e54:	f8cd a004 	str.w	sl, [sp, #4]
 8005e58:	6861      	ldr	r1, [r4, #4]
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	f7ff fee8 	bl	8005c30 <__cvt>
 8005e60:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005e64:	2b47      	cmp	r3, #71	; 0x47
 8005e66:	4680      	mov	r8, r0
 8005e68:	d109      	bne.n	8005e7e <_printf_float+0x126>
 8005e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e6c:	1cd8      	adds	r0, r3, #3
 8005e6e:	db02      	blt.n	8005e76 <_printf_float+0x11e>
 8005e70:	6862      	ldr	r2, [r4, #4]
 8005e72:	4293      	cmp	r3, r2
 8005e74:	dd47      	ble.n	8005f06 <_printf_float+0x1ae>
 8005e76:	f1aa 0a02 	sub.w	sl, sl, #2
 8005e7a:	fa5f fa8a 	uxtb.w	sl, sl
 8005e7e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005e82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e84:	d824      	bhi.n	8005ed0 <_printf_float+0x178>
 8005e86:	3901      	subs	r1, #1
 8005e88:	4652      	mov	r2, sl
 8005e8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e8e:	9109      	str	r1, [sp, #36]	; 0x24
 8005e90:	f7ff ff2f 	bl	8005cf2 <__exponent>
 8005e94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e96:	1813      	adds	r3, r2, r0
 8005e98:	2a01      	cmp	r2, #1
 8005e9a:	4681      	mov	r9, r0
 8005e9c:	6123      	str	r3, [r4, #16]
 8005e9e:	dc02      	bgt.n	8005ea6 <_printf_float+0x14e>
 8005ea0:	6822      	ldr	r2, [r4, #0]
 8005ea2:	07d1      	lsls	r1, r2, #31
 8005ea4:	d501      	bpl.n	8005eaa <_printf_float+0x152>
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	6123      	str	r3, [r4, #16]
 8005eaa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0a5      	beq.n	8005dfe <_printf_float+0xa6>
 8005eb2:	232d      	movs	r3, #45	; 0x2d
 8005eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eb8:	e7a1      	b.n	8005dfe <_printf_float+0xa6>
 8005eba:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005ebe:	f000 8177 	beq.w	80061b0 <_printf_float+0x458>
 8005ec2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005ec6:	d1bb      	bne.n	8005e40 <_printf_float+0xe8>
 8005ec8:	2900      	cmp	r1, #0
 8005eca:	d1b9      	bne.n	8005e40 <_printf_float+0xe8>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e7b6      	b.n	8005e3e <_printf_float+0xe6>
 8005ed0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005ed4:	d119      	bne.n	8005f0a <_printf_float+0x1b2>
 8005ed6:	2900      	cmp	r1, #0
 8005ed8:	6863      	ldr	r3, [r4, #4]
 8005eda:	dd0c      	ble.n	8005ef6 <_printf_float+0x19e>
 8005edc:	6121      	str	r1, [r4, #16]
 8005ede:	b913      	cbnz	r3, 8005ee6 <_printf_float+0x18e>
 8005ee0:	6822      	ldr	r2, [r4, #0]
 8005ee2:	07d2      	lsls	r2, r2, #31
 8005ee4:	d502      	bpl.n	8005eec <_printf_float+0x194>
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	440b      	add	r3, r1
 8005eea:	6123      	str	r3, [r4, #16]
 8005eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eee:	65a3      	str	r3, [r4, #88]	; 0x58
 8005ef0:	f04f 0900 	mov.w	r9, #0
 8005ef4:	e7d9      	b.n	8005eaa <_printf_float+0x152>
 8005ef6:	b913      	cbnz	r3, 8005efe <_printf_float+0x1a6>
 8005ef8:	6822      	ldr	r2, [r4, #0]
 8005efa:	07d0      	lsls	r0, r2, #31
 8005efc:	d501      	bpl.n	8005f02 <_printf_float+0x1aa>
 8005efe:	3302      	adds	r3, #2
 8005f00:	e7f3      	b.n	8005eea <_printf_float+0x192>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e7f1      	b.n	8005eea <_printf_float+0x192>
 8005f06:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005f0a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	db05      	blt.n	8005f1e <_printf_float+0x1c6>
 8005f12:	6822      	ldr	r2, [r4, #0]
 8005f14:	6123      	str	r3, [r4, #16]
 8005f16:	07d1      	lsls	r1, r2, #31
 8005f18:	d5e8      	bpl.n	8005eec <_printf_float+0x194>
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	e7e5      	b.n	8005eea <_printf_float+0x192>
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	bfd4      	ite	le
 8005f22:	f1c3 0302 	rsble	r3, r3, #2
 8005f26:	2301      	movgt	r3, #1
 8005f28:	4413      	add	r3, r2
 8005f2a:	e7de      	b.n	8005eea <_printf_float+0x192>
 8005f2c:	6823      	ldr	r3, [r4, #0]
 8005f2e:	055a      	lsls	r2, r3, #21
 8005f30:	d407      	bmi.n	8005f42 <_printf_float+0x1ea>
 8005f32:	6923      	ldr	r3, [r4, #16]
 8005f34:	4642      	mov	r2, r8
 8005f36:	4631      	mov	r1, r6
 8005f38:	4628      	mov	r0, r5
 8005f3a:	47b8      	blx	r7
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	d12b      	bne.n	8005f98 <_printf_float+0x240>
 8005f40:	e767      	b.n	8005e12 <_printf_float+0xba>
 8005f42:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005f46:	f240 80dc 	bls.w	8006102 <_printf_float+0x3aa>
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f52:	f7fa fdc9 	bl	8000ae8 <__aeabi_dcmpeq>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	d033      	beq.n	8005fc2 <_printf_float+0x26a>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	4a41      	ldr	r2, [pc, #260]	; (8006064 <_printf_float+0x30c>)
 8005f5e:	4631      	mov	r1, r6
 8005f60:	4628      	mov	r0, r5
 8005f62:	47b8      	blx	r7
 8005f64:	3001      	adds	r0, #1
 8005f66:	f43f af54 	beq.w	8005e12 <_printf_float+0xba>
 8005f6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	db02      	blt.n	8005f78 <_printf_float+0x220>
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	07d8      	lsls	r0, r3, #31
 8005f76:	d50f      	bpl.n	8005f98 <_printf_float+0x240>
 8005f78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f7c:	4631      	mov	r1, r6
 8005f7e:	4628      	mov	r0, r5
 8005f80:	47b8      	blx	r7
 8005f82:	3001      	adds	r0, #1
 8005f84:	f43f af45 	beq.w	8005e12 <_printf_float+0xba>
 8005f88:	f04f 0800 	mov.w	r8, #0
 8005f8c:	f104 091a 	add.w	r9, r4, #26
 8005f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f92:	3b01      	subs	r3, #1
 8005f94:	4543      	cmp	r3, r8
 8005f96:	dc09      	bgt.n	8005fac <_printf_float+0x254>
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	079b      	lsls	r3, r3, #30
 8005f9c:	f100 8103 	bmi.w	80061a6 <_printf_float+0x44e>
 8005fa0:	68e0      	ldr	r0, [r4, #12]
 8005fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fa4:	4298      	cmp	r0, r3
 8005fa6:	bfb8      	it	lt
 8005fa8:	4618      	movlt	r0, r3
 8005faa:	e734      	b.n	8005e16 <_printf_float+0xbe>
 8005fac:	2301      	movs	r3, #1
 8005fae:	464a      	mov	r2, r9
 8005fb0:	4631      	mov	r1, r6
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	47b8      	blx	r7
 8005fb6:	3001      	adds	r0, #1
 8005fb8:	f43f af2b 	beq.w	8005e12 <_printf_float+0xba>
 8005fbc:	f108 0801 	add.w	r8, r8, #1
 8005fc0:	e7e6      	b.n	8005f90 <_printf_float+0x238>
 8005fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	dc2b      	bgt.n	8006020 <_printf_float+0x2c8>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	4a26      	ldr	r2, [pc, #152]	; (8006064 <_printf_float+0x30c>)
 8005fcc:	4631      	mov	r1, r6
 8005fce:	4628      	mov	r0, r5
 8005fd0:	47b8      	blx	r7
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	f43f af1d 	beq.w	8005e12 <_printf_float+0xba>
 8005fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fda:	b923      	cbnz	r3, 8005fe6 <_printf_float+0x28e>
 8005fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fde:	b913      	cbnz	r3, 8005fe6 <_printf_float+0x28e>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	07d9      	lsls	r1, r3, #31
 8005fe4:	d5d8      	bpl.n	8005f98 <_printf_float+0x240>
 8005fe6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fea:	4631      	mov	r1, r6
 8005fec:	4628      	mov	r0, r5
 8005fee:	47b8      	blx	r7
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	f43f af0e 	beq.w	8005e12 <_printf_float+0xba>
 8005ff6:	f04f 0900 	mov.w	r9, #0
 8005ffa:	f104 0a1a 	add.w	sl, r4, #26
 8005ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006000:	425b      	negs	r3, r3
 8006002:	454b      	cmp	r3, r9
 8006004:	dc01      	bgt.n	800600a <_printf_float+0x2b2>
 8006006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006008:	e794      	b.n	8005f34 <_printf_float+0x1dc>
 800600a:	2301      	movs	r3, #1
 800600c:	4652      	mov	r2, sl
 800600e:	4631      	mov	r1, r6
 8006010:	4628      	mov	r0, r5
 8006012:	47b8      	blx	r7
 8006014:	3001      	adds	r0, #1
 8006016:	f43f aefc 	beq.w	8005e12 <_printf_float+0xba>
 800601a:	f109 0901 	add.w	r9, r9, #1
 800601e:	e7ee      	b.n	8005ffe <_printf_float+0x2a6>
 8006020:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006022:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006024:	429a      	cmp	r2, r3
 8006026:	bfa8      	it	ge
 8006028:	461a      	movge	r2, r3
 800602a:	2a00      	cmp	r2, #0
 800602c:	4691      	mov	r9, r2
 800602e:	dd07      	ble.n	8006040 <_printf_float+0x2e8>
 8006030:	4613      	mov	r3, r2
 8006032:	4631      	mov	r1, r6
 8006034:	4642      	mov	r2, r8
 8006036:	4628      	mov	r0, r5
 8006038:	47b8      	blx	r7
 800603a:	3001      	adds	r0, #1
 800603c:	f43f aee9 	beq.w	8005e12 <_printf_float+0xba>
 8006040:	f104 031a 	add.w	r3, r4, #26
 8006044:	f04f 0b00 	mov.w	fp, #0
 8006048:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800604c:	9306      	str	r3, [sp, #24]
 800604e:	e015      	b.n	800607c <_printf_float+0x324>
 8006050:	7fefffff 	.word	0x7fefffff
 8006054:	08007cfc 	.word	0x08007cfc
 8006058:	08007cf8 	.word	0x08007cf8
 800605c:	08007d04 	.word	0x08007d04
 8006060:	08007d00 	.word	0x08007d00
 8006064:	08007d08 	.word	0x08007d08
 8006068:	2301      	movs	r3, #1
 800606a:	9a06      	ldr	r2, [sp, #24]
 800606c:	4631      	mov	r1, r6
 800606e:	4628      	mov	r0, r5
 8006070:	47b8      	blx	r7
 8006072:	3001      	adds	r0, #1
 8006074:	f43f aecd 	beq.w	8005e12 <_printf_float+0xba>
 8006078:	f10b 0b01 	add.w	fp, fp, #1
 800607c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006080:	ebaa 0309 	sub.w	r3, sl, r9
 8006084:	455b      	cmp	r3, fp
 8006086:	dcef      	bgt.n	8006068 <_printf_float+0x310>
 8006088:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800608c:	429a      	cmp	r2, r3
 800608e:	44d0      	add	r8, sl
 8006090:	db15      	blt.n	80060be <_printf_float+0x366>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	07da      	lsls	r2, r3, #31
 8006096:	d412      	bmi.n	80060be <_printf_float+0x366>
 8006098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800609a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800609c:	eba3 020a 	sub.w	r2, r3, sl
 80060a0:	eba3 0a01 	sub.w	sl, r3, r1
 80060a4:	4592      	cmp	sl, r2
 80060a6:	bfa8      	it	ge
 80060a8:	4692      	movge	sl, r2
 80060aa:	f1ba 0f00 	cmp.w	sl, #0
 80060ae:	dc0e      	bgt.n	80060ce <_printf_float+0x376>
 80060b0:	f04f 0800 	mov.w	r8, #0
 80060b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060b8:	f104 091a 	add.w	r9, r4, #26
 80060bc:	e019      	b.n	80060f2 <_printf_float+0x39a>
 80060be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060c2:	4631      	mov	r1, r6
 80060c4:	4628      	mov	r0, r5
 80060c6:	47b8      	blx	r7
 80060c8:	3001      	adds	r0, #1
 80060ca:	d1e5      	bne.n	8006098 <_printf_float+0x340>
 80060cc:	e6a1      	b.n	8005e12 <_printf_float+0xba>
 80060ce:	4653      	mov	r3, sl
 80060d0:	4642      	mov	r2, r8
 80060d2:	4631      	mov	r1, r6
 80060d4:	4628      	mov	r0, r5
 80060d6:	47b8      	blx	r7
 80060d8:	3001      	adds	r0, #1
 80060da:	d1e9      	bne.n	80060b0 <_printf_float+0x358>
 80060dc:	e699      	b.n	8005e12 <_printf_float+0xba>
 80060de:	2301      	movs	r3, #1
 80060e0:	464a      	mov	r2, r9
 80060e2:	4631      	mov	r1, r6
 80060e4:	4628      	mov	r0, r5
 80060e6:	47b8      	blx	r7
 80060e8:	3001      	adds	r0, #1
 80060ea:	f43f ae92 	beq.w	8005e12 <_printf_float+0xba>
 80060ee:	f108 0801 	add.w	r8, r8, #1
 80060f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060f6:	1a9b      	subs	r3, r3, r2
 80060f8:	eba3 030a 	sub.w	r3, r3, sl
 80060fc:	4543      	cmp	r3, r8
 80060fe:	dcee      	bgt.n	80060de <_printf_float+0x386>
 8006100:	e74a      	b.n	8005f98 <_printf_float+0x240>
 8006102:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006104:	2a01      	cmp	r2, #1
 8006106:	dc01      	bgt.n	800610c <_printf_float+0x3b4>
 8006108:	07db      	lsls	r3, r3, #31
 800610a:	d53a      	bpl.n	8006182 <_printf_float+0x42a>
 800610c:	2301      	movs	r3, #1
 800610e:	4642      	mov	r2, r8
 8006110:	4631      	mov	r1, r6
 8006112:	4628      	mov	r0, r5
 8006114:	47b8      	blx	r7
 8006116:	3001      	adds	r0, #1
 8006118:	f43f ae7b 	beq.w	8005e12 <_printf_float+0xba>
 800611c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006120:	4631      	mov	r1, r6
 8006122:	4628      	mov	r0, r5
 8006124:	47b8      	blx	r7
 8006126:	3001      	adds	r0, #1
 8006128:	f108 0801 	add.w	r8, r8, #1
 800612c:	f43f ae71 	beq.w	8005e12 <_printf_float+0xba>
 8006130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006132:	2200      	movs	r2, #0
 8006134:	f103 3aff 	add.w	sl, r3, #4294967295
 8006138:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800613c:	2300      	movs	r3, #0
 800613e:	f7fa fcd3 	bl	8000ae8 <__aeabi_dcmpeq>
 8006142:	b9c8      	cbnz	r0, 8006178 <_printf_float+0x420>
 8006144:	4653      	mov	r3, sl
 8006146:	4642      	mov	r2, r8
 8006148:	4631      	mov	r1, r6
 800614a:	4628      	mov	r0, r5
 800614c:	47b8      	blx	r7
 800614e:	3001      	adds	r0, #1
 8006150:	d10e      	bne.n	8006170 <_printf_float+0x418>
 8006152:	e65e      	b.n	8005e12 <_printf_float+0xba>
 8006154:	2301      	movs	r3, #1
 8006156:	4652      	mov	r2, sl
 8006158:	4631      	mov	r1, r6
 800615a:	4628      	mov	r0, r5
 800615c:	47b8      	blx	r7
 800615e:	3001      	adds	r0, #1
 8006160:	f43f ae57 	beq.w	8005e12 <_printf_float+0xba>
 8006164:	f108 0801 	add.w	r8, r8, #1
 8006168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800616a:	3b01      	subs	r3, #1
 800616c:	4543      	cmp	r3, r8
 800616e:	dcf1      	bgt.n	8006154 <_printf_float+0x3fc>
 8006170:	464b      	mov	r3, r9
 8006172:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006176:	e6de      	b.n	8005f36 <_printf_float+0x1de>
 8006178:	f04f 0800 	mov.w	r8, #0
 800617c:	f104 0a1a 	add.w	sl, r4, #26
 8006180:	e7f2      	b.n	8006168 <_printf_float+0x410>
 8006182:	2301      	movs	r3, #1
 8006184:	e7df      	b.n	8006146 <_printf_float+0x3ee>
 8006186:	2301      	movs	r3, #1
 8006188:	464a      	mov	r2, r9
 800618a:	4631      	mov	r1, r6
 800618c:	4628      	mov	r0, r5
 800618e:	47b8      	blx	r7
 8006190:	3001      	adds	r0, #1
 8006192:	f43f ae3e 	beq.w	8005e12 <_printf_float+0xba>
 8006196:	f108 0801 	add.w	r8, r8, #1
 800619a:	68e3      	ldr	r3, [r4, #12]
 800619c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800619e:	1a9b      	subs	r3, r3, r2
 80061a0:	4543      	cmp	r3, r8
 80061a2:	dcf0      	bgt.n	8006186 <_printf_float+0x42e>
 80061a4:	e6fc      	b.n	8005fa0 <_printf_float+0x248>
 80061a6:	f04f 0800 	mov.w	r8, #0
 80061aa:	f104 0919 	add.w	r9, r4, #25
 80061ae:	e7f4      	b.n	800619a <_printf_float+0x442>
 80061b0:	2900      	cmp	r1, #0
 80061b2:	f43f ae8b 	beq.w	8005ecc <_printf_float+0x174>
 80061b6:	2300      	movs	r3, #0
 80061b8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80061bc:	ab09      	add	r3, sp, #36	; 0x24
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	ec49 8b10 	vmov	d0, r8, r9
 80061c4:	6022      	str	r2, [r4, #0]
 80061c6:	f8cd a004 	str.w	sl, [sp, #4]
 80061ca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80061ce:	4628      	mov	r0, r5
 80061d0:	f7ff fd2e 	bl	8005c30 <__cvt>
 80061d4:	4680      	mov	r8, r0
 80061d6:	e648      	b.n	8005e6a <_printf_float+0x112>

080061d8 <_printf_common>:
 80061d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061dc:	4691      	mov	r9, r2
 80061de:	461f      	mov	r7, r3
 80061e0:	688a      	ldr	r2, [r1, #8]
 80061e2:	690b      	ldr	r3, [r1, #16]
 80061e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061e8:	4293      	cmp	r3, r2
 80061ea:	bfb8      	it	lt
 80061ec:	4613      	movlt	r3, r2
 80061ee:	f8c9 3000 	str.w	r3, [r9]
 80061f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061f6:	4606      	mov	r6, r0
 80061f8:	460c      	mov	r4, r1
 80061fa:	b112      	cbz	r2, 8006202 <_printf_common+0x2a>
 80061fc:	3301      	adds	r3, #1
 80061fe:	f8c9 3000 	str.w	r3, [r9]
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	0699      	lsls	r1, r3, #26
 8006206:	bf42      	ittt	mi
 8006208:	f8d9 3000 	ldrmi.w	r3, [r9]
 800620c:	3302      	addmi	r3, #2
 800620e:	f8c9 3000 	strmi.w	r3, [r9]
 8006212:	6825      	ldr	r5, [r4, #0]
 8006214:	f015 0506 	ands.w	r5, r5, #6
 8006218:	d107      	bne.n	800622a <_printf_common+0x52>
 800621a:	f104 0a19 	add.w	sl, r4, #25
 800621e:	68e3      	ldr	r3, [r4, #12]
 8006220:	f8d9 2000 	ldr.w	r2, [r9]
 8006224:	1a9b      	subs	r3, r3, r2
 8006226:	42ab      	cmp	r3, r5
 8006228:	dc28      	bgt.n	800627c <_printf_common+0xa4>
 800622a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800622e:	6822      	ldr	r2, [r4, #0]
 8006230:	3300      	adds	r3, #0
 8006232:	bf18      	it	ne
 8006234:	2301      	movne	r3, #1
 8006236:	0692      	lsls	r2, r2, #26
 8006238:	d42d      	bmi.n	8006296 <_printf_common+0xbe>
 800623a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800623e:	4639      	mov	r1, r7
 8006240:	4630      	mov	r0, r6
 8006242:	47c0      	blx	r8
 8006244:	3001      	adds	r0, #1
 8006246:	d020      	beq.n	800628a <_printf_common+0xb2>
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	68e5      	ldr	r5, [r4, #12]
 800624c:	f8d9 2000 	ldr.w	r2, [r9]
 8006250:	f003 0306 	and.w	r3, r3, #6
 8006254:	2b04      	cmp	r3, #4
 8006256:	bf08      	it	eq
 8006258:	1aad      	subeq	r5, r5, r2
 800625a:	68a3      	ldr	r3, [r4, #8]
 800625c:	6922      	ldr	r2, [r4, #16]
 800625e:	bf0c      	ite	eq
 8006260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006264:	2500      	movne	r5, #0
 8006266:	4293      	cmp	r3, r2
 8006268:	bfc4      	itt	gt
 800626a:	1a9b      	subgt	r3, r3, r2
 800626c:	18ed      	addgt	r5, r5, r3
 800626e:	f04f 0900 	mov.w	r9, #0
 8006272:	341a      	adds	r4, #26
 8006274:	454d      	cmp	r5, r9
 8006276:	d11a      	bne.n	80062ae <_printf_common+0xd6>
 8006278:	2000      	movs	r0, #0
 800627a:	e008      	b.n	800628e <_printf_common+0xb6>
 800627c:	2301      	movs	r3, #1
 800627e:	4652      	mov	r2, sl
 8006280:	4639      	mov	r1, r7
 8006282:	4630      	mov	r0, r6
 8006284:	47c0      	blx	r8
 8006286:	3001      	adds	r0, #1
 8006288:	d103      	bne.n	8006292 <_printf_common+0xba>
 800628a:	f04f 30ff 	mov.w	r0, #4294967295
 800628e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006292:	3501      	adds	r5, #1
 8006294:	e7c3      	b.n	800621e <_printf_common+0x46>
 8006296:	18e1      	adds	r1, r4, r3
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	2030      	movs	r0, #48	; 0x30
 800629c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062a0:	4422      	add	r2, r4
 80062a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062aa:	3302      	adds	r3, #2
 80062ac:	e7c5      	b.n	800623a <_printf_common+0x62>
 80062ae:	2301      	movs	r3, #1
 80062b0:	4622      	mov	r2, r4
 80062b2:	4639      	mov	r1, r7
 80062b4:	4630      	mov	r0, r6
 80062b6:	47c0      	blx	r8
 80062b8:	3001      	adds	r0, #1
 80062ba:	d0e6      	beq.n	800628a <_printf_common+0xb2>
 80062bc:	f109 0901 	add.w	r9, r9, #1
 80062c0:	e7d8      	b.n	8006274 <_printf_common+0x9c>
	...

080062c4 <_printf_i>:
 80062c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80062cc:	460c      	mov	r4, r1
 80062ce:	7e09      	ldrb	r1, [r1, #24]
 80062d0:	b085      	sub	sp, #20
 80062d2:	296e      	cmp	r1, #110	; 0x6e
 80062d4:	4617      	mov	r7, r2
 80062d6:	4606      	mov	r6, r0
 80062d8:	4698      	mov	r8, r3
 80062da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062dc:	f000 80b3 	beq.w	8006446 <_printf_i+0x182>
 80062e0:	d822      	bhi.n	8006328 <_printf_i+0x64>
 80062e2:	2963      	cmp	r1, #99	; 0x63
 80062e4:	d036      	beq.n	8006354 <_printf_i+0x90>
 80062e6:	d80a      	bhi.n	80062fe <_printf_i+0x3a>
 80062e8:	2900      	cmp	r1, #0
 80062ea:	f000 80b9 	beq.w	8006460 <_printf_i+0x19c>
 80062ee:	2958      	cmp	r1, #88	; 0x58
 80062f0:	f000 8083 	beq.w	80063fa <_printf_i+0x136>
 80062f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80062fc:	e032      	b.n	8006364 <_printf_i+0xa0>
 80062fe:	2964      	cmp	r1, #100	; 0x64
 8006300:	d001      	beq.n	8006306 <_printf_i+0x42>
 8006302:	2969      	cmp	r1, #105	; 0x69
 8006304:	d1f6      	bne.n	80062f4 <_printf_i+0x30>
 8006306:	6820      	ldr	r0, [r4, #0]
 8006308:	6813      	ldr	r3, [r2, #0]
 800630a:	0605      	lsls	r5, r0, #24
 800630c:	f103 0104 	add.w	r1, r3, #4
 8006310:	d52a      	bpl.n	8006368 <_printf_i+0xa4>
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6011      	str	r1, [r2, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	da03      	bge.n	8006322 <_printf_i+0x5e>
 800631a:	222d      	movs	r2, #45	; 0x2d
 800631c:	425b      	negs	r3, r3
 800631e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006322:	486f      	ldr	r0, [pc, #444]	; (80064e0 <_printf_i+0x21c>)
 8006324:	220a      	movs	r2, #10
 8006326:	e039      	b.n	800639c <_printf_i+0xd8>
 8006328:	2973      	cmp	r1, #115	; 0x73
 800632a:	f000 809d 	beq.w	8006468 <_printf_i+0x1a4>
 800632e:	d808      	bhi.n	8006342 <_printf_i+0x7e>
 8006330:	296f      	cmp	r1, #111	; 0x6f
 8006332:	d020      	beq.n	8006376 <_printf_i+0xb2>
 8006334:	2970      	cmp	r1, #112	; 0x70
 8006336:	d1dd      	bne.n	80062f4 <_printf_i+0x30>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	f043 0320 	orr.w	r3, r3, #32
 800633e:	6023      	str	r3, [r4, #0]
 8006340:	e003      	b.n	800634a <_printf_i+0x86>
 8006342:	2975      	cmp	r1, #117	; 0x75
 8006344:	d017      	beq.n	8006376 <_printf_i+0xb2>
 8006346:	2978      	cmp	r1, #120	; 0x78
 8006348:	d1d4      	bne.n	80062f4 <_printf_i+0x30>
 800634a:	2378      	movs	r3, #120	; 0x78
 800634c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006350:	4864      	ldr	r0, [pc, #400]	; (80064e4 <_printf_i+0x220>)
 8006352:	e055      	b.n	8006400 <_printf_i+0x13c>
 8006354:	6813      	ldr	r3, [r2, #0]
 8006356:	1d19      	adds	r1, r3, #4
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6011      	str	r1, [r2, #0]
 800635c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006360:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006364:	2301      	movs	r3, #1
 8006366:	e08c      	b.n	8006482 <_printf_i+0x1be>
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6011      	str	r1, [r2, #0]
 800636c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006370:	bf18      	it	ne
 8006372:	b21b      	sxthne	r3, r3
 8006374:	e7cf      	b.n	8006316 <_printf_i+0x52>
 8006376:	6813      	ldr	r3, [r2, #0]
 8006378:	6825      	ldr	r5, [r4, #0]
 800637a:	1d18      	adds	r0, r3, #4
 800637c:	6010      	str	r0, [r2, #0]
 800637e:	0628      	lsls	r0, r5, #24
 8006380:	d501      	bpl.n	8006386 <_printf_i+0xc2>
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	e002      	b.n	800638c <_printf_i+0xc8>
 8006386:	0668      	lsls	r0, r5, #25
 8006388:	d5fb      	bpl.n	8006382 <_printf_i+0xbe>
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	4854      	ldr	r0, [pc, #336]	; (80064e0 <_printf_i+0x21c>)
 800638e:	296f      	cmp	r1, #111	; 0x6f
 8006390:	bf14      	ite	ne
 8006392:	220a      	movne	r2, #10
 8006394:	2208      	moveq	r2, #8
 8006396:	2100      	movs	r1, #0
 8006398:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800639c:	6865      	ldr	r5, [r4, #4]
 800639e:	60a5      	str	r5, [r4, #8]
 80063a0:	2d00      	cmp	r5, #0
 80063a2:	f2c0 8095 	blt.w	80064d0 <_printf_i+0x20c>
 80063a6:	6821      	ldr	r1, [r4, #0]
 80063a8:	f021 0104 	bic.w	r1, r1, #4
 80063ac:	6021      	str	r1, [r4, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d13d      	bne.n	800642e <_printf_i+0x16a>
 80063b2:	2d00      	cmp	r5, #0
 80063b4:	f040 808e 	bne.w	80064d4 <_printf_i+0x210>
 80063b8:	4665      	mov	r5, ip
 80063ba:	2a08      	cmp	r2, #8
 80063bc:	d10b      	bne.n	80063d6 <_printf_i+0x112>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	07db      	lsls	r3, r3, #31
 80063c2:	d508      	bpl.n	80063d6 <_printf_i+0x112>
 80063c4:	6923      	ldr	r3, [r4, #16]
 80063c6:	6862      	ldr	r2, [r4, #4]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	bfde      	ittt	le
 80063cc:	2330      	movle	r3, #48	; 0x30
 80063ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063d6:	ebac 0305 	sub.w	r3, ip, r5
 80063da:	6123      	str	r3, [r4, #16]
 80063dc:	f8cd 8000 	str.w	r8, [sp]
 80063e0:	463b      	mov	r3, r7
 80063e2:	aa03      	add	r2, sp, #12
 80063e4:	4621      	mov	r1, r4
 80063e6:	4630      	mov	r0, r6
 80063e8:	f7ff fef6 	bl	80061d8 <_printf_common>
 80063ec:	3001      	adds	r0, #1
 80063ee:	d14d      	bne.n	800648c <_printf_i+0x1c8>
 80063f0:	f04f 30ff 	mov.w	r0, #4294967295
 80063f4:	b005      	add	sp, #20
 80063f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063fa:	4839      	ldr	r0, [pc, #228]	; (80064e0 <_printf_i+0x21c>)
 80063fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006400:	6813      	ldr	r3, [r2, #0]
 8006402:	6821      	ldr	r1, [r4, #0]
 8006404:	1d1d      	adds	r5, r3, #4
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6015      	str	r5, [r2, #0]
 800640a:	060a      	lsls	r2, r1, #24
 800640c:	d50b      	bpl.n	8006426 <_printf_i+0x162>
 800640e:	07ca      	lsls	r2, r1, #31
 8006410:	bf44      	itt	mi
 8006412:	f041 0120 	orrmi.w	r1, r1, #32
 8006416:	6021      	strmi	r1, [r4, #0]
 8006418:	b91b      	cbnz	r3, 8006422 <_printf_i+0x15e>
 800641a:	6822      	ldr	r2, [r4, #0]
 800641c:	f022 0220 	bic.w	r2, r2, #32
 8006420:	6022      	str	r2, [r4, #0]
 8006422:	2210      	movs	r2, #16
 8006424:	e7b7      	b.n	8006396 <_printf_i+0xd2>
 8006426:	064d      	lsls	r5, r1, #25
 8006428:	bf48      	it	mi
 800642a:	b29b      	uxthmi	r3, r3
 800642c:	e7ef      	b.n	800640e <_printf_i+0x14a>
 800642e:	4665      	mov	r5, ip
 8006430:	fbb3 f1f2 	udiv	r1, r3, r2
 8006434:	fb02 3311 	mls	r3, r2, r1, r3
 8006438:	5cc3      	ldrb	r3, [r0, r3]
 800643a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800643e:	460b      	mov	r3, r1
 8006440:	2900      	cmp	r1, #0
 8006442:	d1f5      	bne.n	8006430 <_printf_i+0x16c>
 8006444:	e7b9      	b.n	80063ba <_printf_i+0xf6>
 8006446:	6813      	ldr	r3, [r2, #0]
 8006448:	6825      	ldr	r5, [r4, #0]
 800644a:	6961      	ldr	r1, [r4, #20]
 800644c:	1d18      	adds	r0, r3, #4
 800644e:	6010      	str	r0, [r2, #0]
 8006450:	0628      	lsls	r0, r5, #24
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	d501      	bpl.n	800645a <_printf_i+0x196>
 8006456:	6019      	str	r1, [r3, #0]
 8006458:	e002      	b.n	8006460 <_printf_i+0x19c>
 800645a:	066a      	lsls	r2, r5, #25
 800645c:	d5fb      	bpl.n	8006456 <_printf_i+0x192>
 800645e:	8019      	strh	r1, [r3, #0]
 8006460:	2300      	movs	r3, #0
 8006462:	6123      	str	r3, [r4, #16]
 8006464:	4665      	mov	r5, ip
 8006466:	e7b9      	b.n	80063dc <_printf_i+0x118>
 8006468:	6813      	ldr	r3, [r2, #0]
 800646a:	1d19      	adds	r1, r3, #4
 800646c:	6011      	str	r1, [r2, #0]
 800646e:	681d      	ldr	r5, [r3, #0]
 8006470:	6862      	ldr	r2, [r4, #4]
 8006472:	2100      	movs	r1, #0
 8006474:	4628      	mov	r0, r5
 8006476:	f7f9 fec3 	bl	8000200 <memchr>
 800647a:	b108      	cbz	r0, 8006480 <_printf_i+0x1bc>
 800647c:	1b40      	subs	r0, r0, r5
 800647e:	6060      	str	r0, [r4, #4]
 8006480:	6863      	ldr	r3, [r4, #4]
 8006482:	6123      	str	r3, [r4, #16]
 8006484:	2300      	movs	r3, #0
 8006486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800648a:	e7a7      	b.n	80063dc <_printf_i+0x118>
 800648c:	6923      	ldr	r3, [r4, #16]
 800648e:	462a      	mov	r2, r5
 8006490:	4639      	mov	r1, r7
 8006492:	4630      	mov	r0, r6
 8006494:	47c0      	blx	r8
 8006496:	3001      	adds	r0, #1
 8006498:	d0aa      	beq.n	80063f0 <_printf_i+0x12c>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	079b      	lsls	r3, r3, #30
 800649e:	d413      	bmi.n	80064c8 <_printf_i+0x204>
 80064a0:	68e0      	ldr	r0, [r4, #12]
 80064a2:	9b03      	ldr	r3, [sp, #12]
 80064a4:	4298      	cmp	r0, r3
 80064a6:	bfb8      	it	lt
 80064a8:	4618      	movlt	r0, r3
 80064aa:	e7a3      	b.n	80063f4 <_printf_i+0x130>
 80064ac:	2301      	movs	r3, #1
 80064ae:	464a      	mov	r2, r9
 80064b0:	4639      	mov	r1, r7
 80064b2:	4630      	mov	r0, r6
 80064b4:	47c0      	blx	r8
 80064b6:	3001      	adds	r0, #1
 80064b8:	d09a      	beq.n	80063f0 <_printf_i+0x12c>
 80064ba:	3501      	adds	r5, #1
 80064bc:	68e3      	ldr	r3, [r4, #12]
 80064be:	9a03      	ldr	r2, [sp, #12]
 80064c0:	1a9b      	subs	r3, r3, r2
 80064c2:	42ab      	cmp	r3, r5
 80064c4:	dcf2      	bgt.n	80064ac <_printf_i+0x1e8>
 80064c6:	e7eb      	b.n	80064a0 <_printf_i+0x1dc>
 80064c8:	2500      	movs	r5, #0
 80064ca:	f104 0919 	add.w	r9, r4, #25
 80064ce:	e7f5      	b.n	80064bc <_printf_i+0x1f8>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1ac      	bne.n	800642e <_printf_i+0x16a>
 80064d4:	7803      	ldrb	r3, [r0, #0]
 80064d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064de:	e76c      	b.n	80063ba <_printf_i+0xf6>
 80064e0:	08007d0a 	.word	0x08007d0a
 80064e4:	08007d1b 	.word	0x08007d1b

080064e8 <siprintf>:
 80064e8:	b40e      	push	{r1, r2, r3}
 80064ea:	b500      	push	{lr}
 80064ec:	b09c      	sub	sp, #112	; 0x70
 80064ee:	ab1d      	add	r3, sp, #116	; 0x74
 80064f0:	9002      	str	r0, [sp, #8]
 80064f2:	9006      	str	r0, [sp, #24]
 80064f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064f8:	4809      	ldr	r0, [pc, #36]	; (8006520 <siprintf+0x38>)
 80064fa:	9107      	str	r1, [sp, #28]
 80064fc:	9104      	str	r1, [sp, #16]
 80064fe:	4909      	ldr	r1, [pc, #36]	; (8006524 <siprintf+0x3c>)
 8006500:	f853 2b04 	ldr.w	r2, [r3], #4
 8006504:	9105      	str	r1, [sp, #20]
 8006506:	6800      	ldr	r0, [r0, #0]
 8006508:	9301      	str	r3, [sp, #4]
 800650a:	a902      	add	r1, sp, #8
 800650c:	f001 fa5c 	bl	80079c8 <_svfiprintf_r>
 8006510:	9b02      	ldr	r3, [sp, #8]
 8006512:	2200      	movs	r2, #0
 8006514:	701a      	strb	r2, [r3, #0]
 8006516:	b01c      	add	sp, #112	; 0x70
 8006518:	f85d eb04 	ldr.w	lr, [sp], #4
 800651c:	b003      	add	sp, #12
 800651e:	4770      	bx	lr
 8006520:	2000000c 	.word	0x2000000c
 8006524:	ffff0208 	.word	0xffff0208

08006528 <quorem>:
 8006528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652c:	6903      	ldr	r3, [r0, #16]
 800652e:	690c      	ldr	r4, [r1, #16]
 8006530:	42a3      	cmp	r3, r4
 8006532:	4680      	mov	r8, r0
 8006534:	f2c0 8082 	blt.w	800663c <quorem+0x114>
 8006538:	3c01      	subs	r4, #1
 800653a:	f101 0714 	add.w	r7, r1, #20
 800653e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006542:	f100 0614 	add.w	r6, r0, #20
 8006546:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800654a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800654e:	eb06 030c 	add.w	r3, r6, ip
 8006552:	3501      	adds	r5, #1
 8006554:	eb07 090c 	add.w	r9, r7, ip
 8006558:	9301      	str	r3, [sp, #4]
 800655a:	fbb0 f5f5 	udiv	r5, r0, r5
 800655e:	b395      	cbz	r5, 80065c6 <quorem+0x9e>
 8006560:	f04f 0a00 	mov.w	sl, #0
 8006564:	4638      	mov	r0, r7
 8006566:	46b6      	mov	lr, r6
 8006568:	46d3      	mov	fp, sl
 800656a:	f850 2b04 	ldr.w	r2, [r0], #4
 800656e:	b293      	uxth	r3, r2
 8006570:	fb05 a303 	mla	r3, r5, r3, sl
 8006574:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006578:	b29b      	uxth	r3, r3
 800657a:	ebab 0303 	sub.w	r3, fp, r3
 800657e:	0c12      	lsrs	r2, r2, #16
 8006580:	f8de b000 	ldr.w	fp, [lr]
 8006584:	fb05 a202 	mla	r2, r5, r2, sl
 8006588:	fa13 f38b 	uxtah	r3, r3, fp
 800658c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006590:	fa1f fb82 	uxth.w	fp, r2
 8006594:	f8de 2000 	ldr.w	r2, [lr]
 8006598:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800659c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065a6:	4581      	cmp	r9, r0
 80065a8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80065ac:	f84e 3b04 	str.w	r3, [lr], #4
 80065b0:	d2db      	bcs.n	800656a <quorem+0x42>
 80065b2:	f856 300c 	ldr.w	r3, [r6, ip]
 80065b6:	b933      	cbnz	r3, 80065c6 <quorem+0x9e>
 80065b8:	9b01      	ldr	r3, [sp, #4]
 80065ba:	3b04      	subs	r3, #4
 80065bc:	429e      	cmp	r6, r3
 80065be:	461a      	mov	r2, r3
 80065c0:	d330      	bcc.n	8006624 <quorem+0xfc>
 80065c2:	f8c8 4010 	str.w	r4, [r8, #16]
 80065c6:	4640      	mov	r0, r8
 80065c8:	f001 f828 	bl	800761c <__mcmp>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	db25      	blt.n	800661c <quorem+0xf4>
 80065d0:	3501      	adds	r5, #1
 80065d2:	4630      	mov	r0, r6
 80065d4:	f04f 0c00 	mov.w	ip, #0
 80065d8:	f857 2b04 	ldr.w	r2, [r7], #4
 80065dc:	f8d0 e000 	ldr.w	lr, [r0]
 80065e0:	b293      	uxth	r3, r2
 80065e2:	ebac 0303 	sub.w	r3, ip, r3
 80065e6:	0c12      	lsrs	r2, r2, #16
 80065e8:	fa13 f38e 	uxtah	r3, r3, lr
 80065ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80065f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065fa:	45b9      	cmp	r9, r7
 80065fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006600:	f840 3b04 	str.w	r3, [r0], #4
 8006604:	d2e8      	bcs.n	80065d8 <quorem+0xb0>
 8006606:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800660a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800660e:	b92a      	cbnz	r2, 800661c <quorem+0xf4>
 8006610:	3b04      	subs	r3, #4
 8006612:	429e      	cmp	r6, r3
 8006614:	461a      	mov	r2, r3
 8006616:	d30b      	bcc.n	8006630 <quorem+0x108>
 8006618:	f8c8 4010 	str.w	r4, [r8, #16]
 800661c:	4628      	mov	r0, r5
 800661e:	b003      	add	sp, #12
 8006620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006624:	6812      	ldr	r2, [r2, #0]
 8006626:	3b04      	subs	r3, #4
 8006628:	2a00      	cmp	r2, #0
 800662a:	d1ca      	bne.n	80065c2 <quorem+0x9a>
 800662c:	3c01      	subs	r4, #1
 800662e:	e7c5      	b.n	80065bc <quorem+0x94>
 8006630:	6812      	ldr	r2, [r2, #0]
 8006632:	3b04      	subs	r3, #4
 8006634:	2a00      	cmp	r2, #0
 8006636:	d1ef      	bne.n	8006618 <quorem+0xf0>
 8006638:	3c01      	subs	r4, #1
 800663a:	e7ea      	b.n	8006612 <quorem+0xea>
 800663c:	2000      	movs	r0, #0
 800663e:	e7ee      	b.n	800661e <quorem+0xf6>

08006640 <_dtoa_r>:
 8006640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006644:	ec57 6b10 	vmov	r6, r7, d0
 8006648:	b097      	sub	sp, #92	; 0x5c
 800664a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800664c:	9106      	str	r1, [sp, #24]
 800664e:	4604      	mov	r4, r0
 8006650:	920b      	str	r2, [sp, #44]	; 0x2c
 8006652:	9312      	str	r3, [sp, #72]	; 0x48
 8006654:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006658:	e9cd 6700 	strd	r6, r7, [sp]
 800665c:	b93d      	cbnz	r5, 800666e <_dtoa_r+0x2e>
 800665e:	2010      	movs	r0, #16
 8006660:	f000 fdb4 	bl	80071cc <malloc>
 8006664:	6260      	str	r0, [r4, #36]	; 0x24
 8006666:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800666a:	6005      	str	r5, [r0, #0]
 800666c:	60c5      	str	r5, [r0, #12]
 800666e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006670:	6819      	ldr	r1, [r3, #0]
 8006672:	b151      	cbz	r1, 800668a <_dtoa_r+0x4a>
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	604a      	str	r2, [r1, #4]
 8006678:	2301      	movs	r3, #1
 800667a:	4093      	lsls	r3, r2
 800667c:	608b      	str	r3, [r1, #8]
 800667e:	4620      	mov	r0, r4
 8006680:	f000 fdeb 	bl	800725a <_Bfree>
 8006684:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006686:	2200      	movs	r2, #0
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	1e3b      	subs	r3, r7, #0
 800668c:	bfbb      	ittet	lt
 800668e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006692:	9301      	strlt	r3, [sp, #4]
 8006694:	2300      	movge	r3, #0
 8006696:	2201      	movlt	r2, #1
 8006698:	bfac      	ite	ge
 800669a:	f8c8 3000 	strge.w	r3, [r8]
 800669e:	f8c8 2000 	strlt.w	r2, [r8]
 80066a2:	4baf      	ldr	r3, [pc, #700]	; (8006960 <_dtoa_r+0x320>)
 80066a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80066a8:	ea33 0308 	bics.w	r3, r3, r8
 80066ac:	d114      	bne.n	80066d8 <_dtoa_r+0x98>
 80066ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	9b00      	ldr	r3, [sp, #0]
 80066b8:	b923      	cbnz	r3, 80066c4 <_dtoa_r+0x84>
 80066ba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80066be:	2800      	cmp	r0, #0
 80066c0:	f000 8542 	beq.w	8007148 <_dtoa_r+0xb08>
 80066c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066c6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006974 <_dtoa_r+0x334>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 8544 	beq.w	8007158 <_dtoa_r+0xb18>
 80066d0:	f10b 0303 	add.w	r3, fp, #3
 80066d4:	f000 bd3e 	b.w	8007154 <_dtoa_r+0xb14>
 80066d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80066dc:	2200      	movs	r2, #0
 80066de:	2300      	movs	r3, #0
 80066e0:	4630      	mov	r0, r6
 80066e2:	4639      	mov	r1, r7
 80066e4:	f7fa fa00 	bl	8000ae8 <__aeabi_dcmpeq>
 80066e8:	4681      	mov	r9, r0
 80066ea:	b168      	cbz	r0, 8006708 <_dtoa_r+0xc8>
 80066ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066ee:	2301      	movs	r3, #1
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 8524 	beq.w	8007142 <_dtoa_r+0xb02>
 80066fa:	4b9a      	ldr	r3, [pc, #616]	; (8006964 <_dtoa_r+0x324>)
 80066fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066fe:	f103 3bff 	add.w	fp, r3, #4294967295
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	f000 bd28 	b.w	8007158 <_dtoa_r+0xb18>
 8006708:	aa14      	add	r2, sp, #80	; 0x50
 800670a:	a915      	add	r1, sp, #84	; 0x54
 800670c:	ec47 6b10 	vmov	d0, r6, r7
 8006710:	4620      	mov	r0, r4
 8006712:	f000 fffa 	bl	800770a <__d2b>
 8006716:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800671a:	9004      	str	r0, [sp, #16]
 800671c:	2d00      	cmp	r5, #0
 800671e:	d07c      	beq.n	800681a <_dtoa_r+0x1da>
 8006720:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006724:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006728:	46b2      	mov	sl, r6
 800672a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800672e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006732:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006736:	2200      	movs	r2, #0
 8006738:	4b8b      	ldr	r3, [pc, #556]	; (8006968 <_dtoa_r+0x328>)
 800673a:	4650      	mov	r0, sl
 800673c:	4659      	mov	r1, fp
 800673e:	f7f9 fdb3 	bl	80002a8 <__aeabi_dsub>
 8006742:	a381      	add	r3, pc, #516	; (adr r3, 8006948 <_dtoa_r+0x308>)
 8006744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006748:	f7f9 ff66 	bl	8000618 <__aeabi_dmul>
 800674c:	a380      	add	r3, pc, #512	; (adr r3, 8006950 <_dtoa_r+0x310>)
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	f7f9 fdab 	bl	80002ac <__adddf3>
 8006756:	4606      	mov	r6, r0
 8006758:	4628      	mov	r0, r5
 800675a:	460f      	mov	r7, r1
 800675c:	f7f9 fef2 	bl	8000544 <__aeabi_i2d>
 8006760:	a37d      	add	r3, pc, #500	; (adr r3, 8006958 <_dtoa_r+0x318>)
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f7f9 ff57 	bl	8000618 <__aeabi_dmul>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4630      	mov	r0, r6
 8006770:	4639      	mov	r1, r7
 8006772:	f7f9 fd9b 	bl	80002ac <__adddf3>
 8006776:	4606      	mov	r6, r0
 8006778:	460f      	mov	r7, r1
 800677a:	f7fa f9fd 	bl	8000b78 <__aeabi_d2iz>
 800677e:	2200      	movs	r2, #0
 8006780:	4682      	mov	sl, r0
 8006782:	2300      	movs	r3, #0
 8006784:	4630      	mov	r0, r6
 8006786:	4639      	mov	r1, r7
 8006788:	f7fa f9b8 	bl	8000afc <__aeabi_dcmplt>
 800678c:	b148      	cbz	r0, 80067a2 <_dtoa_r+0x162>
 800678e:	4650      	mov	r0, sl
 8006790:	f7f9 fed8 	bl	8000544 <__aeabi_i2d>
 8006794:	4632      	mov	r2, r6
 8006796:	463b      	mov	r3, r7
 8006798:	f7fa f9a6 	bl	8000ae8 <__aeabi_dcmpeq>
 800679c:	b908      	cbnz	r0, 80067a2 <_dtoa_r+0x162>
 800679e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067a2:	f1ba 0f16 	cmp.w	sl, #22
 80067a6:	d859      	bhi.n	800685c <_dtoa_r+0x21c>
 80067a8:	4970      	ldr	r1, [pc, #448]	; (800696c <_dtoa_r+0x32c>)
 80067aa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80067ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067b6:	f7fa f9bf 	bl	8000b38 <__aeabi_dcmpgt>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d050      	beq.n	8006860 <_dtoa_r+0x220>
 80067be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067c2:	2300      	movs	r3, #0
 80067c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80067c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067c8:	1b5d      	subs	r5, r3, r5
 80067ca:	f1b5 0801 	subs.w	r8, r5, #1
 80067ce:	bf49      	itett	mi
 80067d0:	f1c5 0301 	rsbmi	r3, r5, #1
 80067d4:	2300      	movpl	r3, #0
 80067d6:	9305      	strmi	r3, [sp, #20]
 80067d8:	f04f 0800 	movmi.w	r8, #0
 80067dc:	bf58      	it	pl
 80067de:	9305      	strpl	r3, [sp, #20]
 80067e0:	f1ba 0f00 	cmp.w	sl, #0
 80067e4:	db3e      	blt.n	8006864 <_dtoa_r+0x224>
 80067e6:	2300      	movs	r3, #0
 80067e8:	44d0      	add	r8, sl
 80067ea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80067ee:	9307      	str	r3, [sp, #28]
 80067f0:	9b06      	ldr	r3, [sp, #24]
 80067f2:	2b09      	cmp	r3, #9
 80067f4:	f200 8090 	bhi.w	8006918 <_dtoa_r+0x2d8>
 80067f8:	2b05      	cmp	r3, #5
 80067fa:	bfc4      	itt	gt
 80067fc:	3b04      	subgt	r3, #4
 80067fe:	9306      	strgt	r3, [sp, #24]
 8006800:	9b06      	ldr	r3, [sp, #24]
 8006802:	f1a3 0302 	sub.w	r3, r3, #2
 8006806:	bfcc      	ite	gt
 8006808:	2500      	movgt	r5, #0
 800680a:	2501      	movle	r5, #1
 800680c:	2b03      	cmp	r3, #3
 800680e:	f200 808f 	bhi.w	8006930 <_dtoa_r+0x2f0>
 8006812:	e8df f003 	tbb	[pc, r3]
 8006816:	7f7d      	.short	0x7f7d
 8006818:	7131      	.short	0x7131
 800681a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800681e:	441d      	add	r5, r3
 8006820:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006824:	2820      	cmp	r0, #32
 8006826:	dd13      	ble.n	8006850 <_dtoa_r+0x210>
 8006828:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800682c:	9b00      	ldr	r3, [sp, #0]
 800682e:	fa08 f800 	lsl.w	r8, r8, r0
 8006832:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006836:	fa23 f000 	lsr.w	r0, r3, r0
 800683a:	ea48 0000 	orr.w	r0, r8, r0
 800683e:	f7f9 fe71 	bl	8000524 <__aeabi_ui2d>
 8006842:	2301      	movs	r3, #1
 8006844:	4682      	mov	sl, r0
 8006846:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800684a:	3d01      	subs	r5, #1
 800684c:	9313      	str	r3, [sp, #76]	; 0x4c
 800684e:	e772      	b.n	8006736 <_dtoa_r+0xf6>
 8006850:	9b00      	ldr	r3, [sp, #0]
 8006852:	f1c0 0020 	rsb	r0, r0, #32
 8006856:	fa03 f000 	lsl.w	r0, r3, r0
 800685a:	e7f0      	b.n	800683e <_dtoa_r+0x1fe>
 800685c:	2301      	movs	r3, #1
 800685e:	e7b1      	b.n	80067c4 <_dtoa_r+0x184>
 8006860:	900f      	str	r0, [sp, #60]	; 0x3c
 8006862:	e7b0      	b.n	80067c6 <_dtoa_r+0x186>
 8006864:	9b05      	ldr	r3, [sp, #20]
 8006866:	eba3 030a 	sub.w	r3, r3, sl
 800686a:	9305      	str	r3, [sp, #20]
 800686c:	f1ca 0300 	rsb	r3, sl, #0
 8006870:	9307      	str	r3, [sp, #28]
 8006872:	2300      	movs	r3, #0
 8006874:	930e      	str	r3, [sp, #56]	; 0x38
 8006876:	e7bb      	b.n	80067f0 <_dtoa_r+0x1b0>
 8006878:	2301      	movs	r3, #1
 800687a:	930a      	str	r3, [sp, #40]	; 0x28
 800687c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800687e:	2b00      	cmp	r3, #0
 8006880:	dd59      	ble.n	8006936 <_dtoa_r+0x2f6>
 8006882:	9302      	str	r3, [sp, #8]
 8006884:	4699      	mov	r9, r3
 8006886:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006888:	2200      	movs	r2, #0
 800688a:	6072      	str	r2, [r6, #4]
 800688c:	2204      	movs	r2, #4
 800688e:	f102 0014 	add.w	r0, r2, #20
 8006892:	4298      	cmp	r0, r3
 8006894:	6871      	ldr	r1, [r6, #4]
 8006896:	d953      	bls.n	8006940 <_dtoa_r+0x300>
 8006898:	4620      	mov	r0, r4
 800689a:	f000 fcaa 	bl	80071f2 <_Balloc>
 800689e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068a0:	6030      	str	r0, [r6, #0]
 80068a2:	f1b9 0f0e 	cmp.w	r9, #14
 80068a6:	f8d3 b000 	ldr.w	fp, [r3]
 80068aa:	f200 80e6 	bhi.w	8006a7a <_dtoa_r+0x43a>
 80068ae:	2d00      	cmp	r5, #0
 80068b0:	f000 80e3 	beq.w	8006a7a <_dtoa_r+0x43a>
 80068b4:	ed9d 7b00 	vldr	d7, [sp]
 80068b8:	f1ba 0f00 	cmp.w	sl, #0
 80068bc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80068c0:	dd74      	ble.n	80069ac <_dtoa_r+0x36c>
 80068c2:	4a2a      	ldr	r2, [pc, #168]	; (800696c <_dtoa_r+0x32c>)
 80068c4:	f00a 030f 	and.w	r3, sl, #15
 80068c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80068cc:	ed93 7b00 	vldr	d7, [r3]
 80068d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80068d4:	06f0      	lsls	r0, r6, #27
 80068d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80068da:	d565      	bpl.n	80069a8 <_dtoa_r+0x368>
 80068dc:	4b24      	ldr	r3, [pc, #144]	; (8006970 <_dtoa_r+0x330>)
 80068de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068e6:	f7f9 ffc1 	bl	800086c <__aeabi_ddiv>
 80068ea:	e9cd 0100 	strd	r0, r1, [sp]
 80068ee:	f006 060f 	and.w	r6, r6, #15
 80068f2:	2503      	movs	r5, #3
 80068f4:	4f1e      	ldr	r7, [pc, #120]	; (8006970 <_dtoa_r+0x330>)
 80068f6:	e04c      	b.n	8006992 <_dtoa_r+0x352>
 80068f8:	2301      	movs	r3, #1
 80068fa:	930a      	str	r3, [sp, #40]	; 0x28
 80068fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068fe:	4453      	add	r3, sl
 8006900:	f103 0901 	add.w	r9, r3, #1
 8006904:	9302      	str	r3, [sp, #8]
 8006906:	464b      	mov	r3, r9
 8006908:	2b01      	cmp	r3, #1
 800690a:	bfb8      	it	lt
 800690c:	2301      	movlt	r3, #1
 800690e:	e7ba      	b.n	8006886 <_dtoa_r+0x246>
 8006910:	2300      	movs	r3, #0
 8006912:	e7b2      	b.n	800687a <_dtoa_r+0x23a>
 8006914:	2300      	movs	r3, #0
 8006916:	e7f0      	b.n	80068fa <_dtoa_r+0x2ba>
 8006918:	2501      	movs	r5, #1
 800691a:	2300      	movs	r3, #0
 800691c:	9306      	str	r3, [sp, #24]
 800691e:	950a      	str	r5, [sp, #40]	; 0x28
 8006920:	f04f 33ff 	mov.w	r3, #4294967295
 8006924:	9302      	str	r3, [sp, #8]
 8006926:	4699      	mov	r9, r3
 8006928:	2200      	movs	r2, #0
 800692a:	2312      	movs	r3, #18
 800692c:	920b      	str	r2, [sp, #44]	; 0x2c
 800692e:	e7aa      	b.n	8006886 <_dtoa_r+0x246>
 8006930:	2301      	movs	r3, #1
 8006932:	930a      	str	r3, [sp, #40]	; 0x28
 8006934:	e7f4      	b.n	8006920 <_dtoa_r+0x2e0>
 8006936:	2301      	movs	r3, #1
 8006938:	9302      	str	r3, [sp, #8]
 800693a:	4699      	mov	r9, r3
 800693c:	461a      	mov	r2, r3
 800693e:	e7f5      	b.n	800692c <_dtoa_r+0x2ec>
 8006940:	3101      	adds	r1, #1
 8006942:	6071      	str	r1, [r6, #4]
 8006944:	0052      	lsls	r2, r2, #1
 8006946:	e7a2      	b.n	800688e <_dtoa_r+0x24e>
 8006948:	636f4361 	.word	0x636f4361
 800694c:	3fd287a7 	.word	0x3fd287a7
 8006950:	8b60c8b3 	.word	0x8b60c8b3
 8006954:	3fc68a28 	.word	0x3fc68a28
 8006958:	509f79fb 	.word	0x509f79fb
 800695c:	3fd34413 	.word	0x3fd34413
 8006960:	7ff00000 	.word	0x7ff00000
 8006964:	08007d09 	.word	0x08007d09
 8006968:	3ff80000 	.word	0x3ff80000
 800696c:	08007d68 	.word	0x08007d68
 8006970:	08007d40 	.word	0x08007d40
 8006974:	08007d35 	.word	0x08007d35
 8006978:	07f1      	lsls	r1, r6, #31
 800697a:	d508      	bpl.n	800698e <_dtoa_r+0x34e>
 800697c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006984:	f7f9 fe48 	bl	8000618 <__aeabi_dmul>
 8006988:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800698c:	3501      	adds	r5, #1
 800698e:	1076      	asrs	r6, r6, #1
 8006990:	3708      	adds	r7, #8
 8006992:	2e00      	cmp	r6, #0
 8006994:	d1f0      	bne.n	8006978 <_dtoa_r+0x338>
 8006996:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800699a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800699e:	f7f9 ff65 	bl	800086c <__aeabi_ddiv>
 80069a2:	e9cd 0100 	strd	r0, r1, [sp]
 80069a6:	e01a      	b.n	80069de <_dtoa_r+0x39e>
 80069a8:	2502      	movs	r5, #2
 80069aa:	e7a3      	b.n	80068f4 <_dtoa_r+0x2b4>
 80069ac:	f000 80a0 	beq.w	8006af0 <_dtoa_r+0x4b0>
 80069b0:	f1ca 0600 	rsb	r6, sl, #0
 80069b4:	4b9f      	ldr	r3, [pc, #636]	; (8006c34 <_dtoa_r+0x5f4>)
 80069b6:	4fa0      	ldr	r7, [pc, #640]	; (8006c38 <_dtoa_r+0x5f8>)
 80069b8:	f006 020f 	and.w	r2, r6, #15
 80069bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80069c8:	f7f9 fe26 	bl	8000618 <__aeabi_dmul>
 80069cc:	e9cd 0100 	strd	r0, r1, [sp]
 80069d0:	1136      	asrs	r6, r6, #4
 80069d2:	2300      	movs	r3, #0
 80069d4:	2502      	movs	r5, #2
 80069d6:	2e00      	cmp	r6, #0
 80069d8:	d17f      	bne.n	8006ada <_dtoa_r+0x49a>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e1      	bne.n	80069a2 <_dtoa_r+0x362>
 80069de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 8087 	beq.w	8006af4 <_dtoa_r+0x4b4>
 80069e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80069ea:	2200      	movs	r2, #0
 80069ec:	4b93      	ldr	r3, [pc, #588]	; (8006c3c <_dtoa_r+0x5fc>)
 80069ee:	4630      	mov	r0, r6
 80069f0:	4639      	mov	r1, r7
 80069f2:	f7fa f883 	bl	8000afc <__aeabi_dcmplt>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	d07c      	beq.n	8006af4 <_dtoa_r+0x4b4>
 80069fa:	f1b9 0f00 	cmp.w	r9, #0
 80069fe:	d079      	beq.n	8006af4 <_dtoa_r+0x4b4>
 8006a00:	9b02      	ldr	r3, [sp, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	dd35      	ble.n	8006a72 <_dtoa_r+0x432>
 8006a06:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006a0a:	9308      	str	r3, [sp, #32]
 8006a0c:	4639      	mov	r1, r7
 8006a0e:	2200      	movs	r2, #0
 8006a10:	4b8b      	ldr	r3, [pc, #556]	; (8006c40 <_dtoa_r+0x600>)
 8006a12:	4630      	mov	r0, r6
 8006a14:	f7f9 fe00 	bl	8000618 <__aeabi_dmul>
 8006a18:	e9cd 0100 	strd	r0, r1, [sp]
 8006a1c:	9f02      	ldr	r7, [sp, #8]
 8006a1e:	3501      	adds	r5, #1
 8006a20:	4628      	mov	r0, r5
 8006a22:	f7f9 fd8f 	bl	8000544 <__aeabi_i2d>
 8006a26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a2a:	f7f9 fdf5 	bl	8000618 <__aeabi_dmul>
 8006a2e:	2200      	movs	r2, #0
 8006a30:	4b84      	ldr	r3, [pc, #528]	; (8006c44 <_dtoa_r+0x604>)
 8006a32:	f7f9 fc3b 	bl	80002ac <__adddf3>
 8006a36:	4605      	mov	r5, r0
 8006a38:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006a3c:	2f00      	cmp	r7, #0
 8006a3e:	d15d      	bne.n	8006afc <_dtoa_r+0x4bc>
 8006a40:	2200      	movs	r2, #0
 8006a42:	4b81      	ldr	r3, [pc, #516]	; (8006c48 <_dtoa_r+0x608>)
 8006a44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a48:	f7f9 fc2e 	bl	80002a8 <__aeabi_dsub>
 8006a4c:	462a      	mov	r2, r5
 8006a4e:	4633      	mov	r3, r6
 8006a50:	e9cd 0100 	strd	r0, r1, [sp]
 8006a54:	f7fa f870 	bl	8000b38 <__aeabi_dcmpgt>
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	f040 8288 	bne.w	8006f6e <_dtoa_r+0x92e>
 8006a5e:	462a      	mov	r2, r5
 8006a60:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006a64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a68:	f7fa f848 	bl	8000afc <__aeabi_dcmplt>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	f040 827c 	bne.w	8006f6a <_dtoa_r+0x92a>
 8006a72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a76:	e9cd 2300 	strd	r2, r3, [sp]
 8006a7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f2c0 8150 	blt.w	8006d22 <_dtoa_r+0x6e2>
 8006a82:	f1ba 0f0e 	cmp.w	sl, #14
 8006a86:	f300 814c 	bgt.w	8006d22 <_dtoa_r+0x6e2>
 8006a8a:	4b6a      	ldr	r3, [pc, #424]	; (8006c34 <_dtoa_r+0x5f4>)
 8006a8c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a90:	ed93 7b00 	vldr	d7, [r3]
 8006a94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006a9c:	f280 80d8 	bge.w	8006c50 <_dtoa_r+0x610>
 8006aa0:	f1b9 0f00 	cmp.w	r9, #0
 8006aa4:	f300 80d4 	bgt.w	8006c50 <_dtoa_r+0x610>
 8006aa8:	f040 825e 	bne.w	8006f68 <_dtoa_r+0x928>
 8006aac:	2200      	movs	r2, #0
 8006aae:	4b66      	ldr	r3, [pc, #408]	; (8006c48 <_dtoa_r+0x608>)
 8006ab0:	ec51 0b17 	vmov	r0, r1, d7
 8006ab4:	f7f9 fdb0 	bl	8000618 <__aeabi_dmul>
 8006ab8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006abc:	f7fa f832 	bl	8000b24 <__aeabi_dcmpge>
 8006ac0:	464f      	mov	r7, r9
 8006ac2:	464e      	mov	r6, r9
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	f040 8234 	bne.w	8006f32 <_dtoa_r+0x8f2>
 8006aca:	2331      	movs	r3, #49	; 0x31
 8006acc:	f10b 0501 	add.w	r5, fp, #1
 8006ad0:	f88b 3000 	strb.w	r3, [fp]
 8006ad4:	f10a 0a01 	add.w	sl, sl, #1
 8006ad8:	e22f      	b.n	8006f3a <_dtoa_r+0x8fa>
 8006ada:	07f2      	lsls	r2, r6, #31
 8006adc:	d505      	bpl.n	8006aea <_dtoa_r+0x4aa>
 8006ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ae2:	f7f9 fd99 	bl	8000618 <__aeabi_dmul>
 8006ae6:	3501      	adds	r5, #1
 8006ae8:	2301      	movs	r3, #1
 8006aea:	1076      	asrs	r6, r6, #1
 8006aec:	3708      	adds	r7, #8
 8006aee:	e772      	b.n	80069d6 <_dtoa_r+0x396>
 8006af0:	2502      	movs	r5, #2
 8006af2:	e774      	b.n	80069de <_dtoa_r+0x39e>
 8006af4:	f8cd a020 	str.w	sl, [sp, #32]
 8006af8:	464f      	mov	r7, r9
 8006afa:	e791      	b.n	8006a20 <_dtoa_r+0x3e0>
 8006afc:	4b4d      	ldr	r3, [pc, #308]	; (8006c34 <_dtoa_r+0x5f4>)
 8006afe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b02:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d047      	beq.n	8006b9c <_dtoa_r+0x55c>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	2000      	movs	r0, #0
 8006b12:	494e      	ldr	r1, [pc, #312]	; (8006c4c <_dtoa_r+0x60c>)
 8006b14:	f7f9 feaa 	bl	800086c <__aeabi_ddiv>
 8006b18:	462a      	mov	r2, r5
 8006b1a:	4633      	mov	r3, r6
 8006b1c:	f7f9 fbc4 	bl	80002a8 <__aeabi_dsub>
 8006b20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006b24:	465d      	mov	r5, fp
 8006b26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b2a:	f7fa f825 	bl	8000b78 <__aeabi_d2iz>
 8006b2e:	4606      	mov	r6, r0
 8006b30:	f7f9 fd08 	bl	8000544 <__aeabi_i2d>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b3c:	f7f9 fbb4 	bl	80002a8 <__aeabi_dsub>
 8006b40:	3630      	adds	r6, #48	; 0x30
 8006b42:	f805 6b01 	strb.w	r6, [r5], #1
 8006b46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006b4a:	e9cd 0100 	strd	r0, r1, [sp]
 8006b4e:	f7f9 ffd5 	bl	8000afc <__aeabi_dcmplt>
 8006b52:	2800      	cmp	r0, #0
 8006b54:	d163      	bne.n	8006c1e <_dtoa_r+0x5de>
 8006b56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	4937      	ldr	r1, [pc, #220]	; (8006c3c <_dtoa_r+0x5fc>)
 8006b5e:	f7f9 fba3 	bl	80002a8 <__aeabi_dsub>
 8006b62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006b66:	f7f9 ffc9 	bl	8000afc <__aeabi_dcmplt>
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	f040 80b7 	bne.w	8006cde <_dtoa_r+0x69e>
 8006b70:	eba5 030b 	sub.w	r3, r5, fp
 8006b74:	429f      	cmp	r7, r3
 8006b76:	f77f af7c 	ble.w	8006a72 <_dtoa_r+0x432>
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	4b30      	ldr	r3, [pc, #192]	; (8006c40 <_dtoa_r+0x600>)
 8006b7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b82:	f7f9 fd49 	bl	8000618 <__aeabi_dmul>
 8006b86:	2200      	movs	r2, #0
 8006b88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006b8c:	4b2c      	ldr	r3, [pc, #176]	; (8006c40 <_dtoa_r+0x600>)
 8006b8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b92:	f7f9 fd41 	bl	8000618 <__aeabi_dmul>
 8006b96:	e9cd 0100 	strd	r0, r1, [sp]
 8006b9a:	e7c4      	b.n	8006b26 <_dtoa_r+0x4e6>
 8006b9c:	462a      	mov	r2, r5
 8006b9e:	4633      	mov	r3, r6
 8006ba0:	f7f9 fd3a 	bl	8000618 <__aeabi_dmul>
 8006ba4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006ba8:	eb0b 0507 	add.w	r5, fp, r7
 8006bac:	465e      	mov	r6, fp
 8006bae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bb2:	f7f9 ffe1 	bl	8000b78 <__aeabi_d2iz>
 8006bb6:	4607      	mov	r7, r0
 8006bb8:	f7f9 fcc4 	bl	8000544 <__aeabi_i2d>
 8006bbc:	3730      	adds	r7, #48	; 0x30
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bc6:	f7f9 fb6f 	bl	80002a8 <__aeabi_dsub>
 8006bca:	f806 7b01 	strb.w	r7, [r6], #1
 8006bce:	42ae      	cmp	r6, r5
 8006bd0:	e9cd 0100 	strd	r0, r1, [sp]
 8006bd4:	f04f 0200 	mov.w	r2, #0
 8006bd8:	d126      	bne.n	8006c28 <_dtoa_r+0x5e8>
 8006bda:	4b1c      	ldr	r3, [pc, #112]	; (8006c4c <_dtoa_r+0x60c>)
 8006bdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006be0:	f7f9 fb64 	bl	80002ac <__adddf3>
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bec:	f7f9 ffa4 	bl	8000b38 <__aeabi_dcmpgt>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	d174      	bne.n	8006cde <_dtoa_r+0x69e>
 8006bf4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	4914      	ldr	r1, [pc, #80]	; (8006c4c <_dtoa_r+0x60c>)
 8006bfc:	f7f9 fb54 	bl	80002a8 <__aeabi_dsub>
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c08:	f7f9 ff78 	bl	8000afc <__aeabi_dcmplt>
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	f43f af30 	beq.w	8006a72 <_dtoa_r+0x432>
 8006c12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c16:	2b30      	cmp	r3, #48	; 0x30
 8006c18:	f105 32ff 	add.w	r2, r5, #4294967295
 8006c1c:	d002      	beq.n	8006c24 <_dtoa_r+0x5e4>
 8006c1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006c22:	e04a      	b.n	8006cba <_dtoa_r+0x67a>
 8006c24:	4615      	mov	r5, r2
 8006c26:	e7f4      	b.n	8006c12 <_dtoa_r+0x5d2>
 8006c28:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <_dtoa_r+0x600>)
 8006c2a:	f7f9 fcf5 	bl	8000618 <__aeabi_dmul>
 8006c2e:	e9cd 0100 	strd	r0, r1, [sp]
 8006c32:	e7bc      	b.n	8006bae <_dtoa_r+0x56e>
 8006c34:	08007d68 	.word	0x08007d68
 8006c38:	08007d40 	.word	0x08007d40
 8006c3c:	3ff00000 	.word	0x3ff00000
 8006c40:	40240000 	.word	0x40240000
 8006c44:	401c0000 	.word	0x401c0000
 8006c48:	40140000 	.word	0x40140000
 8006c4c:	3fe00000 	.word	0x3fe00000
 8006c50:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006c54:	465d      	mov	r5, fp
 8006c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	4639      	mov	r1, r7
 8006c5e:	f7f9 fe05 	bl	800086c <__aeabi_ddiv>
 8006c62:	f7f9 ff89 	bl	8000b78 <__aeabi_d2iz>
 8006c66:	4680      	mov	r8, r0
 8006c68:	f7f9 fc6c 	bl	8000544 <__aeabi_i2d>
 8006c6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c70:	f7f9 fcd2 	bl	8000618 <__aeabi_dmul>
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	4630      	mov	r0, r6
 8006c7a:	4639      	mov	r1, r7
 8006c7c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006c80:	f7f9 fb12 	bl	80002a8 <__aeabi_dsub>
 8006c84:	f805 6b01 	strb.w	r6, [r5], #1
 8006c88:	eba5 060b 	sub.w	r6, r5, fp
 8006c8c:	45b1      	cmp	r9, r6
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	d139      	bne.n	8006d08 <_dtoa_r+0x6c8>
 8006c94:	f7f9 fb0a 	bl	80002ac <__adddf3>
 8006c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c9c:	4606      	mov	r6, r0
 8006c9e:	460f      	mov	r7, r1
 8006ca0:	f7f9 ff4a 	bl	8000b38 <__aeabi_dcmpgt>
 8006ca4:	b9c8      	cbnz	r0, 8006cda <_dtoa_r+0x69a>
 8006ca6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006caa:	4630      	mov	r0, r6
 8006cac:	4639      	mov	r1, r7
 8006cae:	f7f9 ff1b 	bl	8000ae8 <__aeabi_dcmpeq>
 8006cb2:	b110      	cbz	r0, 8006cba <_dtoa_r+0x67a>
 8006cb4:	f018 0f01 	tst.w	r8, #1
 8006cb8:	d10f      	bne.n	8006cda <_dtoa_r+0x69a>
 8006cba:	9904      	ldr	r1, [sp, #16]
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f000 facc 	bl	800725a <_Bfree>
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006cc6:	702b      	strb	r3, [r5, #0]
 8006cc8:	f10a 0301 	add.w	r3, sl, #1
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 8241 	beq.w	8007158 <_dtoa_r+0xb18>
 8006cd6:	601d      	str	r5, [r3, #0]
 8006cd8:	e23e      	b.n	8007158 <_dtoa_r+0xb18>
 8006cda:	f8cd a020 	str.w	sl, [sp, #32]
 8006cde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ce2:	2a39      	cmp	r2, #57	; 0x39
 8006ce4:	f105 33ff 	add.w	r3, r5, #4294967295
 8006ce8:	d108      	bne.n	8006cfc <_dtoa_r+0x6bc>
 8006cea:	459b      	cmp	fp, r3
 8006cec:	d10a      	bne.n	8006d04 <_dtoa_r+0x6c4>
 8006cee:	9b08      	ldr	r3, [sp, #32]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	9308      	str	r3, [sp, #32]
 8006cf4:	2330      	movs	r3, #48	; 0x30
 8006cf6:	f88b 3000 	strb.w	r3, [fp]
 8006cfa:	465b      	mov	r3, fp
 8006cfc:	781a      	ldrb	r2, [r3, #0]
 8006cfe:	3201      	adds	r2, #1
 8006d00:	701a      	strb	r2, [r3, #0]
 8006d02:	e78c      	b.n	8006c1e <_dtoa_r+0x5de>
 8006d04:	461d      	mov	r5, r3
 8006d06:	e7ea      	b.n	8006cde <_dtoa_r+0x69e>
 8006d08:	2200      	movs	r2, #0
 8006d0a:	4b9b      	ldr	r3, [pc, #620]	; (8006f78 <_dtoa_r+0x938>)
 8006d0c:	f7f9 fc84 	bl	8000618 <__aeabi_dmul>
 8006d10:	2200      	movs	r2, #0
 8006d12:	2300      	movs	r3, #0
 8006d14:	4606      	mov	r6, r0
 8006d16:	460f      	mov	r7, r1
 8006d18:	f7f9 fee6 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	d09a      	beq.n	8006c56 <_dtoa_r+0x616>
 8006d20:	e7cb      	b.n	8006cba <_dtoa_r+0x67a>
 8006d22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d24:	2a00      	cmp	r2, #0
 8006d26:	f000 808b 	beq.w	8006e40 <_dtoa_r+0x800>
 8006d2a:	9a06      	ldr	r2, [sp, #24]
 8006d2c:	2a01      	cmp	r2, #1
 8006d2e:	dc6e      	bgt.n	8006e0e <_dtoa_r+0x7ce>
 8006d30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d32:	2a00      	cmp	r2, #0
 8006d34:	d067      	beq.n	8006e06 <_dtoa_r+0x7c6>
 8006d36:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d3a:	9f07      	ldr	r7, [sp, #28]
 8006d3c:	9d05      	ldr	r5, [sp, #20]
 8006d3e:	9a05      	ldr	r2, [sp, #20]
 8006d40:	2101      	movs	r1, #1
 8006d42:	441a      	add	r2, r3
 8006d44:	4620      	mov	r0, r4
 8006d46:	9205      	str	r2, [sp, #20]
 8006d48:	4498      	add	r8, r3
 8006d4a:	f000 fb26 	bl	800739a <__i2b>
 8006d4e:	4606      	mov	r6, r0
 8006d50:	2d00      	cmp	r5, #0
 8006d52:	dd0c      	ble.n	8006d6e <_dtoa_r+0x72e>
 8006d54:	f1b8 0f00 	cmp.w	r8, #0
 8006d58:	dd09      	ble.n	8006d6e <_dtoa_r+0x72e>
 8006d5a:	4545      	cmp	r5, r8
 8006d5c:	9a05      	ldr	r2, [sp, #20]
 8006d5e:	462b      	mov	r3, r5
 8006d60:	bfa8      	it	ge
 8006d62:	4643      	movge	r3, r8
 8006d64:	1ad2      	subs	r2, r2, r3
 8006d66:	9205      	str	r2, [sp, #20]
 8006d68:	1aed      	subs	r5, r5, r3
 8006d6a:	eba8 0803 	sub.w	r8, r8, r3
 8006d6e:	9b07      	ldr	r3, [sp, #28]
 8006d70:	b1eb      	cbz	r3, 8006dae <_dtoa_r+0x76e>
 8006d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d067      	beq.n	8006e48 <_dtoa_r+0x808>
 8006d78:	b18f      	cbz	r7, 8006d9e <_dtoa_r+0x75e>
 8006d7a:	4631      	mov	r1, r6
 8006d7c:	463a      	mov	r2, r7
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f000 fbaa 	bl	80074d8 <__pow5mult>
 8006d84:	9a04      	ldr	r2, [sp, #16]
 8006d86:	4601      	mov	r1, r0
 8006d88:	4606      	mov	r6, r0
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	f000 fb0e 	bl	80073ac <__multiply>
 8006d90:	9904      	ldr	r1, [sp, #16]
 8006d92:	9008      	str	r0, [sp, #32]
 8006d94:	4620      	mov	r0, r4
 8006d96:	f000 fa60 	bl	800725a <_Bfree>
 8006d9a:	9b08      	ldr	r3, [sp, #32]
 8006d9c:	9304      	str	r3, [sp, #16]
 8006d9e:	9b07      	ldr	r3, [sp, #28]
 8006da0:	1bda      	subs	r2, r3, r7
 8006da2:	d004      	beq.n	8006dae <_dtoa_r+0x76e>
 8006da4:	9904      	ldr	r1, [sp, #16]
 8006da6:	4620      	mov	r0, r4
 8006da8:	f000 fb96 	bl	80074d8 <__pow5mult>
 8006dac:	9004      	str	r0, [sp, #16]
 8006dae:	2101      	movs	r1, #1
 8006db0:	4620      	mov	r0, r4
 8006db2:	f000 faf2 	bl	800739a <__i2b>
 8006db6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006db8:	4607      	mov	r7, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 81d0 	beq.w	8007160 <_dtoa_r+0xb20>
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	4601      	mov	r1, r0
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f000 fb87 	bl	80074d8 <__pow5mult>
 8006dca:	9b06      	ldr	r3, [sp, #24]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	4607      	mov	r7, r0
 8006dd0:	dc40      	bgt.n	8006e54 <_dtoa_r+0x814>
 8006dd2:	9b00      	ldr	r3, [sp, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d139      	bne.n	8006e4c <_dtoa_r+0x80c>
 8006dd8:	9b01      	ldr	r3, [sp, #4]
 8006dda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d136      	bne.n	8006e50 <_dtoa_r+0x810>
 8006de2:	9b01      	ldr	r3, [sp, #4]
 8006de4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006de8:	0d1b      	lsrs	r3, r3, #20
 8006dea:	051b      	lsls	r3, r3, #20
 8006dec:	b12b      	cbz	r3, 8006dfa <_dtoa_r+0x7ba>
 8006dee:	9b05      	ldr	r3, [sp, #20]
 8006df0:	3301      	adds	r3, #1
 8006df2:	9305      	str	r3, [sp, #20]
 8006df4:	f108 0801 	add.w	r8, r8, #1
 8006df8:	2301      	movs	r3, #1
 8006dfa:	9307      	str	r3, [sp, #28]
 8006dfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d12a      	bne.n	8006e58 <_dtoa_r+0x818>
 8006e02:	2001      	movs	r0, #1
 8006e04:	e030      	b.n	8006e68 <_dtoa_r+0x828>
 8006e06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e08:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e0c:	e795      	b.n	8006d3a <_dtoa_r+0x6fa>
 8006e0e:	9b07      	ldr	r3, [sp, #28]
 8006e10:	f109 37ff 	add.w	r7, r9, #4294967295
 8006e14:	42bb      	cmp	r3, r7
 8006e16:	bfbf      	itttt	lt
 8006e18:	9b07      	ldrlt	r3, [sp, #28]
 8006e1a:	9707      	strlt	r7, [sp, #28]
 8006e1c:	1afa      	sublt	r2, r7, r3
 8006e1e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006e20:	bfbb      	ittet	lt
 8006e22:	189b      	addlt	r3, r3, r2
 8006e24:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006e26:	1bdf      	subge	r7, r3, r7
 8006e28:	2700      	movlt	r7, #0
 8006e2a:	f1b9 0f00 	cmp.w	r9, #0
 8006e2e:	bfb5      	itete	lt
 8006e30:	9b05      	ldrlt	r3, [sp, #20]
 8006e32:	9d05      	ldrge	r5, [sp, #20]
 8006e34:	eba3 0509 	sublt.w	r5, r3, r9
 8006e38:	464b      	movge	r3, r9
 8006e3a:	bfb8      	it	lt
 8006e3c:	2300      	movlt	r3, #0
 8006e3e:	e77e      	b.n	8006d3e <_dtoa_r+0x6fe>
 8006e40:	9f07      	ldr	r7, [sp, #28]
 8006e42:	9d05      	ldr	r5, [sp, #20]
 8006e44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006e46:	e783      	b.n	8006d50 <_dtoa_r+0x710>
 8006e48:	9a07      	ldr	r2, [sp, #28]
 8006e4a:	e7ab      	b.n	8006da4 <_dtoa_r+0x764>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	e7d4      	b.n	8006dfa <_dtoa_r+0x7ba>
 8006e50:	9b00      	ldr	r3, [sp, #0]
 8006e52:	e7d2      	b.n	8006dfa <_dtoa_r+0x7ba>
 8006e54:	2300      	movs	r3, #0
 8006e56:	9307      	str	r3, [sp, #28]
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006e5e:	6918      	ldr	r0, [r3, #16]
 8006e60:	f000 fa4d 	bl	80072fe <__hi0bits>
 8006e64:	f1c0 0020 	rsb	r0, r0, #32
 8006e68:	4440      	add	r0, r8
 8006e6a:	f010 001f 	ands.w	r0, r0, #31
 8006e6e:	d047      	beq.n	8006f00 <_dtoa_r+0x8c0>
 8006e70:	f1c0 0320 	rsb	r3, r0, #32
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	dd3b      	ble.n	8006ef0 <_dtoa_r+0x8b0>
 8006e78:	9b05      	ldr	r3, [sp, #20]
 8006e7a:	f1c0 001c 	rsb	r0, r0, #28
 8006e7e:	4403      	add	r3, r0
 8006e80:	9305      	str	r3, [sp, #20]
 8006e82:	4405      	add	r5, r0
 8006e84:	4480      	add	r8, r0
 8006e86:	9b05      	ldr	r3, [sp, #20]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	dd05      	ble.n	8006e98 <_dtoa_r+0x858>
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	9904      	ldr	r1, [sp, #16]
 8006e90:	4620      	mov	r0, r4
 8006e92:	f000 fb6f 	bl	8007574 <__lshift>
 8006e96:	9004      	str	r0, [sp, #16]
 8006e98:	f1b8 0f00 	cmp.w	r8, #0
 8006e9c:	dd05      	ble.n	8006eaa <_dtoa_r+0x86a>
 8006e9e:	4639      	mov	r1, r7
 8006ea0:	4642      	mov	r2, r8
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f000 fb66 	bl	8007574 <__lshift>
 8006ea8:	4607      	mov	r7, r0
 8006eaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006eac:	b353      	cbz	r3, 8006f04 <_dtoa_r+0x8c4>
 8006eae:	4639      	mov	r1, r7
 8006eb0:	9804      	ldr	r0, [sp, #16]
 8006eb2:	f000 fbb3 	bl	800761c <__mcmp>
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	da24      	bge.n	8006f04 <_dtoa_r+0x8c4>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	220a      	movs	r2, #10
 8006ebe:	9904      	ldr	r1, [sp, #16]
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f000 f9e1 	bl	8007288 <__multadd>
 8006ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ec8:	9004      	str	r0, [sp, #16]
 8006eca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 814d 	beq.w	800716e <_dtoa_r+0xb2e>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	220a      	movs	r2, #10
 8006eda:	4620      	mov	r0, r4
 8006edc:	f000 f9d4 	bl	8007288 <__multadd>
 8006ee0:	9b02      	ldr	r3, [sp, #8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	4606      	mov	r6, r0
 8006ee6:	dc4f      	bgt.n	8006f88 <_dtoa_r+0x948>
 8006ee8:	9b06      	ldr	r3, [sp, #24]
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	dd4c      	ble.n	8006f88 <_dtoa_r+0x948>
 8006eee:	e011      	b.n	8006f14 <_dtoa_r+0x8d4>
 8006ef0:	d0c9      	beq.n	8006e86 <_dtoa_r+0x846>
 8006ef2:	9a05      	ldr	r2, [sp, #20]
 8006ef4:	331c      	adds	r3, #28
 8006ef6:	441a      	add	r2, r3
 8006ef8:	9205      	str	r2, [sp, #20]
 8006efa:	441d      	add	r5, r3
 8006efc:	4498      	add	r8, r3
 8006efe:	e7c2      	b.n	8006e86 <_dtoa_r+0x846>
 8006f00:	4603      	mov	r3, r0
 8006f02:	e7f6      	b.n	8006ef2 <_dtoa_r+0x8b2>
 8006f04:	f1b9 0f00 	cmp.w	r9, #0
 8006f08:	dc38      	bgt.n	8006f7c <_dtoa_r+0x93c>
 8006f0a:	9b06      	ldr	r3, [sp, #24]
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	dd35      	ble.n	8006f7c <_dtoa_r+0x93c>
 8006f10:	f8cd 9008 	str.w	r9, [sp, #8]
 8006f14:	9b02      	ldr	r3, [sp, #8]
 8006f16:	b963      	cbnz	r3, 8006f32 <_dtoa_r+0x8f2>
 8006f18:	4639      	mov	r1, r7
 8006f1a:	2205      	movs	r2, #5
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f000 f9b3 	bl	8007288 <__multadd>
 8006f22:	4601      	mov	r1, r0
 8006f24:	4607      	mov	r7, r0
 8006f26:	9804      	ldr	r0, [sp, #16]
 8006f28:	f000 fb78 	bl	800761c <__mcmp>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	f73f adcc 	bgt.w	8006aca <_dtoa_r+0x48a>
 8006f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f34:	465d      	mov	r5, fp
 8006f36:	ea6f 0a03 	mvn.w	sl, r3
 8006f3a:	f04f 0900 	mov.w	r9, #0
 8006f3e:	4639      	mov	r1, r7
 8006f40:	4620      	mov	r0, r4
 8006f42:	f000 f98a 	bl	800725a <_Bfree>
 8006f46:	2e00      	cmp	r6, #0
 8006f48:	f43f aeb7 	beq.w	8006cba <_dtoa_r+0x67a>
 8006f4c:	f1b9 0f00 	cmp.w	r9, #0
 8006f50:	d005      	beq.n	8006f5e <_dtoa_r+0x91e>
 8006f52:	45b1      	cmp	r9, r6
 8006f54:	d003      	beq.n	8006f5e <_dtoa_r+0x91e>
 8006f56:	4649      	mov	r1, r9
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f000 f97e 	bl	800725a <_Bfree>
 8006f5e:	4631      	mov	r1, r6
 8006f60:	4620      	mov	r0, r4
 8006f62:	f000 f97a 	bl	800725a <_Bfree>
 8006f66:	e6a8      	b.n	8006cba <_dtoa_r+0x67a>
 8006f68:	2700      	movs	r7, #0
 8006f6a:	463e      	mov	r6, r7
 8006f6c:	e7e1      	b.n	8006f32 <_dtoa_r+0x8f2>
 8006f6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006f72:	463e      	mov	r6, r7
 8006f74:	e5a9      	b.n	8006aca <_dtoa_r+0x48a>
 8006f76:	bf00      	nop
 8006f78:	40240000 	.word	0x40240000
 8006f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f7e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 80fa 	beq.w	800717c <_dtoa_r+0xb3c>
 8006f88:	2d00      	cmp	r5, #0
 8006f8a:	dd05      	ble.n	8006f98 <_dtoa_r+0x958>
 8006f8c:	4631      	mov	r1, r6
 8006f8e:	462a      	mov	r2, r5
 8006f90:	4620      	mov	r0, r4
 8006f92:	f000 faef 	bl	8007574 <__lshift>
 8006f96:	4606      	mov	r6, r0
 8006f98:	9b07      	ldr	r3, [sp, #28]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d04c      	beq.n	8007038 <_dtoa_r+0x9f8>
 8006f9e:	6871      	ldr	r1, [r6, #4]
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f000 f926 	bl	80071f2 <_Balloc>
 8006fa6:	6932      	ldr	r2, [r6, #16]
 8006fa8:	3202      	adds	r2, #2
 8006faa:	4605      	mov	r5, r0
 8006fac:	0092      	lsls	r2, r2, #2
 8006fae:	f106 010c 	add.w	r1, r6, #12
 8006fb2:	300c      	adds	r0, #12
 8006fb4:	f000 f912 	bl	80071dc <memcpy>
 8006fb8:	2201      	movs	r2, #1
 8006fba:	4629      	mov	r1, r5
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f000 fad9 	bl	8007574 <__lshift>
 8006fc2:	9b00      	ldr	r3, [sp, #0]
 8006fc4:	f8cd b014 	str.w	fp, [sp, #20]
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	46b1      	mov	r9, r6
 8006fce:	9307      	str	r3, [sp, #28]
 8006fd0:	4606      	mov	r6, r0
 8006fd2:	4639      	mov	r1, r7
 8006fd4:	9804      	ldr	r0, [sp, #16]
 8006fd6:	f7ff faa7 	bl	8006528 <quorem>
 8006fda:	4649      	mov	r1, r9
 8006fdc:	4605      	mov	r5, r0
 8006fde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006fe2:	9804      	ldr	r0, [sp, #16]
 8006fe4:	f000 fb1a 	bl	800761c <__mcmp>
 8006fe8:	4632      	mov	r2, r6
 8006fea:	9000      	str	r0, [sp, #0]
 8006fec:	4639      	mov	r1, r7
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f000 fb2e 	bl	8007650 <__mdiff>
 8006ff4:	68c3      	ldr	r3, [r0, #12]
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	bb03      	cbnz	r3, 800703c <_dtoa_r+0x9fc>
 8006ffa:	4601      	mov	r1, r0
 8006ffc:	9008      	str	r0, [sp, #32]
 8006ffe:	9804      	ldr	r0, [sp, #16]
 8007000:	f000 fb0c 	bl	800761c <__mcmp>
 8007004:	9a08      	ldr	r2, [sp, #32]
 8007006:	4603      	mov	r3, r0
 8007008:	4611      	mov	r1, r2
 800700a:	4620      	mov	r0, r4
 800700c:	9308      	str	r3, [sp, #32]
 800700e:	f000 f924 	bl	800725a <_Bfree>
 8007012:	9b08      	ldr	r3, [sp, #32]
 8007014:	b9a3      	cbnz	r3, 8007040 <_dtoa_r+0xa00>
 8007016:	9a06      	ldr	r2, [sp, #24]
 8007018:	b992      	cbnz	r2, 8007040 <_dtoa_r+0xa00>
 800701a:	9a07      	ldr	r2, [sp, #28]
 800701c:	b982      	cbnz	r2, 8007040 <_dtoa_r+0xa00>
 800701e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007022:	d029      	beq.n	8007078 <_dtoa_r+0xa38>
 8007024:	9b00      	ldr	r3, [sp, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	dd01      	ble.n	800702e <_dtoa_r+0x9ee>
 800702a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800702e:	9b05      	ldr	r3, [sp, #20]
 8007030:	1c5d      	adds	r5, r3, #1
 8007032:	f883 8000 	strb.w	r8, [r3]
 8007036:	e782      	b.n	8006f3e <_dtoa_r+0x8fe>
 8007038:	4630      	mov	r0, r6
 800703a:	e7c2      	b.n	8006fc2 <_dtoa_r+0x982>
 800703c:	2301      	movs	r3, #1
 800703e:	e7e3      	b.n	8007008 <_dtoa_r+0x9c8>
 8007040:	9a00      	ldr	r2, [sp, #0]
 8007042:	2a00      	cmp	r2, #0
 8007044:	db04      	blt.n	8007050 <_dtoa_r+0xa10>
 8007046:	d125      	bne.n	8007094 <_dtoa_r+0xa54>
 8007048:	9a06      	ldr	r2, [sp, #24]
 800704a:	bb1a      	cbnz	r2, 8007094 <_dtoa_r+0xa54>
 800704c:	9a07      	ldr	r2, [sp, #28]
 800704e:	bb0a      	cbnz	r2, 8007094 <_dtoa_r+0xa54>
 8007050:	2b00      	cmp	r3, #0
 8007052:	ddec      	ble.n	800702e <_dtoa_r+0x9ee>
 8007054:	2201      	movs	r2, #1
 8007056:	9904      	ldr	r1, [sp, #16]
 8007058:	4620      	mov	r0, r4
 800705a:	f000 fa8b 	bl	8007574 <__lshift>
 800705e:	4639      	mov	r1, r7
 8007060:	9004      	str	r0, [sp, #16]
 8007062:	f000 fadb 	bl	800761c <__mcmp>
 8007066:	2800      	cmp	r0, #0
 8007068:	dc03      	bgt.n	8007072 <_dtoa_r+0xa32>
 800706a:	d1e0      	bne.n	800702e <_dtoa_r+0x9ee>
 800706c:	f018 0f01 	tst.w	r8, #1
 8007070:	d0dd      	beq.n	800702e <_dtoa_r+0x9ee>
 8007072:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007076:	d1d8      	bne.n	800702a <_dtoa_r+0x9ea>
 8007078:	9b05      	ldr	r3, [sp, #20]
 800707a:	9a05      	ldr	r2, [sp, #20]
 800707c:	1c5d      	adds	r5, r3, #1
 800707e:	2339      	movs	r3, #57	; 0x39
 8007080:	7013      	strb	r3, [r2, #0]
 8007082:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007086:	2b39      	cmp	r3, #57	; 0x39
 8007088:	f105 32ff 	add.w	r2, r5, #4294967295
 800708c:	d04f      	beq.n	800712e <_dtoa_r+0xaee>
 800708e:	3301      	adds	r3, #1
 8007090:	7013      	strb	r3, [r2, #0]
 8007092:	e754      	b.n	8006f3e <_dtoa_r+0x8fe>
 8007094:	9a05      	ldr	r2, [sp, #20]
 8007096:	2b00      	cmp	r3, #0
 8007098:	f102 0501 	add.w	r5, r2, #1
 800709c:	dd06      	ble.n	80070ac <_dtoa_r+0xa6c>
 800709e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80070a2:	d0e9      	beq.n	8007078 <_dtoa_r+0xa38>
 80070a4:	f108 0801 	add.w	r8, r8, #1
 80070a8:	9b05      	ldr	r3, [sp, #20]
 80070aa:	e7c2      	b.n	8007032 <_dtoa_r+0x9f2>
 80070ac:	9a02      	ldr	r2, [sp, #8]
 80070ae:	f805 8c01 	strb.w	r8, [r5, #-1]
 80070b2:	eba5 030b 	sub.w	r3, r5, fp
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d021      	beq.n	80070fe <_dtoa_r+0xabe>
 80070ba:	2300      	movs	r3, #0
 80070bc:	220a      	movs	r2, #10
 80070be:	9904      	ldr	r1, [sp, #16]
 80070c0:	4620      	mov	r0, r4
 80070c2:	f000 f8e1 	bl	8007288 <__multadd>
 80070c6:	45b1      	cmp	r9, r6
 80070c8:	9004      	str	r0, [sp, #16]
 80070ca:	f04f 0300 	mov.w	r3, #0
 80070ce:	f04f 020a 	mov.w	r2, #10
 80070d2:	4649      	mov	r1, r9
 80070d4:	4620      	mov	r0, r4
 80070d6:	d105      	bne.n	80070e4 <_dtoa_r+0xaa4>
 80070d8:	f000 f8d6 	bl	8007288 <__multadd>
 80070dc:	4681      	mov	r9, r0
 80070de:	4606      	mov	r6, r0
 80070e0:	9505      	str	r5, [sp, #20]
 80070e2:	e776      	b.n	8006fd2 <_dtoa_r+0x992>
 80070e4:	f000 f8d0 	bl	8007288 <__multadd>
 80070e8:	4631      	mov	r1, r6
 80070ea:	4681      	mov	r9, r0
 80070ec:	2300      	movs	r3, #0
 80070ee:	220a      	movs	r2, #10
 80070f0:	4620      	mov	r0, r4
 80070f2:	f000 f8c9 	bl	8007288 <__multadd>
 80070f6:	4606      	mov	r6, r0
 80070f8:	e7f2      	b.n	80070e0 <_dtoa_r+0xaa0>
 80070fa:	f04f 0900 	mov.w	r9, #0
 80070fe:	2201      	movs	r2, #1
 8007100:	9904      	ldr	r1, [sp, #16]
 8007102:	4620      	mov	r0, r4
 8007104:	f000 fa36 	bl	8007574 <__lshift>
 8007108:	4639      	mov	r1, r7
 800710a:	9004      	str	r0, [sp, #16]
 800710c:	f000 fa86 	bl	800761c <__mcmp>
 8007110:	2800      	cmp	r0, #0
 8007112:	dcb6      	bgt.n	8007082 <_dtoa_r+0xa42>
 8007114:	d102      	bne.n	800711c <_dtoa_r+0xadc>
 8007116:	f018 0f01 	tst.w	r8, #1
 800711a:	d1b2      	bne.n	8007082 <_dtoa_r+0xa42>
 800711c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007120:	2b30      	cmp	r3, #48	; 0x30
 8007122:	f105 32ff 	add.w	r2, r5, #4294967295
 8007126:	f47f af0a 	bne.w	8006f3e <_dtoa_r+0x8fe>
 800712a:	4615      	mov	r5, r2
 800712c:	e7f6      	b.n	800711c <_dtoa_r+0xadc>
 800712e:	4593      	cmp	fp, r2
 8007130:	d105      	bne.n	800713e <_dtoa_r+0xafe>
 8007132:	2331      	movs	r3, #49	; 0x31
 8007134:	f10a 0a01 	add.w	sl, sl, #1
 8007138:	f88b 3000 	strb.w	r3, [fp]
 800713c:	e6ff      	b.n	8006f3e <_dtoa_r+0x8fe>
 800713e:	4615      	mov	r5, r2
 8007140:	e79f      	b.n	8007082 <_dtoa_r+0xa42>
 8007142:	f8df b064 	ldr.w	fp, [pc, #100]	; 80071a8 <_dtoa_r+0xb68>
 8007146:	e007      	b.n	8007158 <_dtoa_r+0xb18>
 8007148:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800714a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80071ac <_dtoa_r+0xb6c>
 800714e:	b11b      	cbz	r3, 8007158 <_dtoa_r+0xb18>
 8007150:	f10b 0308 	add.w	r3, fp, #8
 8007154:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007156:	6013      	str	r3, [r2, #0]
 8007158:	4658      	mov	r0, fp
 800715a:	b017      	add	sp, #92	; 0x5c
 800715c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007160:	9b06      	ldr	r3, [sp, #24]
 8007162:	2b01      	cmp	r3, #1
 8007164:	f77f ae35 	ble.w	8006dd2 <_dtoa_r+0x792>
 8007168:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800716a:	9307      	str	r3, [sp, #28]
 800716c:	e649      	b.n	8006e02 <_dtoa_r+0x7c2>
 800716e:	9b02      	ldr	r3, [sp, #8]
 8007170:	2b00      	cmp	r3, #0
 8007172:	dc03      	bgt.n	800717c <_dtoa_r+0xb3c>
 8007174:	9b06      	ldr	r3, [sp, #24]
 8007176:	2b02      	cmp	r3, #2
 8007178:	f73f aecc 	bgt.w	8006f14 <_dtoa_r+0x8d4>
 800717c:	465d      	mov	r5, fp
 800717e:	4639      	mov	r1, r7
 8007180:	9804      	ldr	r0, [sp, #16]
 8007182:	f7ff f9d1 	bl	8006528 <quorem>
 8007186:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800718a:	f805 8b01 	strb.w	r8, [r5], #1
 800718e:	9a02      	ldr	r2, [sp, #8]
 8007190:	eba5 030b 	sub.w	r3, r5, fp
 8007194:	429a      	cmp	r2, r3
 8007196:	ddb0      	ble.n	80070fa <_dtoa_r+0xaba>
 8007198:	2300      	movs	r3, #0
 800719a:	220a      	movs	r2, #10
 800719c:	9904      	ldr	r1, [sp, #16]
 800719e:	4620      	mov	r0, r4
 80071a0:	f000 f872 	bl	8007288 <__multadd>
 80071a4:	9004      	str	r0, [sp, #16]
 80071a6:	e7ea      	b.n	800717e <_dtoa_r+0xb3e>
 80071a8:	08007d08 	.word	0x08007d08
 80071ac:	08007d2c 	.word	0x08007d2c

080071b0 <_localeconv_r>:
 80071b0:	4b04      	ldr	r3, [pc, #16]	; (80071c4 <_localeconv_r+0x14>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6a18      	ldr	r0, [r3, #32]
 80071b6:	4b04      	ldr	r3, [pc, #16]	; (80071c8 <_localeconv_r+0x18>)
 80071b8:	2800      	cmp	r0, #0
 80071ba:	bf08      	it	eq
 80071bc:	4618      	moveq	r0, r3
 80071be:	30f0      	adds	r0, #240	; 0xf0
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	2000000c 	.word	0x2000000c
 80071c8:	20000070 	.word	0x20000070

080071cc <malloc>:
 80071cc:	4b02      	ldr	r3, [pc, #8]	; (80071d8 <malloc+0xc>)
 80071ce:	4601      	mov	r1, r0
 80071d0:	6818      	ldr	r0, [r3, #0]
 80071d2:	f000 bb45 	b.w	8007860 <_malloc_r>
 80071d6:	bf00      	nop
 80071d8:	2000000c 	.word	0x2000000c

080071dc <memcpy>:
 80071dc:	b510      	push	{r4, lr}
 80071de:	1e43      	subs	r3, r0, #1
 80071e0:	440a      	add	r2, r1
 80071e2:	4291      	cmp	r1, r2
 80071e4:	d100      	bne.n	80071e8 <memcpy+0xc>
 80071e6:	bd10      	pop	{r4, pc}
 80071e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071f0:	e7f7      	b.n	80071e2 <memcpy+0x6>

080071f2 <_Balloc>:
 80071f2:	b570      	push	{r4, r5, r6, lr}
 80071f4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80071f6:	4604      	mov	r4, r0
 80071f8:	460e      	mov	r6, r1
 80071fa:	b93d      	cbnz	r5, 800720c <_Balloc+0x1a>
 80071fc:	2010      	movs	r0, #16
 80071fe:	f7ff ffe5 	bl	80071cc <malloc>
 8007202:	6260      	str	r0, [r4, #36]	; 0x24
 8007204:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007208:	6005      	str	r5, [r0, #0]
 800720a:	60c5      	str	r5, [r0, #12]
 800720c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800720e:	68eb      	ldr	r3, [r5, #12]
 8007210:	b183      	cbz	r3, 8007234 <_Balloc+0x42>
 8007212:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800721a:	b9b8      	cbnz	r0, 800724c <_Balloc+0x5a>
 800721c:	2101      	movs	r1, #1
 800721e:	fa01 f506 	lsl.w	r5, r1, r6
 8007222:	1d6a      	adds	r2, r5, #5
 8007224:	0092      	lsls	r2, r2, #2
 8007226:	4620      	mov	r0, r4
 8007228:	f000 fabe 	bl	80077a8 <_calloc_r>
 800722c:	b160      	cbz	r0, 8007248 <_Balloc+0x56>
 800722e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007232:	e00e      	b.n	8007252 <_Balloc+0x60>
 8007234:	2221      	movs	r2, #33	; 0x21
 8007236:	2104      	movs	r1, #4
 8007238:	4620      	mov	r0, r4
 800723a:	f000 fab5 	bl	80077a8 <_calloc_r>
 800723e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007240:	60e8      	str	r0, [r5, #12]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1e4      	bne.n	8007212 <_Balloc+0x20>
 8007248:	2000      	movs	r0, #0
 800724a:	bd70      	pop	{r4, r5, r6, pc}
 800724c:	6802      	ldr	r2, [r0, #0]
 800724e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007252:	2300      	movs	r3, #0
 8007254:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007258:	e7f7      	b.n	800724a <_Balloc+0x58>

0800725a <_Bfree>:
 800725a:	b570      	push	{r4, r5, r6, lr}
 800725c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800725e:	4606      	mov	r6, r0
 8007260:	460d      	mov	r5, r1
 8007262:	b93c      	cbnz	r4, 8007274 <_Bfree+0x1a>
 8007264:	2010      	movs	r0, #16
 8007266:	f7ff ffb1 	bl	80071cc <malloc>
 800726a:	6270      	str	r0, [r6, #36]	; 0x24
 800726c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007270:	6004      	str	r4, [r0, #0]
 8007272:	60c4      	str	r4, [r0, #12]
 8007274:	b13d      	cbz	r5, 8007286 <_Bfree+0x2c>
 8007276:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007278:	686a      	ldr	r2, [r5, #4]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007280:	6029      	str	r1, [r5, #0]
 8007282:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007286:	bd70      	pop	{r4, r5, r6, pc}

08007288 <__multadd>:
 8007288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800728c:	690d      	ldr	r5, [r1, #16]
 800728e:	461f      	mov	r7, r3
 8007290:	4606      	mov	r6, r0
 8007292:	460c      	mov	r4, r1
 8007294:	f101 0c14 	add.w	ip, r1, #20
 8007298:	2300      	movs	r3, #0
 800729a:	f8dc 0000 	ldr.w	r0, [ip]
 800729e:	b281      	uxth	r1, r0
 80072a0:	fb02 7101 	mla	r1, r2, r1, r7
 80072a4:	0c0f      	lsrs	r7, r1, #16
 80072a6:	0c00      	lsrs	r0, r0, #16
 80072a8:	fb02 7000 	mla	r0, r2, r0, r7
 80072ac:	b289      	uxth	r1, r1
 80072ae:	3301      	adds	r3, #1
 80072b0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80072b4:	429d      	cmp	r5, r3
 80072b6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80072ba:	f84c 1b04 	str.w	r1, [ip], #4
 80072be:	dcec      	bgt.n	800729a <__multadd+0x12>
 80072c0:	b1d7      	cbz	r7, 80072f8 <__multadd+0x70>
 80072c2:	68a3      	ldr	r3, [r4, #8]
 80072c4:	42ab      	cmp	r3, r5
 80072c6:	dc12      	bgt.n	80072ee <__multadd+0x66>
 80072c8:	6861      	ldr	r1, [r4, #4]
 80072ca:	4630      	mov	r0, r6
 80072cc:	3101      	adds	r1, #1
 80072ce:	f7ff ff90 	bl	80071f2 <_Balloc>
 80072d2:	6922      	ldr	r2, [r4, #16]
 80072d4:	3202      	adds	r2, #2
 80072d6:	f104 010c 	add.w	r1, r4, #12
 80072da:	4680      	mov	r8, r0
 80072dc:	0092      	lsls	r2, r2, #2
 80072de:	300c      	adds	r0, #12
 80072e0:	f7ff ff7c 	bl	80071dc <memcpy>
 80072e4:	4621      	mov	r1, r4
 80072e6:	4630      	mov	r0, r6
 80072e8:	f7ff ffb7 	bl	800725a <_Bfree>
 80072ec:	4644      	mov	r4, r8
 80072ee:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072f2:	3501      	adds	r5, #1
 80072f4:	615f      	str	r7, [r3, #20]
 80072f6:	6125      	str	r5, [r4, #16]
 80072f8:	4620      	mov	r0, r4
 80072fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080072fe <__hi0bits>:
 80072fe:	0c02      	lsrs	r2, r0, #16
 8007300:	0412      	lsls	r2, r2, #16
 8007302:	4603      	mov	r3, r0
 8007304:	b9b2      	cbnz	r2, 8007334 <__hi0bits+0x36>
 8007306:	0403      	lsls	r3, r0, #16
 8007308:	2010      	movs	r0, #16
 800730a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800730e:	bf04      	itt	eq
 8007310:	021b      	lsleq	r3, r3, #8
 8007312:	3008      	addeq	r0, #8
 8007314:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007318:	bf04      	itt	eq
 800731a:	011b      	lsleq	r3, r3, #4
 800731c:	3004      	addeq	r0, #4
 800731e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007322:	bf04      	itt	eq
 8007324:	009b      	lsleq	r3, r3, #2
 8007326:	3002      	addeq	r0, #2
 8007328:	2b00      	cmp	r3, #0
 800732a:	db06      	blt.n	800733a <__hi0bits+0x3c>
 800732c:	005b      	lsls	r3, r3, #1
 800732e:	d503      	bpl.n	8007338 <__hi0bits+0x3a>
 8007330:	3001      	adds	r0, #1
 8007332:	4770      	bx	lr
 8007334:	2000      	movs	r0, #0
 8007336:	e7e8      	b.n	800730a <__hi0bits+0xc>
 8007338:	2020      	movs	r0, #32
 800733a:	4770      	bx	lr

0800733c <__lo0bits>:
 800733c:	6803      	ldr	r3, [r0, #0]
 800733e:	f013 0207 	ands.w	r2, r3, #7
 8007342:	4601      	mov	r1, r0
 8007344:	d00b      	beq.n	800735e <__lo0bits+0x22>
 8007346:	07da      	lsls	r2, r3, #31
 8007348:	d423      	bmi.n	8007392 <__lo0bits+0x56>
 800734a:	0798      	lsls	r0, r3, #30
 800734c:	bf49      	itett	mi
 800734e:	085b      	lsrmi	r3, r3, #1
 8007350:	089b      	lsrpl	r3, r3, #2
 8007352:	2001      	movmi	r0, #1
 8007354:	600b      	strmi	r3, [r1, #0]
 8007356:	bf5c      	itt	pl
 8007358:	600b      	strpl	r3, [r1, #0]
 800735a:	2002      	movpl	r0, #2
 800735c:	4770      	bx	lr
 800735e:	b298      	uxth	r0, r3
 8007360:	b9a8      	cbnz	r0, 800738e <__lo0bits+0x52>
 8007362:	0c1b      	lsrs	r3, r3, #16
 8007364:	2010      	movs	r0, #16
 8007366:	f013 0fff 	tst.w	r3, #255	; 0xff
 800736a:	bf04      	itt	eq
 800736c:	0a1b      	lsreq	r3, r3, #8
 800736e:	3008      	addeq	r0, #8
 8007370:	071a      	lsls	r2, r3, #28
 8007372:	bf04      	itt	eq
 8007374:	091b      	lsreq	r3, r3, #4
 8007376:	3004      	addeq	r0, #4
 8007378:	079a      	lsls	r2, r3, #30
 800737a:	bf04      	itt	eq
 800737c:	089b      	lsreq	r3, r3, #2
 800737e:	3002      	addeq	r0, #2
 8007380:	07da      	lsls	r2, r3, #31
 8007382:	d402      	bmi.n	800738a <__lo0bits+0x4e>
 8007384:	085b      	lsrs	r3, r3, #1
 8007386:	d006      	beq.n	8007396 <__lo0bits+0x5a>
 8007388:	3001      	adds	r0, #1
 800738a:	600b      	str	r3, [r1, #0]
 800738c:	4770      	bx	lr
 800738e:	4610      	mov	r0, r2
 8007390:	e7e9      	b.n	8007366 <__lo0bits+0x2a>
 8007392:	2000      	movs	r0, #0
 8007394:	4770      	bx	lr
 8007396:	2020      	movs	r0, #32
 8007398:	4770      	bx	lr

0800739a <__i2b>:
 800739a:	b510      	push	{r4, lr}
 800739c:	460c      	mov	r4, r1
 800739e:	2101      	movs	r1, #1
 80073a0:	f7ff ff27 	bl	80071f2 <_Balloc>
 80073a4:	2201      	movs	r2, #1
 80073a6:	6144      	str	r4, [r0, #20]
 80073a8:	6102      	str	r2, [r0, #16]
 80073aa:	bd10      	pop	{r4, pc}

080073ac <__multiply>:
 80073ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	4614      	mov	r4, r2
 80073b2:	690a      	ldr	r2, [r1, #16]
 80073b4:	6923      	ldr	r3, [r4, #16]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	bfb8      	it	lt
 80073ba:	460b      	movlt	r3, r1
 80073bc:	4688      	mov	r8, r1
 80073be:	bfbc      	itt	lt
 80073c0:	46a0      	movlt	r8, r4
 80073c2:	461c      	movlt	r4, r3
 80073c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80073c8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80073cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80073d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80073d4:	eb07 0609 	add.w	r6, r7, r9
 80073d8:	42b3      	cmp	r3, r6
 80073da:	bfb8      	it	lt
 80073dc:	3101      	addlt	r1, #1
 80073de:	f7ff ff08 	bl	80071f2 <_Balloc>
 80073e2:	f100 0514 	add.w	r5, r0, #20
 80073e6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80073ea:	462b      	mov	r3, r5
 80073ec:	2200      	movs	r2, #0
 80073ee:	4573      	cmp	r3, lr
 80073f0:	d316      	bcc.n	8007420 <__multiply+0x74>
 80073f2:	f104 0214 	add.w	r2, r4, #20
 80073f6:	f108 0114 	add.w	r1, r8, #20
 80073fa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80073fe:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	9b00      	ldr	r3, [sp, #0]
 8007406:	9201      	str	r2, [sp, #4]
 8007408:	4293      	cmp	r3, r2
 800740a:	d80c      	bhi.n	8007426 <__multiply+0x7a>
 800740c:	2e00      	cmp	r6, #0
 800740e:	dd03      	ble.n	8007418 <__multiply+0x6c>
 8007410:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007414:	2b00      	cmp	r3, #0
 8007416:	d05d      	beq.n	80074d4 <__multiply+0x128>
 8007418:	6106      	str	r6, [r0, #16]
 800741a:	b003      	add	sp, #12
 800741c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007420:	f843 2b04 	str.w	r2, [r3], #4
 8007424:	e7e3      	b.n	80073ee <__multiply+0x42>
 8007426:	f8b2 b000 	ldrh.w	fp, [r2]
 800742a:	f1bb 0f00 	cmp.w	fp, #0
 800742e:	d023      	beq.n	8007478 <__multiply+0xcc>
 8007430:	4689      	mov	r9, r1
 8007432:	46ac      	mov	ip, r5
 8007434:	f04f 0800 	mov.w	r8, #0
 8007438:	f859 4b04 	ldr.w	r4, [r9], #4
 800743c:	f8dc a000 	ldr.w	sl, [ip]
 8007440:	b2a3      	uxth	r3, r4
 8007442:	fa1f fa8a 	uxth.w	sl, sl
 8007446:	fb0b a303 	mla	r3, fp, r3, sl
 800744a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800744e:	f8dc 4000 	ldr.w	r4, [ip]
 8007452:	4443      	add	r3, r8
 8007454:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007458:	fb0b 840a 	mla	r4, fp, sl, r8
 800745c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007460:	46e2      	mov	sl, ip
 8007462:	b29b      	uxth	r3, r3
 8007464:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007468:	454f      	cmp	r7, r9
 800746a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800746e:	f84a 3b04 	str.w	r3, [sl], #4
 8007472:	d82b      	bhi.n	80074cc <__multiply+0x120>
 8007474:	f8cc 8004 	str.w	r8, [ip, #4]
 8007478:	9b01      	ldr	r3, [sp, #4]
 800747a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800747e:	3204      	adds	r2, #4
 8007480:	f1ba 0f00 	cmp.w	sl, #0
 8007484:	d020      	beq.n	80074c8 <__multiply+0x11c>
 8007486:	682b      	ldr	r3, [r5, #0]
 8007488:	4689      	mov	r9, r1
 800748a:	46a8      	mov	r8, r5
 800748c:	f04f 0b00 	mov.w	fp, #0
 8007490:	f8b9 c000 	ldrh.w	ip, [r9]
 8007494:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007498:	fb0a 440c 	mla	r4, sl, ip, r4
 800749c:	445c      	add	r4, fp
 800749e:	46c4      	mov	ip, r8
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80074a6:	f84c 3b04 	str.w	r3, [ip], #4
 80074aa:	f859 3b04 	ldr.w	r3, [r9], #4
 80074ae:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80074b2:	0c1b      	lsrs	r3, r3, #16
 80074b4:	fb0a b303 	mla	r3, sl, r3, fp
 80074b8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80074bc:	454f      	cmp	r7, r9
 80074be:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80074c2:	d805      	bhi.n	80074d0 <__multiply+0x124>
 80074c4:	f8c8 3004 	str.w	r3, [r8, #4]
 80074c8:	3504      	adds	r5, #4
 80074ca:	e79b      	b.n	8007404 <__multiply+0x58>
 80074cc:	46d4      	mov	ip, sl
 80074ce:	e7b3      	b.n	8007438 <__multiply+0x8c>
 80074d0:	46e0      	mov	r8, ip
 80074d2:	e7dd      	b.n	8007490 <__multiply+0xe4>
 80074d4:	3e01      	subs	r6, #1
 80074d6:	e799      	b.n	800740c <__multiply+0x60>

080074d8 <__pow5mult>:
 80074d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074dc:	4615      	mov	r5, r2
 80074de:	f012 0203 	ands.w	r2, r2, #3
 80074e2:	4606      	mov	r6, r0
 80074e4:	460f      	mov	r7, r1
 80074e6:	d007      	beq.n	80074f8 <__pow5mult+0x20>
 80074e8:	3a01      	subs	r2, #1
 80074ea:	4c21      	ldr	r4, [pc, #132]	; (8007570 <__pow5mult+0x98>)
 80074ec:	2300      	movs	r3, #0
 80074ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074f2:	f7ff fec9 	bl	8007288 <__multadd>
 80074f6:	4607      	mov	r7, r0
 80074f8:	10ad      	asrs	r5, r5, #2
 80074fa:	d035      	beq.n	8007568 <__pow5mult+0x90>
 80074fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80074fe:	b93c      	cbnz	r4, 8007510 <__pow5mult+0x38>
 8007500:	2010      	movs	r0, #16
 8007502:	f7ff fe63 	bl	80071cc <malloc>
 8007506:	6270      	str	r0, [r6, #36]	; 0x24
 8007508:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800750c:	6004      	str	r4, [r0, #0]
 800750e:	60c4      	str	r4, [r0, #12]
 8007510:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007514:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007518:	b94c      	cbnz	r4, 800752e <__pow5mult+0x56>
 800751a:	f240 2171 	movw	r1, #625	; 0x271
 800751e:	4630      	mov	r0, r6
 8007520:	f7ff ff3b 	bl	800739a <__i2b>
 8007524:	2300      	movs	r3, #0
 8007526:	f8c8 0008 	str.w	r0, [r8, #8]
 800752a:	4604      	mov	r4, r0
 800752c:	6003      	str	r3, [r0, #0]
 800752e:	f04f 0800 	mov.w	r8, #0
 8007532:	07eb      	lsls	r3, r5, #31
 8007534:	d50a      	bpl.n	800754c <__pow5mult+0x74>
 8007536:	4639      	mov	r1, r7
 8007538:	4622      	mov	r2, r4
 800753a:	4630      	mov	r0, r6
 800753c:	f7ff ff36 	bl	80073ac <__multiply>
 8007540:	4639      	mov	r1, r7
 8007542:	4681      	mov	r9, r0
 8007544:	4630      	mov	r0, r6
 8007546:	f7ff fe88 	bl	800725a <_Bfree>
 800754a:	464f      	mov	r7, r9
 800754c:	106d      	asrs	r5, r5, #1
 800754e:	d00b      	beq.n	8007568 <__pow5mult+0x90>
 8007550:	6820      	ldr	r0, [r4, #0]
 8007552:	b938      	cbnz	r0, 8007564 <__pow5mult+0x8c>
 8007554:	4622      	mov	r2, r4
 8007556:	4621      	mov	r1, r4
 8007558:	4630      	mov	r0, r6
 800755a:	f7ff ff27 	bl	80073ac <__multiply>
 800755e:	6020      	str	r0, [r4, #0]
 8007560:	f8c0 8000 	str.w	r8, [r0]
 8007564:	4604      	mov	r4, r0
 8007566:	e7e4      	b.n	8007532 <__pow5mult+0x5a>
 8007568:	4638      	mov	r0, r7
 800756a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800756e:	bf00      	nop
 8007570:	08007e30 	.word	0x08007e30

08007574 <__lshift>:
 8007574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007578:	460c      	mov	r4, r1
 800757a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800757e:	6923      	ldr	r3, [r4, #16]
 8007580:	6849      	ldr	r1, [r1, #4]
 8007582:	eb0a 0903 	add.w	r9, sl, r3
 8007586:	68a3      	ldr	r3, [r4, #8]
 8007588:	4607      	mov	r7, r0
 800758a:	4616      	mov	r6, r2
 800758c:	f109 0501 	add.w	r5, r9, #1
 8007590:	42ab      	cmp	r3, r5
 8007592:	db32      	blt.n	80075fa <__lshift+0x86>
 8007594:	4638      	mov	r0, r7
 8007596:	f7ff fe2c 	bl	80071f2 <_Balloc>
 800759a:	2300      	movs	r3, #0
 800759c:	4680      	mov	r8, r0
 800759e:	f100 0114 	add.w	r1, r0, #20
 80075a2:	461a      	mov	r2, r3
 80075a4:	4553      	cmp	r3, sl
 80075a6:	db2b      	blt.n	8007600 <__lshift+0x8c>
 80075a8:	6920      	ldr	r0, [r4, #16]
 80075aa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075ae:	f104 0314 	add.w	r3, r4, #20
 80075b2:	f016 021f 	ands.w	r2, r6, #31
 80075b6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075ba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075be:	d025      	beq.n	800760c <__lshift+0x98>
 80075c0:	f1c2 0e20 	rsb	lr, r2, #32
 80075c4:	2000      	movs	r0, #0
 80075c6:	681e      	ldr	r6, [r3, #0]
 80075c8:	468a      	mov	sl, r1
 80075ca:	4096      	lsls	r6, r2
 80075cc:	4330      	orrs	r0, r6
 80075ce:	f84a 0b04 	str.w	r0, [sl], #4
 80075d2:	f853 0b04 	ldr.w	r0, [r3], #4
 80075d6:	459c      	cmp	ip, r3
 80075d8:	fa20 f00e 	lsr.w	r0, r0, lr
 80075dc:	d814      	bhi.n	8007608 <__lshift+0x94>
 80075de:	6048      	str	r0, [r1, #4]
 80075e0:	b108      	cbz	r0, 80075e6 <__lshift+0x72>
 80075e2:	f109 0502 	add.w	r5, r9, #2
 80075e6:	3d01      	subs	r5, #1
 80075e8:	4638      	mov	r0, r7
 80075ea:	f8c8 5010 	str.w	r5, [r8, #16]
 80075ee:	4621      	mov	r1, r4
 80075f0:	f7ff fe33 	bl	800725a <_Bfree>
 80075f4:	4640      	mov	r0, r8
 80075f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075fa:	3101      	adds	r1, #1
 80075fc:	005b      	lsls	r3, r3, #1
 80075fe:	e7c7      	b.n	8007590 <__lshift+0x1c>
 8007600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007604:	3301      	adds	r3, #1
 8007606:	e7cd      	b.n	80075a4 <__lshift+0x30>
 8007608:	4651      	mov	r1, sl
 800760a:	e7dc      	b.n	80075c6 <__lshift+0x52>
 800760c:	3904      	subs	r1, #4
 800760e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007612:	f841 2f04 	str.w	r2, [r1, #4]!
 8007616:	459c      	cmp	ip, r3
 8007618:	d8f9      	bhi.n	800760e <__lshift+0x9a>
 800761a:	e7e4      	b.n	80075e6 <__lshift+0x72>

0800761c <__mcmp>:
 800761c:	6903      	ldr	r3, [r0, #16]
 800761e:	690a      	ldr	r2, [r1, #16]
 8007620:	1a9b      	subs	r3, r3, r2
 8007622:	b530      	push	{r4, r5, lr}
 8007624:	d10c      	bne.n	8007640 <__mcmp+0x24>
 8007626:	0092      	lsls	r2, r2, #2
 8007628:	3014      	adds	r0, #20
 800762a:	3114      	adds	r1, #20
 800762c:	1884      	adds	r4, r0, r2
 800762e:	4411      	add	r1, r2
 8007630:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007634:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007638:	4295      	cmp	r5, r2
 800763a:	d003      	beq.n	8007644 <__mcmp+0x28>
 800763c:	d305      	bcc.n	800764a <__mcmp+0x2e>
 800763e:	2301      	movs	r3, #1
 8007640:	4618      	mov	r0, r3
 8007642:	bd30      	pop	{r4, r5, pc}
 8007644:	42a0      	cmp	r0, r4
 8007646:	d3f3      	bcc.n	8007630 <__mcmp+0x14>
 8007648:	e7fa      	b.n	8007640 <__mcmp+0x24>
 800764a:	f04f 33ff 	mov.w	r3, #4294967295
 800764e:	e7f7      	b.n	8007640 <__mcmp+0x24>

08007650 <__mdiff>:
 8007650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007654:	460d      	mov	r5, r1
 8007656:	4607      	mov	r7, r0
 8007658:	4611      	mov	r1, r2
 800765a:	4628      	mov	r0, r5
 800765c:	4614      	mov	r4, r2
 800765e:	f7ff ffdd 	bl	800761c <__mcmp>
 8007662:	1e06      	subs	r6, r0, #0
 8007664:	d108      	bne.n	8007678 <__mdiff+0x28>
 8007666:	4631      	mov	r1, r6
 8007668:	4638      	mov	r0, r7
 800766a:	f7ff fdc2 	bl	80071f2 <_Balloc>
 800766e:	2301      	movs	r3, #1
 8007670:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007678:	bfa4      	itt	ge
 800767a:	4623      	movge	r3, r4
 800767c:	462c      	movge	r4, r5
 800767e:	4638      	mov	r0, r7
 8007680:	6861      	ldr	r1, [r4, #4]
 8007682:	bfa6      	itte	ge
 8007684:	461d      	movge	r5, r3
 8007686:	2600      	movge	r6, #0
 8007688:	2601      	movlt	r6, #1
 800768a:	f7ff fdb2 	bl	80071f2 <_Balloc>
 800768e:	692b      	ldr	r3, [r5, #16]
 8007690:	60c6      	str	r6, [r0, #12]
 8007692:	6926      	ldr	r6, [r4, #16]
 8007694:	f105 0914 	add.w	r9, r5, #20
 8007698:	f104 0214 	add.w	r2, r4, #20
 800769c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80076a0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80076a4:	f100 0514 	add.w	r5, r0, #20
 80076a8:	f04f 0e00 	mov.w	lr, #0
 80076ac:	f852 ab04 	ldr.w	sl, [r2], #4
 80076b0:	f859 4b04 	ldr.w	r4, [r9], #4
 80076b4:	fa1e f18a 	uxtah	r1, lr, sl
 80076b8:	b2a3      	uxth	r3, r4
 80076ba:	1ac9      	subs	r1, r1, r3
 80076bc:	0c23      	lsrs	r3, r4, #16
 80076be:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80076c2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80076c6:	b289      	uxth	r1, r1
 80076c8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80076cc:	45c8      	cmp	r8, r9
 80076ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80076d2:	4694      	mov	ip, r2
 80076d4:	f845 3b04 	str.w	r3, [r5], #4
 80076d8:	d8e8      	bhi.n	80076ac <__mdiff+0x5c>
 80076da:	45bc      	cmp	ip, r7
 80076dc:	d304      	bcc.n	80076e8 <__mdiff+0x98>
 80076de:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80076e2:	b183      	cbz	r3, 8007706 <__mdiff+0xb6>
 80076e4:	6106      	str	r6, [r0, #16]
 80076e6:	e7c5      	b.n	8007674 <__mdiff+0x24>
 80076e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80076ec:	fa1e f381 	uxtah	r3, lr, r1
 80076f0:	141a      	asrs	r2, r3, #16
 80076f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076fc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007700:	f845 3b04 	str.w	r3, [r5], #4
 8007704:	e7e9      	b.n	80076da <__mdiff+0x8a>
 8007706:	3e01      	subs	r6, #1
 8007708:	e7e9      	b.n	80076de <__mdiff+0x8e>

0800770a <__d2b>:
 800770a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800770e:	460e      	mov	r6, r1
 8007710:	2101      	movs	r1, #1
 8007712:	ec59 8b10 	vmov	r8, r9, d0
 8007716:	4615      	mov	r5, r2
 8007718:	f7ff fd6b 	bl	80071f2 <_Balloc>
 800771c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007720:	4607      	mov	r7, r0
 8007722:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007726:	bb34      	cbnz	r4, 8007776 <__d2b+0x6c>
 8007728:	9301      	str	r3, [sp, #4]
 800772a:	f1b8 0300 	subs.w	r3, r8, #0
 800772e:	d027      	beq.n	8007780 <__d2b+0x76>
 8007730:	a802      	add	r0, sp, #8
 8007732:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007736:	f7ff fe01 	bl	800733c <__lo0bits>
 800773a:	9900      	ldr	r1, [sp, #0]
 800773c:	b1f0      	cbz	r0, 800777c <__d2b+0x72>
 800773e:	9a01      	ldr	r2, [sp, #4]
 8007740:	f1c0 0320 	rsb	r3, r0, #32
 8007744:	fa02 f303 	lsl.w	r3, r2, r3
 8007748:	430b      	orrs	r3, r1
 800774a:	40c2      	lsrs	r2, r0
 800774c:	617b      	str	r3, [r7, #20]
 800774e:	9201      	str	r2, [sp, #4]
 8007750:	9b01      	ldr	r3, [sp, #4]
 8007752:	61bb      	str	r3, [r7, #24]
 8007754:	2b00      	cmp	r3, #0
 8007756:	bf14      	ite	ne
 8007758:	2102      	movne	r1, #2
 800775a:	2101      	moveq	r1, #1
 800775c:	6139      	str	r1, [r7, #16]
 800775e:	b1c4      	cbz	r4, 8007792 <__d2b+0x88>
 8007760:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007764:	4404      	add	r4, r0
 8007766:	6034      	str	r4, [r6, #0]
 8007768:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800776c:	6028      	str	r0, [r5, #0]
 800776e:	4638      	mov	r0, r7
 8007770:	b003      	add	sp, #12
 8007772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800777a:	e7d5      	b.n	8007728 <__d2b+0x1e>
 800777c:	6179      	str	r1, [r7, #20]
 800777e:	e7e7      	b.n	8007750 <__d2b+0x46>
 8007780:	a801      	add	r0, sp, #4
 8007782:	f7ff fddb 	bl	800733c <__lo0bits>
 8007786:	9b01      	ldr	r3, [sp, #4]
 8007788:	617b      	str	r3, [r7, #20]
 800778a:	2101      	movs	r1, #1
 800778c:	6139      	str	r1, [r7, #16]
 800778e:	3020      	adds	r0, #32
 8007790:	e7e5      	b.n	800775e <__d2b+0x54>
 8007792:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007796:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800779a:	6030      	str	r0, [r6, #0]
 800779c:	6918      	ldr	r0, [r3, #16]
 800779e:	f7ff fdae 	bl	80072fe <__hi0bits>
 80077a2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80077a6:	e7e1      	b.n	800776c <__d2b+0x62>

080077a8 <_calloc_r>:
 80077a8:	b538      	push	{r3, r4, r5, lr}
 80077aa:	fb02 f401 	mul.w	r4, r2, r1
 80077ae:	4621      	mov	r1, r4
 80077b0:	f000 f856 	bl	8007860 <_malloc_r>
 80077b4:	4605      	mov	r5, r0
 80077b6:	b118      	cbz	r0, 80077c0 <_calloc_r+0x18>
 80077b8:	4622      	mov	r2, r4
 80077ba:	2100      	movs	r1, #0
 80077bc:	f7fe fa30 	bl	8005c20 <memset>
 80077c0:	4628      	mov	r0, r5
 80077c2:	bd38      	pop	{r3, r4, r5, pc}

080077c4 <_free_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	4605      	mov	r5, r0
 80077c8:	2900      	cmp	r1, #0
 80077ca:	d045      	beq.n	8007858 <_free_r+0x94>
 80077cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077d0:	1f0c      	subs	r4, r1, #4
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	bfb8      	it	lt
 80077d6:	18e4      	addlt	r4, r4, r3
 80077d8:	f000 fa29 	bl	8007c2e <__malloc_lock>
 80077dc:	4a1f      	ldr	r2, [pc, #124]	; (800785c <_free_r+0x98>)
 80077de:	6813      	ldr	r3, [r2, #0]
 80077e0:	4610      	mov	r0, r2
 80077e2:	b933      	cbnz	r3, 80077f2 <_free_r+0x2e>
 80077e4:	6063      	str	r3, [r4, #4]
 80077e6:	6014      	str	r4, [r2, #0]
 80077e8:	4628      	mov	r0, r5
 80077ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077ee:	f000 ba1f 	b.w	8007c30 <__malloc_unlock>
 80077f2:	42a3      	cmp	r3, r4
 80077f4:	d90c      	bls.n	8007810 <_free_r+0x4c>
 80077f6:	6821      	ldr	r1, [r4, #0]
 80077f8:	1862      	adds	r2, r4, r1
 80077fa:	4293      	cmp	r3, r2
 80077fc:	bf04      	itt	eq
 80077fe:	681a      	ldreq	r2, [r3, #0]
 8007800:	685b      	ldreq	r3, [r3, #4]
 8007802:	6063      	str	r3, [r4, #4]
 8007804:	bf04      	itt	eq
 8007806:	1852      	addeq	r2, r2, r1
 8007808:	6022      	streq	r2, [r4, #0]
 800780a:	6004      	str	r4, [r0, #0]
 800780c:	e7ec      	b.n	80077e8 <_free_r+0x24>
 800780e:	4613      	mov	r3, r2
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	b10a      	cbz	r2, 8007818 <_free_r+0x54>
 8007814:	42a2      	cmp	r2, r4
 8007816:	d9fa      	bls.n	800780e <_free_r+0x4a>
 8007818:	6819      	ldr	r1, [r3, #0]
 800781a:	1858      	adds	r0, r3, r1
 800781c:	42a0      	cmp	r0, r4
 800781e:	d10b      	bne.n	8007838 <_free_r+0x74>
 8007820:	6820      	ldr	r0, [r4, #0]
 8007822:	4401      	add	r1, r0
 8007824:	1858      	adds	r0, r3, r1
 8007826:	4282      	cmp	r2, r0
 8007828:	6019      	str	r1, [r3, #0]
 800782a:	d1dd      	bne.n	80077e8 <_free_r+0x24>
 800782c:	6810      	ldr	r0, [r2, #0]
 800782e:	6852      	ldr	r2, [r2, #4]
 8007830:	605a      	str	r2, [r3, #4]
 8007832:	4401      	add	r1, r0
 8007834:	6019      	str	r1, [r3, #0]
 8007836:	e7d7      	b.n	80077e8 <_free_r+0x24>
 8007838:	d902      	bls.n	8007840 <_free_r+0x7c>
 800783a:	230c      	movs	r3, #12
 800783c:	602b      	str	r3, [r5, #0]
 800783e:	e7d3      	b.n	80077e8 <_free_r+0x24>
 8007840:	6820      	ldr	r0, [r4, #0]
 8007842:	1821      	adds	r1, r4, r0
 8007844:	428a      	cmp	r2, r1
 8007846:	bf04      	itt	eq
 8007848:	6811      	ldreq	r1, [r2, #0]
 800784a:	6852      	ldreq	r2, [r2, #4]
 800784c:	6062      	str	r2, [r4, #4]
 800784e:	bf04      	itt	eq
 8007850:	1809      	addeq	r1, r1, r0
 8007852:	6021      	streq	r1, [r4, #0]
 8007854:	605c      	str	r4, [r3, #4]
 8007856:	e7c7      	b.n	80077e8 <_free_r+0x24>
 8007858:	bd38      	pop	{r3, r4, r5, pc}
 800785a:	bf00      	nop
 800785c:	20000200 	.word	0x20000200

08007860 <_malloc_r>:
 8007860:	b570      	push	{r4, r5, r6, lr}
 8007862:	1ccd      	adds	r5, r1, #3
 8007864:	f025 0503 	bic.w	r5, r5, #3
 8007868:	3508      	adds	r5, #8
 800786a:	2d0c      	cmp	r5, #12
 800786c:	bf38      	it	cc
 800786e:	250c      	movcc	r5, #12
 8007870:	2d00      	cmp	r5, #0
 8007872:	4606      	mov	r6, r0
 8007874:	db01      	blt.n	800787a <_malloc_r+0x1a>
 8007876:	42a9      	cmp	r1, r5
 8007878:	d903      	bls.n	8007882 <_malloc_r+0x22>
 800787a:	230c      	movs	r3, #12
 800787c:	6033      	str	r3, [r6, #0]
 800787e:	2000      	movs	r0, #0
 8007880:	bd70      	pop	{r4, r5, r6, pc}
 8007882:	f000 f9d4 	bl	8007c2e <__malloc_lock>
 8007886:	4a21      	ldr	r2, [pc, #132]	; (800790c <_malloc_r+0xac>)
 8007888:	6814      	ldr	r4, [r2, #0]
 800788a:	4621      	mov	r1, r4
 800788c:	b991      	cbnz	r1, 80078b4 <_malloc_r+0x54>
 800788e:	4c20      	ldr	r4, [pc, #128]	; (8007910 <_malloc_r+0xb0>)
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	b91b      	cbnz	r3, 800789c <_malloc_r+0x3c>
 8007894:	4630      	mov	r0, r6
 8007896:	f000 f98f 	bl	8007bb8 <_sbrk_r>
 800789a:	6020      	str	r0, [r4, #0]
 800789c:	4629      	mov	r1, r5
 800789e:	4630      	mov	r0, r6
 80078a0:	f000 f98a 	bl	8007bb8 <_sbrk_r>
 80078a4:	1c43      	adds	r3, r0, #1
 80078a6:	d124      	bne.n	80078f2 <_malloc_r+0x92>
 80078a8:	230c      	movs	r3, #12
 80078aa:	6033      	str	r3, [r6, #0]
 80078ac:	4630      	mov	r0, r6
 80078ae:	f000 f9bf 	bl	8007c30 <__malloc_unlock>
 80078b2:	e7e4      	b.n	800787e <_malloc_r+0x1e>
 80078b4:	680b      	ldr	r3, [r1, #0]
 80078b6:	1b5b      	subs	r3, r3, r5
 80078b8:	d418      	bmi.n	80078ec <_malloc_r+0x8c>
 80078ba:	2b0b      	cmp	r3, #11
 80078bc:	d90f      	bls.n	80078de <_malloc_r+0x7e>
 80078be:	600b      	str	r3, [r1, #0]
 80078c0:	50cd      	str	r5, [r1, r3]
 80078c2:	18cc      	adds	r4, r1, r3
 80078c4:	4630      	mov	r0, r6
 80078c6:	f000 f9b3 	bl	8007c30 <__malloc_unlock>
 80078ca:	f104 000b 	add.w	r0, r4, #11
 80078ce:	1d23      	adds	r3, r4, #4
 80078d0:	f020 0007 	bic.w	r0, r0, #7
 80078d4:	1ac3      	subs	r3, r0, r3
 80078d6:	d0d3      	beq.n	8007880 <_malloc_r+0x20>
 80078d8:	425a      	negs	r2, r3
 80078da:	50e2      	str	r2, [r4, r3]
 80078dc:	e7d0      	b.n	8007880 <_malloc_r+0x20>
 80078de:	428c      	cmp	r4, r1
 80078e0:	684b      	ldr	r3, [r1, #4]
 80078e2:	bf16      	itet	ne
 80078e4:	6063      	strne	r3, [r4, #4]
 80078e6:	6013      	streq	r3, [r2, #0]
 80078e8:	460c      	movne	r4, r1
 80078ea:	e7eb      	b.n	80078c4 <_malloc_r+0x64>
 80078ec:	460c      	mov	r4, r1
 80078ee:	6849      	ldr	r1, [r1, #4]
 80078f0:	e7cc      	b.n	800788c <_malloc_r+0x2c>
 80078f2:	1cc4      	adds	r4, r0, #3
 80078f4:	f024 0403 	bic.w	r4, r4, #3
 80078f8:	42a0      	cmp	r0, r4
 80078fa:	d005      	beq.n	8007908 <_malloc_r+0xa8>
 80078fc:	1a21      	subs	r1, r4, r0
 80078fe:	4630      	mov	r0, r6
 8007900:	f000 f95a 	bl	8007bb8 <_sbrk_r>
 8007904:	3001      	adds	r0, #1
 8007906:	d0cf      	beq.n	80078a8 <_malloc_r+0x48>
 8007908:	6025      	str	r5, [r4, #0]
 800790a:	e7db      	b.n	80078c4 <_malloc_r+0x64>
 800790c:	20000200 	.word	0x20000200
 8007910:	20000204 	.word	0x20000204

08007914 <__ssputs_r>:
 8007914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007918:	688e      	ldr	r6, [r1, #8]
 800791a:	429e      	cmp	r6, r3
 800791c:	4682      	mov	sl, r0
 800791e:	460c      	mov	r4, r1
 8007920:	4690      	mov	r8, r2
 8007922:	4699      	mov	r9, r3
 8007924:	d837      	bhi.n	8007996 <__ssputs_r+0x82>
 8007926:	898a      	ldrh	r2, [r1, #12]
 8007928:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800792c:	d031      	beq.n	8007992 <__ssputs_r+0x7e>
 800792e:	6825      	ldr	r5, [r4, #0]
 8007930:	6909      	ldr	r1, [r1, #16]
 8007932:	1a6f      	subs	r7, r5, r1
 8007934:	6965      	ldr	r5, [r4, #20]
 8007936:	2302      	movs	r3, #2
 8007938:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800793c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007940:	f109 0301 	add.w	r3, r9, #1
 8007944:	443b      	add	r3, r7
 8007946:	429d      	cmp	r5, r3
 8007948:	bf38      	it	cc
 800794a:	461d      	movcc	r5, r3
 800794c:	0553      	lsls	r3, r2, #21
 800794e:	d530      	bpl.n	80079b2 <__ssputs_r+0x9e>
 8007950:	4629      	mov	r1, r5
 8007952:	f7ff ff85 	bl	8007860 <_malloc_r>
 8007956:	4606      	mov	r6, r0
 8007958:	b950      	cbnz	r0, 8007970 <__ssputs_r+0x5c>
 800795a:	230c      	movs	r3, #12
 800795c:	f8ca 3000 	str.w	r3, [sl]
 8007960:	89a3      	ldrh	r3, [r4, #12]
 8007962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007966:	81a3      	strh	r3, [r4, #12]
 8007968:	f04f 30ff 	mov.w	r0, #4294967295
 800796c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007970:	463a      	mov	r2, r7
 8007972:	6921      	ldr	r1, [r4, #16]
 8007974:	f7ff fc32 	bl	80071dc <memcpy>
 8007978:	89a3      	ldrh	r3, [r4, #12]
 800797a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800797e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007982:	81a3      	strh	r3, [r4, #12]
 8007984:	6126      	str	r6, [r4, #16]
 8007986:	6165      	str	r5, [r4, #20]
 8007988:	443e      	add	r6, r7
 800798a:	1bed      	subs	r5, r5, r7
 800798c:	6026      	str	r6, [r4, #0]
 800798e:	60a5      	str	r5, [r4, #8]
 8007990:	464e      	mov	r6, r9
 8007992:	454e      	cmp	r6, r9
 8007994:	d900      	bls.n	8007998 <__ssputs_r+0x84>
 8007996:	464e      	mov	r6, r9
 8007998:	4632      	mov	r2, r6
 800799a:	4641      	mov	r1, r8
 800799c:	6820      	ldr	r0, [r4, #0]
 800799e:	f000 f92d 	bl	8007bfc <memmove>
 80079a2:	68a3      	ldr	r3, [r4, #8]
 80079a4:	1b9b      	subs	r3, r3, r6
 80079a6:	60a3      	str	r3, [r4, #8]
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	441e      	add	r6, r3
 80079ac:	6026      	str	r6, [r4, #0]
 80079ae:	2000      	movs	r0, #0
 80079b0:	e7dc      	b.n	800796c <__ssputs_r+0x58>
 80079b2:	462a      	mov	r2, r5
 80079b4:	f000 f93d 	bl	8007c32 <_realloc_r>
 80079b8:	4606      	mov	r6, r0
 80079ba:	2800      	cmp	r0, #0
 80079bc:	d1e2      	bne.n	8007984 <__ssputs_r+0x70>
 80079be:	6921      	ldr	r1, [r4, #16]
 80079c0:	4650      	mov	r0, sl
 80079c2:	f7ff feff 	bl	80077c4 <_free_r>
 80079c6:	e7c8      	b.n	800795a <__ssputs_r+0x46>

080079c8 <_svfiprintf_r>:
 80079c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079cc:	461d      	mov	r5, r3
 80079ce:	898b      	ldrh	r3, [r1, #12]
 80079d0:	061f      	lsls	r7, r3, #24
 80079d2:	b09d      	sub	sp, #116	; 0x74
 80079d4:	4680      	mov	r8, r0
 80079d6:	460c      	mov	r4, r1
 80079d8:	4616      	mov	r6, r2
 80079da:	d50f      	bpl.n	80079fc <_svfiprintf_r+0x34>
 80079dc:	690b      	ldr	r3, [r1, #16]
 80079de:	b96b      	cbnz	r3, 80079fc <_svfiprintf_r+0x34>
 80079e0:	2140      	movs	r1, #64	; 0x40
 80079e2:	f7ff ff3d 	bl	8007860 <_malloc_r>
 80079e6:	6020      	str	r0, [r4, #0]
 80079e8:	6120      	str	r0, [r4, #16]
 80079ea:	b928      	cbnz	r0, 80079f8 <_svfiprintf_r+0x30>
 80079ec:	230c      	movs	r3, #12
 80079ee:	f8c8 3000 	str.w	r3, [r8]
 80079f2:	f04f 30ff 	mov.w	r0, #4294967295
 80079f6:	e0c8      	b.n	8007b8a <_svfiprintf_r+0x1c2>
 80079f8:	2340      	movs	r3, #64	; 0x40
 80079fa:	6163      	str	r3, [r4, #20]
 80079fc:	2300      	movs	r3, #0
 80079fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007a00:	2320      	movs	r3, #32
 8007a02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a06:	2330      	movs	r3, #48	; 0x30
 8007a08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a0c:	9503      	str	r5, [sp, #12]
 8007a0e:	f04f 0b01 	mov.w	fp, #1
 8007a12:	4637      	mov	r7, r6
 8007a14:	463d      	mov	r5, r7
 8007a16:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007a1a:	b10b      	cbz	r3, 8007a20 <_svfiprintf_r+0x58>
 8007a1c:	2b25      	cmp	r3, #37	; 0x25
 8007a1e:	d13e      	bne.n	8007a9e <_svfiprintf_r+0xd6>
 8007a20:	ebb7 0a06 	subs.w	sl, r7, r6
 8007a24:	d00b      	beq.n	8007a3e <_svfiprintf_r+0x76>
 8007a26:	4653      	mov	r3, sl
 8007a28:	4632      	mov	r2, r6
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	f7ff ff71 	bl	8007914 <__ssputs_r>
 8007a32:	3001      	adds	r0, #1
 8007a34:	f000 80a4 	beq.w	8007b80 <_svfiprintf_r+0x1b8>
 8007a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a3a:	4453      	add	r3, sl
 8007a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a3e:	783b      	ldrb	r3, [r7, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f000 809d 	beq.w	8007b80 <_svfiprintf_r+0x1b8>
 8007a46:	2300      	movs	r3, #0
 8007a48:	f04f 32ff 	mov.w	r2, #4294967295
 8007a4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a50:	9304      	str	r3, [sp, #16]
 8007a52:	9307      	str	r3, [sp, #28]
 8007a54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a58:	931a      	str	r3, [sp, #104]	; 0x68
 8007a5a:	462f      	mov	r7, r5
 8007a5c:	2205      	movs	r2, #5
 8007a5e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007a62:	4850      	ldr	r0, [pc, #320]	; (8007ba4 <_svfiprintf_r+0x1dc>)
 8007a64:	f7f8 fbcc 	bl	8000200 <memchr>
 8007a68:	9b04      	ldr	r3, [sp, #16]
 8007a6a:	b9d0      	cbnz	r0, 8007aa2 <_svfiprintf_r+0xda>
 8007a6c:	06d9      	lsls	r1, r3, #27
 8007a6e:	bf44      	itt	mi
 8007a70:	2220      	movmi	r2, #32
 8007a72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a76:	071a      	lsls	r2, r3, #28
 8007a78:	bf44      	itt	mi
 8007a7a:	222b      	movmi	r2, #43	; 0x2b
 8007a7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a80:	782a      	ldrb	r2, [r5, #0]
 8007a82:	2a2a      	cmp	r2, #42	; 0x2a
 8007a84:	d015      	beq.n	8007ab2 <_svfiprintf_r+0xea>
 8007a86:	9a07      	ldr	r2, [sp, #28]
 8007a88:	462f      	mov	r7, r5
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	250a      	movs	r5, #10
 8007a8e:	4639      	mov	r1, r7
 8007a90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a94:	3b30      	subs	r3, #48	; 0x30
 8007a96:	2b09      	cmp	r3, #9
 8007a98:	d94d      	bls.n	8007b36 <_svfiprintf_r+0x16e>
 8007a9a:	b1b8      	cbz	r0, 8007acc <_svfiprintf_r+0x104>
 8007a9c:	e00f      	b.n	8007abe <_svfiprintf_r+0xf6>
 8007a9e:	462f      	mov	r7, r5
 8007aa0:	e7b8      	b.n	8007a14 <_svfiprintf_r+0x4c>
 8007aa2:	4a40      	ldr	r2, [pc, #256]	; (8007ba4 <_svfiprintf_r+0x1dc>)
 8007aa4:	1a80      	subs	r0, r0, r2
 8007aa6:	fa0b f000 	lsl.w	r0, fp, r0
 8007aaa:	4318      	orrs	r0, r3
 8007aac:	9004      	str	r0, [sp, #16]
 8007aae:	463d      	mov	r5, r7
 8007ab0:	e7d3      	b.n	8007a5a <_svfiprintf_r+0x92>
 8007ab2:	9a03      	ldr	r2, [sp, #12]
 8007ab4:	1d11      	adds	r1, r2, #4
 8007ab6:	6812      	ldr	r2, [r2, #0]
 8007ab8:	9103      	str	r1, [sp, #12]
 8007aba:	2a00      	cmp	r2, #0
 8007abc:	db01      	blt.n	8007ac2 <_svfiprintf_r+0xfa>
 8007abe:	9207      	str	r2, [sp, #28]
 8007ac0:	e004      	b.n	8007acc <_svfiprintf_r+0x104>
 8007ac2:	4252      	negs	r2, r2
 8007ac4:	f043 0302 	orr.w	r3, r3, #2
 8007ac8:	9207      	str	r2, [sp, #28]
 8007aca:	9304      	str	r3, [sp, #16]
 8007acc:	783b      	ldrb	r3, [r7, #0]
 8007ace:	2b2e      	cmp	r3, #46	; 0x2e
 8007ad0:	d10c      	bne.n	8007aec <_svfiprintf_r+0x124>
 8007ad2:	787b      	ldrb	r3, [r7, #1]
 8007ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ad6:	d133      	bne.n	8007b40 <_svfiprintf_r+0x178>
 8007ad8:	9b03      	ldr	r3, [sp, #12]
 8007ada:	1d1a      	adds	r2, r3, #4
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	9203      	str	r2, [sp, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	bfb8      	it	lt
 8007ae4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ae8:	3702      	adds	r7, #2
 8007aea:	9305      	str	r3, [sp, #20]
 8007aec:	4d2e      	ldr	r5, [pc, #184]	; (8007ba8 <_svfiprintf_r+0x1e0>)
 8007aee:	7839      	ldrb	r1, [r7, #0]
 8007af0:	2203      	movs	r2, #3
 8007af2:	4628      	mov	r0, r5
 8007af4:	f7f8 fb84 	bl	8000200 <memchr>
 8007af8:	b138      	cbz	r0, 8007b0a <_svfiprintf_r+0x142>
 8007afa:	2340      	movs	r3, #64	; 0x40
 8007afc:	1b40      	subs	r0, r0, r5
 8007afe:	fa03 f000 	lsl.w	r0, r3, r0
 8007b02:	9b04      	ldr	r3, [sp, #16]
 8007b04:	4303      	orrs	r3, r0
 8007b06:	3701      	adds	r7, #1
 8007b08:	9304      	str	r3, [sp, #16]
 8007b0a:	7839      	ldrb	r1, [r7, #0]
 8007b0c:	4827      	ldr	r0, [pc, #156]	; (8007bac <_svfiprintf_r+0x1e4>)
 8007b0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b12:	2206      	movs	r2, #6
 8007b14:	1c7e      	adds	r6, r7, #1
 8007b16:	f7f8 fb73 	bl	8000200 <memchr>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d038      	beq.n	8007b90 <_svfiprintf_r+0x1c8>
 8007b1e:	4b24      	ldr	r3, [pc, #144]	; (8007bb0 <_svfiprintf_r+0x1e8>)
 8007b20:	bb13      	cbnz	r3, 8007b68 <_svfiprintf_r+0x1a0>
 8007b22:	9b03      	ldr	r3, [sp, #12]
 8007b24:	3307      	adds	r3, #7
 8007b26:	f023 0307 	bic.w	r3, r3, #7
 8007b2a:	3308      	adds	r3, #8
 8007b2c:	9303      	str	r3, [sp, #12]
 8007b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b30:	444b      	add	r3, r9
 8007b32:	9309      	str	r3, [sp, #36]	; 0x24
 8007b34:	e76d      	b.n	8007a12 <_svfiprintf_r+0x4a>
 8007b36:	fb05 3202 	mla	r2, r5, r2, r3
 8007b3a:	2001      	movs	r0, #1
 8007b3c:	460f      	mov	r7, r1
 8007b3e:	e7a6      	b.n	8007a8e <_svfiprintf_r+0xc6>
 8007b40:	2300      	movs	r3, #0
 8007b42:	3701      	adds	r7, #1
 8007b44:	9305      	str	r3, [sp, #20]
 8007b46:	4619      	mov	r1, r3
 8007b48:	250a      	movs	r5, #10
 8007b4a:	4638      	mov	r0, r7
 8007b4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b50:	3a30      	subs	r2, #48	; 0x30
 8007b52:	2a09      	cmp	r2, #9
 8007b54:	d903      	bls.n	8007b5e <_svfiprintf_r+0x196>
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0c8      	beq.n	8007aec <_svfiprintf_r+0x124>
 8007b5a:	9105      	str	r1, [sp, #20]
 8007b5c:	e7c6      	b.n	8007aec <_svfiprintf_r+0x124>
 8007b5e:	fb05 2101 	mla	r1, r5, r1, r2
 8007b62:	2301      	movs	r3, #1
 8007b64:	4607      	mov	r7, r0
 8007b66:	e7f0      	b.n	8007b4a <_svfiprintf_r+0x182>
 8007b68:	ab03      	add	r3, sp, #12
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	4622      	mov	r2, r4
 8007b6e:	4b11      	ldr	r3, [pc, #68]	; (8007bb4 <_svfiprintf_r+0x1ec>)
 8007b70:	a904      	add	r1, sp, #16
 8007b72:	4640      	mov	r0, r8
 8007b74:	f7fe f8f0 	bl	8005d58 <_printf_float>
 8007b78:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007b7c:	4681      	mov	r9, r0
 8007b7e:	d1d6      	bne.n	8007b2e <_svfiprintf_r+0x166>
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	065b      	lsls	r3, r3, #25
 8007b84:	f53f af35 	bmi.w	80079f2 <_svfiprintf_r+0x2a>
 8007b88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b8a:	b01d      	add	sp, #116	; 0x74
 8007b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b90:	ab03      	add	r3, sp, #12
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	4622      	mov	r2, r4
 8007b96:	4b07      	ldr	r3, [pc, #28]	; (8007bb4 <_svfiprintf_r+0x1ec>)
 8007b98:	a904      	add	r1, sp, #16
 8007b9a:	4640      	mov	r0, r8
 8007b9c:	f7fe fb92 	bl	80062c4 <_printf_i>
 8007ba0:	e7ea      	b.n	8007b78 <_svfiprintf_r+0x1b0>
 8007ba2:	bf00      	nop
 8007ba4:	08007e3c 	.word	0x08007e3c
 8007ba8:	08007e42 	.word	0x08007e42
 8007bac:	08007e46 	.word	0x08007e46
 8007bb0:	08005d59 	.word	0x08005d59
 8007bb4:	08007915 	.word	0x08007915

08007bb8 <_sbrk_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	4c06      	ldr	r4, [pc, #24]	; (8007bd4 <_sbrk_r+0x1c>)
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	4608      	mov	r0, r1
 8007bc2:	6023      	str	r3, [r4, #0]
 8007bc4:	f7fa faf0 	bl	80021a8 <_sbrk>
 8007bc8:	1c43      	adds	r3, r0, #1
 8007bca:	d102      	bne.n	8007bd2 <_sbrk_r+0x1a>
 8007bcc:	6823      	ldr	r3, [r4, #0]
 8007bce:	b103      	cbz	r3, 8007bd2 <_sbrk_r+0x1a>
 8007bd0:	602b      	str	r3, [r5, #0]
 8007bd2:	bd38      	pop	{r3, r4, r5, pc}
 8007bd4:	20000460 	.word	0x20000460

08007bd8 <__ascii_mbtowc>:
 8007bd8:	b082      	sub	sp, #8
 8007bda:	b901      	cbnz	r1, 8007bde <__ascii_mbtowc+0x6>
 8007bdc:	a901      	add	r1, sp, #4
 8007bde:	b142      	cbz	r2, 8007bf2 <__ascii_mbtowc+0x1a>
 8007be0:	b14b      	cbz	r3, 8007bf6 <__ascii_mbtowc+0x1e>
 8007be2:	7813      	ldrb	r3, [r2, #0]
 8007be4:	600b      	str	r3, [r1, #0]
 8007be6:	7812      	ldrb	r2, [r2, #0]
 8007be8:	1c10      	adds	r0, r2, #0
 8007bea:	bf18      	it	ne
 8007bec:	2001      	movne	r0, #1
 8007bee:	b002      	add	sp, #8
 8007bf0:	4770      	bx	lr
 8007bf2:	4610      	mov	r0, r2
 8007bf4:	e7fb      	b.n	8007bee <__ascii_mbtowc+0x16>
 8007bf6:	f06f 0001 	mvn.w	r0, #1
 8007bfa:	e7f8      	b.n	8007bee <__ascii_mbtowc+0x16>

08007bfc <memmove>:
 8007bfc:	4288      	cmp	r0, r1
 8007bfe:	b510      	push	{r4, lr}
 8007c00:	eb01 0302 	add.w	r3, r1, r2
 8007c04:	d807      	bhi.n	8007c16 <memmove+0x1a>
 8007c06:	1e42      	subs	r2, r0, #1
 8007c08:	4299      	cmp	r1, r3
 8007c0a:	d00a      	beq.n	8007c22 <memmove+0x26>
 8007c0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c10:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007c14:	e7f8      	b.n	8007c08 <memmove+0xc>
 8007c16:	4283      	cmp	r3, r0
 8007c18:	d9f5      	bls.n	8007c06 <memmove+0xa>
 8007c1a:	1881      	adds	r1, r0, r2
 8007c1c:	1ad2      	subs	r2, r2, r3
 8007c1e:	42d3      	cmn	r3, r2
 8007c20:	d100      	bne.n	8007c24 <memmove+0x28>
 8007c22:	bd10      	pop	{r4, pc}
 8007c24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c28:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007c2c:	e7f7      	b.n	8007c1e <memmove+0x22>

08007c2e <__malloc_lock>:
 8007c2e:	4770      	bx	lr

08007c30 <__malloc_unlock>:
 8007c30:	4770      	bx	lr

08007c32 <_realloc_r>:
 8007c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c34:	4607      	mov	r7, r0
 8007c36:	4614      	mov	r4, r2
 8007c38:	460e      	mov	r6, r1
 8007c3a:	b921      	cbnz	r1, 8007c46 <_realloc_r+0x14>
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c42:	f7ff be0d 	b.w	8007860 <_malloc_r>
 8007c46:	b922      	cbnz	r2, 8007c52 <_realloc_r+0x20>
 8007c48:	f7ff fdbc 	bl	80077c4 <_free_r>
 8007c4c:	4625      	mov	r5, r4
 8007c4e:	4628      	mov	r0, r5
 8007c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c52:	f000 f821 	bl	8007c98 <_malloc_usable_size_r>
 8007c56:	42a0      	cmp	r0, r4
 8007c58:	d20f      	bcs.n	8007c7a <_realloc_r+0x48>
 8007c5a:	4621      	mov	r1, r4
 8007c5c:	4638      	mov	r0, r7
 8007c5e:	f7ff fdff 	bl	8007860 <_malloc_r>
 8007c62:	4605      	mov	r5, r0
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d0f2      	beq.n	8007c4e <_realloc_r+0x1c>
 8007c68:	4631      	mov	r1, r6
 8007c6a:	4622      	mov	r2, r4
 8007c6c:	f7ff fab6 	bl	80071dc <memcpy>
 8007c70:	4631      	mov	r1, r6
 8007c72:	4638      	mov	r0, r7
 8007c74:	f7ff fda6 	bl	80077c4 <_free_r>
 8007c78:	e7e9      	b.n	8007c4e <_realloc_r+0x1c>
 8007c7a:	4635      	mov	r5, r6
 8007c7c:	e7e7      	b.n	8007c4e <_realloc_r+0x1c>

08007c7e <__ascii_wctomb>:
 8007c7e:	b149      	cbz	r1, 8007c94 <__ascii_wctomb+0x16>
 8007c80:	2aff      	cmp	r2, #255	; 0xff
 8007c82:	bf85      	ittet	hi
 8007c84:	238a      	movhi	r3, #138	; 0x8a
 8007c86:	6003      	strhi	r3, [r0, #0]
 8007c88:	700a      	strbls	r2, [r1, #0]
 8007c8a:	f04f 30ff 	movhi.w	r0, #4294967295
 8007c8e:	bf98      	it	ls
 8007c90:	2001      	movls	r0, #1
 8007c92:	4770      	bx	lr
 8007c94:	4608      	mov	r0, r1
 8007c96:	4770      	bx	lr

08007c98 <_malloc_usable_size_r>:
 8007c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c9c:	1f18      	subs	r0, r3, #4
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	bfbc      	itt	lt
 8007ca2:	580b      	ldrlt	r3, [r1, r0]
 8007ca4:	18c0      	addlt	r0, r0, r3
 8007ca6:	4770      	bx	lr

08007ca8 <_init>:
 8007ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007caa:	bf00      	nop
 8007cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cae:	bc08      	pop	{r3}
 8007cb0:	469e      	mov	lr, r3
 8007cb2:	4770      	bx	lr

08007cb4 <_fini>:
 8007cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb6:	bf00      	nop
 8007cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cba:	bc08      	pop	{r3}
 8007cbc:	469e      	mov	lr, r3
 8007cbe:	4770      	bx	lr
