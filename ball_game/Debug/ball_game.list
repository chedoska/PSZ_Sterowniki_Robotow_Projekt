
ball_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005794  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005944  08005944  00015944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059b4  080059b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080059b4  080059b4  000159b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059bc  080059bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059bc  080059bc  000159bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059c0  080059c0  000159c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080059c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000070  08005a34  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08005a34  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140bd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002942  00000000  00000000  0003415d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012d0  00000000  00000000  00036aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001178  00000000  00000000  00037d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000258c3  00000000  00000000  00038ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ed0f  00000000  00000000  0005e7ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e1bf0  00000000  00000000  0006d4ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014f0aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052c4  00000000  00000000  0014f128  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800592c 	.word	0x0800592c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800592c 	.word	0x0800592c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <L3GD20_init>:
 */
#include "gyroscope.h"

struct L3GD20 L3GD20_data;

int L3GD20_init(SPI_HandleTypeDef *m_hspi_handle){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	L3GD20_data.hspi_handle = m_hspi_handle;
 80005a8:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <L3GD20_init+0x54>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	2102      	movs	r1, #2
 80005b2:	4811      	ldr	r0, [pc, #68]	; (80005f8 <L3GD20_init+0x58>)
 80005b4:	f001 fdf6 	bl	80021a4 <HAL_GPIO_WritePin>

	if(L3GD20_recive(L3GD20_WHO_AM_I) != 212)
 80005b8:	200f      	movs	r0, #15
 80005ba:	f000 f847 	bl	800064c <L3GD20_recive>
 80005be:	4603      	mov	r3, r0
 80005c0:	2bd4      	cmp	r3, #212	; 0xd4
 80005c2:	d001      	beq.n	80005c8 <L3GD20_init+0x28>
	{
		return 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	e010      	b.n	80005ea <L3GD20_init+0x4a>
	}

	L3GD20_send(L3GD20_CTRL_REG1, 0x0F); // aktywuje żyroskop
 80005c8:	210f      	movs	r1, #15
 80005ca:	2020      	movs	r0, #32
 80005cc:	f000 f816 	bl	80005fc <L3GD20_send>
	L3GD20_send(L3GD20_CTRL_REG4, 0x20); // Okreslenie skali
 80005d0:	2120      	movs	r1, #32
 80005d2:	2023      	movs	r0, #35	; 0x23
 80005d4:	f000 f812 	bl	80005fc <L3GD20_send>
	L3GD20_send(L3GD20_CTRL_REG2, 0x00); // ustawia filtr górnoprzepustowy
 80005d8:	2100      	movs	r1, #0
 80005da:	2021      	movs	r0, #33	; 0x21
 80005dc:	f000 f80e 	bl	80005fc <L3GD20_send>
	L3GD20_send(L3GD20_CTRL_REG5, 0x10); // włącza filtr górnoprzepustowy
 80005e0:	2110      	movs	r1, #16
 80005e2:	2024      	movs	r0, #36	; 0x24
 80005e4:	f000 f80a 	bl	80005fc <L3GD20_send>

	return 1;
 80005e8:	2301      	movs	r3, #1
	address_var[0] = 0x00 | L3GD20_CTRL_REG5;
	address_var[1] = 0x10;
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi5, address_var, 2, 500);
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);*/
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000009c 	.word	0x2000009c
 80005f8:	40020800 	.word	0x40020800

080005fc <L3GD20_send>:

void L3GD20_send(uint8_t address, uint8_t data)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	460a      	mov	r2, r1
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	4613      	mov	r3, r2
 800060a:	71bb      	strb	r3, [r7, #6]
	uint8_t transmit_data[2];
	transmit_data[0] = address;
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	733b      	strb	r3, [r7, #12]
	transmit_data[1] = data;
 8000610:	79bb      	ldrb	r3, [r7, #6]
 8000612:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	2102      	movs	r1, #2
 8000618:	480a      	ldr	r0, [pc, #40]	; (8000644 <L3GD20_send+0x48>)
 800061a:	f001 fdc3 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(L3GD20_data.hspi_handle, transmit_data, 2, L3GD20_SPI_WAIT_TIME);
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <L3GD20_send+0x4c>)
 8000620:	6818      	ldr	r0, [r3, #0]
 8000622:	f107 010c 	add.w	r1, r7, #12
 8000626:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800062a:	2202      	movs	r2, #2
 800062c:	f003 f826 	bl	800367c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2102      	movs	r1, #2
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <L3GD20_send+0x48>)
 8000636:	f001 fdb5 	bl	80021a4 <HAL_GPIO_WritePin>
}
 800063a:	bf00      	nop
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40020800 	.word	0x40020800
 8000648:	2000009c 	.word	0x2000009c

0800064c <L3GD20_recive>:

uint8_t L3GD20_recive(uint8_t addres)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af02      	add	r7, sp, #8
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	uint8_t transmit_data[2];
	uint8_t recive_data[2];
	transmit_data[0] = addres | 0x80;
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800065c:	b2db      	uxtb	r3, r3
 800065e:	733b      	strb	r3, [r7, #12]
	transmit_data[1] = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	737b      	strb	r3, [r7, #13]
	recive_data[1] = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	727b      	strb	r3, [r7, #9]
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	2102      	movs	r1, #2
 800066c:	480c      	ldr	r0, [pc, #48]	; (80006a0 <L3GD20_recive+0x54>)
 800066e:	f001 fd99 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(L3GD20_data.hspi_handle, transmit_data, recive_data, 2, L3GD20_SPI_WAIT_TIME);
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <L3GD20_recive+0x58>)
 8000674:	6818      	ldr	r0, [r3, #0]
 8000676:	f107 0208 	add.w	r2, r7, #8
 800067a:	f107 010c 	add.w	r1, r7, #12
 800067e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2302      	movs	r3, #2
 8000686:	f003 f92d 	bl	80038e4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	2102      	movs	r1, #2
 800068e:	4804      	ldr	r0, [pc, #16]	; (80006a0 <L3GD20_recive+0x54>)
 8000690:	f001 fd88 	bl	80021a4 <HAL_GPIO_WritePin>
	return recive_data[1];
 8000694:	7a7b      	ldrb	r3, [r7, #9]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40020800 	.word	0x40020800
 80006a4:	2000009c 	.word	0x2000009c

080006a8 <L3GD20_readRawData>:

void L3GD20_readRawData()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	L3GD20_data.X_raw = L3GD20_recive(L3GD20_OUT_X_L);
 80006ac:	2028      	movs	r0, #40	; 0x28
 80006ae:	f7ff ffcd 	bl	800064c <L3GD20_recive>
 80006b2:	4603      	mov	r3, r0
 80006b4:	b21a      	sxth	r2, r3
 80006b6:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <L3GD20_readRawData+0x80>)
 80006b8:	809a      	strh	r2, [r3, #4]
	L3GD20_data.X_raw |= L3GD20_recive(L3GD20_OUT_X_H) << 8;
 80006ba:	2029      	movs	r0, #41	; 0x29
 80006bc:	f7ff ffc6 	bl	800064c <L3GD20_recive>
 80006c0:	4603      	mov	r3, r0
 80006c2:	0219      	lsls	r1, r3, #8
 80006c4:	4b18      	ldr	r3, [pc, #96]	; (8000728 <L3GD20_readRawData+0x80>)
 80006c6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80006ca:	b20b      	sxth	r3, r1
 80006cc:	4313      	orrs	r3, r2
 80006ce:	b21a      	sxth	r2, r3
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <L3GD20_readRawData+0x80>)
 80006d2:	809a      	strh	r2, [r3, #4]

	L3GD20_data.Y_raw = L3GD20_recive(L3GD20_OUT_Y_L);
 80006d4:	202a      	movs	r0, #42	; 0x2a
 80006d6:	f7ff ffb9 	bl	800064c <L3GD20_recive>
 80006da:	4603      	mov	r3, r0
 80006dc:	b21a      	sxth	r2, r3
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <L3GD20_readRawData+0x80>)
 80006e0:	80da      	strh	r2, [r3, #6]
	L3GD20_data.Y_raw |= L3GD20_recive(L3GD20_OUT_Y_H) << 8;
 80006e2:	202b      	movs	r0, #43	; 0x2b
 80006e4:	f7ff ffb2 	bl	800064c <L3GD20_recive>
 80006e8:	4603      	mov	r3, r0
 80006ea:	0219      	lsls	r1, r3, #8
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <L3GD20_readRawData+0x80>)
 80006ee:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80006f2:	b20b      	sxth	r3, r1
 80006f4:	4313      	orrs	r3, r2
 80006f6:	b21a      	sxth	r2, r3
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <L3GD20_readRawData+0x80>)
 80006fa:	80da      	strh	r2, [r3, #6]

	L3GD20_data.Z_raw = L3GD20_recive(L3GD20_OUT_Z_L);
 80006fc:	202c      	movs	r0, #44	; 0x2c
 80006fe:	f7ff ffa5 	bl	800064c <L3GD20_recive>
 8000702:	4603      	mov	r3, r0
 8000704:	b21a      	sxth	r2, r3
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <L3GD20_readRawData+0x80>)
 8000708:	811a      	strh	r2, [r3, #8]
	L3GD20_data.Z_raw |= L3GD20_recive(L3GD20_OUT_Z_H) << 8;
 800070a:	202d      	movs	r0, #45	; 0x2d
 800070c:	f7ff ff9e 	bl	800064c <L3GD20_recive>
 8000710:	4603      	mov	r3, r0
 8000712:	0219      	lsls	r1, r3, #8
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <L3GD20_readRawData+0x80>)
 8000716:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800071a:	b20b      	sxth	r3, r1
 800071c:	4313      	orrs	r3, r2
 800071e:	b21a      	sxth	r2, r3
 8000720:	4b01      	ldr	r3, [pc, #4]	; (8000728 <L3GD20_readRawData+0x80>)
 8000722:	811a      	strh	r2, [r3, #8]
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000009c 	.word	0x2000009c

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b09f      	sub	sp, #124	; 0x7c
 8000730:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f001 f83f 	bl	80017b4 <HAL_Init>
  /* USER CODE BEGIN Init */
  //int status = L3GD20_init(&hspi5);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f85d 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073a:	f000 fad9 	bl	8000cf0 <MX_GPIO_Init>
  MX_CRC_Init();
 800073e:	f000 f8dd 	bl	80008fc <MX_CRC_Init>
  MX_DMA2D_Init();
 8000742:	f000 f8ef 	bl	8000924 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000746:	f000 fa83 	bl	8000c50 <MX_FMC_Init>
  MX_LTDC_Init();
 800074a:	f000 f91d 	bl	8000988 <MX_LTDC_Init>
  MX_SPI5_Init();
 800074e:	f000 f9cf 	bl	8000af0 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000752:	f000 fa03 	bl	8000b5c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000756:	f000 fa51 	bl	8000bfc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(5000);
 800075a:	f241 3088 	movw	r0, #5000	; 0x1388
 800075e:	f001 f86b 	bl	8001838 <HAL_Delay>
  HAL_SPI_Transmit(&hspi5, address_var, 2, 500);
  HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
*/
  uint8_t recive_var[2];
  uint8_t address_var[2];
  int viwe = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	66fb      	str	r3, [r7, #108]	; 0x6c
  char msg[100];

  	  if(!L3GD20_init(&hspi5))
 8000766:	481e      	ldr	r0, [pc, #120]	; (80007e0 <main+0xb4>)
 8000768:	f7ff ff1a 	bl	80005a0 <L3GD20_init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d112      	bne.n	8000798 <main+0x6c>
  	  {
  		sprintf(msg, "not good :(\r\n");
 8000772:	463b      	mov	r3, r7
 8000774:	4a1b      	ldr	r2, [pc, #108]	; (80007e4 <main+0xb8>)
 8000776:	461c      	mov	r4, r3
 8000778:	4613      	mov	r3, r2
 800077a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800077c:	c407      	stmia	r4!, {r0, r1, r2}
 800077e:	8023      	strh	r3, [r4, #0]
  		HAL_UART_Transmit(&huart1, msg, (uint16_t)strlen(msg), 1000);
 8000780:	463b      	mov	r3, r7
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fd34 	bl	80001f0 <strlen>
 8000788:	4603      	mov	r3, r0
 800078a:	b29a      	uxth	r2, r3
 800078c:	4639      	mov	r1, r7
 800078e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000792:	4815      	ldr	r0, [pc, #84]	; (80007e8 <main+0xbc>)
 8000794:	f003 ff41 	bl	800461a <HAL_UART_Transmit>
		  sprintf(msg, "OUT_X_H [%d]: %d \r\n", (viwe++)%8, recive_var[1]);
	  else
		  sprintf(msg, "nein [%d] \r\n", (viwe++)&8);
	  HAL_UART_Transmit(&huart1, msg, (uint16_t)strlen(msg), 1000);*/

	  HAL_Delay(300);
 8000798:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800079c:	f001 f84c 	bl	8001838 <HAL_Delay>
	  L3GD20_readRawData();
 80007a0:	f7ff ff82 	bl	80006a8 <L3GD20_readRawData>
	  sprintf(msg, "XYZ: %d | %d | %d\r\n",L3GD20_data.X_raw, L3GD20_data.Y_raw, L3GD20_data.Z_raw );
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <main+0xc0>)
 80007a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80007aa:	461a      	mov	r2, r3
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <main+0xc0>)
 80007ae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80007b2:	4619      	mov	r1, r3
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <main+0xc0>)
 80007b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80007ba:	4638      	mov	r0, r7
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	460b      	mov	r3, r1
 80007c0:	490b      	ldr	r1, [pc, #44]	; (80007f0 <main+0xc4>)
 80007c2:	f004 fcad 	bl	8005120 <siprintf>
	  HAL_UART_Transmit(&huart1, msg, (uint16_t)strlen(msg), 1000);
 80007c6:	463b      	mov	r3, r7
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fd11 	bl	80001f0 <strlen>
 80007ce:	4603      	mov	r3, r0
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	4639      	mov	r1, r7
 80007d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d8:	4803      	ldr	r0, [pc, #12]	; (80007e8 <main+0xbc>)
 80007da:	f003 ff1e 	bl	800461a <HAL_UART_Transmit>
  {
 80007de:	e7db      	b.n	8000798 <main+0x6c>
 80007e0:	200000a8 	.word	0x200000a8
 80007e4:	08005944 	.word	0x08005944
 80007e8:	200001b0 	.word	0x200001b0
 80007ec:	2000009c 	.word	0x2000009c
 80007f0:	08005954 	.word	0x08005954

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b0a0      	sub	sp, #128	; 0x80
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007fe:	2230      	movs	r2, #48	; 0x30
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f004 fc84 	bl	8005110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2230      	movs	r2, #48	; 0x30
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f004 fc75 	bl	8005110 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b32      	ldr	r3, [pc, #200]	; (80008f4 <SystemClock_Config+0x100>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	4a31      	ldr	r2, [pc, #196]	; (80008f4 <SystemClock_Config+0x100>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	6413      	str	r3, [r2, #64]	; 0x40
 8000836:	4b2f      	ldr	r3, [pc, #188]	; (80008f4 <SystemClock_Config+0x100>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <SystemClock_Config+0x104>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800084e:	4a2a      	ldr	r2, [pc, #168]	; (80008f8 <SystemClock_Config+0x104>)
 8000850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000854:	6013      	str	r3, [r2, #0]
 8000856:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <SystemClock_Config+0x104>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000862:	2301      	movs	r3, #1
 8000864:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000866:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800086a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086c:	2302      	movs	r3, #2
 800086e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000870:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000874:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000876:	2304      	movs	r3, #4
 8000878:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 800087a:	2348      	movs	r3, #72	; 0x48
 800087c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800087e:	2302      	movs	r3, #2
 8000880:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000882:	2303      	movs	r3, #3
 8000884:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000886:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800088a:	4618      	mov	r0, r3
 800088c:	f002 f80c 	bl	80028a8 <HAL_RCC_OscConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000896:	f000 fb8d 	bl	8000fb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089a:	230f      	movs	r3, #15
 800089c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089e:	2302      	movs	r3, #2
 80008a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008b4:	2102      	movs	r1, #2
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 fa66 	bl	8002d88 <HAL_RCC_ClockConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008c2:	f000 fb77 	bl	8000fb4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80008c6:	2308      	movs	r3, #8
 80008c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80008ca:	2332      	movs	r3, #50	; 0x32
 80008cc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80008d2:	2300      	movs	r3, #0
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fc78 	bl	80031d0 <HAL_RCCEx_PeriphCLKConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80008e6:	f000 fb65 	bl	8000fb4 <Error_Handler>
  }
}
 80008ea:	bf00      	nop
 80008ec:	3780      	adds	r7, #128	; 0x80
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40007000 	.word	0x40007000

080008fc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_CRC_Init+0x20>)
 8000902:	4a07      	ldr	r2, [pc, #28]	; (8000920 <MX_CRC_Init+0x24>)
 8000904:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_CRC_Init+0x20>)
 8000908:	f001 f89a 	bl	8001a40 <HAL_CRC_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000912:	f000 fb4f 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000100 	.word	0x20000100
 8000920:	40023000 	.word	0x40023000

08000924 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <MX_DMA2D_Init+0x5c>)
 800092a:	4a16      	ldr	r2, [pc, #88]	; (8000984 <MX_DMA2D_Init+0x60>)
 800092c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_DMA2D_Init+0x5c>)
 8000930:	2200      	movs	r2, #0
 8000932:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_DMA2D_Init+0x5c>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_DMA2D_Init+0x5c>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_DMA2D_Init+0x5c>)
 8000942:	2200      	movs	r2, #0
 8000944:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_DMA2D_Init+0x5c>)
 8000948:	2200      	movs	r2, #0
 800094a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_DMA2D_Init+0x5c>)
 800094e:	2200      	movs	r2, #0
 8000950:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_DMA2D_Init+0x5c>)
 8000954:	2200      	movs	r2, #0
 8000956:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000958:	4809      	ldr	r0, [pc, #36]	; (8000980 <MX_DMA2D_Init+0x5c>)
 800095a:	f001 f88d 	bl	8001a78 <HAL_DMA2D_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000964:	f000 fb26 	bl	8000fb4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000968:	2101      	movs	r1, #1
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_DMA2D_Init+0x5c>)
 800096c:	f001 f9de 	bl	8001d2c <HAL_DMA2D_ConfigLayer>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000976:	f000 fb1d 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000230 	.word	0x20000230
 8000984:	4002b000 	.word	0x4002b000

08000988 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b09a      	sub	sp, #104	; 0x68
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800098e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000992:	2234      	movs	r2, #52	; 0x34
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f004 fbba 	bl	8005110 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800099c:	463b      	mov	r3, r7
 800099e:	2234      	movs	r2, #52	; 0x34
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f004 fbb4 	bl	8005110 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80009a8:	4b4f      	ldr	r3, [pc, #316]	; (8000ae8 <MX_LTDC_Init+0x160>)
 80009aa:	4a50      	ldr	r2, [pc, #320]	; (8000aec <MX_LTDC_Init+0x164>)
 80009ac:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009ae:	4b4e      	ldr	r3, [pc, #312]	; (8000ae8 <MX_LTDC_Init+0x160>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009b4:	4b4c      	ldr	r3, [pc, #304]	; (8000ae8 <MX_LTDC_Init+0x160>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80009ba:	4b4b      	ldr	r3, [pc, #300]	; (8000ae8 <MX_LTDC_Init+0x160>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80009c0:	4b49      	ldr	r3, [pc, #292]	; (8000ae8 <MX_LTDC_Init+0x160>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80009c6:	4b48      	ldr	r3, [pc, #288]	; (8000ae8 <MX_LTDC_Init+0x160>)
 80009c8:	2209      	movs	r2, #9
 80009ca:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80009cc:	4b46      	ldr	r3, [pc, #280]	; (8000ae8 <MX_LTDC_Init+0x160>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80009d2:	4b45      	ldr	r3, [pc, #276]	; (8000ae8 <MX_LTDC_Init+0x160>)
 80009d4:	221d      	movs	r2, #29
 80009d6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80009d8:	4b43      	ldr	r3, [pc, #268]	; (8000ae8 <MX_LTDC_Init+0x160>)
 80009da:	2203      	movs	r2, #3
 80009dc:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80009de:	4b42      	ldr	r3, [pc, #264]	; (8000ae8 <MX_LTDC_Init+0x160>)
 80009e0:	f240 120d 	movw	r2, #269	; 0x10d
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80009e6:	4b40      	ldr	r3, [pc, #256]	; (8000ae8 <MX_LTDC_Init+0x160>)
 80009e8:	f240 1243 	movw	r2, #323	; 0x143
 80009ec:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80009ee:	4b3e      	ldr	r3, [pc, #248]	; (8000ae8 <MX_LTDC_Init+0x160>)
 80009f0:	f240 1217 	movw	r2, #279	; 0x117
 80009f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80009f6:	4b3c      	ldr	r3, [pc, #240]	; (8000ae8 <MX_LTDC_Init+0x160>)
 80009f8:	f240 1247 	movw	r2, #327	; 0x147
 80009fc:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80009fe:	4b3a      	ldr	r3, [pc, #232]	; (8000ae8 <MX_LTDC_Init+0x160>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 100;
 8000a06:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <MX_LTDC_Init+0x160>)
 8000a08:	2264      	movs	r2, #100	; 0x64
 8000a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a0e:	4b36      	ldr	r3, [pc, #216]	; (8000ae8 <MX_LTDC_Init+0x160>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a16:	4834      	ldr	r0, [pc, #208]	; (8000ae8 <MX_LTDC_Init+0x160>)
 8000a18:	f001 fbde 	bl	80021d8 <HAL_LTDC_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000a22:	f000 fac7 	bl	8000fb4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8000a2a:	23f0      	movs	r3, #240	; 0xf0
 8000a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 8000a32:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a36:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000a3c:	23ff      	movs	r3, #255	; 0xff
 8000a3e:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 255;
 8000a40:	23ff      	movs	r3, #255	; 0xff
 8000a42:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000a44:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a48:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000a4e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000a52:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8000a54:	23f0      	movs	r3, #240	; 0xf0
 8000a56:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8000a58:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a5c:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 100;
 8000a64:	2364      	movs	r3, #100	; 0x64
 8000a66:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000a70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a74:	2200      	movs	r2, #0
 8000a76:	4619      	mov	r1, r3
 8000a78:	481b      	ldr	r0, [pc, #108]	; (8000ae8 <MX_LTDC_Init+0x160>)
 8000a7a:	f001 fd3f 	bl	80024fc <HAL_LTDC_ConfigLayer>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 8000a84:	f000 fa96 	bl	8000fb4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa4:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000aa6:	2305      	movs	r3, #5
 8000aa8:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	2201      	movs	r2, #1
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <MX_LTDC_Init+0x160>)
 8000ad0:	f001 fd14 	bl	80024fc <HAL_LTDC_ConfigLayer>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 8000ada:	f000 fa6b 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	3768      	adds	r7, #104	; 0x68
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000108 	.word	0x20000108
 8000aec:	40016800 	.word	0x40016800

08000af0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_SPI5_Init+0x64>)
 8000af6:	4a18      	ldr	r2, [pc, #96]	; (8000b58 <MX_SPI5_Init+0x68>)
 8000af8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_SPI5_Init+0x64>)
 8000afc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b00:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_SPI5_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_SPI5_Init+0x64>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_SPI5_Init+0x64>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_SPI5_Init+0x64>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_SPI5_Init+0x64>)
 8000b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b20:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_SPI5_Init+0x64>)
 8000b24:	2218      	movs	r2, #24
 8000b26:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <MX_SPI5_Init+0x64>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_SPI5_Init+0x64>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <MX_SPI5_Init+0x64>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_SPI5_Init+0x64>)
 8000b3c:	220a      	movs	r2, #10
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_SPI5_Init+0x64>)
 8000b42:	f002 fd37 	bl	80035b4 <HAL_SPI_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000b4c:	f000 fa32 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200000a8 	.word	0x200000a8
 8000b58:	40015000 	.word	0x40015000

08000b5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b70:	463b      	mov	r3, r7
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b78:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <MX_TIM1_Init+0x98>)
 8000b7a:	4a1f      	ldr	r2, [pc, #124]	; (8000bf8 <MX_TIM1_Init+0x9c>)
 8000b7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <MX_TIM1_Init+0x98>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <MX_TIM1_Init+0x98>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <MX_TIM1_Init+0x98>)
 8000b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_TIM1_Init+0x98>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <MX_TIM1_Init+0x98>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_TIM1_Init+0x98>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ba4:	4813      	ldr	r0, [pc, #76]	; (8000bf4 <MX_TIM1_Init+0x98>)
 8000ba6:	f003 f8eb 	bl	8003d80 <HAL_TIM_Base_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000bb0:	f000 fa00 	bl	8000fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <MX_TIM1_Init+0x98>)
 8000bc2:	f003 fa34 	bl	800402e <HAL_TIM_ConfigClockSource>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000bcc:	f000 f9f2 	bl	8000fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bd8:	463b      	mov	r3, r7
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_TIM1_Init+0x98>)
 8000bde:	f003 fc3f 	bl	8004460 <HAL_TIMEx_MasterConfigSynchronization>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000be8:	f000 f9e4 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200001f0 	.word	0x200001f0
 8000bf8:	40010000 	.word	0x40010000

08000bfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <MX_USART1_UART_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_USART1_UART_Init+0x4c>)
 8000c34:	f003 fca4 	bl	8004580 <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f000 f9b9 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200001b0 	.word	0x200001b0
 8000c4c:	40011000 	.word	0x40011000

08000c50 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	615a      	str	r2, [r3, #20]
 8000c66:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c68:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <MX_FMC_Init+0x98>)
 8000c6a:	4a20      	ldr	r2, [pc, #128]	; (8000cec <MX_FMC_Init+0x9c>)
 8000c6c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <MX_FMC_Init+0x98>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c74:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <MX_FMC_Init+0x98>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <MX_FMC_Init+0x98>)
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <MX_FMC_Init+0x98>)
 8000c82:	2210      	movs	r2, #16
 8000c84:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <MX_FMC_Init+0x98>)
 8000c88:	2240      	movs	r2, #64	; 0x40
 8000c8a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_FMC_Init+0x98>)
 8000c8e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000c92:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_FMC_Init+0x98>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <MX_FMC_Init+0x98>)
 8000c9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ca0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_FMC_Init+0x98>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_FMC_Init+0x98>)
 8000caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000cb4:	2307      	movs	r3, #7
 8000cb6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000cb8:	2304      	movs	r3, #4
 8000cba:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_FMC_Init+0x98>)
 8000cd2:	f002 fc3b 	bl	800354c <HAL_SDRAM_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000cdc:	f000 f96a 	bl	8000fb4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000ce0:	bf00      	nop
 8000ce2:	3720      	adds	r7, #32
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000270 	.word	0x20000270
 8000cec:	a0000140 	.word	0xa0000140

08000cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08e      	sub	sp, #56	; 0x38
 8000cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
 8000d0a:	4b9a      	ldr	r3, [pc, #616]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a99      	ldr	r2, [pc, #612]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b97      	ldr	r3, [pc, #604]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	623b      	str	r3, [r7, #32]
 8000d20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
 8000d26:	4b93      	ldr	r3, [pc, #588]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a92      	ldr	r2, [pc, #584]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000d2c:	f043 0320 	orr.w	r3, r3, #32
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b90      	ldr	r3, [pc, #576]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0320 	and.w	r3, r3, #32
 8000d3a:	61fb      	str	r3, [r7, #28]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
 8000d42:	4b8c      	ldr	r3, [pc, #560]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a8b      	ldr	r2, [pc, #556]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b89      	ldr	r3, [pc, #548]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d56:	61bb      	str	r3, [r7, #24]
 8000d58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	4b85      	ldr	r3, [pc, #532]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a84      	ldr	r2, [pc, #528]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b82      	ldr	r3, [pc, #520]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b7e      	ldr	r3, [pc, #504]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a7d      	ldr	r2, [pc, #500]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b7b      	ldr	r3, [pc, #492]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b77      	ldr	r3, [pc, #476]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a76      	ldr	r2, [pc, #472]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b74      	ldr	r3, [pc, #464]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	4b70      	ldr	r3, [pc, #448]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a6f      	ldr	r2, [pc, #444]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000db8:	f043 0310 	orr.w	r3, r3, #16
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b6d      	ldr	r3, [pc, #436]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0310 	and.w	r3, r3, #16
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4b69      	ldr	r3, [pc, #420]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a68      	ldr	r2, [pc, #416]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000dd4:	f043 0308 	orr.w	r3, r3, #8
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b66      	ldr	r3, [pc, #408]	; (8000f74 <MX_GPIO_Init+0x284>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0308 	and.w	r3, r3, #8
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2116      	movs	r1, #22
 8000dea:	4863      	ldr	r0, [pc, #396]	; (8000f78 <MX_GPIO_Init+0x288>)
 8000dec:	f001 f9da 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2180      	movs	r1, #128	; 0x80
 8000df4:	4861      	ldr	r0, [pc, #388]	; (8000f7c <MX_GPIO_Init+0x28c>)
 8000df6:	f001 f9d5 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000e00:	485f      	ldr	r0, [pc, #380]	; (8000f80 <MX_GPIO_Init+0x290>)
 8000e02:	f001 f9cf 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000e0c:	485d      	ldr	r0, [pc, #372]	; (8000f84 <MX_GPIO_Init+0x294>)
 8000e0e:	f001 f9c9 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000e12:	2316      	movs	r3, #22
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	4853      	ldr	r0, [pc, #332]	; (8000f78 <MX_GPIO_Init+0x288>)
 8000e2a:	f001 f811 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000e2e:	f248 0307 	movw	r3, #32775	; 0x8007
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e34:	4b54      	ldr	r3, [pc, #336]	; (8000f88 <MX_GPIO_Init+0x298>)
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e40:	4619      	mov	r1, r3
 8000e42:	484e      	ldr	r0, [pc, #312]	; (8000f7c <MX_GPIO_Init+0x28c>)
 8000e44:	f001 f804 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000e48:	2380      	movs	r3, #128	; 0x80
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4847      	ldr	r0, [pc, #284]	; (8000f7c <MX_GPIO_Init+0x28c>)
 8000e60:	f000 fff6 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000e64:	2320      	movs	r3, #32
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e68:	4b47      	ldr	r3, [pc, #284]	; (8000f88 <MX_GPIO_Init+0x298>)
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e74:	4619      	mov	r1, r3
 8000e76:	4840      	ldr	r0, [pc, #256]	; (8000f78 <MX_GPIO_Init+0x288>)
 8000e78:	f000 ffea 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	483f      	ldr	r0, [pc, #252]	; (8000f8c <MX_GPIO_Init+0x29c>)
 8000e90:	f000 ffde 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000e94:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000ea6:	230c      	movs	r3, #12
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4836      	ldr	r0, [pc, #216]	; (8000f8c <MX_GPIO_Init+0x29c>)
 8000eb2:	f000 ffcd 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000eb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4830      	ldr	r0, [pc, #192]	; (8000f8c <MX_GPIO_Init+0x29c>)
 8000ecc:	f000 ffc0 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000ed0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4826      	ldr	r0, [pc, #152]	; (8000f80 <MX_GPIO_Init+0x290>)
 8000ee6:	f000 ffb3 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000eea:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	4619      	mov	r1, r3
 8000f02:	481f      	ldr	r0, [pc, #124]	; (8000f80 <MX_GPIO_Init+0x290>)
 8000f04:	f000 ffa4 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f0e:	2312      	movs	r3, #18
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f22:	4619      	mov	r1, r3
 8000f24:	4814      	ldr	r0, [pc, #80]	; (8000f78 <MX_GPIO_Init+0x288>)
 8000f26:	f000 ff93 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f30:	2312      	movs	r3, #18
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f44:	4619      	mov	r1, r3
 8000f46:	480d      	ldr	r0, [pc, #52]	; (8000f7c <MX_GPIO_Init+0x28c>)
 8000f48:	f000 ff82 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000f4c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f62:	4619      	mov	r1, r3
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <MX_GPIO_Init+0x294>)
 8000f66:	f000 ff73 	bl	8001e50 <HAL_GPIO_Init>

}
 8000f6a:	bf00      	nop
 8000f6c:	3738      	adds	r7, #56	; 0x38
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	40020c00 	.word	0x40020c00
 8000f84:	40021800 	.word	0x40021800
 8000f88:	10120000 	.word	0x10120000
 8000f8c:	40020400 	.word	0x40020400

08000f90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d101      	bne.n	8000fa6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fa2:	f000 fc29 	bl	80017f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40001000 	.word	0x40001000

08000fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_MspInit+0x54>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	4a11      	ldr	r2, [pc, #68]	; (8001018 <HAL_MspInit+0x54>)
 8000fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_MspInit+0x54>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <HAL_MspInit+0x54>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <HAL_MspInit+0x54>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_MspInit+0x54>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	210f      	movs	r1, #15
 8001006:	f06f 0001 	mvn.w	r0, #1
 800100a:	f000 fcef 	bl	80019ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800

0800101c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <HAL_CRC_MspInit+0x3c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d10d      	bne.n	800104a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_CRC_MspInit+0x40>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a09      	ldr	r2, [pc, #36]	; (800105c <HAL_CRC_MspInit+0x40>)
 8001038:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <HAL_CRC_MspInit+0x40>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40023000 	.word	0x40023000
 800105c:	40023800 	.word	0x40023800

08001060 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <HAL_DMA2D_MspInit+0x48>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d115      	bne.n	800109e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_DMA2D_MspInit+0x4c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <HAL_DMA2D_MspInit+0x4c>)
 800107c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_DMA2D_MspInit+0x4c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2105      	movs	r1, #5
 8001092:	205a      	movs	r0, #90	; 0x5a
 8001094:	f000 fcaa 	bl	80019ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001098:	205a      	movs	r0, #90	; 0x5a
 800109a:	f000 fcc3 	bl	8001a24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	4002b000 	.word	0x4002b000
 80010ac:	40023800 	.word	0x40023800

080010b0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08e      	sub	sp, #56	; 0x38
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a7b      	ldr	r2, [pc, #492]	; (80012bc <HAL_LTDC_MspInit+0x20c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	f040 80f0 	bne.w	80012b4 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
 80010d8:	4b79      	ldr	r3, [pc, #484]	; (80012c0 <HAL_LTDC_MspInit+0x210>)
 80010da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010dc:	4a78      	ldr	r2, [pc, #480]	; (80012c0 <HAL_LTDC_MspInit+0x210>)
 80010de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010e2:	6453      	str	r3, [r2, #68]	; 0x44
 80010e4:	4b76      	ldr	r3, [pc, #472]	; (80012c0 <HAL_LTDC_MspInit+0x210>)
 80010e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010ec:	623b      	str	r3, [r7, #32]
 80010ee:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
 80010f4:	4b72      	ldr	r3, [pc, #456]	; (80012c0 <HAL_LTDC_MspInit+0x210>)
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	4a71      	ldr	r2, [pc, #452]	; (80012c0 <HAL_LTDC_MspInit+0x210>)
 80010fa:	f043 0320 	orr.w	r3, r3, #32
 80010fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001100:	4b6f      	ldr	r3, [pc, #444]	; (80012c0 <HAL_LTDC_MspInit+0x210>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	f003 0320 	and.w	r3, r3, #32
 8001108:	61fb      	str	r3, [r7, #28]
 800110a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
 8001110:	4b6b      	ldr	r3, [pc, #428]	; (80012c0 <HAL_LTDC_MspInit+0x210>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	4a6a      	ldr	r2, [pc, #424]	; (80012c0 <HAL_LTDC_MspInit+0x210>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6313      	str	r3, [r2, #48]	; 0x30
 800111c:	4b68      	ldr	r3, [pc, #416]	; (80012c0 <HAL_LTDC_MspInit+0x210>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	4b64      	ldr	r3, [pc, #400]	; (80012c0 <HAL_LTDC_MspInit+0x210>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	4a63      	ldr	r2, [pc, #396]	; (80012c0 <HAL_LTDC_MspInit+0x210>)
 8001132:	f043 0302 	orr.w	r3, r3, #2
 8001136:	6313      	str	r3, [r2, #48]	; 0x30
 8001138:	4b61      	ldr	r3, [pc, #388]	; (80012c0 <HAL_LTDC_MspInit+0x210>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	4b5d      	ldr	r3, [pc, #372]	; (80012c0 <HAL_LTDC_MspInit+0x210>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	4a5c      	ldr	r2, [pc, #368]	; (80012c0 <HAL_LTDC_MspInit+0x210>)
 800114e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001152:	6313      	str	r3, [r2, #48]	; 0x30
 8001154:	4b5a      	ldr	r3, [pc, #360]	; (80012c0 <HAL_LTDC_MspInit+0x210>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	4b56      	ldr	r3, [pc, #344]	; (80012c0 <HAL_LTDC_MspInit+0x210>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	4a55      	ldr	r2, [pc, #340]	; (80012c0 <HAL_LTDC_MspInit+0x210>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	6313      	str	r3, [r2, #48]	; 0x30
 8001170:	4b53      	ldr	r3, [pc, #332]	; (80012c0 <HAL_LTDC_MspInit+0x210>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	4b4f      	ldr	r3, [pc, #316]	; (80012c0 <HAL_LTDC_MspInit+0x210>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	4a4e      	ldr	r2, [pc, #312]	; (80012c0 <HAL_LTDC_MspInit+0x210>)
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	6313      	str	r3, [r2, #48]	; 0x30
 800118c:	4b4c      	ldr	r3, [pc, #304]	; (80012c0 <HAL_LTDC_MspInit+0x210>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	f003 0308 	and.w	r3, r3, #8
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011aa:	230e      	movs	r3, #14
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80011ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b2:	4619      	mov	r1, r3
 80011b4:	4843      	ldr	r0, [pc, #268]	; (80012c4 <HAL_LTDC_MspInit+0x214>)
 80011b6:	f000 fe4b 	bl	8001e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80011ba:	f641 0358 	movw	r3, #6232	; 0x1858
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011cc:	230e      	movs	r3, #14
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d4:	4619      	mov	r1, r3
 80011d6:	483c      	ldr	r0, [pc, #240]	; (80012c8 <HAL_LTDC_MspInit+0x218>)
 80011d8:	f000 fe3a 	bl	8001e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80011dc:	2303      	movs	r3, #3
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011ec:	2309      	movs	r3, #9
 80011ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f4:	4619      	mov	r1, r3
 80011f6:	4835      	ldr	r0, [pc, #212]	; (80012cc <HAL_LTDC_MspInit+0x21c>)
 80011f8:	f000 fe2a 	bl	8001e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80011fc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800120e:	230e      	movs	r3, #14
 8001210:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001216:	4619      	mov	r1, r3
 8001218:	482c      	ldr	r0, [pc, #176]	; (80012cc <HAL_LTDC_MspInit+0x21c>)
 800121a:	f000 fe19 	bl	8001e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800121e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2300      	movs	r3, #0
 800122e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001230:	230e      	movs	r3, #14
 8001232:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001238:	4619      	mov	r1, r3
 800123a:	4825      	ldr	r0, [pc, #148]	; (80012d0 <HAL_LTDC_MspInit+0x220>)
 800123c:	f000 fe08 	bl	8001e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001240:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001252:	230e      	movs	r3, #14
 8001254:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125a:	4619      	mov	r1, r3
 800125c:	481d      	ldr	r0, [pc, #116]	; (80012d4 <HAL_LTDC_MspInit+0x224>)
 800125e:	f000 fdf7 	bl	8001e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001262:	2348      	movs	r3, #72	; 0x48
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001272:	230e      	movs	r3, #14
 8001274:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127a:	4619      	mov	r1, r3
 800127c:	4816      	ldr	r0, [pc, #88]	; (80012d8 <HAL_LTDC_MspInit+0x228>)
 800127e:	f000 fde7 	bl	8001e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001282:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001294:	2309      	movs	r3, #9
 8001296:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	4619      	mov	r1, r3
 800129e:	480c      	ldr	r0, [pc, #48]	; (80012d0 <HAL_LTDC_MspInit+0x220>)
 80012a0:	f000 fdd6 	bl	8001e50 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2105      	movs	r1, #5
 80012a8:	2058      	movs	r0, #88	; 0x58
 80012aa:	f000 fb9f 	bl	80019ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80012ae:	2058      	movs	r0, #88	; 0x58
 80012b0:	f000 fbb8 	bl	8001a24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80012b4:	bf00      	nop
 80012b6:	3738      	adds	r7, #56	; 0x38
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40016800 	.word	0x40016800
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40021400 	.word	0x40021400
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40020400 	.word	0x40020400
 80012d0:	40021800 	.word	0x40021800
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020c00 	.word	0x40020c00

080012dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	; 0x28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a19      	ldr	r2, [pc, #100]	; (8001360 <HAL_SPI_MspInit+0x84>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d12c      	bne.n	8001358 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	4b18      	ldr	r3, [pc, #96]	; (8001364 <HAL_SPI_MspInit+0x88>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	4a17      	ldr	r2, [pc, #92]	; (8001364 <HAL_SPI_MspInit+0x88>)
 8001308:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800130c:	6453      	str	r3, [r2, #68]	; 0x44
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_SPI_MspInit+0x88>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <HAL_SPI_MspInit+0x88>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a10      	ldr	r2, [pc, #64]	; (8001364 <HAL_SPI_MspInit+0x88>)
 8001324:	f043 0320 	orr.w	r3, r3, #32
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <HAL_SPI_MspInit+0x88>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0320 	and.w	r3, r3, #32
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001336:	f44f 7360 	mov.w	r3, #896	; 0x380
 800133a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001348:	2305      	movs	r3, #5
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <HAL_SPI_MspInit+0x8c>)
 8001354:	f000 fd7c 	bl	8001e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001358:	bf00      	nop
 800135a:	3728      	adds	r7, #40	; 0x28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40015000 	.word	0x40015000
 8001364:	40023800 	.word	0x40023800
 8001368:	40021400 	.word	0x40021400

0800136c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <HAL_TIM_Base_MspInit+0x3c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d10d      	bne.n	800139a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_TIM_Base_MspInit+0x40>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	4a09      	ldr	r2, [pc, #36]	; (80013ac <HAL_TIM_Base_MspInit+0x40>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6453      	str	r3, [r2, #68]	; 0x44
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <HAL_TIM_Base_MspInit+0x40>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40010000 	.word	0x40010000
 80013ac:	40023800 	.word	0x40023800

080013b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a19      	ldr	r2, [pc, #100]	; (8001434 <HAL_UART_MspInit+0x84>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d12c      	bne.n	800142c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b18      	ldr	r3, [pc, #96]	; (8001438 <HAL_UART_MspInit+0x88>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a17      	ldr	r2, [pc, #92]	; (8001438 <HAL_UART_MspInit+0x88>)
 80013dc:	f043 0310 	orr.w	r3, r3, #16
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_UART_MspInit+0x88>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_UART_MspInit+0x88>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a10      	ldr	r2, [pc, #64]	; (8001438 <HAL_UART_MspInit+0x88>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_UART_MspInit+0x88>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800140a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800140e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800141c:	2307      	movs	r3, #7
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <HAL_UART_MspInit+0x8c>)
 8001428:	f000 fd12 	bl	8001e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800142c:	bf00      	nop
 800142e:	3728      	adds	r7, #40	; 0x28
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40011000 	.word	0x40011000
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000

08001440 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001454:	4b3b      	ldr	r3, [pc, #236]	; (8001544 <HAL_FMC_MspInit+0x104>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d16f      	bne.n	800153c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800145c:	4b39      	ldr	r3, [pc, #228]	; (8001544 <HAL_FMC_MspInit+0x104>)
 800145e:	2201      	movs	r2, #1
 8001460:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	4b38      	ldr	r3, [pc, #224]	; (8001548 <HAL_FMC_MspInit+0x108>)
 8001468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146a:	4a37      	ldr	r2, [pc, #220]	; (8001548 <HAL_FMC_MspInit+0x108>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6393      	str	r3, [r2, #56]	; 0x38
 8001472:	4b35      	ldr	r3, [pc, #212]	; (8001548 <HAL_FMC_MspInit+0x108>)
 8001474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800147e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001482:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148c:	2303      	movs	r3, #3
 800148e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001490:	230c      	movs	r3, #12
 8001492:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	4619      	mov	r1, r3
 8001498:	482c      	ldr	r0, [pc, #176]	; (800154c <HAL_FMC_MspInit+0x10c>)
 800149a:	f000 fcd9 	bl	8001e50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800149e:	2301      	movs	r3, #1
 80014a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014ae:	230c      	movs	r3, #12
 80014b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	4619      	mov	r1, r3
 80014b6:	4826      	ldr	r0, [pc, #152]	; (8001550 <HAL_FMC_MspInit+0x110>)
 80014b8:	f000 fcca 	bl	8001e50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80014bc:	f248 1333 	movw	r3, #33075	; 0x8133
 80014c0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014ce:	230c      	movs	r3, #12
 80014d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	4619      	mov	r1, r3
 80014d6:	481f      	ldr	r0, [pc, #124]	; (8001554 <HAL_FMC_MspInit+0x114>)
 80014d8:	f000 fcba 	bl	8001e50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80014dc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80014e0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014ee:	230c      	movs	r3, #12
 80014f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	4619      	mov	r1, r3
 80014f6:	4818      	ldr	r0, [pc, #96]	; (8001558 <HAL_FMC_MspInit+0x118>)
 80014f8:	f000 fcaa 	bl	8001e50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80014fc:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001500:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150a:	2303      	movs	r3, #3
 800150c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800150e:	230c      	movs	r3, #12
 8001510:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	4619      	mov	r1, r3
 8001516:	4811      	ldr	r0, [pc, #68]	; (800155c <HAL_FMC_MspInit+0x11c>)
 8001518:	f000 fc9a 	bl	8001e50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800151c:	2360      	movs	r3, #96	; 0x60
 800151e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800152c:	230c      	movs	r3, #12
 800152e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	4619      	mov	r1, r3
 8001534:	480a      	ldr	r0, [pc, #40]	; (8001560 <HAL_FMC_MspInit+0x120>)
 8001536:	f000 fc8b 	bl	8001e50 <HAL_GPIO_Init>
 800153a:	e000      	b.n	800153e <HAL_FMC_MspInit+0xfe>
    return;
 800153c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	2000008c 	.word	0x2000008c
 8001548:	40023800 	.word	0x40023800
 800154c:	40021400 	.word	0x40021400
 8001550:	40020800 	.word	0x40020800
 8001554:	40021800 	.word	0x40021800
 8001558:	40021000 	.word	0x40021000
 800155c:	40020c00 	.word	0x40020c00
 8001560:	40020400 	.word	0x40020400

08001564 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800156c:	f7ff ff68 	bl	8001440 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	; 0x30
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001588:	2200      	movs	r2, #0
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	2036      	movs	r0, #54	; 0x36
 800158e:	f000 fa2d 	bl	80019ec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001592:	2036      	movs	r0, #54	; 0x36
 8001594:	f000 fa46 	bl	8001a24 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	4b1f      	ldr	r3, [pc, #124]	; (800161c <HAL_InitTick+0xa4>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	4a1e      	ldr	r2, [pc, #120]	; (800161c <HAL_InitTick+0xa4>)
 80015a2:	f043 0310 	orr.w	r3, r3, #16
 80015a6:	6413      	str	r3, [r2, #64]	; 0x40
 80015a8:	4b1c      	ldr	r3, [pc, #112]	; (800161c <HAL_InitTick+0xa4>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	f003 0310 	and.w	r3, r3, #16
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015b4:	f107 0210 	add.w	r2, r7, #16
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f001 fdd4 	bl	800316c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80015c4:	f001 fdaa 	bl	800311c <HAL_RCC_GetPCLK1Freq>
 80015c8:	4603      	mov	r3, r0
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80015ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d0:	4a13      	ldr	r2, [pc, #76]	; (8001620 <HAL_InitTick+0xa8>)
 80015d2:	fba2 2303 	umull	r2, r3, r2, r3
 80015d6:	0c9b      	lsrs	r3, r3, #18
 80015d8:	3b01      	subs	r3, #1
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_InitTick+0xac>)
 80015de:	4a12      	ldr	r2, [pc, #72]	; (8001628 <HAL_InitTick+0xb0>)
 80015e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_InitTick+0xac>)
 80015e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015e8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015ea:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <HAL_InitTick+0xac>)
 80015ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ee:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_InitTick+0xac>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_InitTick+0xac>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015fc:	4809      	ldr	r0, [pc, #36]	; (8001624 <HAL_InitTick+0xac>)
 80015fe:	f002 fbbf 	bl	8003d80 <HAL_TIM_Base_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d104      	bne.n	8001612 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001608:	4806      	ldr	r0, [pc, #24]	; (8001624 <HAL_InitTick+0xac>)
 800160a:	f002 fbe4 	bl	8003dd6 <HAL_TIM_Base_Start_IT>
 800160e:	4603      	mov	r3, r0
 8001610:	e000      	b.n	8001614 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	3730      	adds	r7, #48	; 0x30
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40023800 	.word	0x40023800
 8001620:	431bde83 	.word	0x431bde83
 8001624:	200002a4 	.word	0x200002a4
 8001628:	40001000 	.word	0x40001000

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <HardFault_Handler+0x4>

08001640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <MemManage_Handler+0x4>

08001646 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <UsageFault_Handler+0x4>

08001652 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <TIM6_DAC_IRQHandler+0x10>)
 8001692:	f002 fbc4 	bl	8003e1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200002a4 	.word	0x200002a4

080016a0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <LTDC_IRQHandler+0x10>)
 80016a6:	f000 fe67 	bl	8002378 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000108 	.word	0x20000108

080016b4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <DMA2D_IRQHandler+0x10>)
 80016ba:	f000 fa26 	bl	8001b0a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000230 	.word	0x20000230

080016c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d0:	4a14      	ldr	r2, [pc, #80]	; (8001724 <_sbrk+0x5c>)
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <_sbrk+0x60>)
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <_sbrk+0x64>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <_sbrk+0x68>)
 80016e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d207      	bcs.n	8001708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f8:	f003 fce0 	bl	80050bc <__errno>
 80016fc:	4602      	mov	r2, r0
 80016fe:	230c      	movs	r3, #12
 8001700:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	e009      	b.n	800171c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <_sbrk+0x64>)
 8001718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20030000 	.word	0x20030000
 8001728:	00000400 	.word	0x00000400
 800172c:	20000090 	.word	0x20000090
 8001730:	200002f0 	.word	0x200002f0

08001734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <SystemInit+0x28>)
 800173a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173e:	4a07      	ldr	r2, [pc, #28]	; (800175c <SystemInit+0x28>)
 8001740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <SystemInit+0x28>)
 800174a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800174e:	609a      	str	r2, [r3, #8]
#endif
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001798 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001764:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001766:	e003      	b.n	8001770 <LoopCopyDataInit>

08001768 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800176a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800176c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800176e:	3104      	adds	r1, #4

08001770 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001770:	480b      	ldr	r0, [pc, #44]	; (80017a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001774:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001776:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001778:	d3f6      	bcc.n	8001768 <CopyDataInit>
  ldr  r2, =_sbss
 800177a:	4a0b      	ldr	r2, [pc, #44]	; (80017a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800177c:	e002      	b.n	8001784 <LoopFillZerobss>

0800177e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800177e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001780:	f842 3b04 	str.w	r3, [r2], #4

08001784 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001786:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001788:	d3f9      	bcc.n	800177e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800178a:	f7ff ffd3 	bl	8001734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800178e:	f003 fc9b 	bl	80050c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001792:	f7fe ffcb 	bl	800072c <main>
  bx  lr    
 8001796:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001798:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800179c:	080059c4 	.word	0x080059c4
  ldr  r0, =_sdata
 80017a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017a4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80017a8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80017ac:	200002ec 	.word	0x200002ec

080017b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b0:	e7fe      	b.n	80017b0 <ADC_IRQHandler>
	...

080017b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0d      	ldr	r2, [pc, #52]	; (80017f4 <HAL_Init+0x40>)
 80017be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_Init+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_Init+0x40>)
 80017ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_Init+0x40>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <HAL_Init+0x40>)
 80017d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017dc:	2003      	movs	r0, #3
 80017de:	f000 f8fa 	bl	80019d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e2:	2000      	movs	r0, #0
 80017e4:	f7ff fec8 	bl	8001578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e8:	f7ff fbec 	bl	8000fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023c00 	.word	0x40023c00

080017f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_IncTick+0x20>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_IncTick+0x24>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <HAL_IncTick+0x24>)
 800180a:	6013      	str	r3, [r2, #0]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000008 	.word	0x20000008
 800181c:	200002e4 	.word	0x200002e4

08001820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return uwTick;
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_GetTick+0x14>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	200002e4 	.word	0x200002e4

08001838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001840:	f7ff ffee 	bl	8001820 <HAL_GetTick>
 8001844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001850:	d005      	beq.n	800185e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_Delay+0x40>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800185e:	bf00      	nop
 8001860:	f7ff ffde 	bl	8001820 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	429a      	cmp	r2, r3
 800186e:	d8f7      	bhi.n	8001860 <HAL_Delay+0x28>
  {
  }
}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000008 	.word	0x20000008

0800187c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001898:	4013      	ands	r3, r2
 800189a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ae:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	60d3      	str	r3, [r2, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <__NVIC_GetPriorityGrouping+0x18>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	f003 0307 	and.w	r3, r3, #7
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	db0b      	blt.n	800190a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	f003 021f 	and.w	r2, r3, #31
 80018f8:	4907      	ldr	r1, [pc, #28]	; (8001918 <__NVIC_EnableIRQ+0x38>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	095b      	lsrs	r3, r3, #5
 8001900:	2001      	movs	r0, #1
 8001902:	fa00 f202 	lsl.w	r2, r0, r2
 8001906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000e100 	.word	0xe000e100

0800191c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	6039      	str	r1, [r7, #0]
 8001926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192c:	2b00      	cmp	r3, #0
 800192e:	db0a      	blt.n	8001946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	490c      	ldr	r1, [pc, #48]	; (8001968 <__NVIC_SetPriority+0x4c>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	0112      	lsls	r2, r2, #4
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	440b      	add	r3, r1
 8001940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001944:	e00a      	b.n	800195c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4908      	ldr	r1, [pc, #32]	; (800196c <__NVIC_SetPriority+0x50>)
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	3b04      	subs	r3, #4
 8001954:	0112      	lsls	r2, r2, #4
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	440b      	add	r3, r1
 800195a:	761a      	strb	r2, [r3, #24]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000e100 	.word	0xe000e100
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001970:	b480      	push	{r7}
 8001972:	b089      	sub	sp, #36	; 0x24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f1c3 0307 	rsb	r3, r3, #7
 800198a:	2b04      	cmp	r3, #4
 800198c:	bf28      	it	cs
 800198e:	2304      	movcs	r3, #4
 8001990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3304      	adds	r3, #4
 8001996:	2b06      	cmp	r3, #6
 8001998:	d902      	bls.n	80019a0 <NVIC_EncodePriority+0x30>
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3b03      	subs	r3, #3
 800199e:	e000      	b.n	80019a2 <NVIC_EncodePriority+0x32>
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	f04f 32ff 	mov.w	r2, #4294967295
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43da      	mvns	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	401a      	ands	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b8:	f04f 31ff 	mov.w	r1, #4294967295
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa01 f303 	lsl.w	r3, r1, r3
 80019c2:	43d9      	mvns	r1, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	4313      	orrs	r3, r2
         );
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3724      	adds	r7, #36	; 0x24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff ff4c 	bl	800187c <__NVIC_SetPriorityGrouping>
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
 80019f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019fe:	f7ff ff61 	bl	80018c4 <__NVIC_GetPriorityGrouping>
 8001a02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	68b9      	ldr	r1, [r7, #8]
 8001a08:	6978      	ldr	r0, [r7, #20]
 8001a0a:	f7ff ffb1 	bl	8001970 <NVIC_EncodePriority>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a14:	4611      	mov	r1, r2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ff80 	bl	800191c <__NVIC_SetPriority>
}
 8001a1c:	bf00      	nop
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff ff54 	bl	80018e0 <__NVIC_EnableIRQ>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00e      	b.n	8001a70 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	795b      	ldrb	r3, [r3, #5]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d105      	bne.n	8001a68 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff fada 	bl	800101c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e03b      	b.n	8001b02 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d106      	bne.n	8001aa4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff fade 	bl	8001060 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac8:	f023 0107 	bic.w	r1, r3, #7
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ae2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	68d1      	ldr	r1, [r2, #12]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	430b      	orrs	r3, r1
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b084      	sub	sp, #16
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d026      	beq.n	8001b7a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d021      	beq.n	8001b7a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b44:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4a:	f043 0201 	orr.w	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2201      	movs	r2, #1
 8001b58:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2204      	movs	r2, #4
 8001b5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f003 0320 	and.w	r3, r3, #32
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d026      	beq.n	8001bd2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d021      	beq.n	8001bd2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b9c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001baa:	f043 0202 	orr.w	r2, r3, #2
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d026      	beq.n	8001c2a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d021      	beq.n	8001c2a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bf4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2208      	movs	r2, #8
 8001bfc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c02:	f043 0204 	orr.w	r2, r3, #4
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d013      	beq.n	8001c5c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00e      	beq.n	8001c5c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c4c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2204      	movs	r2, #4
 8001c54:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f853 	bl	8001d02 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d024      	beq.n	8001cb0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d01f      	beq.n	8001cb0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c7e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2202      	movs	r2, #2
 8001c86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d01f      	beq.n	8001cfa <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d01a      	beq.n	8001cfa <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cd2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2210      	movs	r2, #16
 8001cda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f80e 	bl	8001d16 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_DMA2D_ConfigLayer+0x20>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e079      	b.n	8001e40 <HAL_DMA2D_ConfigLayer+0x114>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	3318      	adds	r3, #24
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	041b      	lsls	r3, r3, #16
 8001d72:	4313      	orrs	r3, r2
 8001d74:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001d76:	4b35      	ldr	r3, [pc, #212]	; (8001e4c <HAL_DMA2D_ConfigLayer+0x120>)
 8001d78:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b0a      	cmp	r3, #10
 8001d80:	d003      	beq.n	8001d8a <HAL_DMA2D_ConfigLayer+0x5e>
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b09      	cmp	r3, #9
 8001d88:	d107      	bne.n	8001d9a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	e005      	b.n	8001da6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	061b      	lsls	r3, r3, #24
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d120      	bne.n	8001dee <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	ea02 0103 	and.w	r1, r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b0a      	cmp	r3, #10
 8001dd4:	d003      	beq.n	8001dde <HAL_DMA2D_ConfigLayer+0xb2>
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b09      	cmp	r3, #9
 8001ddc:	d127      	bne.n	8001e2e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001dea:	629a      	str	r2, [r3, #40]	; 0x28
 8001dec:	e01f      	b.n	8001e2e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	69da      	ldr	r2, [r3, #28]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	ea02 0103 	and.w	r1, r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b0a      	cmp	r3, #10
 8001e16:	d003      	beq.n	8001e20 <HAL_DMA2D_ConfigLayer+0xf4>
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b09      	cmp	r3, #9
 8001e1e:	d106      	bne.n	8001e2e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001e2c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	371c      	adds	r7, #28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	ff03000f 	.word	0xff03000f

08001e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b089      	sub	sp, #36	; 0x24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	e177      	b.n	800215c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	f040 8166 	bne.w	8002156 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d00b      	beq.n	8001eaa <HAL_GPIO_Init+0x5a>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d007      	beq.n	8001eaa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e9e:	2b11      	cmp	r3, #17
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b12      	cmp	r3, #18
 8001ea8:	d130      	bne.n	8001f0c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 0201 	and.w	r2, r3, #1
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2203      	movs	r2, #3
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d003      	beq.n	8001f4c <HAL_GPIO_Init+0xfc>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b12      	cmp	r3, #18
 8001f4a:	d123      	bne.n	8001f94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	08da      	lsrs	r2, r3, #3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3208      	adds	r2, #8
 8001f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	220f      	movs	r2, #15
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	08da      	lsrs	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3208      	adds	r2, #8
 8001f8e:	69b9      	ldr	r1, [r7, #24]
 8001f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0203 	and.w	r2, r3, #3
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80c0 	beq.w	8002156 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4b65      	ldr	r3, [pc, #404]	; (8002170 <HAL_GPIO_Init+0x320>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	4a64      	ldr	r2, [pc, #400]	; (8002170 <HAL_GPIO_Init+0x320>)
 8001fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe6:	4b62      	ldr	r3, [pc, #392]	; (8002170 <HAL_GPIO_Init+0x320>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ff2:	4a60      	ldr	r2, [pc, #384]	; (8002174 <HAL_GPIO_Init+0x324>)
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	220f      	movs	r2, #15
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a57      	ldr	r2, [pc, #348]	; (8002178 <HAL_GPIO_Init+0x328>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d037      	beq.n	800208e <HAL_GPIO_Init+0x23e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a56      	ldr	r2, [pc, #344]	; (800217c <HAL_GPIO_Init+0x32c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d031      	beq.n	800208a <HAL_GPIO_Init+0x23a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a55      	ldr	r2, [pc, #340]	; (8002180 <HAL_GPIO_Init+0x330>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d02b      	beq.n	8002086 <HAL_GPIO_Init+0x236>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a54      	ldr	r2, [pc, #336]	; (8002184 <HAL_GPIO_Init+0x334>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d025      	beq.n	8002082 <HAL_GPIO_Init+0x232>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a53      	ldr	r2, [pc, #332]	; (8002188 <HAL_GPIO_Init+0x338>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d01f      	beq.n	800207e <HAL_GPIO_Init+0x22e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a52      	ldr	r2, [pc, #328]	; (800218c <HAL_GPIO_Init+0x33c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d019      	beq.n	800207a <HAL_GPIO_Init+0x22a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a51      	ldr	r2, [pc, #324]	; (8002190 <HAL_GPIO_Init+0x340>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d013      	beq.n	8002076 <HAL_GPIO_Init+0x226>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a50      	ldr	r2, [pc, #320]	; (8002194 <HAL_GPIO_Init+0x344>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00d      	beq.n	8002072 <HAL_GPIO_Init+0x222>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a4f      	ldr	r2, [pc, #316]	; (8002198 <HAL_GPIO_Init+0x348>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d007      	beq.n	800206e <HAL_GPIO_Init+0x21e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4e      	ldr	r2, [pc, #312]	; (800219c <HAL_GPIO_Init+0x34c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d101      	bne.n	800206a <HAL_GPIO_Init+0x21a>
 8002066:	2309      	movs	r3, #9
 8002068:	e012      	b.n	8002090 <HAL_GPIO_Init+0x240>
 800206a:	230a      	movs	r3, #10
 800206c:	e010      	b.n	8002090 <HAL_GPIO_Init+0x240>
 800206e:	2308      	movs	r3, #8
 8002070:	e00e      	b.n	8002090 <HAL_GPIO_Init+0x240>
 8002072:	2307      	movs	r3, #7
 8002074:	e00c      	b.n	8002090 <HAL_GPIO_Init+0x240>
 8002076:	2306      	movs	r3, #6
 8002078:	e00a      	b.n	8002090 <HAL_GPIO_Init+0x240>
 800207a:	2305      	movs	r3, #5
 800207c:	e008      	b.n	8002090 <HAL_GPIO_Init+0x240>
 800207e:	2304      	movs	r3, #4
 8002080:	e006      	b.n	8002090 <HAL_GPIO_Init+0x240>
 8002082:	2303      	movs	r3, #3
 8002084:	e004      	b.n	8002090 <HAL_GPIO_Init+0x240>
 8002086:	2302      	movs	r3, #2
 8002088:	e002      	b.n	8002090 <HAL_GPIO_Init+0x240>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_GPIO_Init+0x240>
 800208e:	2300      	movs	r3, #0
 8002090:	69fa      	ldr	r2, [r7, #28]
 8002092:	f002 0203 	and.w	r2, r2, #3
 8002096:	0092      	lsls	r2, r2, #2
 8002098:	4093      	lsls	r3, r2
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a0:	4934      	ldr	r1, [pc, #208]	; (8002174 <HAL_GPIO_Init+0x324>)
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	3302      	adds	r3, #2
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ae:	4b3c      	ldr	r3, [pc, #240]	; (80021a0 <HAL_GPIO_Init+0x350>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d2:	4a33      	ldr	r2, [pc, #204]	; (80021a0 <HAL_GPIO_Init+0x350>)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020d8:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <HAL_GPIO_Init+0x350>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020fc:	4a28      	ldr	r2, [pc, #160]	; (80021a0 <HAL_GPIO_Init+0x350>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002102:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <HAL_GPIO_Init+0x350>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002126:	4a1e      	ldr	r2, [pc, #120]	; (80021a0 <HAL_GPIO_Init+0x350>)
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800212c:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <HAL_GPIO_Init+0x350>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002150:	4a13      	ldr	r2, [pc, #76]	; (80021a0 <HAL_GPIO_Init+0x350>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3301      	adds	r3, #1
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	2b0f      	cmp	r3, #15
 8002160:	f67f ae84 	bls.w	8001e6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002164:	bf00      	nop
 8002166:	3724      	adds	r7, #36	; 0x24
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	40023800 	.word	0x40023800
 8002174:	40013800 	.word	0x40013800
 8002178:	40020000 	.word	0x40020000
 800217c:	40020400 	.word	0x40020400
 8002180:	40020800 	.word	0x40020800
 8002184:	40020c00 	.word	0x40020c00
 8002188:	40021000 	.word	0x40021000
 800218c:	40021400 	.word	0x40021400
 8002190:	40021800 	.word	0x40021800
 8002194:	40021c00 	.word	0x40021c00
 8002198:	40022000 	.word	0x40022000
 800219c:	40022400 	.word	0x40022400
 80021a0:	40013c00 	.word	0x40013c00

080021a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
 80021b0:	4613      	mov	r3, r2
 80021b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b4:	787b      	ldrb	r3, [r7, #1]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021c0:	e003      	b.n	80021ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021c2:	887b      	ldrh	r3, [r7, #2]
 80021c4:	041a      	lsls	r2, r3, #16
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	619a      	str	r2, [r3, #24]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e0bf      	b.n	800236a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7fe ff56 	bl	80010b0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699a      	ldr	r2, [r3, #24]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800221a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6999      	ldr	r1, [r3, #24]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002230:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6899      	ldr	r1, [r3, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	4b4a      	ldr	r3, [pc, #296]	; (8002374 <HAL_LTDC_Init+0x19c>)
 800224c:	400b      	ands	r3, r1
 800224e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	041b      	lsls	r3, r3, #16
 8002256:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6899      	ldr	r1, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68d9      	ldr	r1, [r3, #12]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b3e      	ldr	r3, [pc, #248]	; (8002374 <HAL_LTDC_Init+0x19c>)
 800227a:	400b      	ands	r3, r1
 800227c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	041b      	lsls	r3, r3, #16
 8002284:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68d9      	ldr	r1, [r3, #12]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1a      	ldr	r2, [r3, #32]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6919      	ldr	r1, [r3, #16]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4b33      	ldr	r3, [pc, #204]	; (8002374 <HAL_LTDC_Init+0x19c>)
 80022a8:	400b      	ands	r3, r1
 80022aa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	041b      	lsls	r3, r3, #16
 80022b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6919      	ldr	r1, [r3, #16]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6959      	ldr	r1, [r3, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b27      	ldr	r3, [pc, #156]	; (8002374 <HAL_LTDC_Init+0x19c>)
 80022d6:	400b      	ands	r3, r1
 80022d8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	041b      	lsls	r3, r3, #16
 80022e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6959      	ldr	r1, [r3, #20]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800231a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0206 	orr.w	r2, r2, #6
 8002346:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699a      	ldr	r2, [r3, #24]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	f000f800 	.word	0xf000f800

08002378 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002386:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b00      	cmp	r3, #0
 8002398:	d023      	beq.n	80023e2 <HAL_LTDC_IRQHandler+0x6a>
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d01e      	beq.n	80023e2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0204 	bic.w	r2, r2, #4
 80023b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2204      	movs	r2, #4
 80023ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80023c2:	f043 0201 	orr.w	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2204      	movs	r2, #4
 80023d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f86f 	bl	80024c0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d023      	beq.n	8002434 <HAL_LTDC_IRQHandler+0xbc>
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d01e      	beq.n	8002434 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0202 	bic.w	r2, r2, #2
 8002404:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2202      	movs	r2, #2
 800240c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002414:	f043 0202 	orr.w	r2, r3, #2
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2204      	movs	r2, #4
 8002422:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f846 	bl	80024c0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d01b      	beq.n	8002476 <HAL_LTDC_IRQHandler+0xfe>
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d016      	beq.n	8002476 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2201      	movs	r2, #1
 800245e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f82f 	bl	80024d4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d01b      	beq.n	80024b8 <HAL_LTDC_IRQHandler+0x140>
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d016      	beq.n	80024b8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0208 	bic.w	r2, r2, #8
 8002498:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2208      	movs	r2, #8
 80024a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f818 	bl	80024e8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80024b8:	bf00      	nop
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80024fc:	b5b0      	push	{r4, r5, r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_LTDC_ConfigLayer+0x1a>
 8002512:	2302      	movs	r3, #2
 8002514:	e02c      	b.n	8002570 <HAL_LTDC_ConfigLayer+0x74>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2202      	movs	r2, #2
 8002522:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2134      	movs	r1, #52	; 0x34
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	4413      	add	r3, r2
 8002532:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	4614      	mov	r4, r2
 800253a:	461d      	mov	r5, r3
 800253c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800253e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002548:	682b      	ldr	r3, [r5, #0]
 800254a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	68b9      	ldr	r1, [r7, #8]
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f811 	bl	8002578 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2201      	movs	r2, #1
 800255c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bdb0      	pop	{r4, r5, r7, pc}

08002578 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002578:	b480      	push	{r7}
 800257a:	b089      	sub	sp, #36	; 0x24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	0c1b      	lsrs	r3, r3, #16
 8002590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002594:	4413      	add	r3, r2
 8002596:	041b      	lsls	r3, r3, #16
 8002598:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	01db      	lsls	r3, r3, #7
 80025a4:	4413      	add	r3, r2
 80025a6:	3384      	adds	r3, #132	; 0x84
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	4611      	mov	r1, r2
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	01d2      	lsls	r2, r2, #7
 80025b4:	440a      	add	r2, r1
 80025b6:	3284      	adds	r2, #132	; 0x84
 80025b8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80025bc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	0c1b      	lsrs	r3, r3, #16
 80025ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ce:	4413      	add	r3, r2
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4619      	mov	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	01db      	lsls	r3, r3, #7
 80025dc:	440b      	add	r3, r1
 80025de:	3384      	adds	r3, #132	; 0x84
 80025e0:	4619      	mov	r1, r3
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025f6:	4413      	add	r3, r2
 80025f8:	041b      	lsls	r3, r3, #16
 80025fa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	01db      	lsls	r3, r3, #7
 8002606:	4413      	add	r3, r2
 8002608:	3384      	adds	r3, #132	; 0x84
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	4611      	mov	r1, r2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	01d2      	lsls	r2, r2, #7
 8002616:	440a      	add	r2, r1
 8002618:	3284      	adds	r2, #132	; 0x84
 800261a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800261e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800262e:	4413      	add	r3, r2
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4619      	mov	r1, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	01db      	lsls	r3, r3, #7
 800263c:	440b      	add	r3, r1
 800263e:	3384      	adds	r3, #132	; 0x84
 8002640:	4619      	mov	r1, r3
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	4313      	orrs	r3, r2
 8002646:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	01db      	lsls	r3, r3, #7
 8002652:	4413      	add	r3, r2
 8002654:	3384      	adds	r3, #132	; 0x84
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	4611      	mov	r1, r2
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	01d2      	lsls	r2, r2, #7
 8002662:	440a      	add	r2, r1
 8002664:	3284      	adds	r2, #132	; 0x84
 8002666:	f023 0307 	bic.w	r3, r3, #7
 800266a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	01db      	lsls	r3, r3, #7
 8002676:	4413      	add	r3, r2
 8002678:	3384      	adds	r3, #132	; 0x84
 800267a:	461a      	mov	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002688:	021b      	lsls	r3, r3, #8
 800268a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002692:	041b      	lsls	r3, r3, #16
 8002694:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	061b      	lsls	r3, r3, #24
 800269c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	01db      	lsls	r3, r3, #7
 80026a8:	4413      	add	r3, r2
 80026aa:	3384      	adds	r3, #132	; 0x84
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	01db      	lsls	r3, r3, #7
 80026b8:	4413      	add	r3, r2
 80026ba:	3384      	adds	r3, #132	; 0x84
 80026bc:	461a      	mov	r2, r3
 80026be:	2300      	movs	r3, #0
 80026c0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026c8:	461a      	mov	r2, r3
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	431a      	orrs	r2, r3
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4619      	mov	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	01db      	lsls	r3, r3, #7
 80026dc:	440b      	add	r3, r1
 80026de:	3384      	adds	r3, #132	; 0x84
 80026e0:	4619      	mov	r1, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	01db      	lsls	r3, r3, #7
 80026f2:	4413      	add	r3, r2
 80026f4:	3384      	adds	r3, #132	; 0x84
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	4611      	mov	r1, r2
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	01d2      	lsls	r2, r2, #7
 8002702:	440a      	add	r2, r1
 8002704:	3284      	adds	r2, #132	; 0x84
 8002706:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800270a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	01db      	lsls	r3, r3, #7
 8002716:	4413      	add	r3, r2
 8002718:	3384      	adds	r3, #132	; 0x84
 800271a:	461a      	mov	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	01db      	lsls	r3, r3, #7
 800272c:	4413      	add	r3, r2
 800272e:	3384      	adds	r3, #132	; 0x84
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	4611      	mov	r1, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	01d2      	lsls	r2, r2, #7
 800273c:	440a      	add	r2, r1
 800273e:	3284      	adds	r2, #132	; 0x84
 8002740:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002744:	f023 0307 	bic.w	r3, r3, #7
 8002748:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	69da      	ldr	r2, [r3, #28]
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	68f9      	ldr	r1, [r7, #12]
 8002754:	6809      	ldr	r1, [r1, #0]
 8002756:	4608      	mov	r0, r1
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	01c9      	lsls	r1, r1, #7
 800275c:	4401      	add	r1, r0
 800275e:	3184      	adds	r1, #132	; 0x84
 8002760:	4313      	orrs	r3, r2
 8002762:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	01db      	lsls	r3, r3, #7
 800276e:	4413      	add	r3, r2
 8002770:	3384      	adds	r3, #132	; 0x84
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	01db      	lsls	r3, r3, #7
 800277e:	4413      	add	r3, r2
 8002780:	3384      	adds	r3, #132	; 0x84
 8002782:	461a      	mov	r2, r3
 8002784:	2300      	movs	r3, #0
 8002786:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	01db      	lsls	r3, r3, #7
 8002792:	4413      	add	r3, r2
 8002794:	3384      	adds	r3, #132	; 0x84
 8002796:	461a      	mov	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d102      	bne.n	80027ac <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80027a6:	2304      	movs	r3, #4
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	e01b      	b.n	80027e4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d102      	bne.n	80027ba <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80027b4:	2303      	movs	r3, #3
 80027b6:	61fb      	str	r3, [r7, #28]
 80027b8:	e014      	b.n	80027e4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d00b      	beq.n	80027da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d007      	beq.n	80027da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d003      	beq.n	80027da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80027d6:	2b07      	cmp	r3, #7
 80027d8:	d102      	bne.n	80027e0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80027da:	2302      	movs	r3, #2
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	e001      	b.n	80027e4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80027e0:	2301      	movs	r3, #1
 80027e2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	01db      	lsls	r3, r3, #7
 80027ee:	4413      	add	r3, r2
 80027f0:	3384      	adds	r3, #132	; 0x84
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	4611      	mov	r1, r2
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	01d2      	lsls	r2, r2, #7
 80027fe:	440a      	add	r2, r1
 8002800:	3284      	adds	r2, #132	; 0x84
 8002802:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002806:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	fb02 f303 	mul.w	r3, r2, r3
 8002812:	041a      	lsls	r2, r3, #16
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	1acb      	subs	r3, r1, r3
 800281e:	69f9      	ldr	r1, [r7, #28]
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	3303      	adds	r3, #3
 8002826:	68f9      	ldr	r1, [r7, #12]
 8002828:	6809      	ldr	r1, [r1, #0]
 800282a:	4608      	mov	r0, r1
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	01c9      	lsls	r1, r1, #7
 8002830:	4401      	add	r1, r0
 8002832:	3184      	adds	r1, #132	; 0x84
 8002834:	4313      	orrs	r3, r2
 8002836:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	01db      	lsls	r3, r3, #7
 8002842:	4413      	add	r3, r2
 8002844:	3384      	adds	r3, #132	; 0x84
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	4611      	mov	r1, r2
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	01d2      	lsls	r2, r2, #7
 8002852:	440a      	add	r2, r1
 8002854:	3284      	adds	r2, #132	; 0x84
 8002856:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800285a:	f023 0307 	bic.w	r3, r3, #7
 800285e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	01db      	lsls	r3, r3, #7
 800286a:	4413      	add	r3, r2
 800286c:	3384      	adds	r3, #132	; 0x84
 800286e:	461a      	mov	r2, r3
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	01db      	lsls	r3, r3, #7
 8002880:	4413      	add	r3, r2
 8002882:	3384      	adds	r3, #132	; 0x84
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	4611      	mov	r1, r2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	01d2      	lsls	r2, r2, #7
 8002890:	440a      	add	r2, r1
 8002892:	3284      	adds	r2, #132	; 0x84
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6013      	str	r3, [r2, #0]
}
 800289a:	bf00      	nop
 800289c:	3724      	adds	r7, #36	; 0x24
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e25b      	b.n	8002d72 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d075      	beq.n	80029b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028c6:	4ba3      	ldr	r3, [pc, #652]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d00c      	beq.n	80028ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028d2:	4ba0      	ldr	r3, [pc, #640]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d112      	bne.n	8002904 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028de:	4b9d      	ldr	r3, [pc, #628]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ea:	d10b      	bne.n	8002904 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	4b99      	ldr	r3, [pc, #612]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d05b      	beq.n	80029b0 <HAL_RCC_OscConfig+0x108>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d157      	bne.n	80029b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e236      	b.n	8002d72 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290c:	d106      	bne.n	800291c <HAL_RCC_OscConfig+0x74>
 800290e:	4b91      	ldr	r3, [pc, #580]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a90      	ldr	r2, [pc, #576]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	e01d      	b.n	8002958 <HAL_RCC_OscConfig+0xb0>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0x98>
 8002926:	4b8b      	ldr	r3, [pc, #556]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a8a      	ldr	r2, [pc, #552]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 800292c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b88      	ldr	r3, [pc, #544]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a87      	ldr	r2, [pc, #540]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e00b      	b.n	8002958 <HAL_RCC_OscConfig+0xb0>
 8002940:	4b84      	ldr	r3, [pc, #528]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a83      	ldr	r2, [pc, #524]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	4b81      	ldr	r3, [pc, #516]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a80      	ldr	r2, [pc, #512]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d013      	beq.n	8002988 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7fe ff5e 	bl	8001820 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002968:	f7fe ff5a 	bl	8001820 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	; 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e1fb      	b.n	8002d72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b76      	ldr	r3, [pc, #472]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0xc0>
 8002986:	e014      	b.n	80029b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fe ff4a 	bl	8001820 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002990:	f7fe ff46 	bl	8001820 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	; 0x64
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e1e7      	b.n	8002d72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a2:	4b6c      	ldr	r3, [pc, #432]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0xe8>
 80029ae:	e000      	b.n	80029b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d063      	beq.n	8002a86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029be:	4b65      	ldr	r3, [pc, #404]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00b      	beq.n	80029e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ca:	4b62      	ldr	r3, [pc, #392]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d11c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029d6:	4b5f      	ldr	r3, [pc, #380]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d116      	bne.n	8002a10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e2:	4b5c      	ldr	r3, [pc, #368]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_RCC_OscConfig+0x152>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d001      	beq.n	80029fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e1bb      	b.n	8002d72 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fa:	4b56      	ldr	r3, [pc, #344]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4952      	ldr	r1, [pc, #328]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0e:	e03a      	b.n	8002a86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d020      	beq.n	8002a5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a18:	4b4f      	ldr	r3, [pc, #316]	; (8002b58 <HAL_RCC_OscConfig+0x2b0>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7fe feff 	bl	8001820 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a26:	f7fe fefb 	bl	8001820 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e19c      	b.n	8002d72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a38:	4b46      	ldr	r3, [pc, #280]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a44:	4b43      	ldr	r3, [pc, #268]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4940      	ldr	r1, [pc, #256]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]
 8002a58:	e015      	b.n	8002a86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a5a:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <HAL_RCC_OscConfig+0x2b0>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fe fede 	bl	8001820 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a68:	f7fe feda 	bl	8001820 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e17b      	b.n	8002d72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7a:	4b36      	ldr	r3, [pc, #216]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d030      	beq.n	8002af4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d016      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a9a:	4b30      	ldr	r3, [pc, #192]	; (8002b5c <HAL_RCC_OscConfig+0x2b4>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7fe febe 	bl	8001820 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa8:	f7fe feba 	bl	8001820 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e15b      	b.n	8002d72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aba:	4b26      	ldr	r3, [pc, #152]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x200>
 8002ac6:	e015      	b.n	8002af4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac8:	4b24      	ldr	r3, [pc, #144]	; (8002b5c <HAL_RCC_OscConfig+0x2b4>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ace:	f7fe fea7 	bl	8001820 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad6:	f7fe fea3 	bl	8001820 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e144      	b.n	8002d72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae8:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1f0      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80a0 	beq.w	8002c42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b02:	2300      	movs	r3, #0
 8002b04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b06:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10f      	bne.n	8002b32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	4a0e      	ldr	r2, [pc, #56]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b20:	6413      	str	r3, [r2, #64]	; 0x40
 8002b22:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	60bb      	str	r3, [r7, #8]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b32:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_RCC_OscConfig+0x2b8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d121      	bne.n	8002b82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b3e:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <HAL_RCC_OscConfig+0x2b8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a07      	ldr	r2, [pc, #28]	; (8002b60 <HAL_RCC_OscConfig+0x2b8>)
 8002b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b4a:	f7fe fe69 	bl	8001820 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b50:	e011      	b.n	8002b76 <HAL_RCC_OscConfig+0x2ce>
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800
 8002b58:	42470000 	.word	0x42470000
 8002b5c:	42470e80 	.word	0x42470e80
 8002b60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b64:	f7fe fe5c 	bl	8001820 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e0fd      	b.n	8002d72 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b76:	4b81      	ldr	r3, [pc, #516]	; (8002d7c <HAL_RCC_OscConfig+0x4d4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d106      	bne.n	8002b98 <HAL_RCC_OscConfig+0x2f0>
 8002b8a:	4b7d      	ldr	r3, [pc, #500]	; (8002d80 <HAL_RCC_OscConfig+0x4d8>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	4a7c      	ldr	r2, [pc, #496]	; (8002d80 <HAL_RCC_OscConfig+0x4d8>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6713      	str	r3, [r2, #112]	; 0x70
 8002b96:	e01c      	b.n	8002bd2 <HAL_RCC_OscConfig+0x32a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b05      	cmp	r3, #5
 8002b9e:	d10c      	bne.n	8002bba <HAL_RCC_OscConfig+0x312>
 8002ba0:	4b77      	ldr	r3, [pc, #476]	; (8002d80 <HAL_RCC_OscConfig+0x4d8>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	4a76      	ldr	r2, [pc, #472]	; (8002d80 <HAL_RCC_OscConfig+0x4d8>)
 8002ba6:	f043 0304 	orr.w	r3, r3, #4
 8002baa:	6713      	str	r3, [r2, #112]	; 0x70
 8002bac:	4b74      	ldr	r3, [pc, #464]	; (8002d80 <HAL_RCC_OscConfig+0x4d8>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb0:	4a73      	ldr	r2, [pc, #460]	; (8002d80 <HAL_RCC_OscConfig+0x4d8>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb8:	e00b      	b.n	8002bd2 <HAL_RCC_OscConfig+0x32a>
 8002bba:	4b71      	ldr	r3, [pc, #452]	; (8002d80 <HAL_RCC_OscConfig+0x4d8>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbe:	4a70      	ldr	r2, [pc, #448]	; (8002d80 <HAL_RCC_OscConfig+0x4d8>)
 8002bc0:	f023 0301 	bic.w	r3, r3, #1
 8002bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc6:	4b6e      	ldr	r3, [pc, #440]	; (8002d80 <HAL_RCC_OscConfig+0x4d8>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bca:	4a6d      	ldr	r2, [pc, #436]	; (8002d80 <HAL_RCC_OscConfig+0x4d8>)
 8002bcc:	f023 0304 	bic.w	r3, r3, #4
 8002bd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d015      	beq.n	8002c06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bda:	f7fe fe21 	bl	8001820 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be2:	f7fe fe1d 	bl	8001820 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e0bc      	b.n	8002d72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf8:	4b61      	ldr	r3, [pc, #388]	; (8002d80 <HAL_RCC_OscConfig+0x4d8>)
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0ee      	beq.n	8002be2 <HAL_RCC_OscConfig+0x33a>
 8002c04:	e014      	b.n	8002c30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c06:	f7fe fe0b 	bl	8001820 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c0e:	f7fe fe07 	bl	8001820 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e0a6      	b.n	8002d72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c24:	4b56      	ldr	r3, [pc, #344]	; (8002d80 <HAL_RCC_OscConfig+0x4d8>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1ee      	bne.n	8002c0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c30:	7dfb      	ldrb	r3, [r7, #23]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d105      	bne.n	8002c42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c36:	4b52      	ldr	r3, [pc, #328]	; (8002d80 <HAL_RCC_OscConfig+0x4d8>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	4a51      	ldr	r2, [pc, #324]	; (8002d80 <HAL_RCC_OscConfig+0x4d8>)
 8002c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 8092 	beq.w	8002d70 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c4c:	4b4c      	ldr	r3, [pc, #304]	; (8002d80 <HAL_RCC_OscConfig+0x4d8>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d05c      	beq.n	8002d12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d141      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c60:	4b48      	ldr	r3, [pc, #288]	; (8002d84 <HAL_RCC_OscConfig+0x4dc>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c66:	f7fe fddb 	bl	8001820 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c6e:	f7fe fdd7 	bl	8001820 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e078      	b.n	8002d72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c80:	4b3f      	ldr	r3, [pc, #252]	; (8002d80 <HAL_RCC_OscConfig+0x4d8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f0      	bne.n	8002c6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69da      	ldr	r2, [r3, #28]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	019b      	lsls	r3, r3, #6
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	085b      	lsrs	r3, r3, #1
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	041b      	lsls	r3, r3, #16
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	061b      	lsls	r3, r3, #24
 8002cb0:	4933      	ldr	r1, [pc, #204]	; (8002d80 <HAL_RCC_OscConfig+0x4d8>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb6:	4b33      	ldr	r3, [pc, #204]	; (8002d84 <HAL_RCC_OscConfig+0x4dc>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbc:	f7fe fdb0 	bl	8001820 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc4:	f7fe fdac 	bl	8001820 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e04d      	b.n	8002d72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd6:	4b2a      	ldr	r3, [pc, #168]	; (8002d80 <HAL_RCC_OscConfig+0x4d8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x41c>
 8002ce2:	e045      	b.n	8002d70 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce4:	4b27      	ldr	r3, [pc, #156]	; (8002d84 <HAL_RCC_OscConfig+0x4dc>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cea:	f7fe fd99 	bl	8001820 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf2:	f7fe fd95 	bl	8001820 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e036      	b.n	8002d72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d04:	4b1e      	ldr	r3, [pc, #120]	; (8002d80 <HAL_RCC_OscConfig+0x4d8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1f0      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x44a>
 8002d10:	e02e      	b.n	8002d70 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e029      	b.n	8002d72 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d1e:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <HAL_RCC_OscConfig+0x4d8>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d11c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d115      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d46:	4013      	ands	r3, r2
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d10d      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d106      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	40023800 	.word	0x40023800
 8002d84:	42470060 	.word	0x42470060

08002d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0cc      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b68      	ldr	r3, [pc, #416]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d90c      	bls.n	8002dc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b65      	ldr	r3, [pc, #404]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b63      	ldr	r3, [pc, #396]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0b8      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d020      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ddc:	4b59      	ldr	r3, [pc, #356]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	4a58      	ldr	r2, [pc, #352]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002de6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df4:	4b53      	ldr	r3, [pc, #332]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4a52      	ldr	r2, [pc, #328]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e00:	4b50      	ldr	r3, [pc, #320]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	494d      	ldr	r1, [pc, #308]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d044      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	4b47      	ldr	r3, [pc, #284]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d119      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e07f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e46:	4b3f      	ldr	r3, [pc, #252]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e06f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e56:	4b3b      	ldr	r3, [pc, #236]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e067      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e66:	4b37      	ldr	r3, [pc, #220]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f023 0203 	bic.w	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4934      	ldr	r1, [pc, #208]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e78:	f7fe fcd2 	bl	8001820 <HAL_GetTick>
 8002e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e80:	f7fe fcce 	bl	8001820 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e04f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 020c 	and.w	r2, r3, #12
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d1eb      	bne.n	8002e80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d20c      	bcs.n	8002ed0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e032      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002edc:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4916      	ldr	r1, [pc, #88]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002efa:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	490e      	ldr	r1, [pc, #56]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f0e:	f000 f821 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8002f12:	4601      	mov	r1, r0
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002f20:	5cd3      	ldrb	r3, [r2, r3]
 8002f22:	fa21 f303 	lsr.w	r3, r1, r3
 8002f26:	4a09      	ldr	r2, [pc, #36]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe fb22 	bl	8001578 <HAL_InitTick>

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023c00 	.word	0x40023c00
 8002f44:	40023800 	.word	0x40023800
 8002f48:	08005968 	.word	0x08005968
 8002f4c:	20000000 	.word	0x20000000
 8002f50:	20000004 	.word	0x20000004

08002f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	607b      	str	r3, [r7, #4]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	2300      	movs	r3, #0
 8002f64:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f6a:	4b63      	ldr	r3, [pc, #396]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d007      	beq.n	8002f86 <HAL_RCC_GetSysClockFreq+0x32>
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d008      	beq.n	8002f8c <HAL_RCC_GetSysClockFreq+0x38>
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f040 80b4 	bne.w	80030e8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f80:	4b5e      	ldr	r3, [pc, #376]	; (80030fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f82:	60bb      	str	r3, [r7, #8]
       break;
 8002f84:	e0b3      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f86:	4b5e      	ldr	r3, [pc, #376]	; (8003100 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002f88:	60bb      	str	r3, [r7, #8]
      break;
 8002f8a:	e0b0      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f8c:	4b5a      	ldr	r3, [pc, #360]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f96:	4b58      	ldr	r3, [pc, #352]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d04a      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa2:	4b55      	ldr	r3, [pc, #340]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	099b      	lsrs	r3, r3, #6
 8002fa8:	f04f 0400 	mov.w	r4, #0
 8002fac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	ea03 0501 	and.w	r5, r3, r1
 8002fb8:	ea04 0602 	and.w	r6, r4, r2
 8002fbc:	4629      	mov	r1, r5
 8002fbe:	4632      	mov	r2, r6
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	f04f 0400 	mov.w	r4, #0
 8002fc8:	0154      	lsls	r4, r2, #5
 8002fca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fce:	014b      	lsls	r3, r1, #5
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4622      	mov	r2, r4
 8002fd4:	1b49      	subs	r1, r1, r5
 8002fd6:	eb62 0206 	sbc.w	r2, r2, r6
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	f04f 0400 	mov.w	r4, #0
 8002fe2:	0194      	lsls	r4, r2, #6
 8002fe4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fe8:	018b      	lsls	r3, r1, #6
 8002fea:	1a5b      	subs	r3, r3, r1
 8002fec:	eb64 0402 	sbc.w	r4, r4, r2
 8002ff0:	f04f 0100 	mov.w	r1, #0
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	00e2      	lsls	r2, r4, #3
 8002ffa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ffe:	00d9      	lsls	r1, r3, #3
 8003000:	460b      	mov	r3, r1
 8003002:	4614      	mov	r4, r2
 8003004:	195b      	adds	r3, r3, r5
 8003006:	eb44 0406 	adc.w	r4, r4, r6
 800300a:	f04f 0100 	mov.w	r1, #0
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	0262      	lsls	r2, r4, #9
 8003014:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003018:	0259      	lsls	r1, r3, #9
 800301a:	460b      	mov	r3, r1
 800301c:	4614      	mov	r4, r2
 800301e:	4618      	mov	r0, r3
 8003020:	4621      	mov	r1, r4
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f04f 0400 	mov.w	r4, #0
 8003028:	461a      	mov	r2, r3
 800302a:	4623      	mov	r3, r4
 800302c:	f7fd f938 	bl	80002a0 <__aeabi_uldivmod>
 8003030:	4603      	mov	r3, r0
 8003032:	460c      	mov	r4, r1
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	e049      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003038:	4b2f      	ldr	r3, [pc, #188]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	099b      	lsrs	r3, r3, #6
 800303e:	f04f 0400 	mov.w	r4, #0
 8003042:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	ea03 0501 	and.w	r5, r3, r1
 800304e:	ea04 0602 	and.w	r6, r4, r2
 8003052:	4629      	mov	r1, r5
 8003054:	4632      	mov	r2, r6
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	f04f 0400 	mov.w	r4, #0
 800305e:	0154      	lsls	r4, r2, #5
 8003060:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003064:	014b      	lsls	r3, r1, #5
 8003066:	4619      	mov	r1, r3
 8003068:	4622      	mov	r2, r4
 800306a:	1b49      	subs	r1, r1, r5
 800306c:	eb62 0206 	sbc.w	r2, r2, r6
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	f04f 0400 	mov.w	r4, #0
 8003078:	0194      	lsls	r4, r2, #6
 800307a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800307e:	018b      	lsls	r3, r1, #6
 8003080:	1a5b      	subs	r3, r3, r1
 8003082:	eb64 0402 	sbc.w	r4, r4, r2
 8003086:	f04f 0100 	mov.w	r1, #0
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	00e2      	lsls	r2, r4, #3
 8003090:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003094:	00d9      	lsls	r1, r3, #3
 8003096:	460b      	mov	r3, r1
 8003098:	4614      	mov	r4, r2
 800309a:	195b      	adds	r3, r3, r5
 800309c:	eb44 0406 	adc.w	r4, r4, r6
 80030a0:	f04f 0100 	mov.w	r1, #0
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	02a2      	lsls	r2, r4, #10
 80030aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80030ae:	0299      	lsls	r1, r3, #10
 80030b0:	460b      	mov	r3, r1
 80030b2:	4614      	mov	r4, r2
 80030b4:	4618      	mov	r0, r3
 80030b6:	4621      	mov	r1, r4
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f04f 0400 	mov.w	r4, #0
 80030be:	461a      	mov	r2, r3
 80030c0:	4623      	mov	r3, r4
 80030c2:	f7fd f8ed 	bl	80002a0 <__aeabi_uldivmod>
 80030c6:	4603      	mov	r3, r0
 80030c8:	460c      	mov	r4, r1
 80030ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030cc:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	0c1b      	lsrs	r3, r3, #16
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	3301      	adds	r3, #1
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e4:	60bb      	str	r3, [r7, #8]
      break;
 80030e6:	e002      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030e8:	4b04      	ldr	r3, [pc, #16]	; (80030fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80030ea:	60bb      	str	r3, [r7, #8]
      break;
 80030ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ee:	68bb      	ldr	r3, [r7, #8]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030f8:	40023800 	.word	0x40023800
 80030fc:	00f42400 	.word	0x00f42400
 8003100:	007a1200 	.word	0x007a1200

08003104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003108:	4b03      	ldr	r3, [pc, #12]	; (8003118 <HAL_RCC_GetHCLKFreq+0x14>)
 800310a:	681b      	ldr	r3, [r3, #0]
}
 800310c:	4618      	mov	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	20000000 	.word	0x20000000

0800311c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003120:	f7ff fff0 	bl	8003104 <HAL_RCC_GetHCLKFreq>
 8003124:	4601      	mov	r1, r0
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	0a9b      	lsrs	r3, r3, #10
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	4a03      	ldr	r2, [pc, #12]	; (8003140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003132:	5cd3      	ldrb	r3, [r2, r3]
 8003134:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003138:	4618      	mov	r0, r3
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40023800 	.word	0x40023800
 8003140:	08005978 	.word	0x08005978

08003144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003148:	f7ff ffdc 	bl	8003104 <HAL_RCC_GetHCLKFreq>
 800314c:	4601      	mov	r1, r0
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	0b5b      	lsrs	r3, r3, #13
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	4a03      	ldr	r2, [pc, #12]	; (8003168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800315a:	5cd3      	ldrb	r3, [r2, r3]
 800315c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003160:	4618      	mov	r0, r3
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40023800 	.word	0x40023800
 8003168:	08005978 	.word	0x08005978

0800316c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	220f      	movs	r2, #15
 800317a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800317c:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <HAL_RCC_GetClockConfig+0x5c>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0203 	and.w	r2, r3, #3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003188:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <HAL_RCC_GetClockConfig+0x5c>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <HAL_RCC_GetClockConfig+0x5c>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80031a0:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <HAL_RCC_GetClockConfig+0x5c>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	08db      	lsrs	r3, r3, #3
 80031a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031ae:	4b07      	ldr	r3, [pc, #28]	; (80031cc <HAL_RCC_GetClockConfig+0x60>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 020f 	and.w	r2, r3, #15
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	601a      	str	r2, [r3, #0]
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40023c00 	.word	0x40023c00

080031d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10b      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003200:	2b00      	cmp	r3, #0
 8003202:	d075      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003204:	4bad      	ldr	r3, [pc, #692]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800320a:	f7fe fb09 	bl	8001820 <HAL_GetTick>
 800320e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003212:	f7fe fb05 	bl	8001820 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e18b      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003224:	4ba6      	ldr	r3, [pc, #664]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d009      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	019a      	lsls	r2, r3, #6
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	071b      	lsls	r3, r3, #28
 8003248:	499d      	ldr	r1, [pc, #628]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01f      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800325c:	4b98      	ldr	r3, [pc, #608]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800325e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003262:	0f1b      	lsrs	r3, r3, #28
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	019a      	lsls	r2, r3, #6
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	061b      	lsls	r3, r3, #24
 8003276:	431a      	orrs	r2, r3
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	071b      	lsls	r3, r3, #28
 800327c:	4990      	ldr	r1, [pc, #576]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003284:	4b8e      	ldr	r3, [pc, #568]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003286:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800328a:	f023 021f 	bic.w	r2, r3, #31
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	3b01      	subs	r3, #1
 8003294:	498a      	ldr	r1, [pc, #552]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00d      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	019a      	lsls	r2, r3, #6
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	061b      	lsls	r3, r3, #24
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	071b      	lsls	r3, r3, #28
 80032bc:	4980      	ldr	r1, [pc, #512]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032c4:	4b7d      	ldr	r3, [pc, #500]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80032c6:	2201      	movs	r2, #1
 80032c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032ca:	f7fe faa9 	bl	8001820 <HAL_GetTick>
 80032ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032d0:	e008      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80032d2:	f7fe faa5 	bl	8001820 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e12b      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032e4:	4b76      	ldr	r3, [pc, #472]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d105      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003304:	2b00      	cmp	r3, #0
 8003306:	d079      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003308:	4b6e      	ldr	r3, [pc, #440]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800330e:	f7fe fa87 	bl	8001820 <HAL_GetTick>
 8003312:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003314:	e008      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003316:	f7fe fa83 	bl	8001820 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e109      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003328:	4b65      	ldr	r3, [pc, #404]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003334:	d0ef      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	d020      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003342:	4b5f      	ldr	r3, [pc, #380]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003348:	0f1b      	lsrs	r3, r3, #28
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	019a      	lsls	r2, r3, #6
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	061b      	lsls	r3, r3, #24
 800335c:	431a      	orrs	r2, r3
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	071b      	lsls	r3, r3, #28
 8003362:	4957      	ldr	r1, [pc, #348]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800336a:	4b55      	ldr	r3, [pc, #340]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800336c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003370:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	3b01      	subs	r3, #1
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	4950      	ldr	r1, [pc, #320]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01e      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003390:	4b4b      	ldr	r3, [pc, #300]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003396:	0e1b      	lsrs	r3, r3, #24
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	019a      	lsls	r2, r3, #6
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	061b      	lsls	r3, r3, #24
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	071b      	lsls	r3, r3, #28
 80033b0:	4943      	ldr	r1, [pc, #268]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80033b8:	4b41      	ldr	r3, [pc, #260]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	493e      	ldr	r1, [pc, #248]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033ce:	4b3d      	ldr	r3, [pc, #244]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033d4:	f7fe fa24 	bl	8001820 <HAL_GetTick>
 80033d8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80033dc:	f7fe fa20 	bl	8001820 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e0a6      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033ee:	4b34      	ldr	r3, [pc, #208]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033fa:	d1ef      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0320 	and.w	r3, r3, #32
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 808d 	beq.w	8003524 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	4b2c      	ldr	r3, [pc, #176]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	4a2b      	ldr	r2, [pc, #172]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003418:	6413      	str	r3, [r2, #64]	; 0x40
 800341a:	4b29      	ldr	r3, [pc, #164]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003426:	4b28      	ldr	r3, [pc, #160]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a27      	ldr	r2, [pc, #156]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800342c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003430:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003432:	f7fe f9f5 	bl	8001820 <HAL_GetTick>
 8003436:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003438:	e008      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800343a:	f7fe f9f1 	bl	8001820 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e077      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800344c:	4b1e      	ldr	r3, [pc, #120]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0f0      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003458:	4b19      	ldr	r3, [pc, #100]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003460:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d039      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	429a      	cmp	r2, r3
 8003474:	d032      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003476:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800347e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003480:	4b12      	ldr	r3, [pc, #72]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003482:	2201      	movs	r2, #1
 8003484:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003486:	4b11      	ldr	r3, [pc, #68]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800348c:	4a0c      	ldr	r2, [pc, #48]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003492:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b01      	cmp	r3, #1
 800349c:	d11e      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800349e:	f7fe f9bf 	bl	8001820 <HAL_GetTick>
 80034a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a4:	e014      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a6:	f7fe f9bb 	bl	8001820 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d90b      	bls.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e03f      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80034bc:	42470068 	.word	0x42470068
 80034c0:	40023800 	.word	0x40023800
 80034c4:	42470070 	.word	0x42470070
 80034c8:	40007000 	.word	0x40007000
 80034cc:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d0:	4b1c      	ldr	r3, [pc, #112]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0e4      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034e8:	d10d      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80034ea:	4b16      	ldr	r3, [pc, #88]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80034fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034fe:	4911      	ldr	r1, [pc, #68]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003500:	4313      	orrs	r3, r2
 8003502:	608b      	str	r3, [r1, #8]
 8003504:	e005      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003506:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	4a0e      	ldr	r2, [pc, #56]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800350c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003510:	6093      	str	r3, [r2, #8]
 8003512:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003514:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351e:	4909      	ldr	r1, [pc, #36]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003520:	4313      	orrs	r3, r2
 8003522:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	d004      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003536:	4b04      	ldr	r3, [pc, #16]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003538:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40023800 	.word	0x40023800
 8003548:	424711e0 	.word	0x424711e0

0800354c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e025      	b.n	80035ac <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d106      	bne.n	800357a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7fd fff5 	bl	8001564 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2202      	movs	r2, #2
 800357e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3304      	adds	r3, #4
 800358a:	4619      	mov	r1, r3
 800358c:	4610      	mov	r0, r2
 800358e:	f001 fca3 	bl	8004ed8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	461a      	mov	r2, r3
 800359c:	6839      	ldr	r1, [r7, #0]
 800359e:	f001 fd0e 	bl	8004fbe <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e056      	b.n	8003674 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d106      	bne.n	80035e6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7fd fe7b 	bl	80012dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2202      	movs	r2, #2
 80035ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	ea42 0103 	orr.w	r1, r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	0c1b      	lsrs	r3, r3, #16
 8003644:	f003 0104 	and.w	r1, r3, #4
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69da      	ldr	r2, [r3, #28]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003662:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	4613      	mov	r3, r2
 800368a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_SPI_Transmit+0x22>
 800369a:	2302      	movs	r3, #2
 800369c:	e11e      	b.n	80038dc <HAL_SPI_Transmit+0x260>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036a6:	f7fe f8bb 	bl	8001820 <HAL_GetTick>
 80036aa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d002      	beq.n	80036c2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80036bc:	2302      	movs	r3, #2
 80036be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036c0:	e103      	b.n	80038ca <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <HAL_SPI_Transmit+0x52>
 80036c8:	88fb      	ldrh	r3, [r7, #6]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d102      	bne.n	80036d4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036d2:	e0fa      	b.n	80038ca <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2203      	movs	r2, #3
 80036d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	88fa      	ldrh	r2, [r7, #6]
 80036ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	88fa      	ldrh	r2, [r7, #6]
 80036f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371a:	d107      	bne.n	800372c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800372a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003736:	2b40      	cmp	r3, #64	; 0x40
 8003738:	d007      	beq.n	800374a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003748:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003752:	d14b      	bne.n	80037ec <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <HAL_SPI_Transmit+0xe6>
 800375c:	8afb      	ldrh	r3, [r7, #22]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d13e      	bne.n	80037e0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	881a      	ldrh	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	1c9a      	adds	r2, r3, #2
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003786:	e02b      	b.n	80037e0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b02      	cmp	r3, #2
 8003794:	d112      	bne.n	80037bc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	881a      	ldrh	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	1c9a      	adds	r2, r3, #2
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80037ba:	e011      	b.n	80037e0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037bc:	f7fe f830 	bl	8001820 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d803      	bhi.n	80037d4 <HAL_SPI_Transmit+0x158>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d2:	d102      	bne.n	80037da <HAL_SPI_Transmit+0x15e>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d102      	bne.n	80037e0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037de:	e074      	b.n	80038ca <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1ce      	bne.n	8003788 <HAL_SPI_Transmit+0x10c>
 80037ea:	e04c      	b.n	8003886 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <HAL_SPI_Transmit+0x17e>
 80037f4:	8afb      	ldrh	r3, [r7, #22]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d140      	bne.n	800387c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	330c      	adds	r3, #12
 8003804:	7812      	ldrb	r2, [r2, #0]
 8003806:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003820:	e02c      	b.n	800387c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b02      	cmp	r3, #2
 800382e:	d113      	bne.n	8003858 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	330c      	adds	r3, #12
 800383a:	7812      	ldrb	r2, [r2, #0]
 800383c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	86da      	strh	r2, [r3, #54]	; 0x36
 8003856:	e011      	b.n	800387c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003858:	f7fd ffe2 	bl	8001820 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d803      	bhi.n	8003870 <HAL_SPI_Transmit+0x1f4>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386e:	d102      	bne.n	8003876 <HAL_SPI_Transmit+0x1fa>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d102      	bne.n	800387c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	77fb      	strb	r3, [r7, #31]
          goto error;
 800387a:	e026      	b.n	80038ca <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1cd      	bne.n	8003822 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	6839      	ldr	r1, [r7, #0]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 fa36 	bl	8003cfc <SPI_EndRxTxTransaction>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10a      	bne.n	80038ba <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038a4:	2300      	movs	r3, #0
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	77fb      	strb	r3, [r7, #31]
 80038c6:	e000      	b.n	80038ca <HAL_SPI_Transmit+0x24e>
  }

error:
 80038c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038da:	7ffb      	ldrb	r3, [r7, #31]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08c      	sub	sp, #48	; 0x30
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038f2:	2301      	movs	r3, #1
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_SPI_TransmitReceive+0x26>
 8003906:	2302      	movs	r3, #2
 8003908:	e18a      	b.n	8003c20 <HAL_SPI_TransmitReceive+0x33c>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003912:	f7fd ff85 	bl	8001820 <HAL_GetTick>
 8003916:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800391e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003928:	887b      	ldrh	r3, [r7, #2]
 800392a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800392c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003930:	2b01      	cmp	r3, #1
 8003932:	d00f      	beq.n	8003954 <HAL_SPI_TransmitReceive+0x70>
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800393a:	d107      	bne.n	800394c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d103      	bne.n	800394c <HAL_SPI_TransmitReceive+0x68>
 8003944:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003948:	2b04      	cmp	r3, #4
 800394a:	d003      	beq.n	8003954 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800394c:	2302      	movs	r3, #2
 800394e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003952:	e15b      	b.n	8003c0c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d005      	beq.n	8003966 <HAL_SPI_TransmitReceive+0x82>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <HAL_SPI_TransmitReceive+0x82>
 8003960:	887b      	ldrh	r3, [r7, #2]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d103      	bne.n	800396e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800396c:	e14e      	b.n	8003c0c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b04      	cmp	r3, #4
 8003978:	d003      	beq.n	8003982 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2205      	movs	r2, #5
 800397e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	887a      	ldrh	r2, [r7, #2]
 8003992:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	887a      	ldrh	r2, [r7, #2]
 8003998:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	887a      	ldrh	r2, [r7, #2]
 80039a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	887a      	ldrh	r2, [r7, #2]
 80039aa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c2:	2b40      	cmp	r3, #64	; 0x40
 80039c4:	d007      	beq.n	80039d6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039de:	d178      	bne.n	8003ad2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_SPI_TransmitReceive+0x10a>
 80039e8:	8b7b      	ldrh	r3, [r7, #26]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d166      	bne.n	8003abc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	881a      	ldrh	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	1c9a      	adds	r2, r3, #2
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a12:	e053      	b.n	8003abc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d11b      	bne.n	8003a5a <HAL_SPI_TransmitReceive+0x176>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d016      	beq.n	8003a5a <HAL_SPI_TransmitReceive+0x176>
 8003a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d113      	bne.n	8003a5a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	881a      	ldrh	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	1c9a      	adds	r2, r3, #2
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d119      	bne.n	8003a9c <HAL_SPI_TransmitReceive+0x1b8>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d014      	beq.n	8003a9c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	b292      	uxth	r2, r2
 8003a7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	1c9a      	adds	r2, r3, #2
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a9c:	f7fd fec0 	bl	8001820 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d807      	bhi.n	8003abc <HAL_SPI_TransmitReceive+0x1d8>
 8003aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab2:	d003      	beq.n	8003abc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003aba:	e0a7      	b.n	8003c0c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1a6      	bne.n	8003a14 <HAL_SPI_TransmitReceive+0x130>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1a1      	bne.n	8003a14 <HAL_SPI_TransmitReceive+0x130>
 8003ad0:	e07c      	b.n	8003bcc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_SPI_TransmitReceive+0x1fc>
 8003ada:	8b7b      	ldrh	r3, [r7, #26]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d16b      	bne.n	8003bb8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	330c      	adds	r3, #12
 8003aea:	7812      	ldrb	r2, [r2, #0]
 8003aec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b06:	e057      	b.n	8003bb8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d11c      	bne.n	8003b50 <HAL_SPI_TransmitReceive+0x26c>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d017      	beq.n	8003b50 <HAL_SPI_TransmitReceive+0x26c>
 8003b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d114      	bne.n	8003b50 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	330c      	adds	r3, #12
 8003b30:	7812      	ldrb	r2, [r2, #0]
 8003b32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d119      	bne.n	8003b92 <HAL_SPI_TransmitReceive+0x2ae>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d014      	beq.n	8003b92 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b92:	f7fd fe45 	bl	8001820 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d803      	bhi.n	8003baa <HAL_SPI_TransmitReceive+0x2c6>
 8003ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba8:	d102      	bne.n	8003bb0 <HAL_SPI_TransmitReceive+0x2cc>
 8003baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d103      	bne.n	8003bb8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bb6:	e029      	b.n	8003c0c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1a2      	bne.n	8003b08 <HAL_SPI_TransmitReceive+0x224>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d19d      	bne.n	8003b08 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 f893 	bl	8003cfc <SPI_EndRxTxTransaction>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d006      	beq.n	8003bea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003be8:	e010      	b.n	8003c0c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10b      	bne.n	8003c0a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	e000      	b.n	8003c0c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003c0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3730      	adds	r7, #48	; 0x30
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	4613      	mov	r3, r2
 8003c36:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c38:	e04c      	b.n	8003cd4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d048      	beq.n	8003cd4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003c42:	f7fd fded 	bl	8001820 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d902      	bls.n	8003c58 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d13d      	bne.n	8003cd4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c70:	d111      	bne.n	8003c96 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c7a:	d004      	beq.n	8003c86 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c84:	d107      	bne.n	8003c96 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c9e:	d10f      	bne.n	8003cc0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cbe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e00f      	b.n	8003cf4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	bf0c      	ite	eq
 8003ce4:	2301      	moveq	r3, #1
 8003ce6:	2300      	movne	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d1a3      	bne.n	8003c3a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d08:	4b1b      	ldr	r3, [pc, #108]	; (8003d78 <SPI_EndRxTxTransaction+0x7c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a1b      	ldr	r2, [pc, #108]	; (8003d7c <SPI_EndRxTxTransaction+0x80>)
 8003d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d12:	0d5b      	lsrs	r3, r3, #21
 8003d14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d18:	fb02 f303 	mul.w	r3, r2, r3
 8003d1c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d26:	d112      	bne.n	8003d4e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	2180      	movs	r1, #128	; 0x80
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f7ff ff78 	bl	8003c28 <SPI_WaitFlagStateUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d016      	beq.n	8003d6c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d42:	f043 0220 	orr.w	r2, r3, #32
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e00f      	b.n	8003d6e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00a      	beq.n	8003d6a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d64:	2b80      	cmp	r3, #128	; 0x80
 8003d66:	d0f2      	beq.n	8003d4e <SPI_EndRxTxTransaction+0x52>
 8003d68:	e000      	b.n	8003d6c <SPI_EndRxTxTransaction+0x70>
        break;
 8003d6a:	bf00      	nop
  }

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20000000 	.word	0x20000000
 8003d7c:	165e9f81 	.word	0x165e9f81

08003d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e01d      	b.n	8003dce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fd fae0 	bl	800136c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	f000 fa14 	bl	80041ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b085      	sub	sp, #20
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0201 	orr.w	r2, r2, #1
 8003dec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b06      	cmp	r3, #6
 8003dfe:	d007      	beq.n	8003e10 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d122      	bne.n	8003e7a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d11b      	bne.n	8003e7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f06f 0202 	mvn.w	r2, #2
 8003e4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f9a5 	bl	80041b0 <HAL_TIM_IC_CaptureCallback>
 8003e66:	e005      	b.n	8003e74 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f997 	bl	800419c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f9a8 	bl	80041c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d122      	bne.n	8003ece <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d11b      	bne.n	8003ece <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f06f 0204 	mvn.w	r2, #4
 8003e9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f97b 	bl	80041b0 <HAL_TIM_IC_CaptureCallback>
 8003eba:	e005      	b.n	8003ec8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f96d 	bl	800419c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f97e 	bl	80041c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d122      	bne.n	8003f22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d11b      	bne.n	8003f22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f06f 0208 	mvn.w	r2, #8
 8003ef2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2204      	movs	r2, #4
 8003ef8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	f003 0303 	and.w	r3, r3, #3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f951 	bl	80041b0 <HAL_TIM_IC_CaptureCallback>
 8003f0e:	e005      	b.n	8003f1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f943 	bl	800419c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f954 	bl	80041c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	2b10      	cmp	r3, #16
 8003f2e:	d122      	bne.n	8003f76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	2b10      	cmp	r3, #16
 8003f3c:	d11b      	bne.n	8003f76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f06f 0210 	mvn.w	r2, #16
 8003f46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2208      	movs	r2, #8
 8003f4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f927 	bl	80041b0 <HAL_TIM_IC_CaptureCallback>
 8003f62:	e005      	b.n	8003f70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f919 	bl	800419c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f92a 	bl	80041c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d10e      	bne.n	8003fa2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d107      	bne.n	8003fa2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f06f 0201 	mvn.w	r2, #1
 8003f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7fc fff7 	bl	8000f90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	2b80      	cmp	r3, #128	; 0x80
 8003fae:	d10e      	bne.n	8003fce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fba:	2b80      	cmp	r3, #128	; 0x80
 8003fbc:	d107      	bne.n	8003fce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 facf 	bl	800456c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd8:	2b40      	cmp	r3, #64	; 0x40
 8003fda:	d10e      	bne.n	8003ffa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe6:	2b40      	cmp	r3, #64	; 0x40
 8003fe8:	d107      	bne.n	8003ffa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f8ef 	bl	80041d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b20      	cmp	r3, #32
 8004006:	d10e      	bne.n	8004026 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b20      	cmp	r3, #32
 8004014:	d107      	bne.n	8004026 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f06f 0220 	mvn.w	r2, #32
 800401e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fa99 	bl	8004558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <HAL_TIM_ConfigClockSource+0x18>
 8004042:	2302      	movs	r3, #2
 8004044:	e0a6      	b.n	8004194 <HAL_TIM_ConfigClockSource+0x166>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2202      	movs	r2, #2
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004064:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800406c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b40      	cmp	r3, #64	; 0x40
 800407c:	d067      	beq.n	800414e <HAL_TIM_ConfigClockSource+0x120>
 800407e:	2b40      	cmp	r3, #64	; 0x40
 8004080:	d80b      	bhi.n	800409a <HAL_TIM_ConfigClockSource+0x6c>
 8004082:	2b10      	cmp	r3, #16
 8004084:	d073      	beq.n	800416e <HAL_TIM_ConfigClockSource+0x140>
 8004086:	2b10      	cmp	r3, #16
 8004088:	d802      	bhi.n	8004090 <HAL_TIM_ConfigClockSource+0x62>
 800408a:	2b00      	cmp	r3, #0
 800408c:	d06f      	beq.n	800416e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800408e:	e078      	b.n	8004182 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004090:	2b20      	cmp	r3, #32
 8004092:	d06c      	beq.n	800416e <HAL_TIM_ConfigClockSource+0x140>
 8004094:	2b30      	cmp	r3, #48	; 0x30
 8004096:	d06a      	beq.n	800416e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004098:	e073      	b.n	8004182 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800409a:	2b70      	cmp	r3, #112	; 0x70
 800409c:	d00d      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x8c>
 800409e:	2b70      	cmp	r3, #112	; 0x70
 80040a0:	d804      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x7e>
 80040a2:	2b50      	cmp	r3, #80	; 0x50
 80040a4:	d033      	beq.n	800410e <HAL_TIM_ConfigClockSource+0xe0>
 80040a6:	2b60      	cmp	r3, #96	; 0x60
 80040a8:	d041      	beq.n	800412e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80040aa:	e06a      	b.n	8004182 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b0:	d066      	beq.n	8004180 <HAL_TIM_ConfigClockSource+0x152>
 80040b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040b6:	d017      	beq.n	80040e8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80040b8:	e063      	b.n	8004182 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	6899      	ldr	r1, [r3, #8]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f000 f9a9 	bl	8004420 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	609a      	str	r2, [r3, #8]
      break;
 80040e6:	e04c      	b.n	8004182 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6818      	ldr	r0, [r3, #0]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	6899      	ldr	r1, [r3, #8]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f000 f992 	bl	8004420 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800410a:	609a      	str	r2, [r3, #8]
      break;
 800410c:	e039      	b.n	8004182 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6818      	ldr	r0, [r3, #0]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	6859      	ldr	r1, [r3, #4]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	461a      	mov	r2, r3
 800411c:	f000 f906 	bl	800432c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2150      	movs	r1, #80	; 0x50
 8004126:	4618      	mov	r0, r3
 8004128:	f000 f95f 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 800412c:	e029      	b.n	8004182 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	6859      	ldr	r1, [r3, #4]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	461a      	mov	r2, r3
 800413c:	f000 f925 	bl	800438a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2160      	movs	r1, #96	; 0x60
 8004146:	4618      	mov	r0, r3
 8004148:	f000 f94f 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 800414c:	e019      	b.n	8004182 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	6859      	ldr	r1, [r3, #4]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	461a      	mov	r2, r3
 800415c:	f000 f8e6 	bl	800432c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2140      	movs	r1, #64	; 0x40
 8004166:	4618      	mov	r0, r3
 8004168:	f000 f93f 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 800416c:	e009      	b.n	8004182 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4619      	mov	r1, r3
 8004178:	4610      	mov	r0, r2
 800417a:	f000 f936 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 800417e:	e000      	b.n	8004182 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004180:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a40      	ldr	r2, [pc, #256]	; (8004300 <TIM_Base_SetConfig+0x114>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d013      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420a:	d00f      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a3d      	ldr	r2, [pc, #244]	; (8004304 <TIM_Base_SetConfig+0x118>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00b      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a3c      	ldr	r2, [pc, #240]	; (8004308 <TIM_Base_SetConfig+0x11c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d007      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a3b      	ldr	r2, [pc, #236]	; (800430c <TIM_Base_SetConfig+0x120>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d003      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a3a      	ldr	r2, [pc, #232]	; (8004310 <TIM_Base_SetConfig+0x124>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d108      	bne.n	800423e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a2f      	ldr	r2, [pc, #188]	; (8004300 <TIM_Base_SetConfig+0x114>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d02b      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424c:	d027      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a2c      	ldr	r2, [pc, #176]	; (8004304 <TIM_Base_SetConfig+0x118>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d023      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a2b      	ldr	r2, [pc, #172]	; (8004308 <TIM_Base_SetConfig+0x11c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01f      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a2a      	ldr	r2, [pc, #168]	; (800430c <TIM_Base_SetConfig+0x120>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d01b      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a29      	ldr	r2, [pc, #164]	; (8004310 <TIM_Base_SetConfig+0x124>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d017      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a28      	ldr	r2, [pc, #160]	; (8004314 <TIM_Base_SetConfig+0x128>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a27      	ldr	r2, [pc, #156]	; (8004318 <TIM_Base_SetConfig+0x12c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00f      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a26      	ldr	r2, [pc, #152]	; (800431c <TIM_Base_SetConfig+0x130>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00b      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a25      	ldr	r2, [pc, #148]	; (8004320 <TIM_Base_SetConfig+0x134>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d007      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a24      	ldr	r2, [pc, #144]	; (8004324 <TIM_Base_SetConfig+0x138>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a23      	ldr	r2, [pc, #140]	; (8004328 <TIM_Base_SetConfig+0x13c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d108      	bne.n	80042b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a0a      	ldr	r2, [pc, #40]	; (8004300 <TIM_Base_SetConfig+0x114>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d003      	beq.n	80042e4 <TIM_Base_SetConfig+0xf8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a0c      	ldr	r2, [pc, #48]	; (8004310 <TIM_Base_SetConfig+0x124>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d103      	bne.n	80042ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	615a      	str	r2, [r3, #20]
}
 80042f2:	bf00      	nop
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40010000 	.word	0x40010000
 8004304:	40000400 	.word	0x40000400
 8004308:	40000800 	.word	0x40000800
 800430c:	40000c00 	.word	0x40000c00
 8004310:	40010400 	.word	0x40010400
 8004314:	40014000 	.word	0x40014000
 8004318:	40014400 	.word	0x40014400
 800431c:	40014800 	.word	0x40014800
 8004320:	40001800 	.word	0x40001800
 8004324:	40001c00 	.word	0x40001c00
 8004328:	40002000 	.word	0x40002000

0800432c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	f023 0201 	bic.w	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f023 030a 	bic.w	r3, r3, #10
 8004368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	621a      	str	r2, [r3, #32]
}
 800437e:	bf00      	nop
 8004380:	371c      	adds	r7, #28
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800438a:	b480      	push	{r7}
 800438c:	b087      	sub	sp, #28
 800438e:	af00      	add	r7, sp, #0
 8004390:	60f8      	str	r0, [r7, #12]
 8004392:	60b9      	str	r1, [r7, #8]
 8004394:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	f023 0210 	bic.w	r2, r3, #16
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	031b      	lsls	r3, r3, #12
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	621a      	str	r2, [r3, #32]
}
 80043de:	bf00      	nop
 80043e0:	371c      	adds	r7, #28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b085      	sub	sp, #20
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004400:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	f043 0307 	orr.w	r3, r3, #7
 800440c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	609a      	str	r2, [r3, #8]
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800443a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	021a      	lsls	r2, r3, #8
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	431a      	orrs	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4313      	orrs	r3, r2
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	609a      	str	r2, [r3, #8]
}
 8004454:	bf00      	nop
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004474:	2302      	movs	r3, #2
 8004476:	e05a      	b.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a21      	ldr	r2, [pc, #132]	; (800453c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d022      	beq.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c4:	d01d      	beq.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a1d      	ldr	r2, [pc, #116]	; (8004540 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d018      	beq.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a1b      	ldr	r2, [pc, #108]	; (8004544 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d013      	beq.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a1a      	ldr	r2, [pc, #104]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00e      	beq.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a18      	ldr	r2, [pc, #96]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d009      	beq.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a17      	ldr	r2, [pc, #92]	; (8004550 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d004      	beq.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a15      	ldr	r2, [pc, #84]	; (8004554 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d10c      	bne.n	800451c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004508:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	4313      	orrs	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40010000 	.word	0x40010000
 8004540:	40000400 	.word	0x40000400
 8004544:	40000800 	.word	0x40000800
 8004548:	40000c00 	.word	0x40000c00
 800454c:	40010400 	.word	0x40010400
 8004550:	40014000 	.word	0x40014000
 8004554:	40001800 	.word	0x40001800

08004558 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e03f      	b.n	8004612 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fc ff02 	bl	80013b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2224      	movs	r2, #36	; 0x24
 80045b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f90b 	bl	80047e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695a      	ldr	r2, [r3, #20]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b088      	sub	sp, #32
 800461e:	af02      	add	r7, sp, #8
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	603b      	str	r3, [r7, #0]
 8004626:	4613      	mov	r3, r2
 8004628:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b20      	cmp	r3, #32
 8004638:	f040 8083 	bne.w	8004742 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_UART_Transmit+0x2e>
 8004642:	88fb      	ldrh	r3, [r7, #6]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e07b      	b.n	8004744 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_UART_Transmit+0x40>
 8004656:	2302      	movs	r3, #2
 8004658:	e074      	b.n	8004744 <HAL_UART_Transmit+0x12a>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2221      	movs	r2, #33	; 0x21
 800466c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004670:	f7fd f8d6 	bl	8001820 <HAL_GetTick>
 8004674:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	88fa      	ldrh	r2, [r7, #6]
 800467a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	88fa      	ldrh	r2, [r7, #6]
 8004680:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800468a:	e042      	b.n	8004712 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a2:	d122      	bne.n	80046ea <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2200      	movs	r2, #0
 80046ac:	2180      	movs	r1, #128	; 0x80
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f84c 	bl	800474c <UART_WaitOnFlagUntilTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e042      	b.n	8004744 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046d0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d103      	bne.n	80046e2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	3302      	adds	r3, #2
 80046de:	60bb      	str	r3, [r7, #8]
 80046e0:	e017      	b.n	8004712 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	3301      	adds	r3, #1
 80046e6:	60bb      	str	r3, [r7, #8]
 80046e8:	e013      	b.n	8004712 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2200      	movs	r2, #0
 80046f2:	2180      	movs	r1, #128	; 0x80
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 f829 	bl	800474c <UART_WaitOnFlagUntilTimeout>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e01f      	b.n	8004744 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	60ba      	str	r2, [r7, #8]
 800470a:	781a      	ldrb	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1b7      	bne.n	800468c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2200      	movs	r2, #0
 8004724:	2140      	movs	r1, #64	; 0x40
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 f810 	bl	800474c <UART_WaitOnFlagUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e006      	b.n	8004744 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	e000      	b.n	8004744 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004742:	2302      	movs	r3, #2
  }
}
 8004744:	4618      	mov	r0, r3
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	4613      	mov	r3, r2
 800475a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800475c:	e02c      	b.n	80047b8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004764:	d028      	beq.n	80047b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d007      	beq.n	800477c <UART_WaitOnFlagUntilTimeout+0x30>
 800476c:	f7fd f858 	bl	8001820 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	429a      	cmp	r2, r3
 800477a:	d21d      	bcs.n	80047b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800478a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695a      	ldr	r2, [r3, #20]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0201 	bic.w	r2, r2, #1
 800479a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e00f      	b.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	4013      	ands	r3, r2
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	bf0c      	ite	eq
 80047c8:	2301      	moveq	r3, #1
 80047ca:	2300      	movne	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	461a      	mov	r2, r3
 80047d0:	79fb      	ldrb	r3, [r7, #7]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d0c3      	beq.n	800475e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e4:	b085      	sub	sp, #20
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	4313      	orrs	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004822:	f023 030c 	bic.w	r3, r3, #12
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6812      	ldr	r2, [r2, #0]
 800482a:	68f9      	ldr	r1, [r7, #12]
 800482c:	430b      	orrs	r3, r1
 800482e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699a      	ldr	r2, [r3, #24]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800484e:	f040 818b 	bne.w	8004b68 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4ac1      	ldr	r2, [pc, #772]	; (8004b5c <UART_SetConfig+0x37c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d005      	beq.n	8004868 <UART_SetConfig+0x88>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4abf      	ldr	r2, [pc, #764]	; (8004b60 <UART_SetConfig+0x380>)
 8004862:	4293      	cmp	r3, r2
 8004864:	f040 80bd 	bne.w	80049e2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004868:	f7fe fc6c 	bl	8003144 <HAL_RCC_GetPCLK2Freq>
 800486c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	461d      	mov	r5, r3
 8004872:	f04f 0600 	mov.w	r6, #0
 8004876:	46a8      	mov	r8, r5
 8004878:	46b1      	mov	r9, r6
 800487a:	eb18 0308 	adds.w	r3, r8, r8
 800487e:	eb49 0409 	adc.w	r4, r9, r9
 8004882:	4698      	mov	r8, r3
 8004884:	46a1      	mov	r9, r4
 8004886:	eb18 0805 	adds.w	r8, r8, r5
 800488a:	eb49 0906 	adc.w	r9, r9, r6
 800488e:	f04f 0100 	mov.w	r1, #0
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800489a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800489e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80048a2:	4688      	mov	r8, r1
 80048a4:	4691      	mov	r9, r2
 80048a6:	eb18 0005 	adds.w	r0, r8, r5
 80048aa:	eb49 0106 	adc.w	r1, r9, r6
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	461d      	mov	r5, r3
 80048b4:	f04f 0600 	mov.w	r6, #0
 80048b8:	196b      	adds	r3, r5, r5
 80048ba:	eb46 0406 	adc.w	r4, r6, r6
 80048be:	461a      	mov	r2, r3
 80048c0:	4623      	mov	r3, r4
 80048c2:	f7fb fced 	bl	80002a0 <__aeabi_uldivmod>
 80048c6:	4603      	mov	r3, r0
 80048c8:	460c      	mov	r4, r1
 80048ca:	461a      	mov	r2, r3
 80048cc:	4ba5      	ldr	r3, [pc, #660]	; (8004b64 <UART_SetConfig+0x384>)
 80048ce:	fba3 2302 	umull	r2, r3, r3, r2
 80048d2:	095b      	lsrs	r3, r3, #5
 80048d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	461d      	mov	r5, r3
 80048dc:	f04f 0600 	mov.w	r6, #0
 80048e0:	46a9      	mov	r9, r5
 80048e2:	46b2      	mov	sl, r6
 80048e4:	eb19 0309 	adds.w	r3, r9, r9
 80048e8:	eb4a 040a 	adc.w	r4, sl, sl
 80048ec:	4699      	mov	r9, r3
 80048ee:	46a2      	mov	sl, r4
 80048f0:	eb19 0905 	adds.w	r9, r9, r5
 80048f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80048f8:	f04f 0100 	mov.w	r1, #0
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004904:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004908:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800490c:	4689      	mov	r9, r1
 800490e:	4692      	mov	sl, r2
 8004910:	eb19 0005 	adds.w	r0, r9, r5
 8004914:	eb4a 0106 	adc.w	r1, sl, r6
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	461d      	mov	r5, r3
 800491e:	f04f 0600 	mov.w	r6, #0
 8004922:	196b      	adds	r3, r5, r5
 8004924:	eb46 0406 	adc.w	r4, r6, r6
 8004928:	461a      	mov	r2, r3
 800492a:	4623      	mov	r3, r4
 800492c:	f7fb fcb8 	bl	80002a0 <__aeabi_uldivmod>
 8004930:	4603      	mov	r3, r0
 8004932:	460c      	mov	r4, r1
 8004934:	461a      	mov	r2, r3
 8004936:	4b8b      	ldr	r3, [pc, #556]	; (8004b64 <UART_SetConfig+0x384>)
 8004938:	fba3 1302 	umull	r1, r3, r3, r2
 800493c:	095b      	lsrs	r3, r3, #5
 800493e:	2164      	movs	r1, #100	; 0x64
 8004940:	fb01 f303 	mul.w	r3, r1, r3
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	3332      	adds	r3, #50	; 0x32
 800494a:	4a86      	ldr	r2, [pc, #536]	; (8004b64 <UART_SetConfig+0x384>)
 800494c:	fba2 2303 	umull	r2, r3, r2, r3
 8004950:	095b      	lsrs	r3, r3, #5
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004958:	4498      	add	r8, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	461d      	mov	r5, r3
 800495e:	f04f 0600 	mov.w	r6, #0
 8004962:	46a9      	mov	r9, r5
 8004964:	46b2      	mov	sl, r6
 8004966:	eb19 0309 	adds.w	r3, r9, r9
 800496a:	eb4a 040a 	adc.w	r4, sl, sl
 800496e:	4699      	mov	r9, r3
 8004970:	46a2      	mov	sl, r4
 8004972:	eb19 0905 	adds.w	r9, r9, r5
 8004976:	eb4a 0a06 	adc.w	sl, sl, r6
 800497a:	f04f 0100 	mov.w	r1, #0
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004986:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800498a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800498e:	4689      	mov	r9, r1
 8004990:	4692      	mov	sl, r2
 8004992:	eb19 0005 	adds.w	r0, r9, r5
 8004996:	eb4a 0106 	adc.w	r1, sl, r6
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	461d      	mov	r5, r3
 80049a0:	f04f 0600 	mov.w	r6, #0
 80049a4:	196b      	adds	r3, r5, r5
 80049a6:	eb46 0406 	adc.w	r4, r6, r6
 80049aa:	461a      	mov	r2, r3
 80049ac:	4623      	mov	r3, r4
 80049ae:	f7fb fc77 	bl	80002a0 <__aeabi_uldivmod>
 80049b2:	4603      	mov	r3, r0
 80049b4:	460c      	mov	r4, r1
 80049b6:	461a      	mov	r2, r3
 80049b8:	4b6a      	ldr	r3, [pc, #424]	; (8004b64 <UART_SetConfig+0x384>)
 80049ba:	fba3 1302 	umull	r1, r3, r3, r2
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	2164      	movs	r1, #100	; 0x64
 80049c2:	fb01 f303 	mul.w	r3, r1, r3
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	3332      	adds	r3, #50	; 0x32
 80049cc:	4a65      	ldr	r2, [pc, #404]	; (8004b64 <UART_SetConfig+0x384>)
 80049ce:	fba2 2303 	umull	r2, r3, r2, r3
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	f003 0207 	and.w	r2, r3, #7
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4442      	add	r2, r8
 80049de:	609a      	str	r2, [r3, #8]
 80049e0:	e26f      	b.n	8004ec2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049e2:	f7fe fb9b 	bl	800311c <HAL_RCC_GetPCLK1Freq>
 80049e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	461d      	mov	r5, r3
 80049ec:	f04f 0600 	mov.w	r6, #0
 80049f0:	46a8      	mov	r8, r5
 80049f2:	46b1      	mov	r9, r6
 80049f4:	eb18 0308 	adds.w	r3, r8, r8
 80049f8:	eb49 0409 	adc.w	r4, r9, r9
 80049fc:	4698      	mov	r8, r3
 80049fe:	46a1      	mov	r9, r4
 8004a00:	eb18 0805 	adds.w	r8, r8, r5
 8004a04:	eb49 0906 	adc.w	r9, r9, r6
 8004a08:	f04f 0100 	mov.w	r1, #0
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a1c:	4688      	mov	r8, r1
 8004a1e:	4691      	mov	r9, r2
 8004a20:	eb18 0005 	adds.w	r0, r8, r5
 8004a24:	eb49 0106 	adc.w	r1, r9, r6
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	461d      	mov	r5, r3
 8004a2e:	f04f 0600 	mov.w	r6, #0
 8004a32:	196b      	adds	r3, r5, r5
 8004a34:	eb46 0406 	adc.w	r4, r6, r6
 8004a38:	461a      	mov	r2, r3
 8004a3a:	4623      	mov	r3, r4
 8004a3c:	f7fb fc30 	bl	80002a0 <__aeabi_uldivmod>
 8004a40:	4603      	mov	r3, r0
 8004a42:	460c      	mov	r4, r1
 8004a44:	461a      	mov	r2, r3
 8004a46:	4b47      	ldr	r3, [pc, #284]	; (8004b64 <UART_SetConfig+0x384>)
 8004a48:	fba3 2302 	umull	r2, r3, r3, r2
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	461d      	mov	r5, r3
 8004a56:	f04f 0600 	mov.w	r6, #0
 8004a5a:	46a9      	mov	r9, r5
 8004a5c:	46b2      	mov	sl, r6
 8004a5e:	eb19 0309 	adds.w	r3, r9, r9
 8004a62:	eb4a 040a 	adc.w	r4, sl, sl
 8004a66:	4699      	mov	r9, r3
 8004a68:	46a2      	mov	sl, r4
 8004a6a:	eb19 0905 	adds.w	r9, r9, r5
 8004a6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a72:	f04f 0100 	mov.w	r1, #0
 8004a76:	f04f 0200 	mov.w	r2, #0
 8004a7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a86:	4689      	mov	r9, r1
 8004a88:	4692      	mov	sl, r2
 8004a8a:	eb19 0005 	adds.w	r0, r9, r5
 8004a8e:	eb4a 0106 	adc.w	r1, sl, r6
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	461d      	mov	r5, r3
 8004a98:	f04f 0600 	mov.w	r6, #0
 8004a9c:	196b      	adds	r3, r5, r5
 8004a9e:	eb46 0406 	adc.w	r4, r6, r6
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	4623      	mov	r3, r4
 8004aa6:	f7fb fbfb 	bl	80002a0 <__aeabi_uldivmod>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	460c      	mov	r4, r1
 8004aae:	461a      	mov	r2, r3
 8004ab0:	4b2c      	ldr	r3, [pc, #176]	; (8004b64 <UART_SetConfig+0x384>)
 8004ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	2164      	movs	r1, #100	; 0x64
 8004aba:	fb01 f303 	mul.w	r3, r1, r3
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	3332      	adds	r3, #50	; 0x32
 8004ac4:	4a27      	ldr	r2, [pc, #156]	; (8004b64 <UART_SetConfig+0x384>)
 8004ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ad2:	4498      	add	r8, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	461d      	mov	r5, r3
 8004ad8:	f04f 0600 	mov.w	r6, #0
 8004adc:	46a9      	mov	r9, r5
 8004ade:	46b2      	mov	sl, r6
 8004ae0:	eb19 0309 	adds.w	r3, r9, r9
 8004ae4:	eb4a 040a 	adc.w	r4, sl, sl
 8004ae8:	4699      	mov	r9, r3
 8004aea:	46a2      	mov	sl, r4
 8004aec:	eb19 0905 	adds.w	r9, r9, r5
 8004af0:	eb4a 0a06 	adc.w	sl, sl, r6
 8004af4:	f04f 0100 	mov.w	r1, #0
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b08:	4689      	mov	r9, r1
 8004b0a:	4692      	mov	sl, r2
 8004b0c:	eb19 0005 	adds.w	r0, r9, r5
 8004b10:	eb4a 0106 	adc.w	r1, sl, r6
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	461d      	mov	r5, r3
 8004b1a:	f04f 0600 	mov.w	r6, #0
 8004b1e:	196b      	adds	r3, r5, r5
 8004b20:	eb46 0406 	adc.w	r4, r6, r6
 8004b24:	461a      	mov	r2, r3
 8004b26:	4623      	mov	r3, r4
 8004b28:	f7fb fbba 	bl	80002a0 <__aeabi_uldivmod>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	460c      	mov	r4, r1
 8004b30:	461a      	mov	r2, r3
 8004b32:	4b0c      	ldr	r3, [pc, #48]	; (8004b64 <UART_SetConfig+0x384>)
 8004b34:	fba3 1302 	umull	r1, r3, r3, r2
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	2164      	movs	r1, #100	; 0x64
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	3332      	adds	r3, #50	; 0x32
 8004b46:	4a07      	ldr	r2, [pc, #28]	; (8004b64 <UART_SetConfig+0x384>)
 8004b48:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4c:	095b      	lsrs	r3, r3, #5
 8004b4e:	f003 0207 	and.w	r2, r3, #7
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4442      	add	r2, r8
 8004b58:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004b5a:	e1b2      	b.n	8004ec2 <UART_SetConfig+0x6e2>
 8004b5c:	40011000 	.word	0x40011000
 8004b60:	40011400 	.word	0x40011400
 8004b64:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4ad7      	ldr	r2, [pc, #860]	; (8004ecc <UART_SetConfig+0x6ec>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d005      	beq.n	8004b7e <UART_SetConfig+0x39e>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4ad6      	ldr	r2, [pc, #856]	; (8004ed0 <UART_SetConfig+0x6f0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	f040 80d1 	bne.w	8004d20 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b7e:	f7fe fae1 	bl	8003144 <HAL_RCC_GetPCLK2Freq>
 8004b82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	469a      	mov	sl, r3
 8004b88:	f04f 0b00 	mov.w	fp, #0
 8004b8c:	46d0      	mov	r8, sl
 8004b8e:	46d9      	mov	r9, fp
 8004b90:	eb18 0308 	adds.w	r3, r8, r8
 8004b94:	eb49 0409 	adc.w	r4, r9, r9
 8004b98:	4698      	mov	r8, r3
 8004b9a:	46a1      	mov	r9, r4
 8004b9c:	eb18 080a 	adds.w	r8, r8, sl
 8004ba0:	eb49 090b 	adc.w	r9, r9, fp
 8004ba4:	f04f 0100 	mov.w	r1, #0
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004bb0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004bb4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004bb8:	4688      	mov	r8, r1
 8004bba:	4691      	mov	r9, r2
 8004bbc:	eb1a 0508 	adds.w	r5, sl, r8
 8004bc0:	eb4b 0609 	adc.w	r6, fp, r9
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	4619      	mov	r1, r3
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	f04f 0400 	mov.w	r4, #0
 8004bd6:	0094      	lsls	r4, r2, #2
 8004bd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bdc:	008b      	lsls	r3, r1, #2
 8004bde:	461a      	mov	r2, r3
 8004be0:	4623      	mov	r3, r4
 8004be2:	4628      	mov	r0, r5
 8004be4:	4631      	mov	r1, r6
 8004be6:	f7fb fb5b 	bl	80002a0 <__aeabi_uldivmod>
 8004bea:	4603      	mov	r3, r0
 8004bec:	460c      	mov	r4, r1
 8004bee:	461a      	mov	r2, r3
 8004bf0:	4bb8      	ldr	r3, [pc, #736]	; (8004ed4 <UART_SetConfig+0x6f4>)
 8004bf2:	fba3 2302 	umull	r2, r3, r3, r2
 8004bf6:	095b      	lsrs	r3, r3, #5
 8004bf8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	469b      	mov	fp, r3
 8004c00:	f04f 0c00 	mov.w	ip, #0
 8004c04:	46d9      	mov	r9, fp
 8004c06:	46e2      	mov	sl, ip
 8004c08:	eb19 0309 	adds.w	r3, r9, r9
 8004c0c:	eb4a 040a 	adc.w	r4, sl, sl
 8004c10:	4699      	mov	r9, r3
 8004c12:	46a2      	mov	sl, r4
 8004c14:	eb19 090b 	adds.w	r9, r9, fp
 8004c18:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c1c:	f04f 0100 	mov.w	r1, #0
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c30:	4689      	mov	r9, r1
 8004c32:	4692      	mov	sl, r2
 8004c34:	eb1b 0509 	adds.w	r5, fp, r9
 8004c38:	eb4c 060a 	adc.w	r6, ip, sl
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	4619      	mov	r1, r3
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	f04f 0400 	mov.w	r4, #0
 8004c4e:	0094      	lsls	r4, r2, #2
 8004c50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c54:	008b      	lsls	r3, r1, #2
 8004c56:	461a      	mov	r2, r3
 8004c58:	4623      	mov	r3, r4
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	4631      	mov	r1, r6
 8004c5e:	f7fb fb1f 	bl	80002a0 <__aeabi_uldivmod>
 8004c62:	4603      	mov	r3, r0
 8004c64:	460c      	mov	r4, r1
 8004c66:	461a      	mov	r2, r3
 8004c68:	4b9a      	ldr	r3, [pc, #616]	; (8004ed4 <UART_SetConfig+0x6f4>)
 8004c6a:	fba3 1302 	umull	r1, r3, r3, r2
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	2164      	movs	r1, #100	; 0x64
 8004c72:	fb01 f303 	mul.w	r3, r1, r3
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	3332      	adds	r3, #50	; 0x32
 8004c7c:	4a95      	ldr	r2, [pc, #596]	; (8004ed4 <UART_SetConfig+0x6f4>)
 8004c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c88:	4498      	add	r8, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	469b      	mov	fp, r3
 8004c8e:	f04f 0c00 	mov.w	ip, #0
 8004c92:	46d9      	mov	r9, fp
 8004c94:	46e2      	mov	sl, ip
 8004c96:	eb19 0309 	adds.w	r3, r9, r9
 8004c9a:	eb4a 040a 	adc.w	r4, sl, sl
 8004c9e:	4699      	mov	r9, r3
 8004ca0:	46a2      	mov	sl, r4
 8004ca2:	eb19 090b 	adds.w	r9, r9, fp
 8004ca6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004caa:	f04f 0100 	mov.w	r1, #0
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cbe:	4689      	mov	r9, r1
 8004cc0:	4692      	mov	sl, r2
 8004cc2:	eb1b 0509 	adds.w	r5, fp, r9
 8004cc6:	eb4c 060a 	adc.w	r6, ip, sl
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	4619      	mov	r1, r3
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	f04f 0300 	mov.w	r3, #0
 8004cd8:	f04f 0400 	mov.w	r4, #0
 8004cdc:	0094      	lsls	r4, r2, #2
 8004cde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ce2:	008b      	lsls	r3, r1, #2
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4623      	mov	r3, r4
 8004ce8:	4628      	mov	r0, r5
 8004cea:	4631      	mov	r1, r6
 8004cec:	f7fb fad8 	bl	80002a0 <__aeabi_uldivmod>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	4b77      	ldr	r3, [pc, #476]	; (8004ed4 <UART_SetConfig+0x6f4>)
 8004cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cfc:	095b      	lsrs	r3, r3, #5
 8004cfe:	2164      	movs	r1, #100	; 0x64
 8004d00:	fb01 f303 	mul.w	r3, r1, r3
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	3332      	adds	r3, #50	; 0x32
 8004d0a:	4a72      	ldr	r2, [pc, #456]	; (8004ed4 <UART_SetConfig+0x6f4>)
 8004d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d10:	095b      	lsrs	r3, r3, #5
 8004d12:	f003 020f 	and.w	r2, r3, #15
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4442      	add	r2, r8
 8004d1c:	609a      	str	r2, [r3, #8]
 8004d1e:	e0d0      	b.n	8004ec2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d20:	f7fe f9fc 	bl	800311c <HAL_RCC_GetPCLK1Freq>
 8004d24:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	469a      	mov	sl, r3
 8004d2a:	f04f 0b00 	mov.w	fp, #0
 8004d2e:	46d0      	mov	r8, sl
 8004d30:	46d9      	mov	r9, fp
 8004d32:	eb18 0308 	adds.w	r3, r8, r8
 8004d36:	eb49 0409 	adc.w	r4, r9, r9
 8004d3a:	4698      	mov	r8, r3
 8004d3c:	46a1      	mov	r9, r4
 8004d3e:	eb18 080a 	adds.w	r8, r8, sl
 8004d42:	eb49 090b 	adc.w	r9, r9, fp
 8004d46:	f04f 0100 	mov.w	r1, #0
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d52:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d56:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d5a:	4688      	mov	r8, r1
 8004d5c:	4691      	mov	r9, r2
 8004d5e:	eb1a 0508 	adds.w	r5, sl, r8
 8004d62:	eb4b 0609 	adc.w	r6, fp, r9
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	f04f 0400 	mov.w	r4, #0
 8004d78:	0094      	lsls	r4, r2, #2
 8004d7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d7e:	008b      	lsls	r3, r1, #2
 8004d80:	461a      	mov	r2, r3
 8004d82:	4623      	mov	r3, r4
 8004d84:	4628      	mov	r0, r5
 8004d86:	4631      	mov	r1, r6
 8004d88:	f7fb fa8a 	bl	80002a0 <__aeabi_uldivmod>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	460c      	mov	r4, r1
 8004d90:	461a      	mov	r2, r3
 8004d92:	4b50      	ldr	r3, [pc, #320]	; (8004ed4 <UART_SetConfig+0x6f4>)
 8004d94:	fba3 2302 	umull	r2, r3, r3, r2
 8004d98:	095b      	lsrs	r3, r3, #5
 8004d9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	469b      	mov	fp, r3
 8004da2:	f04f 0c00 	mov.w	ip, #0
 8004da6:	46d9      	mov	r9, fp
 8004da8:	46e2      	mov	sl, ip
 8004daa:	eb19 0309 	adds.w	r3, r9, r9
 8004dae:	eb4a 040a 	adc.w	r4, sl, sl
 8004db2:	4699      	mov	r9, r3
 8004db4:	46a2      	mov	sl, r4
 8004db6:	eb19 090b 	adds.w	r9, r9, fp
 8004dba:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004dbe:	f04f 0100 	mov.w	r1, #0
 8004dc2:	f04f 0200 	mov.w	r2, #0
 8004dc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004dce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004dd2:	4689      	mov	r9, r1
 8004dd4:	4692      	mov	sl, r2
 8004dd6:	eb1b 0509 	adds.w	r5, fp, r9
 8004dda:	eb4c 060a 	adc.w	r6, ip, sl
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	4619      	mov	r1, r3
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	f04f 0400 	mov.w	r4, #0
 8004df0:	0094      	lsls	r4, r2, #2
 8004df2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004df6:	008b      	lsls	r3, r1, #2
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4623      	mov	r3, r4
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	4631      	mov	r1, r6
 8004e00:	f7fb fa4e 	bl	80002a0 <__aeabi_uldivmod>
 8004e04:	4603      	mov	r3, r0
 8004e06:	460c      	mov	r4, r1
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4b32      	ldr	r3, [pc, #200]	; (8004ed4 <UART_SetConfig+0x6f4>)
 8004e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	2164      	movs	r1, #100	; 0x64
 8004e14:	fb01 f303 	mul.w	r3, r1, r3
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	3332      	adds	r3, #50	; 0x32
 8004e1e:	4a2d      	ldr	r2, [pc, #180]	; (8004ed4 <UART_SetConfig+0x6f4>)
 8004e20:	fba2 2303 	umull	r2, r3, r2, r3
 8004e24:	095b      	lsrs	r3, r3, #5
 8004e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e2a:	4498      	add	r8, r3
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	469b      	mov	fp, r3
 8004e30:	f04f 0c00 	mov.w	ip, #0
 8004e34:	46d9      	mov	r9, fp
 8004e36:	46e2      	mov	sl, ip
 8004e38:	eb19 0309 	adds.w	r3, r9, r9
 8004e3c:	eb4a 040a 	adc.w	r4, sl, sl
 8004e40:	4699      	mov	r9, r3
 8004e42:	46a2      	mov	sl, r4
 8004e44:	eb19 090b 	adds.w	r9, r9, fp
 8004e48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e4c:	f04f 0100 	mov.w	r1, #0
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e60:	4689      	mov	r9, r1
 8004e62:	4692      	mov	sl, r2
 8004e64:	eb1b 0509 	adds.w	r5, fp, r9
 8004e68:	eb4c 060a 	adc.w	r6, ip, sl
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	4619      	mov	r1, r3
 8004e72:	f04f 0200 	mov.w	r2, #0
 8004e76:	f04f 0300 	mov.w	r3, #0
 8004e7a:	f04f 0400 	mov.w	r4, #0
 8004e7e:	0094      	lsls	r4, r2, #2
 8004e80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e84:	008b      	lsls	r3, r1, #2
 8004e86:	461a      	mov	r2, r3
 8004e88:	4623      	mov	r3, r4
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	4631      	mov	r1, r6
 8004e8e:	f7fb fa07 	bl	80002a0 <__aeabi_uldivmod>
 8004e92:	4603      	mov	r3, r0
 8004e94:	460c      	mov	r4, r1
 8004e96:	461a      	mov	r2, r3
 8004e98:	4b0e      	ldr	r3, [pc, #56]	; (8004ed4 <UART_SetConfig+0x6f4>)
 8004e9a:	fba3 1302 	umull	r1, r3, r3, r2
 8004e9e:	095b      	lsrs	r3, r3, #5
 8004ea0:	2164      	movs	r1, #100	; 0x64
 8004ea2:	fb01 f303 	mul.w	r3, r1, r3
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	3332      	adds	r3, #50	; 0x32
 8004eac:	4a09      	ldr	r2, [pc, #36]	; (8004ed4 <UART_SetConfig+0x6f4>)
 8004eae:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	f003 020f 	and.w	r2, r3, #15
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4442      	add	r2, r8
 8004ebe:	609a      	str	r2, [r3, #8]
}
 8004ec0:	e7ff      	b.n	8004ec2 <UART_SetConfig+0x6e2>
 8004ec2:	bf00      	nop
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ecc:	40011000 	.word	0x40011000
 8004ed0:	40011400 	.word	0x40011400
 8004ed4:	51eb851f 	.word	0x51eb851f

08004ed8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d029      	beq.n	8004f46 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004efe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f02:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004f0c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8004f12:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8004f18:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8004f1e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8004f24:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8004f2a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8004f30:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8004f36:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	e034      	b.n	8004fb0 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f52:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004f5c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8004f62:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004f76:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f7a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004f84:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8004f8a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8004f90:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8004f96:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8004f9c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b087      	sub	sp, #28
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d02e      	beq.n	8005036 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004fe4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004ff4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8004ffe:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	3b01      	subs	r3, #1
 8005006:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005008:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	3b01      	subs	r3, #1
 8005010:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005012:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	3b01      	subs	r3, #1
 800501a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800501c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	3b01      	subs	r3, #1
 8005024:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005026:	4313      	orrs	r3, r2
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	609a      	str	r2, [r3, #8]
 8005034:	e03b      	b.n	80050ae <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005042:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005046:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	3b01      	subs	r3, #1
 800504e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	3b01      	subs	r3, #1
 8005056:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005058:	4313      	orrs	r3, r2
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	4313      	orrs	r3, r2
 800505e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800506c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	3b01      	subs	r3, #1
 800507a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800507c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	3b01      	subs	r3, #1
 8005084:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005086:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	3b01      	subs	r3, #1
 800508e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005090:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	3b01      	subs	r3, #1
 8005098:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800509a:	4313      	orrs	r3, r2
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	371c      	adds	r7, #28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <__errno>:
 80050bc:	4b01      	ldr	r3, [pc, #4]	; (80050c4 <__errno+0x8>)
 80050be:	6818      	ldr	r0, [r3, #0]
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	2000000c 	.word	0x2000000c

080050c8 <__libc_init_array>:
 80050c8:	b570      	push	{r4, r5, r6, lr}
 80050ca:	4e0d      	ldr	r6, [pc, #52]	; (8005100 <__libc_init_array+0x38>)
 80050cc:	4c0d      	ldr	r4, [pc, #52]	; (8005104 <__libc_init_array+0x3c>)
 80050ce:	1ba4      	subs	r4, r4, r6
 80050d0:	10a4      	asrs	r4, r4, #2
 80050d2:	2500      	movs	r5, #0
 80050d4:	42a5      	cmp	r5, r4
 80050d6:	d109      	bne.n	80050ec <__libc_init_array+0x24>
 80050d8:	4e0b      	ldr	r6, [pc, #44]	; (8005108 <__libc_init_array+0x40>)
 80050da:	4c0c      	ldr	r4, [pc, #48]	; (800510c <__libc_init_array+0x44>)
 80050dc:	f000 fc26 	bl	800592c <_init>
 80050e0:	1ba4      	subs	r4, r4, r6
 80050e2:	10a4      	asrs	r4, r4, #2
 80050e4:	2500      	movs	r5, #0
 80050e6:	42a5      	cmp	r5, r4
 80050e8:	d105      	bne.n	80050f6 <__libc_init_array+0x2e>
 80050ea:	bd70      	pop	{r4, r5, r6, pc}
 80050ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050f0:	4798      	blx	r3
 80050f2:	3501      	adds	r5, #1
 80050f4:	e7ee      	b.n	80050d4 <__libc_init_array+0xc>
 80050f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050fa:	4798      	blx	r3
 80050fc:	3501      	adds	r5, #1
 80050fe:	e7f2      	b.n	80050e6 <__libc_init_array+0x1e>
 8005100:	080059bc 	.word	0x080059bc
 8005104:	080059bc 	.word	0x080059bc
 8005108:	080059bc 	.word	0x080059bc
 800510c:	080059c0 	.word	0x080059c0

08005110 <memset>:
 8005110:	4402      	add	r2, r0
 8005112:	4603      	mov	r3, r0
 8005114:	4293      	cmp	r3, r2
 8005116:	d100      	bne.n	800511a <memset+0xa>
 8005118:	4770      	bx	lr
 800511a:	f803 1b01 	strb.w	r1, [r3], #1
 800511e:	e7f9      	b.n	8005114 <memset+0x4>

08005120 <siprintf>:
 8005120:	b40e      	push	{r1, r2, r3}
 8005122:	b500      	push	{lr}
 8005124:	b09c      	sub	sp, #112	; 0x70
 8005126:	ab1d      	add	r3, sp, #116	; 0x74
 8005128:	9002      	str	r0, [sp, #8]
 800512a:	9006      	str	r0, [sp, #24]
 800512c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005130:	4809      	ldr	r0, [pc, #36]	; (8005158 <siprintf+0x38>)
 8005132:	9107      	str	r1, [sp, #28]
 8005134:	9104      	str	r1, [sp, #16]
 8005136:	4909      	ldr	r1, [pc, #36]	; (800515c <siprintf+0x3c>)
 8005138:	f853 2b04 	ldr.w	r2, [r3], #4
 800513c:	9105      	str	r1, [sp, #20]
 800513e:	6800      	ldr	r0, [r0, #0]
 8005140:	9301      	str	r3, [sp, #4]
 8005142:	a902      	add	r1, sp, #8
 8005144:	f000 f866 	bl	8005214 <_svfiprintf_r>
 8005148:	9b02      	ldr	r3, [sp, #8]
 800514a:	2200      	movs	r2, #0
 800514c:	701a      	strb	r2, [r3, #0]
 800514e:	b01c      	add	sp, #112	; 0x70
 8005150:	f85d eb04 	ldr.w	lr, [sp], #4
 8005154:	b003      	add	sp, #12
 8005156:	4770      	bx	lr
 8005158:	2000000c 	.word	0x2000000c
 800515c:	ffff0208 	.word	0xffff0208

08005160 <__ssputs_r>:
 8005160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005164:	688e      	ldr	r6, [r1, #8]
 8005166:	429e      	cmp	r6, r3
 8005168:	4682      	mov	sl, r0
 800516a:	460c      	mov	r4, r1
 800516c:	4690      	mov	r8, r2
 800516e:	4699      	mov	r9, r3
 8005170:	d837      	bhi.n	80051e2 <__ssputs_r+0x82>
 8005172:	898a      	ldrh	r2, [r1, #12]
 8005174:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005178:	d031      	beq.n	80051de <__ssputs_r+0x7e>
 800517a:	6825      	ldr	r5, [r4, #0]
 800517c:	6909      	ldr	r1, [r1, #16]
 800517e:	1a6f      	subs	r7, r5, r1
 8005180:	6965      	ldr	r5, [r4, #20]
 8005182:	2302      	movs	r3, #2
 8005184:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005188:	fb95 f5f3 	sdiv	r5, r5, r3
 800518c:	f109 0301 	add.w	r3, r9, #1
 8005190:	443b      	add	r3, r7
 8005192:	429d      	cmp	r5, r3
 8005194:	bf38      	it	cc
 8005196:	461d      	movcc	r5, r3
 8005198:	0553      	lsls	r3, r2, #21
 800519a:	d530      	bpl.n	80051fe <__ssputs_r+0x9e>
 800519c:	4629      	mov	r1, r5
 800519e:	f000 fb2b 	bl	80057f8 <_malloc_r>
 80051a2:	4606      	mov	r6, r0
 80051a4:	b950      	cbnz	r0, 80051bc <__ssputs_r+0x5c>
 80051a6:	230c      	movs	r3, #12
 80051a8:	f8ca 3000 	str.w	r3, [sl]
 80051ac:	89a3      	ldrh	r3, [r4, #12]
 80051ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051b2:	81a3      	strh	r3, [r4, #12]
 80051b4:	f04f 30ff 	mov.w	r0, #4294967295
 80051b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051bc:	463a      	mov	r2, r7
 80051be:	6921      	ldr	r1, [r4, #16]
 80051c0:	f000 faa8 	bl	8005714 <memcpy>
 80051c4:	89a3      	ldrh	r3, [r4, #12]
 80051c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ce:	81a3      	strh	r3, [r4, #12]
 80051d0:	6126      	str	r6, [r4, #16]
 80051d2:	6165      	str	r5, [r4, #20]
 80051d4:	443e      	add	r6, r7
 80051d6:	1bed      	subs	r5, r5, r7
 80051d8:	6026      	str	r6, [r4, #0]
 80051da:	60a5      	str	r5, [r4, #8]
 80051dc:	464e      	mov	r6, r9
 80051de:	454e      	cmp	r6, r9
 80051e0:	d900      	bls.n	80051e4 <__ssputs_r+0x84>
 80051e2:	464e      	mov	r6, r9
 80051e4:	4632      	mov	r2, r6
 80051e6:	4641      	mov	r1, r8
 80051e8:	6820      	ldr	r0, [r4, #0]
 80051ea:	f000 fa9e 	bl	800572a <memmove>
 80051ee:	68a3      	ldr	r3, [r4, #8]
 80051f0:	1b9b      	subs	r3, r3, r6
 80051f2:	60a3      	str	r3, [r4, #8]
 80051f4:	6823      	ldr	r3, [r4, #0]
 80051f6:	441e      	add	r6, r3
 80051f8:	6026      	str	r6, [r4, #0]
 80051fa:	2000      	movs	r0, #0
 80051fc:	e7dc      	b.n	80051b8 <__ssputs_r+0x58>
 80051fe:	462a      	mov	r2, r5
 8005200:	f000 fb54 	bl	80058ac <_realloc_r>
 8005204:	4606      	mov	r6, r0
 8005206:	2800      	cmp	r0, #0
 8005208:	d1e2      	bne.n	80051d0 <__ssputs_r+0x70>
 800520a:	6921      	ldr	r1, [r4, #16]
 800520c:	4650      	mov	r0, sl
 800520e:	f000 faa5 	bl	800575c <_free_r>
 8005212:	e7c8      	b.n	80051a6 <__ssputs_r+0x46>

08005214 <_svfiprintf_r>:
 8005214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005218:	461d      	mov	r5, r3
 800521a:	898b      	ldrh	r3, [r1, #12]
 800521c:	061f      	lsls	r7, r3, #24
 800521e:	b09d      	sub	sp, #116	; 0x74
 8005220:	4680      	mov	r8, r0
 8005222:	460c      	mov	r4, r1
 8005224:	4616      	mov	r6, r2
 8005226:	d50f      	bpl.n	8005248 <_svfiprintf_r+0x34>
 8005228:	690b      	ldr	r3, [r1, #16]
 800522a:	b96b      	cbnz	r3, 8005248 <_svfiprintf_r+0x34>
 800522c:	2140      	movs	r1, #64	; 0x40
 800522e:	f000 fae3 	bl	80057f8 <_malloc_r>
 8005232:	6020      	str	r0, [r4, #0]
 8005234:	6120      	str	r0, [r4, #16]
 8005236:	b928      	cbnz	r0, 8005244 <_svfiprintf_r+0x30>
 8005238:	230c      	movs	r3, #12
 800523a:	f8c8 3000 	str.w	r3, [r8]
 800523e:	f04f 30ff 	mov.w	r0, #4294967295
 8005242:	e0c8      	b.n	80053d6 <_svfiprintf_r+0x1c2>
 8005244:	2340      	movs	r3, #64	; 0x40
 8005246:	6163      	str	r3, [r4, #20]
 8005248:	2300      	movs	r3, #0
 800524a:	9309      	str	r3, [sp, #36]	; 0x24
 800524c:	2320      	movs	r3, #32
 800524e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005252:	2330      	movs	r3, #48	; 0x30
 8005254:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005258:	9503      	str	r5, [sp, #12]
 800525a:	f04f 0b01 	mov.w	fp, #1
 800525e:	4637      	mov	r7, r6
 8005260:	463d      	mov	r5, r7
 8005262:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005266:	b10b      	cbz	r3, 800526c <_svfiprintf_r+0x58>
 8005268:	2b25      	cmp	r3, #37	; 0x25
 800526a:	d13e      	bne.n	80052ea <_svfiprintf_r+0xd6>
 800526c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005270:	d00b      	beq.n	800528a <_svfiprintf_r+0x76>
 8005272:	4653      	mov	r3, sl
 8005274:	4632      	mov	r2, r6
 8005276:	4621      	mov	r1, r4
 8005278:	4640      	mov	r0, r8
 800527a:	f7ff ff71 	bl	8005160 <__ssputs_r>
 800527e:	3001      	adds	r0, #1
 8005280:	f000 80a4 	beq.w	80053cc <_svfiprintf_r+0x1b8>
 8005284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005286:	4453      	add	r3, sl
 8005288:	9309      	str	r3, [sp, #36]	; 0x24
 800528a:	783b      	ldrb	r3, [r7, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 809d 	beq.w	80053cc <_svfiprintf_r+0x1b8>
 8005292:	2300      	movs	r3, #0
 8005294:	f04f 32ff 	mov.w	r2, #4294967295
 8005298:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800529c:	9304      	str	r3, [sp, #16]
 800529e:	9307      	str	r3, [sp, #28]
 80052a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052a4:	931a      	str	r3, [sp, #104]	; 0x68
 80052a6:	462f      	mov	r7, r5
 80052a8:	2205      	movs	r2, #5
 80052aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80052ae:	4850      	ldr	r0, [pc, #320]	; (80053f0 <_svfiprintf_r+0x1dc>)
 80052b0:	f7fa ffa6 	bl	8000200 <memchr>
 80052b4:	9b04      	ldr	r3, [sp, #16]
 80052b6:	b9d0      	cbnz	r0, 80052ee <_svfiprintf_r+0xda>
 80052b8:	06d9      	lsls	r1, r3, #27
 80052ba:	bf44      	itt	mi
 80052bc:	2220      	movmi	r2, #32
 80052be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052c2:	071a      	lsls	r2, r3, #28
 80052c4:	bf44      	itt	mi
 80052c6:	222b      	movmi	r2, #43	; 0x2b
 80052c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052cc:	782a      	ldrb	r2, [r5, #0]
 80052ce:	2a2a      	cmp	r2, #42	; 0x2a
 80052d0:	d015      	beq.n	80052fe <_svfiprintf_r+0xea>
 80052d2:	9a07      	ldr	r2, [sp, #28]
 80052d4:	462f      	mov	r7, r5
 80052d6:	2000      	movs	r0, #0
 80052d8:	250a      	movs	r5, #10
 80052da:	4639      	mov	r1, r7
 80052dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052e0:	3b30      	subs	r3, #48	; 0x30
 80052e2:	2b09      	cmp	r3, #9
 80052e4:	d94d      	bls.n	8005382 <_svfiprintf_r+0x16e>
 80052e6:	b1b8      	cbz	r0, 8005318 <_svfiprintf_r+0x104>
 80052e8:	e00f      	b.n	800530a <_svfiprintf_r+0xf6>
 80052ea:	462f      	mov	r7, r5
 80052ec:	e7b8      	b.n	8005260 <_svfiprintf_r+0x4c>
 80052ee:	4a40      	ldr	r2, [pc, #256]	; (80053f0 <_svfiprintf_r+0x1dc>)
 80052f0:	1a80      	subs	r0, r0, r2
 80052f2:	fa0b f000 	lsl.w	r0, fp, r0
 80052f6:	4318      	orrs	r0, r3
 80052f8:	9004      	str	r0, [sp, #16]
 80052fa:	463d      	mov	r5, r7
 80052fc:	e7d3      	b.n	80052a6 <_svfiprintf_r+0x92>
 80052fe:	9a03      	ldr	r2, [sp, #12]
 8005300:	1d11      	adds	r1, r2, #4
 8005302:	6812      	ldr	r2, [r2, #0]
 8005304:	9103      	str	r1, [sp, #12]
 8005306:	2a00      	cmp	r2, #0
 8005308:	db01      	blt.n	800530e <_svfiprintf_r+0xfa>
 800530a:	9207      	str	r2, [sp, #28]
 800530c:	e004      	b.n	8005318 <_svfiprintf_r+0x104>
 800530e:	4252      	negs	r2, r2
 8005310:	f043 0302 	orr.w	r3, r3, #2
 8005314:	9207      	str	r2, [sp, #28]
 8005316:	9304      	str	r3, [sp, #16]
 8005318:	783b      	ldrb	r3, [r7, #0]
 800531a:	2b2e      	cmp	r3, #46	; 0x2e
 800531c:	d10c      	bne.n	8005338 <_svfiprintf_r+0x124>
 800531e:	787b      	ldrb	r3, [r7, #1]
 8005320:	2b2a      	cmp	r3, #42	; 0x2a
 8005322:	d133      	bne.n	800538c <_svfiprintf_r+0x178>
 8005324:	9b03      	ldr	r3, [sp, #12]
 8005326:	1d1a      	adds	r2, r3, #4
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	9203      	str	r2, [sp, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	bfb8      	it	lt
 8005330:	f04f 33ff 	movlt.w	r3, #4294967295
 8005334:	3702      	adds	r7, #2
 8005336:	9305      	str	r3, [sp, #20]
 8005338:	4d2e      	ldr	r5, [pc, #184]	; (80053f4 <_svfiprintf_r+0x1e0>)
 800533a:	7839      	ldrb	r1, [r7, #0]
 800533c:	2203      	movs	r2, #3
 800533e:	4628      	mov	r0, r5
 8005340:	f7fa ff5e 	bl	8000200 <memchr>
 8005344:	b138      	cbz	r0, 8005356 <_svfiprintf_r+0x142>
 8005346:	2340      	movs	r3, #64	; 0x40
 8005348:	1b40      	subs	r0, r0, r5
 800534a:	fa03 f000 	lsl.w	r0, r3, r0
 800534e:	9b04      	ldr	r3, [sp, #16]
 8005350:	4303      	orrs	r3, r0
 8005352:	3701      	adds	r7, #1
 8005354:	9304      	str	r3, [sp, #16]
 8005356:	7839      	ldrb	r1, [r7, #0]
 8005358:	4827      	ldr	r0, [pc, #156]	; (80053f8 <_svfiprintf_r+0x1e4>)
 800535a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800535e:	2206      	movs	r2, #6
 8005360:	1c7e      	adds	r6, r7, #1
 8005362:	f7fa ff4d 	bl	8000200 <memchr>
 8005366:	2800      	cmp	r0, #0
 8005368:	d038      	beq.n	80053dc <_svfiprintf_r+0x1c8>
 800536a:	4b24      	ldr	r3, [pc, #144]	; (80053fc <_svfiprintf_r+0x1e8>)
 800536c:	bb13      	cbnz	r3, 80053b4 <_svfiprintf_r+0x1a0>
 800536e:	9b03      	ldr	r3, [sp, #12]
 8005370:	3307      	adds	r3, #7
 8005372:	f023 0307 	bic.w	r3, r3, #7
 8005376:	3308      	adds	r3, #8
 8005378:	9303      	str	r3, [sp, #12]
 800537a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800537c:	444b      	add	r3, r9
 800537e:	9309      	str	r3, [sp, #36]	; 0x24
 8005380:	e76d      	b.n	800525e <_svfiprintf_r+0x4a>
 8005382:	fb05 3202 	mla	r2, r5, r2, r3
 8005386:	2001      	movs	r0, #1
 8005388:	460f      	mov	r7, r1
 800538a:	e7a6      	b.n	80052da <_svfiprintf_r+0xc6>
 800538c:	2300      	movs	r3, #0
 800538e:	3701      	adds	r7, #1
 8005390:	9305      	str	r3, [sp, #20]
 8005392:	4619      	mov	r1, r3
 8005394:	250a      	movs	r5, #10
 8005396:	4638      	mov	r0, r7
 8005398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800539c:	3a30      	subs	r2, #48	; 0x30
 800539e:	2a09      	cmp	r2, #9
 80053a0:	d903      	bls.n	80053aa <_svfiprintf_r+0x196>
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0c8      	beq.n	8005338 <_svfiprintf_r+0x124>
 80053a6:	9105      	str	r1, [sp, #20]
 80053a8:	e7c6      	b.n	8005338 <_svfiprintf_r+0x124>
 80053aa:	fb05 2101 	mla	r1, r5, r1, r2
 80053ae:	2301      	movs	r3, #1
 80053b0:	4607      	mov	r7, r0
 80053b2:	e7f0      	b.n	8005396 <_svfiprintf_r+0x182>
 80053b4:	ab03      	add	r3, sp, #12
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	4622      	mov	r2, r4
 80053ba:	4b11      	ldr	r3, [pc, #68]	; (8005400 <_svfiprintf_r+0x1ec>)
 80053bc:	a904      	add	r1, sp, #16
 80053be:	4640      	mov	r0, r8
 80053c0:	f3af 8000 	nop.w
 80053c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80053c8:	4681      	mov	r9, r0
 80053ca:	d1d6      	bne.n	800537a <_svfiprintf_r+0x166>
 80053cc:	89a3      	ldrh	r3, [r4, #12]
 80053ce:	065b      	lsls	r3, r3, #25
 80053d0:	f53f af35 	bmi.w	800523e <_svfiprintf_r+0x2a>
 80053d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053d6:	b01d      	add	sp, #116	; 0x74
 80053d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053dc:	ab03      	add	r3, sp, #12
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	4622      	mov	r2, r4
 80053e2:	4b07      	ldr	r3, [pc, #28]	; (8005400 <_svfiprintf_r+0x1ec>)
 80053e4:	a904      	add	r1, sp, #16
 80053e6:	4640      	mov	r0, r8
 80053e8:	f000 f882 	bl	80054f0 <_printf_i>
 80053ec:	e7ea      	b.n	80053c4 <_svfiprintf_r+0x1b0>
 80053ee:	bf00      	nop
 80053f0:	08005980 	.word	0x08005980
 80053f4:	08005986 	.word	0x08005986
 80053f8:	0800598a 	.word	0x0800598a
 80053fc:	00000000 	.word	0x00000000
 8005400:	08005161 	.word	0x08005161

08005404 <_printf_common>:
 8005404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005408:	4691      	mov	r9, r2
 800540a:	461f      	mov	r7, r3
 800540c:	688a      	ldr	r2, [r1, #8]
 800540e:	690b      	ldr	r3, [r1, #16]
 8005410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005414:	4293      	cmp	r3, r2
 8005416:	bfb8      	it	lt
 8005418:	4613      	movlt	r3, r2
 800541a:	f8c9 3000 	str.w	r3, [r9]
 800541e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005422:	4606      	mov	r6, r0
 8005424:	460c      	mov	r4, r1
 8005426:	b112      	cbz	r2, 800542e <_printf_common+0x2a>
 8005428:	3301      	adds	r3, #1
 800542a:	f8c9 3000 	str.w	r3, [r9]
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	0699      	lsls	r1, r3, #26
 8005432:	bf42      	ittt	mi
 8005434:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005438:	3302      	addmi	r3, #2
 800543a:	f8c9 3000 	strmi.w	r3, [r9]
 800543e:	6825      	ldr	r5, [r4, #0]
 8005440:	f015 0506 	ands.w	r5, r5, #6
 8005444:	d107      	bne.n	8005456 <_printf_common+0x52>
 8005446:	f104 0a19 	add.w	sl, r4, #25
 800544a:	68e3      	ldr	r3, [r4, #12]
 800544c:	f8d9 2000 	ldr.w	r2, [r9]
 8005450:	1a9b      	subs	r3, r3, r2
 8005452:	42ab      	cmp	r3, r5
 8005454:	dc28      	bgt.n	80054a8 <_printf_common+0xa4>
 8005456:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800545a:	6822      	ldr	r2, [r4, #0]
 800545c:	3300      	adds	r3, #0
 800545e:	bf18      	it	ne
 8005460:	2301      	movne	r3, #1
 8005462:	0692      	lsls	r2, r2, #26
 8005464:	d42d      	bmi.n	80054c2 <_printf_common+0xbe>
 8005466:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800546a:	4639      	mov	r1, r7
 800546c:	4630      	mov	r0, r6
 800546e:	47c0      	blx	r8
 8005470:	3001      	adds	r0, #1
 8005472:	d020      	beq.n	80054b6 <_printf_common+0xb2>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	68e5      	ldr	r5, [r4, #12]
 8005478:	f8d9 2000 	ldr.w	r2, [r9]
 800547c:	f003 0306 	and.w	r3, r3, #6
 8005480:	2b04      	cmp	r3, #4
 8005482:	bf08      	it	eq
 8005484:	1aad      	subeq	r5, r5, r2
 8005486:	68a3      	ldr	r3, [r4, #8]
 8005488:	6922      	ldr	r2, [r4, #16]
 800548a:	bf0c      	ite	eq
 800548c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005490:	2500      	movne	r5, #0
 8005492:	4293      	cmp	r3, r2
 8005494:	bfc4      	itt	gt
 8005496:	1a9b      	subgt	r3, r3, r2
 8005498:	18ed      	addgt	r5, r5, r3
 800549a:	f04f 0900 	mov.w	r9, #0
 800549e:	341a      	adds	r4, #26
 80054a0:	454d      	cmp	r5, r9
 80054a2:	d11a      	bne.n	80054da <_printf_common+0xd6>
 80054a4:	2000      	movs	r0, #0
 80054a6:	e008      	b.n	80054ba <_printf_common+0xb6>
 80054a8:	2301      	movs	r3, #1
 80054aa:	4652      	mov	r2, sl
 80054ac:	4639      	mov	r1, r7
 80054ae:	4630      	mov	r0, r6
 80054b0:	47c0      	blx	r8
 80054b2:	3001      	adds	r0, #1
 80054b4:	d103      	bne.n	80054be <_printf_common+0xba>
 80054b6:	f04f 30ff 	mov.w	r0, #4294967295
 80054ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054be:	3501      	adds	r5, #1
 80054c0:	e7c3      	b.n	800544a <_printf_common+0x46>
 80054c2:	18e1      	adds	r1, r4, r3
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	2030      	movs	r0, #48	; 0x30
 80054c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054cc:	4422      	add	r2, r4
 80054ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054d6:	3302      	adds	r3, #2
 80054d8:	e7c5      	b.n	8005466 <_printf_common+0x62>
 80054da:	2301      	movs	r3, #1
 80054dc:	4622      	mov	r2, r4
 80054de:	4639      	mov	r1, r7
 80054e0:	4630      	mov	r0, r6
 80054e2:	47c0      	blx	r8
 80054e4:	3001      	adds	r0, #1
 80054e6:	d0e6      	beq.n	80054b6 <_printf_common+0xb2>
 80054e8:	f109 0901 	add.w	r9, r9, #1
 80054ec:	e7d8      	b.n	80054a0 <_printf_common+0x9c>
	...

080054f0 <_printf_i>:
 80054f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80054f8:	460c      	mov	r4, r1
 80054fa:	7e09      	ldrb	r1, [r1, #24]
 80054fc:	b085      	sub	sp, #20
 80054fe:	296e      	cmp	r1, #110	; 0x6e
 8005500:	4617      	mov	r7, r2
 8005502:	4606      	mov	r6, r0
 8005504:	4698      	mov	r8, r3
 8005506:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005508:	f000 80b3 	beq.w	8005672 <_printf_i+0x182>
 800550c:	d822      	bhi.n	8005554 <_printf_i+0x64>
 800550e:	2963      	cmp	r1, #99	; 0x63
 8005510:	d036      	beq.n	8005580 <_printf_i+0x90>
 8005512:	d80a      	bhi.n	800552a <_printf_i+0x3a>
 8005514:	2900      	cmp	r1, #0
 8005516:	f000 80b9 	beq.w	800568c <_printf_i+0x19c>
 800551a:	2958      	cmp	r1, #88	; 0x58
 800551c:	f000 8083 	beq.w	8005626 <_printf_i+0x136>
 8005520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005524:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005528:	e032      	b.n	8005590 <_printf_i+0xa0>
 800552a:	2964      	cmp	r1, #100	; 0x64
 800552c:	d001      	beq.n	8005532 <_printf_i+0x42>
 800552e:	2969      	cmp	r1, #105	; 0x69
 8005530:	d1f6      	bne.n	8005520 <_printf_i+0x30>
 8005532:	6820      	ldr	r0, [r4, #0]
 8005534:	6813      	ldr	r3, [r2, #0]
 8005536:	0605      	lsls	r5, r0, #24
 8005538:	f103 0104 	add.w	r1, r3, #4
 800553c:	d52a      	bpl.n	8005594 <_printf_i+0xa4>
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6011      	str	r1, [r2, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	da03      	bge.n	800554e <_printf_i+0x5e>
 8005546:	222d      	movs	r2, #45	; 0x2d
 8005548:	425b      	negs	r3, r3
 800554a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800554e:	486f      	ldr	r0, [pc, #444]	; (800570c <_printf_i+0x21c>)
 8005550:	220a      	movs	r2, #10
 8005552:	e039      	b.n	80055c8 <_printf_i+0xd8>
 8005554:	2973      	cmp	r1, #115	; 0x73
 8005556:	f000 809d 	beq.w	8005694 <_printf_i+0x1a4>
 800555a:	d808      	bhi.n	800556e <_printf_i+0x7e>
 800555c:	296f      	cmp	r1, #111	; 0x6f
 800555e:	d020      	beq.n	80055a2 <_printf_i+0xb2>
 8005560:	2970      	cmp	r1, #112	; 0x70
 8005562:	d1dd      	bne.n	8005520 <_printf_i+0x30>
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	f043 0320 	orr.w	r3, r3, #32
 800556a:	6023      	str	r3, [r4, #0]
 800556c:	e003      	b.n	8005576 <_printf_i+0x86>
 800556e:	2975      	cmp	r1, #117	; 0x75
 8005570:	d017      	beq.n	80055a2 <_printf_i+0xb2>
 8005572:	2978      	cmp	r1, #120	; 0x78
 8005574:	d1d4      	bne.n	8005520 <_printf_i+0x30>
 8005576:	2378      	movs	r3, #120	; 0x78
 8005578:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800557c:	4864      	ldr	r0, [pc, #400]	; (8005710 <_printf_i+0x220>)
 800557e:	e055      	b.n	800562c <_printf_i+0x13c>
 8005580:	6813      	ldr	r3, [r2, #0]
 8005582:	1d19      	adds	r1, r3, #4
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6011      	str	r1, [r2, #0]
 8005588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800558c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005590:	2301      	movs	r3, #1
 8005592:	e08c      	b.n	80056ae <_printf_i+0x1be>
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6011      	str	r1, [r2, #0]
 8005598:	f010 0f40 	tst.w	r0, #64	; 0x40
 800559c:	bf18      	it	ne
 800559e:	b21b      	sxthne	r3, r3
 80055a0:	e7cf      	b.n	8005542 <_printf_i+0x52>
 80055a2:	6813      	ldr	r3, [r2, #0]
 80055a4:	6825      	ldr	r5, [r4, #0]
 80055a6:	1d18      	adds	r0, r3, #4
 80055a8:	6010      	str	r0, [r2, #0]
 80055aa:	0628      	lsls	r0, r5, #24
 80055ac:	d501      	bpl.n	80055b2 <_printf_i+0xc2>
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	e002      	b.n	80055b8 <_printf_i+0xc8>
 80055b2:	0668      	lsls	r0, r5, #25
 80055b4:	d5fb      	bpl.n	80055ae <_printf_i+0xbe>
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	4854      	ldr	r0, [pc, #336]	; (800570c <_printf_i+0x21c>)
 80055ba:	296f      	cmp	r1, #111	; 0x6f
 80055bc:	bf14      	ite	ne
 80055be:	220a      	movne	r2, #10
 80055c0:	2208      	moveq	r2, #8
 80055c2:	2100      	movs	r1, #0
 80055c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055c8:	6865      	ldr	r5, [r4, #4]
 80055ca:	60a5      	str	r5, [r4, #8]
 80055cc:	2d00      	cmp	r5, #0
 80055ce:	f2c0 8095 	blt.w	80056fc <_printf_i+0x20c>
 80055d2:	6821      	ldr	r1, [r4, #0]
 80055d4:	f021 0104 	bic.w	r1, r1, #4
 80055d8:	6021      	str	r1, [r4, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d13d      	bne.n	800565a <_printf_i+0x16a>
 80055de:	2d00      	cmp	r5, #0
 80055e0:	f040 808e 	bne.w	8005700 <_printf_i+0x210>
 80055e4:	4665      	mov	r5, ip
 80055e6:	2a08      	cmp	r2, #8
 80055e8:	d10b      	bne.n	8005602 <_printf_i+0x112>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	07db      	lsls	r3, r3, #31
 80055ee:	d508      	bpl.n	8005602 <_printf_i+0x112>
 80055f0:	6923      	ldr	r3, [r4, #16]
 80055f2:	6862      	ldr	r2, [r4, #4]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	bfde      	ittt	le
 80055f8:	2330      	movle	r3, #48	; 0x30
 80055fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005602:	ebac 0305 	sub.w	r3, ip, r5
 8005606:	6123      	str	r3, [r4, #16]
 8005608:	f8cd 8000 	str.w	r8, [sp]
 800560c:	463b      	mov	r3, r7
 800560e:	aa03      	add	r2, sp, #12
 8005610:	4621      	mov	r1, r4
 8005612:	4630      	mov	r0, r6
 8005614:	f7ff fef6 	bl	8005404 <_printf_common>
 8005618:	3001      	adds	r0, #1
 800561a:	d14d      	bne.n	80056b8 <_printf_i+0x1c8>
 800561c:	f04f 30ff 	mov.w	r0, #4294967295
 8005620:	b005      	add	sp, #20
 8005622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005626:	4839      	ldr	r0, [pc, #228]	; (800570c <_printf_i+0x21c>)
 8005628:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800562c:	6813      	ldr	r3, [r2, #0]
 800562e:	6821      	ldr	r1, [r4, #0]
 8005630:	1d1d      	adds	r5, r3, #4
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6015      	str	r5, [r2, #0]
 8005636:	060a      	lsls	r2, r1, #24
 8005638:	d50b      	bpl.n	8005652 <_printf_i+0x162>
 800563a:	07ca      	lsls	r2, r1, #31
 800563c:	bf44      	itt	mi
 800563e:	f041 0120 	orrmi.w	r1, r1, #32
 8005642:	6021      	strmi	r1, [r4, #0]
 8005644:	b91b      	cbnz	r3, 800564e <_printf_i+0x15e>
 8005646:	6822      	ldr	r2, [r4, #0]
 8005648:	f022 0220 	bic.w	r2, r2, #32
 800564c:	6022      	str	r2, [r4, #0]
 800564e:	2210      	movs	r2, #16
 8005650:	e7b7      	b.n	80055c2 <_printf_i+0xd2>
 8005652:	064d      	lsls	r5, r1, #25
 8005654:	bf48      	it	mi
 8005656:	b29b      	uxthmi	r3, r3
 8005658:	e7ef      	b.n	800563a <_printf_i+0x14a>
 800565a:	4665      	mov	r5, ip
 800565c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005660:	fb02 3311 	mls	r3, r2, r1, r3
 8005664:	5cc3      	ldrb	r3, [r0, r3]
 8005666:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800566a:	460b      	mov	r3, r1
 800566c:	2900      	cmp	r1, #0
 800566e:	d1f5      	bne.n	800565c <_printf_i+0x16c>
 8005670:	e7b9      	b.n	80055e6 <_printf_i+0xf6>
 8005672:	6813      	ldr	r3, [r2, #0]
 8005674:	6825      	ldr	r5, [r4, #0]
 8005676:	6961      	ldr	r1, [r4, #20]
 8005678:	1d18      	adds	r0, r3, #4
 800567a:	6010      	str	r0, [r2, #0]
 800567c:	0628      	lsls	r0, r5, #24
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	d501      	bpl.n	8005686 <_printf_i+0x196>
 8005682:	6019      	str	r1, [r3, #0]
 8005684:	e002      	b.n	800568c <_printf_i+0x19c>
 8005686:	066a      	lsls	r2, r5, #25
 8005688:	d5fb      	bpl.n	8005682 <_printf_i+0x192>
 800568a:	8019      	strh	r1, [r3, #0]
 800568c:	2300      	movs	r3, #0
 800568e:	6123      	str	r3, [r4, #16]
 8005690:	4665      	mov	r5, ip
 8005692:	e7b9      	b.n	8005608 <_printf_i+0x118>
 8005694:	6813      	ldr	r3, [r2, #0]
 8005696:	1d19      	adds	r1, r3, #4
 8005698:	6011      	str	r1, [r2, #0]
 800569a:	681d      	ldr	r5, [r3, #0]
 800569c:	6862      	ldr	r2, [r4, #4]
 800569e:	2100      	movs	r1, #0
 80056a0:	4628      	mov	r0, r5
 80056a2:	f7fa fdad 	bl	8000200 <memchr>
 80056a6:	b108      	cbz	r0, 80056ac <_printf_i+0x1bc>
 80056a8:	1b40      	subs	r0, r0, r5
 80056aa:	6060      	str	r0, [r4, #4]
 80056ac:	6863      	ldr	r3, [r4, #4]
 80056ae:	6123      	str	r3, [r4, #16]
 80056b0:	2300      	movs	r3, #0
 80056b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056b6:	e7a7      	b.n	8005608 <_printf_i+0x118>
 80056b8:	6923      	ldr	r3, [r4, #16]
 80056ba:	462a      	mov	r2, r5
 80056bc:	4639      	mov	r1, r7
 80056be:	4630      	mov	r0, r6
 80056c0:	47c0      	blx	r8
 80056c2:	3001      	adds	r0, #1
 80056c4:	d0aa      	beq.n	800561c <_printf_i+0x12c>
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	079b      	lsls	r3, r3, #30
 80056ca:	d413      	bmi.n	80056f4 <_printf_i+0x204>
 80056cc:	68e0      	ldr	r0, [r4, #12]
 80056ce:	9b03      	ldr	r3, [sp, #12]
 80056d0:	4298      	cmp	r0, r3
 80056d2:	bfb8      	it	lt
 80056d4:	4618      	movlt	r0, r3
 80056d6:	e7a3      	b.n	8005620 <_printf_i+0x130>
 80056d8:	2301      	movs	r3, #1
 80056da:	464a      	mov	r2, r9
 80056dc:	4639      	mov	r1, r7
 80056de:	4630      	mov	r0, r6
 80056e0:	47c0      	blx	r8
 80056e2:	3001      	adds	r0, #1
 80056e4:	d09a      	beq.n	800561c <_printf_i+0x12c>
 80056e6:	3501      	adds	r5, #1
 80056e8:	68e3      	ldr	r3, [r4, #12]
 80056ea:	9a03      	ldr	r2, [sp, #12]
 80056ec:	1a9b      	subs	r3, r3, r2
 80056ee:	42ab      	cmp	r3, r5
 80056f0:	dcf2      	bgt.n	80056d8 <_printf_i+0x1e8>
 80056f2:	e7eb      	b.n	80056cc <_printf_i+0x1dc>
 80056f4:	2500      	movs	r5, #0
 80056f6:	f104 0919 	add.w	r9, r4, #25
 80056fa:	e7f5      	b.n	80056e8 <_printf_i+0x1f8>
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1ac      	bne.n	800565a <_printf_i+0x16a>
 8005700:	7803      	ldrb	r3, [r0, #0]
 8005702:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005706:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800570a:	e76c      	b.n	80055e6 <_printf_i+0xf6>
 800570c:	08005991 	.word	0x08005991
 8005710:	080059a2 	.word	0x080059a2

08005714 <memcpy>:
 8005714:	b510      	push	{r4, lr}
 8005716:	1e43      	subs	r3, r0, #1
 8005718:	440a      	add	r2, r1
 800571a:	4291      	cmp	r1, r2
 800571c:	d100      	bne.n	8005720 <memcpy+0xc>
 800571e:	bd10      	pop	{r4, pc}
 8005720:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005724:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005728:	e7f7      	b.n	800571a <memcpy+0x6>

0800572a <memmove>:
 800572a:	4288      	cmp	r0, r1
 800572c:	b510      	push	{r4, lr}
 800572e:	eb01 0302 	add.w	r3, r1, r2
 8005732:	d807      	bhi.n	8005744 <memmove+0x1a>
 8005734:	1e42      	subs	r2, r0, #1
 8005736:	4299      	cmp	r1, r3
 8005738:	d00a      	beq.n	8005750 <memmove+0x26>
 800573a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800573e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005742:	e7f8      	b.n	8005736 <memmove+0xc>
 8005744:	4283      	cmp	r3, r0
 8005746:	d9f5      	bls.n	8005734 <memmove+0xa>
 8005748:	1881      	adds	r1, r0, r2
 800574a:	1ad2      	subs	r2, r2, r3
 800574c:	42d3      	cmn	r3, r2
 800574e:	d100      	bne.n	8005752 <memmove+0x28>
 8005750:	bd10      	pop	{r4, pc}
 8005752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005756:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800575a:	e7f7      	b.n	800574c <memmove+0x22>

0800575c <_free_r>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	4605      	mov	r5, r0
 8005760:	2900      	cmp	r1, #0
 8005762:	d045      	beq.n	80057f0 <_free_r+0x94>
 8005764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005768:	1f0c      	subs	r4, r1, #4
 800576a:	2b00      	cmp	r3, #0
 800576c:	bfb8      	it	lt
 800576e:	18e4      	addlt	r4, r4, r3
 8005770:	f000 f8d2 	bl	8005918 <__malloc_lock>
 8005774:	4a1f      	ldr	r2, [pc, #124]	; (80057f4 <_free_r+0x98>)
 8005776:	6813      	ldr	r3, [r2, #0]
 8005778:	4610      	mov	r0, r2
 800577a:	b933      	cbnz	r3, 800578a <_free_r+0x2e>
 800577c:	6063      	str	r3, [r4, #4]
 800577e:	6014      	str	r4, [r2, #0]
 8005780:	4628      	mov	r0, r5
 8005782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005786:	f000 b8c8 	b.w	800591a <__malloc_unlock>
 800578a:	42a3      	cmp	r3, r4
 800578c:	d90c      	bls.n	80057a8 <_free_r+0x4c>
 800578e:	6821      	ldr	r1, [r4, #0]
 8005790:	1862      	adds	r2, r4, r1
 8005792:	4293      	cmp	r3, r2
 8005794:	bf04      	itt	eq
 8005796:	681a      	ldreq	r2, [r3, #0]
 8005798:	685b      	ldreq	r3, [r3, #4]
 800579a:	6063      	str	r3, [r4, #4]
 800579c:	bf04      	itt	eq
 800579e:	1852      	addeq	r2, r2, r1
 80057a0:	6022      	streq	r2, [r4, #0]
 80057a2:	6004      	str	r4, [r0, #0]
 80057a4:	e7ec      	b.n	8005780 <_free_r+0x24>
 80057a6:	4613      	mov	r3, r2
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	b10a      	cbz	r2, 80057b0 <_free_r+0x54>
 80057ac:	42a2      	cmp	r2, r4
 80057ae:	d9fa      	bls.n	80057a6 <_free_r+0x4a>
 80057b0:	6819      	ldr	r1, [r3, #0]
 80057b2:	1858      	adds	r0, r3, r1
 80057b4:	42a0      	cmp	r0, r4
 80057b6:	d10b      	bne.n	80057d0 <_free_r+0x74>
 80057b8:	6820      	ldr	r0, [r4, #0]
 80057ba:	4401      	add	r1, r0
 80057bc:	1858      	adds	r0, r3, r1
 80057be:	4282      	cmp	r2, r0
 80057c0:	6019      	str	r1, [r3, #0]
 80057c2:	d1dd      	bne.n	8005780 <_free_r+0x24>
 80057c4:	6810      	ldr	r0, [r2, #0]
 80057c6:	6852      	ldr	r2, [r2, #4]
 80057c8:	605a      	str	r2, [r3, #4]
 80057ca:	4401      	add	r1, r0
 80057cc:	6019      	str	r1, [r3, #0]
 80057ce:	e7d7      	b.n	8005780 <_free_r+0x24>
 80057d0:	d902      	bls.n	80057d8 <_free_r+0x7c>
 80057d2:	230c      	movs	r3, #12
 80057d4:	602b      	str	r3, [r5, #0]
 80057d6:	e7d3      	b.n	8005780 <_free_r+0x24>
 80057d8:	6820      	ldr	r0, [r4, #0]
 80057da:	1821      	adds	r1, r4, r0
 80057dc:	428a      	cmp	r2, r1
 80057de:	bf04      	itt	eq
 80057e0:	6811      	ldreq	r1, [r2, #0]
 80057e2:	6852      	ldreq	r2, [r2, #4]
 80057e4:	6062      	str	r2, [r4, #4]
 80057e6:	bf04      	itt	eq
 80057e8:	1809      	addeq	r1, r1, r0
 80057ea:	6021      	streq	r1, [r4, #0]
 80057ec:	605c      	str	r4, [r3, #4]
 80057ee:	e7c7      	b.n	8005780 <_free_r+0x24>
 80057f0:	bd38      	pop	{r3, r4, r5, pc}
 80057f2:	bf00      	nop
 80057f4:	20000094 	.word	0x20000094

080057f8 <_malloc_r>:
 80057f8:	b570      	push	{r4, r5, r6, lr}
 80057fa:	1ccd      	adds	r5, r1, #3
 80057fc:	f025 0503 	bic.w	r5, r5, #3
 8005800:	3508      	adds	r5, #8
 8005802:	2d0c      	cmp	r5, #12
 8005804:	bf38      	it	cc
 8005806:	250c      	movcc	r5, #12
 8005808:	2d00      	cmp	r5, #0
 800580a:	4606      	mov	r6, r0
 800580c:	db01      	blt.n	8005812 <_malloc_r+0x1a>
 800580e:	42a9      	cmp	r1, r5
 8005810:	d903      	bls.n	800581a <_malloc_r+0x22>
 8005812:	230c      	movs	r3, #12
 8005814:	6033      	str	r3, [r6, #0]
 8005816:	2000      	movs	r0, #0
 8005818:	bd70      	pop	{r4, r5, r6, pc}
 800581a:	f000 f87d 	bl	8005918 <__malloc_lock>
 800581e:	4a21      	ldr	r2, [pc, #132]	; (80058a4 <_malloc_r+0xac>)
 8005820:	6814      	ldr	r4, [r2, #0]
 8005822:	4621      	mov	r1, r4
 8005824:	b991      	cbnz	r1, 800584c <_malloc_r+0x54>
 8005826:	4c20      	ldr	r4, [pc, #128]	; (80058a8 <_malloc_r+0xb0>)
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	b91b      	cbnz	r3, 8005834 <_malloc_r+0x3c>
 800582c:	4630      	mov	r0, r6
 800582e:	f000 f863 	bl	80058f8 <_sbrk_r>
 8005832:	6020      	str	r0, [r4, #0]
 8005834:	4629      	mov	r1, r5
 8005836:	4630      	mov	r0, r6
 8005838:	f000 f85e 	bl	80058f8 <_sbrk_r>
 800583c:	1c43      	adds	r3, r0, #1
 800583e:	d124      	bne.n	800588a <_malloc_r+0x92>
 8005840:	230c      	movs	r3, #12
 8005842:	6033      	str	r3, [r6, #0]
 8005844:	4630      	mov	r0, r6
 8005846:	f000 f868 	bl	800591a <__malloc_unlock>
 800584a:	e7e4      	b.n	8005816 <_malloc_r+0x1e>
 800584c:	680b      	ldr	r3, [r1, #0]
 800584e:	1b5b      	subs	r3, r3, r5
 8005850:	d418      	bmi.n	8005884 <_malloc_r+0x8c>
 8005852:	2b0b      	cmp	r3, #11
 8005854:	d90f      	bls.n	8005876 <_malloc_r+0x7e>
 8005856:	600b      	str	r3, [r1, #0]
 8005858:	50cd      	str	r5, [r1, r3]
 800585a:	18cc      	adds	r4, r1, r3
 800585c:	4630      	mov	r0, r6
 800585e:	f000 f85c 	bl	800591a <__malloc_unlock>
 8005862:	f104 000b 	add.w	r0, r4, #11
 8005866:	1d23      	adds	r3, r4, #4
 8005868:	f020 0007 	bic.w	r0, r0, #7
 800586c:	1ac3      	subs	r3, r0, r3
 800586e:	d0d3      	beq.n	8005818 <_malloc_r+0x20>
 8005870:	425a      	negs	r2, r3
 8005872:	50e2      	str	r2, [r4, r3]
 8005874:	e7d0      	b.n	8005818 <_malloc_r+0x20>
 8005876:	428c      	cmp	r4, r1
 8005878:	684b      	ldr	r3, [r1, #4]
 800587a:	bf16      	itet	ne
 800587c:	6063      	strne	r3, [r4, #4]
 800587e:	6013      	streq	r3, [r2, #0]
 8005880:	460c      	movne	r4, r1
 8005882:	e7eb      	b.n	800585c <_malloc_r+0x64>
 8005884:	460c      	mov	r4, r1
 8005886:	6849      	ldr	r1, [r1, #4]
 8005888:	e7cc      	b.n	8005824 <_malloc_r+0x2c>
 800588a:	1cc4      	adds	r4, r0, #3
 800588c:	f024 0403 	bic.w	r4, r4, #3
 8005890:	42a0      	cmp	r0, r4
 8005892:	d005      	beq.n	80058a0 <_malloc_r+0xa8>
 8005894:	1a21      	subs	r1, r4, r0
 8005896:	4630      	mov	r0, r6
 8005898:	f000 f82e 	bl	80058f8 <_sbrk_r>
 800589c:	3001      	adds	r0, #1
 800589e:	d0cf      	beq.n	8005840 <_malloc_r+0x48>
 80058a0:	6025      	str	r5, [r4, #0]
 80058a2:	e7db      	b.n	800585c <_malloc_r+0x64>
 80058a4:	20000094 	.word	0x20000094
 80058a8:	20000098 	.word	0x20000098

080058ac <_realloc_r>:
 80058ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ae:	4607      	mov	r7, r0
 80058b0:	4614      	mov	r4, r2
 80058b2:	460e      	mov	r6, r1
 80058b4:	b921      	cbnz	r1, 80058c0 <_realloc_r+0x14>
 80058b6:	4611      	mov	r1, r2
 80058b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80058bc:	f7ff bf9c 	b.w	80057f8 <_malloc_r>
 80058c0:	b922      	cbnz	r2, 80058cc <_realloc_r+0x20>
 80058c2:	f7ff ff4b 	bl	800575c <_free_r>
 80058c6:	4625      	mov	r5, r4
 80058c8:	4628      	mov	r0, r5
 80058ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058cc:	f000 f826 	bl	800591c <_malloc_usable_size_r>
 80058d0:	42a0      	cmp	r0, r4
 80058d2:	d20f      	bcs.n	80058f4 <_realloc_r+0x48>
 80058d4:	4621      	mov	r1, r4
 80058d6:	4638      	mov	r0, r7
 80058d8:	f7ff ff8e 	bl	80057f8 <_malloc_r>
 80058dc:	4605      	mov	r5, r0
 80058de:	2800      	cmp	r0, #0
 80058e0:	d0f2      	beq.n	80058c8 <_realloc_r+0x1c>
 80058e2:	4631      	mov	r1, r6
 80058e4:	4622      	mov	r2, r4
 80058e6:	f7ff ff15 	bl	8005714 <memcpy>
 80058ea:	4631      	mov	r1, r6
 80058ec:	4638      	mov	r0, r7
 80058ee:	f7ff ff35 	bl	800575c <_free_r>
 80058f2:	e7e9      	b.n	80058c8 <_realloc_r+0x1c>
 80058f4:	4635      	mov	r5, r6
 80058f6:	e7e7      	b.n	80058c8 <_realloc_r+0x1c>

080058f8 <_sbrk_r>:
 80058f8:	b538      	push	{r3, r4, r5, lr}
 80058fa:	4c06      	ldr	r4, [pc, #24]	; (8005914 <_sbrk_r+0x1c>)
 80058fc:	2300      	movs	r3, #0
 80058fe:	4605      	mov	r5, r0
 8005900:	4608      	mov	r0, r1
 8005902:	6023      	str	r3, [r4, #0]
 8005904:	f7fb fee0 	bl	80016c8 <_sbrk>
 8005908:	1c43      	adds	r3, r0, #1
 800590a:	d102      	bne.n	8005912 <_sbrk_r+0x1a>
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	b103      	cbz	r3, 8005912 <_sbrk_r+0x1a>
 8005910:	602b      	str	r3, [r5, #0]
 8005912:	bd38      	pop	{r3, r4, r5, pc}
 8005914:	200002e8 	.word	0x200002e8

08005918 <__malloc_lock>:
 8005918:	4770      	bx	lr

0800591a <__malloc_unlock>:
 800591a:	4770      	bx	lr

0800591c <_malloc_usable_size_r>:
 800591c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005920:	1f18      	subs	r0, r3, #4
 8005922:	2b00      	cmp	r3, #0
 8005924:	bfbc      	itt	lt
 8005926:	580b      	ldrlt	r3, [r1, r0]
 8005928:	18c0      	addlt	r0, r0, r3
 800592a:	4770      	bx	lr

0800592c <_init>:
 800592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592e:	bf00      	nop
 8005930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005932:	bc08      	pop	{r3}
 8005934:	469e      	mov	lr, r3
 8005936:	4770      	bx	lr

08005938 <_fini>:
 8005938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593a:	bf00      	nop
 800593c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800593e:	bc08      	pop	{r3}
 8005940:	469e      	mov	lr, r3
 8005942:	4770      	bx	lr
