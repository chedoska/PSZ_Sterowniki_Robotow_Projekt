
ball_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088a0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  08008a50  08008a50  00018a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090b8  080090b8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080090b8  080090b8  000190b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090c0  080090c0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090c0  080090c0  000190c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090c4  080090c4  000190c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080090c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001dc  080092a4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  080092a4  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015304  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b61  00000000  00000000  00035510  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001310  00000000  00000000  00038078  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a8  00000000  00000000  00039388  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025dde  00000000  00000000  0003a530  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f630  00000000  00000000  0006030e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e2671  00000000  00000000  0006f93e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00151faf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c40  00000000  00000000  0015202c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008a38 	.word	0x08008a38

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08008a38 	.word	0x08008a38

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b972 	b.w	8000f64 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14b      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4615      	mov	r5, r2
 8000caa:	d967      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0720 	rsb	r7, r2, #32
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	fa20 f707 	lsr.w	r7, r0, r7
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	ea47 0803 	orr.w	r8, r7, r3
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd0:	fa1f fc85 	uxth.w	ip, r5
 8000cd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cea:	f080 811b 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8118 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000cf4:	3f02      	subs	r7, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8107 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	f240 8104 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000d20:	3802      	subs	r0, #2
 8000d22:	442c      	add	r4, r5
 8000d24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	b11e      	cbz	r6, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c6 4300 	strd	r4, r3, [r6]
 8000d38:	4639      	mov	r1, r7
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xbe>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80eb 	beq.w	8000f1e <__udivmoddi4+0x286>
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4639      	mov	r1, r7
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f783 	clz	r7, r3
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d147      	bne.n	8000dee <__udivmoddi4+0x156>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd0>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80fa 	bhi.w	8000f5c <__udivmoddi4+0x2c4>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4698      	mov	r8, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000d76:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xe8>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 808f 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d8a:	1b49      	subs	r1, r1, r5
 8000d8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d90:	fa1f f885 	uxth.w	r8, r5
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb08 f10c 	mul.w	r1, r8, ip
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000dac:	18eb      	adds	r3, r5, r3
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	f200 80cd 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x14c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x14a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80b6 	bhi.w	8000f4e <__udivmoddi4+0x2b6>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e79f      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dee:	f1c7 0c20 	rsb	ip, r7, #32
 8000df2:	40bb      	lsls	r3, r7
 8000df4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000df8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000e00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e0c:	4325      	orrs	r5, r4
 8000e0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e12:	0c2c      	lsrs	r4, r5, #16
 8000e14:	fb08 3319 	mls	r3, r8, r9, r3
 8000e18:	fa1f fa8e 	uxth.w	sl, lr
 8000e1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e20:	fb09 f40a 	mul.w	r4, r9, sl
 8000e24:	429c      	cmp	r4, r3
 8000e26:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1e 0303 	adds.w	r3, lr, r3
 8000e34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e38:	f080 8087 	bcs.w	8000f4a <__udivmoddi4+0x2b2>
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	f240 8084 	bls.w	8000f4a <__udivmoddi4+0x2b2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4473      	add	r3, lr
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	b2ad      	uxth	r5, r5
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1e 0404 	adds.w	r4, lr, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e68:	d26b      	bcs.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6a:	45a2      	cmp	sl, r4
 8000e6c:	d969      	bls.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4474      	add	r4, lr
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7a:	eba4 040a 	sub.w	r4, r4, sl
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c2      	mov	sl, r8
 8000e82:	464b      	mov	r3, r9
 8000e84:	d354      	bcc.n	8000f30 <__udivmoddi4+0x298>
 8000e86:	d051      	beq.n	8000f2c <__udivmoddi4+0x294>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d069      	beq.n	8000f60 <__udivmoddi4+0x2c8>
 8000e8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e90:	eb64 0403 	sbc.w	r4, r4, r3
 8000e94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	40fc      	lsrs	r4, r7
 8000e9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ebe:	4338      	orrs	r0, r7
 8000ec0:	0c01      	lsrs	r1, r0, #16
 8000ec2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ec6:	fa1f f885 	uxth.w	r8, r5
 8000eca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb07 f308 	mul.w	r3, r7, r8
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	fa04 f402 	lsl.w	r4, r4, r2
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x256>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ee4:	d22f      	bcs.n	8000f46 <__udivmoddi4+0x2ae>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d92d      	bls.n	8000f46 <__udivmoddi4+0x2ae>
 8000eea:	3f02      	subs	r7, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	b281      	uxth	r1, r0
 8000ef2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb00 f308 	mul.w	r3, r0, r8
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x27e>
 8000f06:	1869      	adds	r1, r5, r1
 8000f08:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0c:	d217      	bcs.n	8000f3e <__udivmoddi4+0x2a6>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d915      	bls.n	8000f3e <__udivmoddi4+0x2a6>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4429      	add	r1, r5
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f1c:	e73b      	b.n	8000d96 <__udivmoddi4+0xfe>
 8000f1e:	4637      	mov	r7, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	e709      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f24:	4607      	mov	r7, r0
 8000f26:	e6e7      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fb      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f2c:	4541      	cmp	r1, r8
 8000f2e:	d2ab      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f34:	eb69 020e 	sbc.w	r2, r9, lr
 8000f38:	3801      	subs	r0, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	e7a4      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f3e:	4660      	mov	r0, ip
 8000f40:	e7e9      	b.n	8000f16 <__udivmoddi4+0x27e>
 8000f42:	4618      	mov	r0, r3
 8000f44:	e795      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f46:	4667      	mov	r7, ip
 8000f48:	e7d1      	b.n	8000eee <__udivmoddi4+0x256>
 8000f4a:	4681      	mov	r9, r0
 8000f4c:	e77c      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	442c      	add	r4, r5
 8000f52:	e747      	b.n	8000de4 <__udivmoddi4+0x14c>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	442b      	add	r3, r5
 8000f5a:	e72f      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	e708      	b.n	8000d72 <__udivmoddi4+0xda>
 8000f60:	4637      	mov	r7, r6
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0xa0>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <ball_ctrl_init>:
 *      Author: chedo
 */
#include "ball_control.h"

void ball_ctrl_init(Ball_control_data *ball_data, uint16_t X_start_pos, uint16_t Y_start_pos)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]
 8000f74:	4613      	mov	r3, r2
 8000f76:	803b      	strh	r3, [r7, #0]
	ball_ctrl_restetDrift(ball_data);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f000 f81c 	bl	8000fb6 <ball_ctrl_restetDrift>
	ball_data->X_screen_pos = X_start_pos;
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	ee07 3a90 	vmov	s15, r3
 8000f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	edc3 7a03 	vstr	s15, [r3, #12]
	ball_data->Y_screen_pos = Y_start_pos;
 8000f8e:	883b      	ldrh	r3, [r7, #0]
 8000f90:	ee07 3a90 	vmov	s15, r3
 8000f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	edc3 7a04 	vstr	s15, [r3, #16]
	ball_data->X_screen_speed = 0;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	615a      	str	r2, [r3, #20]
	ball_data->Y_screen_speed = 0;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <ball_ctrl_restetDrift>:

void ball_ctrl_restetDrift(Ball_control_data *ball_data)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
	ball_data->ctrlX_angle = 0;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f04f 0200 	mov.w	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
	ball_data->ctrlY_angle = 0;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	605a      	str	r2, [r3, #4]
	ball_data->ctrlY_angle = 0;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	605a      	str	r2, [r3, #4]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <ball_update_ctrl_angles>:

void ball_update_ctrl_angles(Ball_control_data *ball_data, L3GD20 *L3GD20_data, int delta_time_ms)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
	float delta_time = delta_time_ms / 1000.0;
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff faa7 	bl	8000544 <__aeabi_i2d>
 8000ff6:	f04f 0200 	mov.w	r2, #0
 8000ffa:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <ball_update_ctrl_angles+0x90>)
 8000ffc:	f7ff fc36 	bl	800086c <__aeabi_ddiv>
 8001000:	4603      	mov	r3, r0
 8001002:	460c      	mov	r4, r1
 8001004:	4618      	mov	r0, r3
 8001006:	4621      	mov	r1, r4
 8001008:	f7ff fdde 	bl	8000bc8 <__aeabi_d2f>
 800100c:	4603      	mov	r3, r0
 800100e:	617b      	str	r3, [r7, #20]
	ball_data->ctrlX_angle += L3GD20_data->X_val * delta_time;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	ed93 7a00 	vldr	s14, [r3]
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	edd3 6a03 	vldr	s13, [r3, #12]
 800101c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	edc3 7a00 	vstr	s15, [r3]
	ball_data->ctrlY_angle += L3GD20_data->Y_val * delta_time;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	ed93 7a01 	vldr	s14, [r3, #4]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	edd3 6a04 	vldr	s13, [r3, #16]
 800103a:	edd7 7a05 	vldr	s15, [r7, #20]
 800103e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	edc3 7a01 	vstr	s15, [r3, #4]
	ball_data->ctrlZ_angle += L3GD20_data->Z_val * delta_time;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	edd3 6a05 	vldr	s13, [r3, #20]
 8001058:	edd7 7a05 	vldr	s15, [r7, #20]
 800105c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800106a:	bf00      	nop
 800106c:	371c      	adds	r7, #28
 800106e:	46bd      	mov	sp, r7
 8001070:	bd90      	pop	{r4, r7, pc}
 8001072:	bf00      	nop
 8001074:	408f4000 	.word	0x408f4000

08001078 <ball_update_pos>:

void ball_update_pos(Ball_control_data *ball_data, int delta_time_ms)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	ed2d 8b02 	vpush	{d8}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
	float delta_time = delta_time_ms / 1000.0;
 8001086:	6838      	ldr	r0, [r7, #0]
 8001088:	f7ff fa5c 	bl	8000544 <__aeabi_i2d>
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	4b67      	ldr	r3, [pc, #412]	; (8001230 <ball_update_pos+0x1b8>)
 8001092:	f7ff fbeb 	bl	800086c <__aeabi_ddiv>
 8001096:	4603      	mov	r3, r0
 8001098:	460c      	mov	r4, r1
 800109a:	4618      	mov	r0, r3
 800109c:	4621      	mov	r1, r4
 800109e:	f7ff fd93 	bl	8000bc8 <__aeabi_d2f>
 80010a2:	4603      	mov	r3, r0
 80010a4:	617b      	str	r3, [r7, #20]
	float X_radAngle = (ball_data->ctrlX_angle * PI_CONST / 180.0);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa5c 	bl	8000568 <__aeabi_f2d>
 80010b0:	a35d      	add	r3, pc, #372	; (adr r3, 8001228 <ball_update_pos+0x1b0>)
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	f7ff faaf 	bl	8000618 <__aeabi_dmul>
 80010ba:	4603      	mov	r3, r0
 80010bc:	460c      	mov	r4, r1
 80010be:	4618      	mov	r0, r3
 80010c0:	4621      	mov	r1, r4
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	4b5b      	ldr	r3, [pc, #364]	; (8001234 <ball_update_pos+0x1bc>)
 80010c8:	f7ff fbd0 	bl	800086c <__aeabi_ddiv>
 80010cc:	4603      	mov	r3, r0
 80010ce:	460c      	mov	r4, r1
 80010d0:	4618      	mov	r0, r3
 80010d2:	4621      	mov	r1, r4
 80010d4:	f7ff fd78 	bl	8000bc8 <__aeabi_d2f>
 80010d8:	4603      	mov	r3, r0
 80010da:	613b      	str	r3, [r7, #16]
	float Y_radAngle = (ball_data->ctrlY_angle * PI_CONST / 180.0);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fa41 	bl	8000568 <__aeabi_f2d>
 80010e6:	a350      	add	r3, pc, #320	; (adr r3, 8001228 <ball_update_pos+0x1b0>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff fa94 	bl	8000618 <__aeabi_dmul>
 80010f0:	4603      	mov	r3, r0
 80010f2:	460c      	mov	r4, r1
 80010f4:	4618      	mov	r0, r3
 80010f6:	4621      	mov	r1, r4
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4b4d      	ldr	r3, [pc, #308]	; (8001234 <ball_update_pos+0x1bc>)
 80010fe:	f7ff fbb5 	bl	800086c <__aeabi_ddiv>
 8001102:	4603      	mov	r3, r0
 8001104:	460c      	mov	r4, r1
 8001106:	4618      	mov	r0, r3
 8001108:	4621      	mov	r1, r4
 800110a:	f7ff fd5d 	bl	8000bc8 <__aeabi_d2f>
 800110e:	4603      	mov	r3, r0
 8001110:	60fb      	str	r3, [r7, #12]

	ball_data->X_screen_speed += sinf(X_radAngle) * GRAVITY_CONST * delta_time;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	ed93 8a05 	vldr	s16, [r3, #20]
 8001118:	ed97 0a04 	vldr	s0, [r7, #16]
 800111c:	f006 ff40 	bl	8007fa0 <sinf>
 8001120:	eeb0 7a40 	vmov.f32	s14, s0
 8001124:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8001128:	ee27 7a27 	vmul.f32	s14, s14, s15
 800112c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001134:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	edc3 7a05 	vstr	s15, [r3, #20]
	ball_data->Y_screen_speed += sinf(Y_radAngle) * GRAVITY_CONST * delta_time;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	ed93 8a06 	vldr	s16, [r3, #24]
 8001144:	ed97 0a03 	vldr	s0, [r7, #12]
 8001148:	f006 ff2a 	bl	8007fa0 <sinf>
 800114c:	eeb0 7a40 	vmov.f32	s14, s0
 8001150:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8001154:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001158:	edd7 7a05 	vldr	s15, [r7, #20]
 800115c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001160:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	edc3 7a06 	vstr	s15, [r3, #24]

	if(ball_data->X_screen_speed > 0)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001170:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd0a      	ble.n	8001190 <ball_update_pos+0x118>
		ball_data->X_screen_speed -= FRICTION_CONST * delta_time;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001180:	edd7 7a05 	vldr	s15, [r7, #20]
 8001184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	edc3 7a05 	vstr	s15, [r3, #20]
 800118e:	e009      	b.n	80011a4 <ball_update_pos+0x12c>
	else
		ball_data->X_screen_speed += FRICTION_CONST * delta_time;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	ed93 7a05 	vldr	s14, [r3, #20]
 8001196:	edd7 7a05 	vldr	s15, [r7, #20]
 800119a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	edc3 7a05 	vstr	s15, [r3, #20]

	if(ball_data->Y_screen_speed > 0)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80011aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b2:	dd0a      	ble.n	80011ca <ball_update_pos+0x152>
			ball_data->Y_screen_speed -= FRICTION_CONST * delta_time;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	ed93 7a06 	vldr	s14, [r3, #24]
 80011ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80011be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	edc3 7a06 	vstr	s15, [r3, #24]
 80011c8:	e009      	b.n	80011de <ball_update_pos+0x166>
		else
			ball_data->Y_screen_speed += FRICTION_CONST * delta_time;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	ed93 7a06 	vldr	s14, [r3, #24]
 80011d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	edc3 7a06 	vstr	s15, [r3, #24]

	ball_data->X_screen_pos += (ball_data->X_screen_speed * delta_time);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	edd3 6a05 	vldr	s13, [r3, #20]
 80011ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	edc3 7a03 	vstr	s15, [r3, #12]
	ball_data->Y_screen_pos += (ball_data->Y_screen_speed * delta_time);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	ed93 7a04 	vldr	s14, [r3, #16]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	edd3 6a06 	vldr	s13, [r3, #24]
 8001208:	edd7 7a05 	vldr	s15, [r7, #20]
 800120c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	edc3 7a04 	vstr	s15, [r3, #16]
}
 800121a:	bf00      	nop
 800121c:	371c      	adds	r7, #28
 800121e:	46bd      	mov	sp, r7
 8001220:	ecbd 8b02 	vpop	{d8}
 8001224:	bd90      	pop	{r4, r7, pc}
 8001226:	bf00      	nop
 8001228:	4d12d84a 	.word	0x4d12d84a
 800122c:	400921fb 	.word	0x400921fb
 8001230:	408f4000 	.word	0x408f4000
 8001234:	40668000 	.word	0x40668000

08001238 <L3GD20_init>:
 */
#include "gyroscope.h"

//struct L3GD20 L3GD20_data;

int L3GD20_init(SPI_HandleTypeDef *m_hspi_handle, L3GD20 *L3GD20_data){
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
	L3GD20_data->hspi_handle = m_hspi_handle;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8001248:	2201      	movs	r2, #1
 800124a:	2102      	movs	r1, #2
 800124c:	4812      	ldr	r0, [pc, #72]	; (8001298 <L3GD20_init+0x60>)
 800124e:	f001 fead 	bl	8002fac <HAL_GPIO_WritePin>

	if(L3GD20_recive(L3GD20_WHO_AM_I, L3GD20_data) != 212)
 8001252:	6839      	ldr	r1, [r7, #0]
 8001254:	200f      	movs	r0, #15
 8001256:	f000 f847 	bl	80012e8 <L3GD20_recive>
 800125a:	4603      	mov	r3, r0
 800125c:	2bd4      	cmp	r3, #212	; 0xd4
 800125e:	d001      	beq.n	8001264 <L3GD20_init+0x2c>
	{
		return 0;
 8001260:	2300      	movs	r3, #0
 8001262:	e014      	b.n	800128e <L3GD20_init+0x56>
	}

	L3GD20_send(L3GD20_CTRL_REG1, 0x0F, L3GD20_data); // aktywuje żyroskop
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	210f      	movs	r1, #15
 8001268:	2020      	movs	r0, #32
 800126a:	f000 f817 	bl	800129c <L3GD20_send>
	L3GD20_send(L3GD20_CTRL_REG4, 0x20, L3GD20_data); // Okreslenie skali
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	2120      	movs	r1, #32
 8001272:	2023      	movs	r0, #35	; 0x23
 8001274:	f000 f812 	bl	800129c <L3GD20_send>
	L3GD20_send(L3GD20_CTRL_REG2, 0x00, L3GD20_data); // ustawia filtr górnoprzepustowy
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	2100      	movs	r1, #0
 800127c:	2021      	movs	r0, #33	; 0x21
 800127e:	f000 f80d 	bl	800129c <L3GD20_send>
	L3GD20_send(L3GD20_CTRL_REG5, 0x10, L3GD20_data); // włącza filtr górnoprzepustowy
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	2110      	movs	r1, #16
 8001286:	2024      	movs	r0, #36	; 0x24
 8001288:	f000 f808 	bl	800129c <L3GD20_send>

	return 1;
 800128c:	2301      	movs	r3, #1
	address_var[0] = 0x00 | L3GD20_CTRL_REG5;
	address_var[1] = 0x10;
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi5, address_var, 2, 500);
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);*/
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40020800 	.word	0x40020800

0800129c <L3GD20_send>:

void L3GD20_send(uint8_t address, uint8_t data, L3GD20 *L3GD20_data)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	603a      	str	r2, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
 80012a8:	460b      	mov	r3, r1
 80012aa:	71bb      	strb	r3, [r7, #6]
	uint8_t transmit_data[2];
	transmit_data[0] = address;
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	733b      	strb	r3, [r7, #12]
	transmit_data[1] = data;
 80012b0:	79bb      	ldrb	r3, [r7, #6]
 80012b2:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2102      	movs	r1, #2
 80012b8:	480a      	ldr	r0, [pc, #40]	; (80012e4 <L3GD20_send+0x48>)
 80012ba:	f001 fe77 	bl	8002fac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(L3GD20_data->hspi_handle, transmit_data, 2, L3GD20_SPI_WAIT_TIME);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	6818      	ldr	r0, [r3, #0]
 80012c2:	f107 010c 	add.w	r1, r7, #12
 80012c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012ca:	2202      	movs	r2, #2
 80012cc:	f003 f8da 	bl	8004484 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 80012d0:	2201      	movs	r2, #1
 80012d2:	2102      	movs	r1, #2
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <L3GD20_send+0x48>)
 80012d6:	f001 fe69 	bl	8002fac <HAL_GPIO_WritePin>
}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40020800 	.word	0x40020800

080012e8 <L3GD20_recive>:

uint8_t L3GD20_recive(uint8_t addres, L3GD20 *L3GD20_data)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
	uint8_t transmit_data[2];
	uint8_t recive_data[2];
	transmit_data[0] = addres | 0x80;
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	733b      	strb	r3, [r7, #12]
	transmit_data[1] = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	737b      	strb	r3, [r7, #13]
	recive_data[1] = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	727b      	strb	r3, [r7, #9]
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2102      	movs	r1, #2
 800130a:	480c      	ldr	r0, [pc, #48]	; (800133c <L3GD20_recive+0x54>)
 800130c:	f001 fe4e 	bl	8002fac <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(L3GD20_data->hspi_handle, transmit_data, recive_data, 2, L3GD20_SPI_WAIT_TIME);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	f107 0208 	add.w	r2, r7, #8
 8001318:	f107 010c 	add.w	r1, r7, #12
 800131c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2302      	movs	r3, #2
 8001324:	f003 f9e2 	bl	80046ec <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NCS_MEMS_SPI_GPIO_Port, NCS_MEMS_SPI_Pin, GPIO_PIN_SET);
 8001328:	2201      	movs	r2, #1
 800132a:	2102      	movs	r1, #2
 800132c:	4803      	ldr	r0, [pc, #12]	; (800133c <L3GD20_recive+0x54>)
 800132e:	f001 fe3d 	bl	8002fac <HAL_GPIO_WritePin>
	return recive_data[1];
 8001332:	7a7b      	ldrb	r3, [r7, #9]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40020800 	.word	0x40020800

08001340 <L3GD20_readRawData>:

void L3GD20_readRawData(L3GD20 *L3GD20_data)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	L3GD20_data->X_raw = L3GD20_recive(L3GD20_OUT_X_L, L3GD20_data);
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	2028      	movs	r0, #40	; 0x28
 800134c:	f7ff ffcc 	bl	80012e8 <L3GD20_recive>
 8001350:	4603      	mov	r3, r0
 8001352:	b21a      	sxth	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	809a      	strh	r2, [r3, #4]
	L3GD20_data->X_raw |= L3GD20_recive(L3GD20_OUT_X_H, L3GD20_data) << 8;
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	2029      	movs	r0, #41	; 0x29
 800135c:	f7ff ffc4 	bl	80012e8 <L3GD20_recive>
 8001360:	4603      	mov	r3, r0
 8001362:	0219      	lsls	r1, r3, #8
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800136a:	b20b      	sxth	r3, r1
 800136c:	4313      	orrs	r3, r2
 800136e:	b21a      	sxth	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	809a      	strh	r2, [r3, #4]

	L3GD20_data->Y_raw = L3GD20_recive(L3GD20_OUT_Y_L, L3GD20_data);
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	202a      	movs	r0, #42	; 0x2a
 8001378:	f7ff ffb6 	bl	80012e8 <L3GD20_recive>
 800137c:	4603      	mov	r3, r0
 800137e:	b21a      	sxth	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	80da      	strh	r2, [r3, #6]
	L3GD20_data->Y_raw |= L3GD20_recive(L3GD20_OUT_Y_H, L3GD20_data) << 8;
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	202b      	movs	r0, #43	; 0x2b
 8001388:	f7ff ffae 	bl	80012e8 <L3GD20_recive>
 800138c:	4603      	mov	r3, r0
 800138e:	0219      	lsls	r1, r3, #8
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001396:	b20b      	sxth	r3, r1
 8001398:	4313      	orrs	r3, r2
 800139a:	b21a      	sxth	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	80da      	strh	r2, [r3, #6]

	L3GD20_data->Z_raw = L3GD20_recive(L3GD20_OUT_Z_L, L3GD20_data);
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	202c      	movs	r0, #44	; 0x2c
 80013a4:	f7ff ffa0 	bl	80012e8 <L3GD20_recive>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	811a      	strh	r2, [r3, #8]
	L3GD20_data->Z_raw |= L3GD20_recive(L3GD20_OUT_Z_H, L3GD20_data) << 8;
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	202d      	movs	r0, #45	; 0x2d
 80013b4:	f7ff ff98 	bl	80012e8 <L3GD20_recive>
 80013b8:	4603      	mov	r3, r0
 80013ba:	0219      	lsls	r1, r3, #8
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80013c2:	b20b      	sxth	r3, r1
 80013c4:	4313      	orrs	r3, r2
 80013c6:	b21a      	sxth	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	811a      	strh	r2, [r3, #8]
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	0000      	movs	r0, r0
	...

080013d8 <L3GD20_convertRawData>:

void L3GD20_convertRawData(struct L3GD20 *L3GD20_data)
{
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	L3GD20_data->X_val = (L3GD20_data->X_raw + L3GD20_X_OFFSET) * SENSITIVITY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013e6:	3b1e      	subs	r3, #30
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f8ab 	bl	8000544 <__aeabi_i2d>
 80013ee:	a31e      	add	r3, pc, #120	; (adr r3, 8001468 <L3GD20_convertRawData+0x90>)
 80013f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f4:	f7ff f910 	bl	8000618 <__aeabi_dmul>
 80013f8:	4603      	mov	r3, r0
 80013fa:	460c      	mov	r4, r1
 80013fc:	4618      	mov	r0, r3
 80013fe:	4621      	mov	r1, r4
 8001400:	f7ff fbe2 	bl	8000bc8 <__aeabi_d2f>
 8001404:	4602      	mov	r2, r0
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	60da      	str	r2, [r3, #12]
	L3GD20_data->Y_val = (L3GD20_data->Y_raw + L3GD20_Y_OFFSET) * SENSITIVITY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001410:	3b05      	subs	r3, #5
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f896 	bl	8000544 <__aeabi_i2d>
 8001418:	a313      	add	r3, pc, #76	; (adr r3, 8001468 <L3GD20_convertRawData+0x90>)
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	f7ff f8fb 	bl	8000618 <__aeabi_dmul>
 8001422:	4603      	mov	r3, r0
 8001424:	460c      	mov	r4, r1
 8001426:	4618      	mov	r0, r3
 8001428:	4621      	mov	r1, r4
 800142a:	f7ff fbcd 	bl	8000bc8 <__aeabi_d2f>
 800142e:	4602      	mov	r2, r0
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	611a      	str	r2, [r3, #16]
	L3GD20_data->Z_val = (L3GD20_data->Z_raw + L3GD20_Z_OFFSET) * SENSITIVITY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800143a:	330d      	adds	r3, #13
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f881 	bl	8000544 <__aeabi_i2d>
 8001442:	a309      	add	r3, pc, #36	; (adr r3, 8001468 <L3GD20_convertRawData+0x90>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7ff f8e6 	bl	8000618 <__aeabi_dmul>
 800144c:	4603      	mov	r3, r0
 800144e:	460c      	mov	r4, r1
 8001450:	4618      	mov	r0, r3
 8001452:	4621      	mov	r1, r4
 8001454:	f7ff fbb8 	bl	8000bc8 <__aeabi_d2f>
 8001458:	4602      	mov	r2, r0
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	615a      	str	r2, [r3, #20]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bd90      	pop	{r4, r7, pc}
 8001466:	bf00      	nop
 8001468:	70a3d70a 	.word	0x70a3d70a
 800146c:	3fb70a3d 	.word	0x3fb70a3d

08001470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001472:	b0ad      	sub	sp, #180	; 0xb4
 8001474:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001476:	f001 f889 	bl	800258c <HAL_Init>
  /* USER CODE BEGIN Init */
  //int status = L3GD20_init(&hspi5);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147a:	f000 f8a7 	bl	80015cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800147e:	f000 fb23 	bl	8001ac8 <MX_GPIO_Init>
  MX_CRC_Init();
 8001482:	f000 f927 	bl	80016d4 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001486:	f000 f939 	bl	80016fc <MX_DMA2D_Init>
  MX_FMC_Init();
 800148a:	f000 facd 	bl	8001a28 <MX_FMC_Init>
  MX_LTDC_Init();
 800148e:	f000 f967 	bl	8001760 <MX_LTDC_Init>
  MX_SPI5_Init();
 8001492:	f000 fa19 	bl	80018c8 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001496:	f000 fa4d 	bl	8001934 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800149a:	f000 fa9b 	bl	80019d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(5000);
 800149e:	f241 3088 	movw	r0, #5000	; 0x1388
 80014a2:	f001 f8b5 	bl	8002610 <HAL_Delay>
  uint8_t address_var[2];

  L3GD20 m_gyro;
  Ball_control_data m_ball;

  int viwe = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  char msg[100];

  if(!L3GD20_init(&hspi5, &m_gyro))
 80014ac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80014b0:	4619      	mov	r1, r3
 80014b2:	4840      	ldr	r0, [pc, #256]	; (80015b4 <main+0x144>)
 80014b4:	f7ff fec0 	bl	8001238 <L3GD20_init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d112      	bne.n	80014e4 <main+0x74>
  {
	sprintf(msg, "not good :(\r\n");
 80014be:	463b      	mov	r3, r7
 80014c0:	4a3d      	ldr	r2, [pc, #244]	; (80015b8 <main+0x148>)
 80014c2:	461c      	mov	r4, r3
 80014c4:	4613      	mov	r3, r2
 80014c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014c8:	c407      	stmia	r4!, {r0, r1, r2}
 80014ca:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, msg, (uint16_t)strlen(msg), 1000);
 80014cc:	463b      	mov	r3, r7
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7fe fe8e 	bl	80001f0 <strlen>
 80014d4:	4603      	mov	r3, r0
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4639      	mov	r1, r7
 80014da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014de:	4837      	ldr	r0, [pc, #220]	; (80015bc <main+0x14c>)
 80014e0:	f003 ff9f 	bl	8005422 <HAL_UART_Transmit>
  }
  ball_ctrl_init(&m_ball, 100, 100);
 80014e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014e8:	2264      	movs	r2, #100	; 0x64
 80014ea:	2164      	movs	r1, #100	; 0x64
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fd3b 	bl	8000f68 <ball_ctrl_init>

  float Y_pos = 0;
 80014f2:	f04f 0300 	mov.w	r3, #0
 80014f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(10);
 80014fa:	200a      	movs	r0, #10
 80014fc:	f001 f888 	bl	8002610 <HAL_Delay>
	  L3GD20_readRawData(&m_gyro);
 8001500:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff1b 	bl	8001340 <L3GD20_readRawData>
	  L3GD20_convertRawData(&m_gyro);
 800150a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff ff62 	bl	80013d8 <L3GD20_convertRawData>
	  ball_update_ctrl_angles(&m_ball, &m_gyro, 10);
 8001514:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001518:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800151c:	220a      	movs	r2, #10
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fd60 	bl	8000fe4 <ball_update_ctrl_angles>
	  ball_update_pos(&m_ball, 10);
 8001524:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001528:	210a      	movs	r1, #10
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fda4 	bl	8001078 <ball_update_pos>
	  //Y_pos += L3GD20_data.Y_val * 0.01;

	  //sprintf(msg, "XYZ: %d | %d | %d\r\n",L3GD20_data.X_raw, L3GD20_data.Y_raw, L3GD20_data.Z_raw );
	  if(viwe % 30 == 1)
 8001530:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001534:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <main+0x150>)
 8001536:	fb83 1302 	smull	r1, r3, r3, r2
 800153a:	4413      	add	r3, r2
 800153c:	1119      	asrs	r1, r3, #4
 800153e:	17d3      	asrs	r3, r2, #31
 8001540:	1ac9      	subs	r1, r1, r3
 8001542:	460b      	mov	r3, r1
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	1a5b      	subs	r3, r3, r1
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	1ad1      	subs	r1, r2, r3
 800154c:	2901      	cmp	r1, #1
 800154e:	d11f      	bne.n	8001590 <main+0x120>
	  {
		  sprintf(msg, "X: %f , Y: %f \r\n", m_ball.Y_screen_pos, m_ball.X_screen_pos);
 8001550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff f808 	bl	8000568 <__aeabi_f2d>
 8001558:	4605      	mov	r5, r0
 800155a:	460e      	mov	r6, r1
 800155c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff f802 	bl	8000568 <__aeabi_f2d>
 8001564:	4603      	mov	r3, r0
 8001566:	460c      	mov	r4, r1
 8001568:	4638      	mov	r0, r7
 800156a:	e9cd 3400 	strd	r3, r4, [sp]
 800156e:	462a      	mov	r2, r5
 8001570:	4633      	mov	r3, r6
 8001572:	4914      	ldr	r1, [pc, #80]	; (80015c4 <main+0x154>)
 8001574:	f005 f934 	bl	80067e0 <siprintf>
		  //sprintf(msg, "XYZ: %d | %d | %d\r\n",L3GD20_data.X_raw, L3GD20_data.Y_raw, L3GD20_data.Z_raw );
		  HAL_UART_Transmit(&huart1, msg, (uint16_t)strlen(msg), 1000);
 8001578:	463b      	mov	r3, r7
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe fe38 	bl	80001f0 <strlen>
 8001580:	4603      	mov	r3, r0
 8001582:	b29a      	uxth	r2, r3
 8001584:	4639      	mov	r1, r7
 8001586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158a:	480c      	ldr	r0, [pc, #48]	; (80015bc <main+0x14c>)
 800158c:	f003 ff49 	bl	8005422 <HAL_UART_Transmit>
	  }
	  viwe++;
 8001590:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001594:	3301      	adds	r3, #1
 8001596:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 800159a:	2101      	movs	r1, #1
 800159c:	480a      	ldr	r0, [pc, #40]	; (80015c8 <main+0x158>)
 800159e:	f001 fced 	bl	8002f7c <HAL_GPIO_ReadPin>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d1a8      	bne.n	80014fa <main+0x8a>
	  {
		  ball_ctrl_restetDrift(&m_ball);
 80015a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff fd02 	bl	8000fb6 <ball_ctrl_restetDrift>
	  HAL_Delay(10);
 80015b2:	e7a2      	b.n	80014fa <main+0x8a>
 80015b4:	20000208 	.word	0x20000208
 80015b8:	08008a50 	.word	0x08008a50
 80015bc:	20000310 	.word	0x20000310
 80015c0:	88888889 	.word	0x88888889
 80015c4:	08008a60 	.word	0x08008a60
 80015c8:	40020000 	.word	0x40020000

080015cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b0a0      	sub	sp, #128	; 0x80
 80015d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80015d6:	2230      	movs	r2, #48	; 0x30
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f004 fc9c 	bl	8005f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2230      	movs	r2, #48	; 0x30
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f004 fc8d 	bl	8005f18 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	4b32      	ldr	r3, [pc, #200]	; (80016cc <SystemClock_Config+0x100>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	4a31      	ldr	r2, [pc, #196]	; (80016cc <SystemClock_Config+0x100>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	6413      	str	r3, [r2, #64]	; 0x40
 800160e:	4b2f      	ldr	r3, [pc, #188]	; (80016cc <SystemClock_Config+0x100>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <SystemClock_Config+0x104>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001626:	4a2a      	ldr	r2, [pc, #168]	; (80016d0 <SystemClock_Config+0x104>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <SystemClock_Config+0x104>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800163a:	2301      	movs	r3, #1
 800163c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800163e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001642:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001644:	2302      	movs	r3, #2
 8001646:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001648:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800164c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800164e:	2304      	movs	r3, #4
 8001650:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001652:	2348      	movs	r3, #72	; 0x48
 8001654:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001656:	2302      	movs	r3, #2
 8001658:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800165a:	2303      	movs	r3, #3
 800165c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800165e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001662:	4618      	mov	r0, r3
 8001664:	f002 f824 	bl	80036b0 <HAL_RCC_OscConfig>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800166e:	f000 fb8d 	bl	8001d8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001672:	230f      	movs	r3, #15
 8001674:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001676:	2302      	movs	r3, #2
 8001678:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167a:	2300      	movs	r3, #0
 800167c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800167e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001688:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800168c:	2102      	movs	r1, #2
 800168e:	4618      	mov	r0, r3
 8001690:	f002 fa7e 	bl	8003b90 <HAL_RCC_ClockConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800169a:	f000 fb77 	bl	8001d8c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800169e:	2308      	movs	r3, #8
 80016a0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80016a2:	2332      	movs	r3, #50	; 0x32
 80016a4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80016a6:	2302      	movs	r3, #2
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80016aa:	2300      	movs	r3, #0
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	4618      	mov	r0, r3
 80016b4:	f002 fc90 	bl	8003fd8 <HAL_RCCEx_PeriphCLKConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80016be:	f000 fb65 	bl	8001d8c <Error_Handler>
  }
}
 80016c2:	bf00      	nop
 80016c4:	3780      	adds	r7, #128	; 0x80
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40007000 	.word	0x40007000

080016d4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_CRC_Init+0x20>)
 80016da:	4a07      	ldr	r2, [pc, #28]	; (80016f8 <MX_CRC_Init+0x24>)
 80016dc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_CRC_Init+0x20>)
 80016e0:	f001 f89a 	bl	8002818 <HAL_CRC_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80016ea:	f000 fb4f 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000260 	.word	0x20000260
 80016f8:	40023000 	.word	0x40023000

080016fc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <MX_DMA2D_Init+0x5c>)
 8001702:	4a16      	ldr	r2, [pc, #88]	; (800175c <MX_DMA2D_Init+0x60>)
 8001704:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_DMA2D_Init+0x5c>)
 8001708:	2200      	movs	r2, #0
 800170a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <MX_DMA2D_Init+0x5c>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_DMA2D_Init+0x5c>)
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <MX_DMA2D_Init+0x5c>)
 800171a:	2200      	movs	r2, #0
 800171c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_DMA2D_Init+0x5c>)
 8001720:	2200      	movs	r2, #0
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_DMA2D_Init+0x5c>)
 8001726:	2200      	movs	r2, #0
 8001728:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_DMA2D_Init+0x5c>)
 800172c:	2200      	movs	r2, #0
 800172e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001730:	4809      	ldr	r0, [pc, #36]	; (8001758 <MX_DMA2D_Init+0x5c>)
 8001732:	f001 f88d 	bl	8002850 <HAL_DMA2D_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800173c:	f000 fb26 	bl	8001d8c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001740:	2101      	movs	r1, #1
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_DMA2D_Init+0x5c>)
 8001744:	f001 f9de 	bl	8002b04 <HAL_DMA2D_ConfigLayer>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800174e:	f000 fb1d 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000390 	.word	0x20000390
 800175c:	4002b000 	.word	0x4002b000

08001760 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b09a      	sub	sp, #104	; 0x68
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001766:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800176a:	2234      	movs	r2, #52	; 0x34
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f004 fbd2 	bl	8005f18 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001774:	463b      	mov	r3, r7
 8001776:	2234      	movs	r2, #52	; 0x34
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f004 fbcc 	bl	8005f18 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001780:	4b4f      	ldr	r3, [pc, #316]	; (80018c0 <MX_LTDC_Init+0x160>)
 8001782:	4a50      	ldr	r2, [pc, #320]	; (80018c4 <MX_LTDC_Init+0x164>)
 8001784:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001786:	4b4e      	ldr	r3, [pc, #312]	; (80018c0 <MX_LTDC_Init+0x160>)
 8001788:	2200      	movs	r2, #0
 800178a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800178c:	4b4c      	ldr	r3, [pc, #304]	; (80018c0 <MX_LTDC_Init+0x160>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001792:	4b4b      	ldr	r3, [pc, #300]	; (80018c0 <MX_LTDC_Init+0x160>)
 8001794:	2200      	movs	r2, #0
 8001796:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001798:	4b49      	ldr	r3, [pc, #292]	; (80018c0 <MX_LTDC_Init+0x160>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800179e:	4b48      	ldr	r3, [pc, #288]	; (80018c0 <MX_LTDC_Init+0x160>)
 80017a0:	2209      	movs	r2, #9
 80017a2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80017a4:	4b46      	ldr	r3, [pc, #280]	; (80018c0 <MX_LTDC_Init+0x160>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80017aa:	4b45      	ldr	r3, [pc, #276]	; (80018c0 <MX_LTDC_Init+0x160>)
 80017ac:	221d      	movs	r2, #29
 80017ae:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80017b0:	4b43      	ldr	r3, [pc, #268]	; (80018c0 <MX_LTDC_Init+0x160>)
 80017b2:	2203      	movs	r2, #3
 80017b4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80017b6:	4b42      	ldr	r3, [pc, #264]	; (80018c0 <MX_LTDC_Init+0x160>)
 80017b8:	f240 120d 	movw	r2, #269	; 0x10d
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80017be:	4b40      	ldr	r3, [pc, #256]	; (80018c0 <MX_LTDC_Init+0x160>)
 80017c0:	f240 1243 	movw	r2, #323	; 0x143
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80017c6:	4b3e      	ldr	r3, [pc, #248]	; (80018c0 <MX_LTDC_Init+0x160>)
 80017c8:	f240 1217 	movw	r2, #279	; 0x117
 80017cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80017ce:	4b3c      	ldr	r3, [pc, #240]	; (80018c0 <MX_LTDC_Init+0x160>)
 80017d0:	f240 1247 	movw	r2, #327	; 0x147
 80017d4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80017d6:	4b3a      	ldr	r3, [pc, #232]	; (80018c0 <MX_LTDC_Init+0x160>)
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 100;
 80017de:	4b38      	ldr	r3, [pc, #224]	; (80018c0 <MX_LTDC_Init+0x160>)
 80017e0:	2264      	movs	r2, #100	; 0x64
 80017e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80017e6:	4b36      	ldr	r3, [pc, #216]	; (80018c0 <MX_LTDC_Init+0x160>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80017ee:	4834      	ldr	r0, [pc, #208]	; (80018c0 <MX_LTDC_Init+0x160>)
 80017f0:	f001 fbf6 	bl	8002fe0 <HAL_LTDC_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80017fa:	f000 fac7 	bl	8001d8c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8001802:	23f0      	movs	r3, #240	; 0xf0
 8001804:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 800180a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800180e:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001810:	2302      	movs	r3, #2
 8001812:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8001814:	23ff      	movs	r3, #255	; 0xff
 8001816:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 255;
 8001818:	23ff      	movs	r3, #255	; 0xff
 800181a:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800181c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001820:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001822:	2307      	movs	r3, #7
 8001824:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001826:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800182a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 800182c:	23f0      	movs	r3, #240	; 0xf0
 800182e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8001830:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001834:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 100;
 800183c:	2364      	movs	r3, #100	; 0x64
 800183e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001848:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800184c:	2200      	movs	r2, #0
 800184e:	4619      	mov	r1, r3
 8001850:	481b      	ldr	r0, [pc, #108]	; (80018c0 <MX_LTDC_Init+0x160>)
 8001852:	f001 fd57 	bl	8003304 <HAL_LTDC_ConfigLayer>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 800185c:	f000 fa96 	bl	8001d8c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800187c:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800187e:	2305      	movs	r3, #5
 8001880:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80018a0:	463b      	mov	r3, r7
 80018a2:	2201      	movs	r2, #1
 80018a4:	4619      	mov	r1, r3
 80018a6:	4806      	ldr	r0, [pc, #24]	; (80018c0 <MX_LTDC_Init+0x160>)
 80018a8:	f001 fd2c 	bl	8003304 <HAL_LTDC_ConfigLayer>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 80018b2:	f000 fa6b 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80018b6:	bf00      	nop
 80018b8:	3768      	adds	r7, #104	; 0x68
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000268 	.word	0x20000268
 80018c4:	40016800 	.word	0x40016800

080018c8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80018cc:	4b17      	ldr	r3, [pc, #92]	; (800192c <MX_SPI5_Init+0x64>)
 80018ce:	4a18      	ldr	r2, [pc, #96]	; (8001930 <MX_SPI5_Init+0x68>)
 80018d0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80018d2:	4b16      	ldr	r3, [pc, #88]	; (800192c <MX_SPI5_Init+0x64>)
 80018d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018d8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <MX_SPI5_Init+0x64>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <MX_SPI5_Init+0x64>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_SPI5_Init+0x64>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <MX_SPI5_Init+0x64>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_SPI5_Init+0x64>)
 80018f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <MX_SPI5_Init+0x64>)
 80018fc:	2218      	movs	r2, #24
 80018fe:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <MX_SPI5_Init+0x64>)
 8001902:	2200      	movs	r2, #0
 8001904:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <MX_SPI5_Init+0x64>)
 8001908:	2200      	movs	r2, #0
 800190a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <MX_SPI5_Init+0x64>)
 800190e:	2200      	movs	r2, #0
 8001910:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <MX_SPI5_Init+0x64>)
 8001914:	220a      	movs	r2, #10
 8001916:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001918:	4804      	ldr	r0, [pc, #16]	; (800192c <MX_SPI5_Init+0x64>)
 800191a:	f002 fd4f 	bl	80043bc <HAL_SPI_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001924:	f000 fa32 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000208 	.word	0x20000208
 8001930:	40015000 	.word	0x40015000

08001934 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193a:	f107 0308 	add.w	r3, r7, #8
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001948:	463b      	mov	r3, r7
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001950:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <MX_TIM1_Init+0x98>)
 8001952:	4a1f      	ldr	r2, [pc, #124]	; (80019d0 <MX_TIM1_Init+0x9c>)
 8001954:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001956:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <MX_TIM1_Init+0x98>)
 8001958:	2200      	movs	r2, #0
 800195a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <MX_TIM1_Init+0x98>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001962:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <MX_TIM1_Init+0x98>)
 8001964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001968:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <MX_TIM1_Init+0x98>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <MX_TIM1_Init+0x98>)
 8001972:	2200      	movs	r2, #0
 8001974:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <MX_TIM1_Init+0x98>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <MX_TIM1_Init+0x98>)
 800197e:	f003 f903 	bl	8004b88 <HAL_TIM_Base_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001988:	f000 fa00 	bl	8001d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001990:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001992:	f107 0308 	add.w	r3, r7, #8
 8001996:	4619      	mov	r1, r3
 8001998:	480c      	ldr	r0, [pc, #48]	; (80019cc <MX_TIM1_Init+0x98>)
 800199a:	f003 fa4c 	bl	8004e36 <HAL_TIM_ConfigClockSource>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80019a4:	f000 f9f2 	bl	8001d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a8:	2300      	movs	r3, #0
 80019aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019b0:	463b      	mov	r3, r7
 80019b2:	4619      	mov	r1, r3
 80019b4:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_TIM1_Init+0x98>)
 80019b6:	f003 fc57 	bl	8005268 <HAL_TIMEx_MasterConfigSynchronization>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80019c0:	f000 f9e4 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000350 	.word	0x20000350
 80019d0:	40010000 	.word	0x40010000

080019d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019da:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <MX_USART1_UART_Init+0x50>)
 80019dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_USART1_UART_Init+0x4c>)
 80019fa:	220c      	movs	r2, #12
 80019fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <MX_USART1_UART_Init+0x4c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_USART1_UART_Init+0x4c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <MX_USART1_UART_Init+0x4c>)
 8001a0c:	f003 fcbc 	bl	8005388 <HAL_UART_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a16:	f000 f9b9 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000310 	.word	0x20000310
 8001a24:	40011000 	.word	0x40011000

08001a28 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
 8001a3c:	615a      	str	r2, [r3, #20]
 8001a3e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001a40:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <MX_FMC_Init+0x98>)
 8001a42:	4a20      	ldr	r2, [pc, #128]	; (8001ac4 <MX_FMC_Init+0x9c>)
 8001a44:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001a46:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <MX_FMC_Init+0x98>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <MX_FMC_Init+0x98>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001a52:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <MX_FMC_Init+0x98>)
 8001a54:	2204      	movs	r2, #4
 8001a56:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <MX_FMC_Init+0x98>)
 8001a5a:	2210      	movs	r2, #16
 8001a5c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001a5e:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <MX_FMC_Init+0x98>)
 8001a60:	2240      	movs	r2, #64	; 0x40
 8001a62:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001a64:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <MX_FMC_Init+0x98>)
 8001a66:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001a6a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001a6c:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <MX_FMC_Init+0x98>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001a72:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <MX_FMC_Init+0x98>)
 8001a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a78:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <MX_FMC_Init+0x98>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <MX_FMC_Init+0x98>)
 8001a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a86:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001a8c:	2307      	movs	r3, #7
 8001a8e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001a90:	2304      	movs	r3, #4
 8001a92:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001a94:	2307      	movs	r3, #7
 8001a96:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <MX_FMC_Init+0x98>)
 8001aaa:	f002 fc53 	bl	8004354 <HAL_SDRAM_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001ab4:	f000 f96a 	bl	8001d8c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001ab8:	bf00      	nop
 8001aba:	3720      	adds	r7, #32
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	200003d0 	.word	0x200003d0
 8001ac4:	a0000140 	.word	0xa0000140

08001ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08e      	sub	sp, #56	; 0x38
 8001acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
 8001ae2:	4b9a      	ldr	r3, [pc, #616]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a99      	ldr	r2, [pc, #612]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b97      	ldr	r3, [pc, #604]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	623b      	str	r3, [r7, #32]
 8001af8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	4b93      	ldr	r3, [pc, #588]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a92      	ldr	r2, [pc, #584]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001b04:	f043 0320 	orr.w	r3, r3, #32
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b90      	ldr	r3, [pc, #576]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0320 	and.w	r3, r3, #32
 8001b12:	61fb      	str	r3, [r7, #28]
 8001b14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	4b8c      	ldr	r3, [pc, #560]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a8b      	ldr	r2, [pc, #556]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b89      	ldr	r3, [pc, #548]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2e:	61bb      	str	r3, [r7, #24]
 8001b30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	4b85      	ldr	r3, [pc, #532]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a84      	ldr	r2, [pc, #528]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b82      	ldr	r3, [pc, #520]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	4b7e      	ldr	r3, [pc, #504]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a7d      	ldr	r2, [pc, #500]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b7b      	ldr	r3, [pc, #492]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	4b77      	ldr	r3, [pc, #476]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a76      	ldr	r2, [pc, #472]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b74      	ldr	r3, [pc, #464]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	4b70      	ldr	r3, [pc, #448]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a6f      	ldr	r2, [pc, #444]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001b90:	f043 0310 	orr.w	r3, r3, #16
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b6d      	ldr	r3, [pc, #436]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	4b69      	ldr	r3, [pc, #420]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a68      	ldr	r2, [pc, #416]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001bac:	f043 0308 	orr.w	r3, r3, #8
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b66      	ldr	r3, [pc, #408]	; (8001d4c <MX_GPIO_Init+0x284>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2116      	movs	r1, #22
 8001bc2:	4863      	ldr	r0, [pc, #396]	; (8001d50 <MX_GPIO_Init+0x288>)
 8001bc4:	f001 f9f2 	bl	8002fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2180      	movs	r1, #128	; 0x80
 8001bcc:	4861      	ldr	r0, [pc, #388]	; (8001d54 <MX_GPIO_Init+0x28c>)
 8001bce:	f001 f9ed 	bl	8002fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001bd8:	485f      	ldr	r0, [pc, #380]	; (8001d58 <MX_GPIO_Init+0x290>)
 8001bda:	f001 f9e7 	bl	8002fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001bde:	2200      	movs	r2, #0
 8001be0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001be4:	485d      	ldr	r0, [pc, #372]	; (8001d5c <MX_GPIO_Init+0x294>)
 8001be6:	f001 f9e1 	bl	8002fac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001bea:	2316      	movs	r3, #22
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4853      	ldr	r0, [pc, #332]	; (8001d50 <MX_GPIO_Init+0x288>)
 8001c02:	f001 f811 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001c06:	f248 0307 	movw	r3, #32775	; 0x8007
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c0c:	4b54      	ldr	r3, [pc, #336]	; (8001d60 <MX_GPIO_Init+0x298>)
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c18:	4619      	mov	r1, r3
 8001c1a:	484e      	ldr	r0, [pc, #312]	; (8001d54 <MX_GPIO_Init+0x28c>)
 8001c1c:	f001 f804 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c34:	4619      	mov	r1, r3
 8001c36:	4847      	ldr	r0, [pc, #284]	; (8001d54 <MX_GPIO_Init+0x28c>)
 8001c38:	f000 fff6 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c40:	4b47      	ldr	r3, [pc, #284]	; (8001d60 <MX_GPIO_Init+0x298>)
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4840      	ldr	r0, [pc, #256]	; (8001d50 <MX_GPIO_Init+0x288>)
 8001c50:	f000 ffea 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001c54:	2304      	movs	r3, #4
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c64:	4619      	mov	r1, r3
 8001c66:	483f      	ldr	r0, [pc, #252]	; (8001d64 <MX_GPIO_Init+0x29c>)
 8001c68:	f000 ffde 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001c6c:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001c7e:	230c      	movs	r3, #12
 8001c80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c86:	4619      	mov	r1, r3
 8001c88:	4836      	ldr	r0, [pc, #216]	; (8001d64 <MX_GPIO_Init+0x29c>)
 8001c8a:	f000 ffcd 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001c8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4830      	ldr	r0, [pc, #192]	; (8001d64 <MX_GPIO_Init+0x29c>)
 8001ca4:	f000 ffc0 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001ca8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4826      	ldr	r0, [pc, #152]	; (8001d58 <MX_GPIO_Init+0x290>)
 8001cbe:	f000 ffb3 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001cc2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd8:	4619      	mov	r1, r3
 8001cda:	481f      	ldr	r0, [pc, #124]	; (8001d58 <MX_GPIO_Init+0x290>)
 8001cdc:	f000 ffa4 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce6:	2312      	movs	r3, #18
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4814      	ldr	r0, [pc, #80]	; (8001d50 <MX_GPIO_Init+0x288>)
 8001cfe:	f000 ff93 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d08:	2312      	movs	r3, #18
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d14:	2304      	movs	r3, #4
 8001d16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	480d      	ldr	r0, [pc, #52]	; (8001d54 <MX_GPIO_Init+0x28c>)
 8001d20:	f000 ff82 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001d24:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4807      	ldr	r0, [pc, #28]	; (8001d5c <MX_GPIO_Init+0x294>)
 8001d3e:	f000 ff73 	bl	8002c28 <HAL_GPIO_Init>

}
 8001d42:	bf00      	nop
 8001d44:	3738      	adds	r7, #56	; 0x38
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020000 	.word	0x40020000
 8001d58:	40020c00 	.word	0x40020c00
 8001d5c:	40021800 	.word	0x40021800
 8001d60:	10120000 	.word	0x10120000
 8001d64:	40020400 	.word	0x40020400

08001d68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d101      	bne.n	8001d7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d7a:	f000 fc29 	bl	80025d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40001000 	.word	0x40001000

08001d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_MspInit+0x54>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	4a11      	ldr	r2, [pc, #68]	; (8001df0 <HAL_MspInit+0x54>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	; 0x44
 8001db2:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <HAL_MspInit+0x54>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	603b      	str	r3, [r7, #0]
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_MspInit+0x54>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <HAL_MspInit+0x54>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <HAL_MspInit+0x54>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	210f      	movs	r1, #15
 8001dde:	f06f 0001 	mvn.w	r0, #1
 8001de2:	f000 fcef 	bl	80027c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800

08001df4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <HAL_CRC_MspInit+0x3c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d10d      	bne.n	8001e22 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_CRC_MspInit+0x40>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <HAL_CRC_MspInit+0x40>)
 8001e10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <HAL_CRC_MspInit+0x40>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001e22:	bf00      	nop
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023000 	.word	0x40023000
 8001e34:	40023800 	.word	0x40023800

08001e38 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <HAL_DMA2D_MspInit+0x48>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d115      	bne.n	8001e76 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_DMA2D_MspInit+0x4c>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a0c      	ldr	r2, [pc, #48]	; (8001e84 <HAL_DMA2D_MspInit+0x4c>)
 8001e54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_DMA2D_MspInit+0x4c>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2105      	movs	r1, #5
 8001e6a:	205a      	movs	r0, #90	; 0x5a
 8001e6c:	f000 fcaa 	bl	80027c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001e70:	205a      	movs	r0, #90	; 0x5a
 8001e72:	f000 fcc3 	bl	80027fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	4002b000 	.word	0x4002b000
 8001e84:	40023800 	.word	0x40023800

08001e88 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08e      	sub	sp, #56	; 0x38
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a7b      	ldr	r2, [pc, #492]	; (8002094 <HAL_LTDC_MspInit+0x20c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	f040 80f0 	bne.w	800208c <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001eac:	2300      	movs	r3, #0
 8001eae:	623b      	str	r3, [r7, #32]
 8001eb0:	4b79      	ldr	r3, [pc, #484]	; (8002098 <HAL_LTDC_MspInit+0x210>)
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb4:	4a78      	ldr	r2, [pc, #480]	; (8002098 <HAL_LTDC_MspInit+0x210>)
 8001eb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001eba:	6453      	str	r3, [r2, #68]	; 0x44
 8001ebc:	4b76      	ldr	r3, [pc, #472]	; (8002098 <HAL_LTDC_MspInit+0x210>)
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ec4:	623b      	str	r3, [r7, #32]
 8001ec6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
 8001ecc:	4b72      	ldr	r3, [pc, #456]	; (8002098 <HAL_LTDC_MspInit+0x210>)
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	4a71      	ldr	r2, [pc, #452]	; (8002098 <HAL_LTDC_MspInit+0x210>)
 8001ed2:	f043 0320 	orr.w	r3, r3, #32
 8001ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed8:	4b6f      	ldr	r3, [pc, #444]	; (8002098 <HAL_LTDC_MspInit+0x210>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	f003 0320 	and.w	r3, r3, #32
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61bb      	str	r3, [r7, #24]
 8001ee8:	4b6b      	ldr	r3, [pc, #428]	; (8002098 <HAL_LTDC_MspInit+0x210>)
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	4a6a      	ldr	r2, [pc, #424]	; (8002098 <HAL_LTDC_MspInit+0x210>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef4:	4b68      	ldr	r3, [pc, #416]	; (8002098 <HAL_LTDC_MspInit+0x210>)
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	4b64      	ldr	r3, [pc, #400]	; (8002098 <HAL_LTDC_MspInit+0x210>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	4a63      	ldr	r2, [pc, #396]	; (8002098 <HAL_LTDC_MspInit+0x210>)
 8001f0a:	f043 0302 	orr.w	r3, r3, #2
 8001f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f10:	4b61      	ldr	r3, [pc, #388]	; (8002098 <HAL_LTDC_MspInit+0x210>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	4b5d      	ldr	r3, [pc, #372]	; (8002098 <HAL_LTDC_MspInit+0x210>)
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	4a5c      	ldr	r2, [pc, #368]	; (8002098 <HAL_LTDC_MspInit+0x210>)
 8001f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2c:	4b5a      	ldr	r3, [pc, #360]	; (8002098 <HAL_LTDC_MspInit+0x210>)
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	4b56      	ldr	r3, [pc, #344]	; (8002098 <HAL_LTDC_MspInit+0x210>)
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	4a55      	ldr	r2, [pc, #340]	; (8002098 <HAL_LTDC_MspInit+0x210>)
 8001f42:	f043 0304 	orr.w	r3, r3, #4
 8001f46:	6313      	str	r3, [r2, #48]	; 0x30
 8001f48:	4b53      	ldr	r3, [pc, #332]	; (8002098 <HAL_LTDC_MspInit+0x210>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f54:	2300      	movs	r3, #0
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	4b4f      	ldr	r3, [pc, #316]	; (8002098 <HAL_LTDC_MspInit+0x210>)
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5c:	4a4e      	ldr	r2, [pc, #312]	; (8002098 <HAL_LTDC_MspInit+0x210>)
 8001f5e:	f043 0308 	orr.w	r3, r3, #8
 8001f62:	6313      	str	r3, [r2, #48]	; 0x30
 8001f64:	4b4c      	ldr	r3, [pc, #304]	; (8002098 <HAL_LTDC_MspInit+0x210>)
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f82:	230e      	movs	r3, #14
 8001f84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4843      	ldr	r0, [pc, #268]	; (800209c <HAL_LTDC_MspInit+0x214>)
 8001f8e:	f000 fe4b 	bl	8002c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001f92:	f641 0358 	movw	r3, #6232	; 0x1858
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fa4:	230e      	movs	r3, #14
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fac:	4619      	mov	r1, r3
 8001fae:	483c      	ldr	r0, [pc, #240]	; (80020a0 <HAL_LTDC_MspInit+0x218>)
 8001fb0:	f000 fe3a 	bl	8002c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001fc4:	2309      	movs	r3, #9
 8001fc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4835      	ldr	r0, [pc, #212]	; (80020a4 <HAL_LTDC_MspInit+0x21c>)
 8001fd0:	f000 fe2a 	bl	8002c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001fd4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fe6:	230e      	movs	r3, #14
 8001fe8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fee:	4619      	mov	r1, r3
 8001ff0:	482c      	ldr	r0, [pc, #176]	; (80020a4 <HAL_LTDC_MspInit+0x21c>)
 8001ff2:	f000 fe19 	bl	8002c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001ff6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002008:	230e      	movs	r3, #14
 800200a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800200c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002010:	4619      	mov	r1, r3
 8002012:	4825      	ldr	r0, [pc, #148]	; (80020a8 <HAL_LTDC_MspInit+0x220>)
 8002014:	f000 fe08 	bl	8002c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002018:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800202a:	230e      	movs	r3, #14
 800202c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002032:	4619      	mov	r1, r3
 8002034:	481d      	ldr	r0, [pc, #116]	; (80020ac <HAL_LTDC_MspInit+0x224>)
 8002036:	f000 fdf7 	bl	8002c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800203a:	2348      	movs	r3, #72	; 0x48
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002046:	2300      	movs	r3, #0
 8002048:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800204a:	230e      	movs	r3, #14
 800204c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800204e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002052:	4619      	mov	r1, r3
 8002054:	4816      	ldr	r0, [pc, #88]	; (80020b0 <HAL_LTDC_MspInit+0x228>)
 8002056:	f000 fde7 	bl	8002c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800205a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002060:	2302      	movs	r3, #2
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002068:	2300      	movs	r3, #0
 800206a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800206c:	2309      	movs	r3, #9
 800206e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002074:	4619      	mov	r1, r3
 8002076:	480c      	ldr	r0, [pc, #48]	; (80020a8 <HAL_LTDC_MspInit+0x220>)
 8002078:	f000 fdd6 	bl	8002c28 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800207c:	2200      	movs	r2, #0
 800207e:	2105      	movs	r1, #5
 8002080:	2058      	movs	r0, #88	; 0x58
 8002082:	f000 fb9f 	bl	80027c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002086:	2058      	movs	r0, #88	; 0x58
 8002088:	f000 fbb8 	bl	80027fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800208c:	bf00      	nop
 800208e:	3738      	adds	r7, #56	; 0x38
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40016800 	.word	0x40016800
 8002098:	40023800 	.word	0x40023800
 800209c:	40021400 	.word	0x40021400
 80020a0:	40020000 	.word	0x40020000
 80020a4:	40020400 	.word	0x40020400
 80020a8:	40021800 	.word	0x40021800
 80020ac:	40020800 	.word	0x40020800
 80020b0:	40020c00 	.word	0x40020c00

080020b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	; 0x28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a19      	ldr	r2, [pc, #100]	; (8002138 <HAL_SPI_MspInit+0x84>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d12c      	bne.n	8002130 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	4b18      	ldr	r3, [pc, #96]	; (800213c <HAL_SPI_MspInit+0x88>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	4a17      	ldr	r2, [pc, #92]	; (800213c <HAL_SPI_MspInit+0x88>)
 80020e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020e4:	6453      	str	r3, [r2, #68]	; 0x44
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_SPI_MspInit+0x88>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b11      	ldr	r3, [pc, #68]	; (800213c <HAL_SPI_MspInit+0x88>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a10      	ldr	r2, [pc, #64]	; (800213c <HAL_SPI_MspInit+0x88>)
 80020fc:	f043 0320 	orr.w	r3, r3, #32
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_SPI_MspInit+0x88>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0320 	and.w	r3, r3, #32
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800210e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002120:	2305      	movs	r3, #5
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	4619      	mov	r1, r3
 800212a:	4805      	ldr	r0, [pc, #20]	; (8002140 <HAL_SPI_MspInit+0x8c>)
 800212c:	f000 fd7c 	bl	8002c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002130:	bf00      	nop
 8002132:	3728      	adds	r7, #40	; 0x28
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40015000 	.word	0x40015000
 800213c:	40023800 	.word	0x40023800
 8002140:	40021400 	.word	0x40021400

08002144 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <HAL_TIM_Base_MspInit+0x3c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d10d      	bne.n	8002172 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <HAL_TIM_Base_MspInit+0x40>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	4a09      	ldr	r2, [pc, #36]	; (8002184 <HAL_TIM_Base_MspInit+0x40>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6453      	str	r3, [r2, #68]	; 0x44
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <HAL_TIM_Base_MspInit+0x40>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40010000 	.word	0x40010000
 8002184:	40023800 	.word	0x40023800

08002188 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	; 0x28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a19      	ldr	r2, [pc, #100]	; (800220c <HAL_UART_MspInit+0x84>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d12c      	bne.n	8002204 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	4b18      	ldr	r3, [pc, #96]	; (8002210 <HAL_UART_MspInit+0x88>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	4a17      	ldr	r2, [pc, #92]	; (8002210 <HAL_UART_MspInit+0x88>)
 80021b4:	f043 0310 	orr.w	r3, r3, #16
 80021b8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ba:	4b15      	ldr	r3, [pc, #84]	; (8002210 <HAL_UART_MspInit+0x88>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_UART_MspInit+0x88>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a10      	ldr	r2, [pc, #64]	; (8002210 <HAL_UART_MspInit+0x88>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <HAL_UART_MspInit+0x88>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80021e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f0:	2303      	movs	r3, #3
 80021f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021f4:	2307      	movs	r3, #7
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4619      	mov	r1, r3
 80021fe:	4805      	ldr	r0, [pc, #20]	; (8002214 <HAL_UART_MspInit+0x8c>)
 8002200:	f000 fd12 	bl	8002c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002204:	bf00      	nop
 8002206:	3728      	adds	r7, #40	; 0x28
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40011000 	.word	0x40011000
 8002210:	40023800 	.word	0x40023800
 8002214:	40020000 	.word	0x40020000

08002218 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800222c:	4b3b      	ldr	r3, [pc, #236]	; (800231c <HAL_FMC_MspInit+0x104>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d16f      	bne.n	8002314 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002234:	4b39      	ldr	r3, [pc, #228]	; (800231c <HAL_FMC_MspInit+0x104>)
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	603b      	str	r3, [r7, #0]
 800223e:	4b38      	ldr	r3, [pc, #224]	; (8002320 <HAL_FMC_MspInit+0x108>)
 8002240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002242:	4a37      	ldr	r2, [pc, #220]	; (8002320 <HAL_FMC_MspInit+0x108>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6393      	str	r3, [r2, #56]	; 0x38
 800224a:	4b35      	ldr	r3, [pc, #212]	; (8002320 <HAL_FMC_MspInit+0x108>)
 800224c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002256:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800225a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002264:	2303      	movs	r3, #3
 8002266:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002268:	230c      	movs	r3, #12
 800226a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	4619      	mov	r1, r3
 8002270:	482c      	ldr	r0, [pc, #176]	; (8002324 <HAL_FMC_MspInit+0x10c>)
 8002272:	f000 fcd9 	bl	8002c28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002276:	2301      	movs	r3, #1
 8002278:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002282:	2303      	movs	r3, #3
 8002284:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002286:	230c      	movs	r3, #12
 8002288:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800228a:	1d3b      	adds	r3, r7, #4
 800228c:	4619      	mov	r1, r3
 800228e:	4826      	ldr	r0, [pc, #152]	; (8002328 <HAL_FMC_MspInit+0x110>)
 8002290:	f000 fcca 	bl	8002c28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002294:	f248 1333 	movw	r3, #33075	; 0x8133
 8002298:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a2:	2303      	movs	r3, #3
 80022a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022a6:	230c      	movs	r3, #12
 80022a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	4619      	mov	r1, r3
 80022ae:	481f      	ldr	r0, [pc, #124]	; (800232c <HAL_FMC_MspInit+0x114>)
 80022b0:	f000 fcba 	bl	8002c28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80022b4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80022b8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ba:	2302      	movs	r3, #2
 80022bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c2:	2303      	movs	r3, #3
 80022c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022c6:	230c      	movs	r3, #12
 80022c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	4619      	mov	r1, r3
 80022ce:	4818      	ldr	r0, [pc, #96]	; (8002330 <HAL_FMC_MspInit+0x118>)
 80022d0:	f000 fcaa 	bl	8002c28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80022d4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80022d8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e2:	2303      	movs	r3, #3
 80022e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022e6:	230c      	movs	r3, #12
 80022e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	4619      	mov	r1, r3
 80022ee:	4811      	ldr	r0, [pc, #68]	; (8002334 <HAL_FMC_MspInit+0x11c>)
 80022f0:	f000 fc9a 	bl	8002c28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80022f4:	2360      	movs	r3, #96	; 0x60
 80022f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002300:	2303      	movs	r3, #3
 8002302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002304:	230c      	movs	r3, #12
 8002306:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	4619      	mov	r1, r3
 800230c:	480a      	ldr	r0, [pc, #40]	; (8002338 <HAL_FMC_MspInit+0x120>)
 800230e:	f000 fc8b 	bl	8002c28 <HAL_GPIO_Init>
 8002312:	e000      	b.n	8002316 <HAL_FMC_MspInit+0xfe>
    return;
 8002314:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	200001f8 	.word	0x200001f8
 8002320:	40023800 	.word	0x40023800
 8002324:	40021400 	.word	0x40021400
 8002328:	40020800 	.word	0x40020800
 800232c:	40021800 	.word	0x40021800
 8002330:	40021000 	.word	0x40021000
 8002334:	40020c00 	.word	0x40020c00
 8002338:	40020400 	.word	0x40020400

0800233c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002344:	f7ff ff68 	bl	8002218 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08c      	sub	sp, #48	; 0x30
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002360:	2200      	movs	r2, #0
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	2036      	movs	r0, #54	; 0x36
 8002366:	f000 fa2d 	bl	80027c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800236a:	2036      	movs	r0, #54	; 0x36
 800236c:	f000 fa46 	bl	80027fc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	4b1f      	ldr	r3, [pc, #124]	; (80023f4 <HAL_InitTick+0xa4>)
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	4a1e      	ldr	r2, [pc, #120]	; (80023f4 <HAL_InitTick+0xa4>)
 800237a:	f043 0310 	orr.w	r3, r3, #16
 800237e:	6413      	str	r3, [r2, #64]	; 0x40
 8002380:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_InitTick+0xa4>)
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800238c:	f107 0210 	add.w	r2, r7, #16
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	4611      	mov	r1, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f001 fdec 	bl	8003f74 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800239c:	f001 fdc2 	bl	8003f24 <HAL_RCC_GetPCLK1Freq>
 80023a0:	4603      	mov	r3, r0
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80023a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a8:	4a13      	ldr	r2, [pc, #76]	; (80023f8 <HAL_InitTick+0xa8>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	0c9b      	lsrs	r3, r3, #18
 80023b0:	3b01      	subs	r3, #1
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <HAL_InitTick+0xac>)
 80023b6:	4a12      	ldr	r2, [pc, #72]	; (8002400 <HAL_InitTick+0xb0>)
 80023b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <HAL_InitTick+0xac>)
 80023bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023c0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80023c2:	4a0e      	ldr	r2, [pc, #56]	; (80023fc <HAL_InitTick+0xac>)
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_InitTick+0xac>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_InitTick+0xac>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80023d4:	4809      	ldr	r0, [pc, #36]	; (80023fc <HAL_InitTick+0xac>)
 80023d6:	f002 fbd7 	bl	8004b88 <HAL_TIM_Base_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d104      	bne.n	80023ea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80023e0:	4806      	ldr	r0, [pc, #24]	; (80023fc <HAL_InitTick+0xac>)
 80023e2:	f002 fbfc 	bl	8004bde <HAL_TIM_Base_Start_IT>
 80023e6:	4603      	mov	r3, r0
 80023e8:	e000      	b.n	80023ec <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3730      	adds	r7, #48	; 0x30
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40023800 	.word	0x40023800
 80023f8:	431bde83 	.word	0x431bde83
 80023fc:	20000404 	.word	0x20000404
 8002400:	40001000 	.word	0x40001000

08002404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002416:	e7fe      	b.n	8002416 <HardFault_Handler+0x4>

08002418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800241c:	e7fe      	b.n	800241c <MemManage_Handler+0x4>

0800241e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002422:	e7fe      	b.n	8002422 <BusFault_Handler+0x4>

08002424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <UsageFault_Handler+0x4>

0800242a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002468:	4802      	ldr	r0, [pc, #8]	; (8002474 <TIM6_DAC_IRQHandler+0x10>)
 800246a:	f002 fbdc 	bl	8004c26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000404 	.word	0x20000404

08002478 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <LTDC_IRQHandler+0x10>)
 800247e:	f000 fe7f 	bl	8003180 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000268 	.word	0x20000268

0800248c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <DMA2D_IRQHandler+0x10>)
 8002492:	f000 fa26 	bl	80028e2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000390 	.word	0x20000390

080024a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024a8:	4a14      	ldr	r2, [pc, #80]	; (80024fc <_sbrk+0x5c>)
 80024aa:	4b15      	ldr	r3, [pc, #84]	; (8002500 <_sbrk+0x60>)
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <_sbrk+0x64>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d102      	bne.n	80024c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024bc:	4b11      	ldr	r3, [pc, #68]	; (8002504 <_sbrk+0x64>)
 80024be:	4a12      	ldr	r2, [pc, #72]	; (8002508 <_sbrk+0x68>)
 80024c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024c2:	4b10      	ldr	r3, [pc, #64]	; (8002504 <_sbrk+0x64>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d207      	bcs.n	80024e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d0:	f003 fcf8 	bl	8005ec4 <__errno>
 80024d4:	4602      	mov	r2, r0
 80024d6:	230c      	movs	r3, #12
 80024d8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80024da:	f04f 33ff 	mov.w	r3, #4294967295
 80024de:	e009      	b.n	80024f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e0:	4b08      	ldr	r3, [pc, #32]	; (8002504 <_sbrk+0x64>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024e6:	4b07      	ldr	r3, [pc, #28]	; (8002504 <_sbrk+0x64>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	4a05      	ldr	r2, [pc, #20]	; (8002504 <_sbrk+0x64>)
 80024f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024f2:	68fb      	ldr	r3, [r7, #12]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20030000 	.word	0x20030000
 8002500:	00000400 	.word	0x00000400
 8002504:	200001fc 	.word	0x200001fc
 8002508:	20000450 	.word	0x20000450

0800250c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002510:	4b08      	ldr	r3, [pc, #32]	; (8002534 <SystemInit+0x28>)
 8002512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002516:	4a07      	ldr	r2, [pc, #28]	; (8002534 <SystemInit+0x28>)
 8002518:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800251c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002520:	4b04      	ldr	r3, [pc, #16]	; (8002534 <SystemInit+0x28>)
 8002522:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002526:	609a      	str	r2, [r3, #8]
#endif
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002570 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800253c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800253e:	e003      	b.n	8002548 <LoopCopyDataInit>

08002540 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002542:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002544:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002546:	3104      	adds	r1, #4

08002548 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002548:	480b      	ldr	r0, [pc, #44]	; (8002578 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800254a:	4b0c      	ldr	r3, [pc, #48]	; (800257c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800254c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800254e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002550:	d3f6      	bcc.n	8002540 <CopyDataInit>
  ldr  r2, =_sbss
 8002552:	4a0b      	ldr	r2, [pc, #44]	; (8002580 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002554:	e002      	b.n	800255c <LoopFillZerobss>

08002556 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002556:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002558:	f842 3b04 	str.w	r3, [r2], #4

0800255c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800255e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002560:	d3f9      	bcc.n	8002556 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002562:	f7ff ffd3 	bl	800250c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002566:	f003 fcb3 	bl	8005ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800256a:	f7fe ff81 	bl	8001470 <main>
  bx  lr    
 800256e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002570:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002574:	080090c8 	.word	0x080090c8
  ldr  r0, =_sdata
 8002578:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800257c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002580:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8002584:	2000044c 	.word	0x2000044c

08002588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002588:	e7fe      	b.n	8002588 <ADC_IRQHandler>
	...

0800258c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002590:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <HAL_Init+0x40>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0d      	ldr	r2, [pc, #52]	; (80025cc <HAL_Init+0x40>)
 8002596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800259a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_Init+0x40>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <HAL_Init+0x40>)
 80025a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a8:	4b08      	ldr	r3, [pc, #32]	; (80025cc <HAL_Init+0x40>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a07      	ldr	r2, [pc, #28]	; (80025cc <HAL_Init+0x40>)
 80025ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b4:	2003      	movs	r0, #3
 80025b6:	f000 f8fa 	bl	80027ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7ff fec8 	bl	8002350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025c0:	f7ff fbec 	bl	8001d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40023c00 	.word	0x40023c00

080025d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_IncTick+0x20>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_IncTick+0x24>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	4a04      	ldr	r2, [pc, #16]	; (80025f4 <HAL_IncTick+0x24>)
 80025e2:	6013      	str	r3, [r2, #0]
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000008 	.word	0x20000008
 80025f4:	20000444 	.word	0x20000444

080025f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return uwTick;
 80025fc:	4b03      	ldr	r3, [pc, #12]	; (800260c <HAL_GetTick+0x14>)
 80025fe:	681b      	ldr	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000444 	.word	0x20000444

08002610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002618:	f7ff ffee 	bl	80025f8 <HAL_GetTick>
 800261c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d005      	beq.n	8002636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_Delay+0x40>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4413      	add	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002636:	bf00      	nop
 8002638:	f7ff ffde 	bl	80025f8 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	429a      	cmp	r2, r3
 8002646:	d8f7      	bhi.n	8002638 <HAL_Delay+0x28>
  {
  }
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20000008 	.word	0x20000008

08002654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002670:	4013      	ands	r3, r2
 8002672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800267c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002686:	4a04      	ldr	r2, [pc, #16]	; (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	60d3      	str	r3, [r2, #12]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a0:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <__NVIC_GetPriorityGrouping+0x18>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	0a1b      	lsrs	r3, r3, #8
 80026a6:	f003 0307 	and.w	r3, r3, #7
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	db0b      	blt.n	80026e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	f003 021f 	and.w	r2, r3, #31
 80026d0:	4907      	ldr	r1, [pc, #28]	; (80026f0 <__NVIC_EnableIRQ+0x38>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	2001      	movs	r0, #1
 80026da:	fa00 f202 	lsl.w	r2, r0, r2
 80026de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000e100 	.word	0xe000e100

080026f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	6039      	str	r1, [r7, #0]
 80026fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	2b00      	cmp	r3, #0
 8002706:	db0a      	blt.n	800271e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	b2da      	uxtb	r2, r3
 800270c:	490c      	ldr	r1, [pc, #48]	; (8002740 <__NVIC_SetPriority+0x4c>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	0112      	lsls	r2, r2, #4
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	440b      	add	r3, r1
 8002718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800271c:	e00a      	b.n	8002734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	b2da      	uxtb	r2, r3
 8002722:	4908      	ldr	r1, [pc, #32]	; (8002744 <__NVIC_SetPriority+0x50>)
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	3b04      	subs	r3, #4
 800272c:	0112      	lsls	r2, r2, #4
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	440b      	add	r3, r1
 8002732:	761a      	strb	r2, [r3, #24]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000e100 	.word	0xe000e100
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	; 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f1c3 0307 	rsb	r3, r3, #7
 8002762:	2b04      	cmp	r3, #4
 8002764:	bf28      	it	cs
 8002766:	2304      	movcs	r3, #4
 8002768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3304      	adds	r3, #4
 800276e:	2b06      	cmp	r3, #6
 8002770:	d902      	bls.n	8002778 <NVIC_EncodePriority+0x30>
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3b03      	subs	r3, #3
 8002776:	e000      	b.n	800277a <NVIC_EncodePriority+0x32>
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	f04f 32ff 	mov.w	r2, #4294967295
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43da      	mvns	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	401a      	ands	r2, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002790:	f04f 31ff 	mov.w	r1, #4294967295
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	fa01 f303 	lsl.w	r3, r1, r3
 800279a:	43d9      	mvns	r1, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a0:	4313      	orrs	r3, r2
         );
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3724      	adds	r7, #36	; 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ff4c 	bl	8002654 <__NVIC_SetPriorityGrouping>
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d6:	f7ff ff61 	bl	800269c <__NVIC_GetPriorityGrouping>
 80027da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	68b9      	ldr	r1, [r7, #8]
 80027e0:	6978      	ldr	r0, [r7, #20]
 80027e2:	f7ff ffb1 	bl	8002748 <NVIC_EncodePriority>
 80027e6:	4602      	mov	r2, r0
 80027e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff ff80 	bl	80026f4 <__NVIC_SetPriority>
}
 80027f4:	bf00      	nop
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff ff54 	bl	80026b8 <__NVIC_EnableIRQ>
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e00e      	b.n	8002848 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	795b      	ldrb	r3, [r3, #5]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d105      	bne.n	8002840 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff fada 	bl	8001df4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e03b      	b.n	80028da <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff fade 	bl	8001e38 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a0:	f023 0107 	bic.w	r1, r3, #7
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68d1      	ldr	r1, [r2, #12]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6812      	ldr	r2, [r2, #0]
 80028c6:	430b      	orrs	r3, r1
 80028c8:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b00      	cmp	r3, #0
 8002902:	d026      	beq.n	8002952 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d021      	beq.n	8002952 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800291c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002922:	f043 0201 	orr.w	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2201      	movs	r2, #1
 8002930:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2204      	movs	r2, #4
 8002936:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b00      	cmp	r3, #0
 800295a:	d026      	beq.n	80029aa <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d021      	beq.n	80029aa <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002974:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2220      	movs	r2, #32
 800297c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002982:	f043 0202 	orr.w	r2, r3, #2
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2204      	movs	r2, #4
 800298e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d026      	beq.n	8002a02 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d021      	beq.n	8002a02 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029cc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2208      	movs	r2, #8
 80029d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029da:	f043 0204 	orr.w	r2, r3, #4
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2204      	movs	r2, #4
 80029e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d013      	beq.n	8002a34 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00e      	beq.n	8002a34 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a24:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f853 	bl	8002ada <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d024      	beq.n	8002a88 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d01f      	beq.n	8002a88 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a56:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01f      	beq.n	8002ad2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01a      	beq.n	8002ad2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002aaa:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2210      	movs	r2, #16
 8002ab2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f80e 	bl	8002aee <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002ad2:	bf00      	nop
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_DMA2D_ConfigLayer+0x20>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e079      	b.n	8002c18 <HAL_DMA2D_ConfigLayer+0x114>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	3318      	adds	r3, #24
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	041b      	lsls	r3, r3, #16
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002b4e:	4b35      	ldr	r3, [pc, #212]	; (8002c24 <HAL_DMA2D_ConfigLayer+0x120>)
 8002b50:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b0a      	cmp	r3, #10
 8002b58:	d003      	beq.n	8002b62 <HAL_DMA2D_ConfigLayer+0x5e>
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b09      	cmp	r3, #9
 8002b60:	d107      	bne.n	8002b72 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	e005      	b.n	8002b7e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	061b      	lsls	r3, r3, #24
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d120      	bne.n	8002bc6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	ea02 0103 	and.w	r1, r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b0a      	cmp	r3, #10
 8002bac:	d003      	beq.n	8002bb6 <HAL_DMA2D_ConfigLayer+0xb2>
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b09      	cmp	r3, #9
 8002bb4:	d127      	bne.n	8002c06 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002bc2:	629a      	str	r2, [r3, #40]	; 0x28
 8002bc4:	e01f      	b.n	8002c06 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69da      	ldr	r2, [r3, #28]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	ea02 0103 	and.w	r1, r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b0a      	cmp	r3, #10
 8002bee:	d003      	beq.n	8002bf8 <HAL_DMA2D_ConfigLayer+0xf4>
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b09      	cmp	r3, #9
 8002bf6:	d106      	bne.n	8002c06 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002c04:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	371c      	adds	r7, #28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	ff03000f 	.word	0xff03000f

08002c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b089      	sub	sp, #36	; 0x24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]
 8002c42:	e177      	b.n	8002f34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c44:	2201      	movs	r2, #1
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4013      	ands	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	f040 8166 	bne.w	8002f2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d00b      	beq.n	8002c82 <HAL_GPIO_Init+0x5a>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d007      	beq.n	8002c82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c76:	2b11      	cmp	r3, #17
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b12      	cmp	r3, #18
 8002c80:	d130      	bne.n	8002ce4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cb8:	2201      	movs	r2, #1
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	091b      	lsrs	r3, r3, #4
 8002cce:	f003 0201 	and.w	r2, r3, #1
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	2203      	movs	r2, #3
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d003      	beq.n	8002d24 <HAL_GPIO_Init+0xfc>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b12      	cmp	r3, #18
 8002d22:	d123      	bne.n	8002d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	08da      	lsrs	r2, r3, #3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3208      	adds	r2, #8
 8002d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	220f      	movs	r2, #15
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	08da      	lsrs	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3208      	adds	r2, #8
 8002d66:	69b9      	ldr	r1, [r7, #24]
 8002d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	2203      	movs	r2, #3
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 0203 	and.w	r2, r3, #3
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 80c0 	beq.w	8002f2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	4b65      	ldr	r3, [pc, #404]	; (8002f48 <HAL_GPIO_Init+0x320>)
 8002db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db6:	4a64      	ldr	r2, [pc, #400]	; (8002f48 <HAL_GPIO_Init+0x320>)
 8002db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dbe:	4b62      	ldr	r3, [pc, #392]	; (8002f48 <HAL_GPIO_Init+0x320>)
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dca:	4a60      	ldr	r2, [pc, #384]	; (8002f4c <HAL_GPIO_Init+0x324>)
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	089b      	lsrs	r3, r3, #2
 8002dd0:	3302      	adds	r3, #2
 8002dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	220f      	movs	r2, #15
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4013      	ands	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a57      	ldr	r2, [pc, #348]	; (8002f50 <HAL_GPIO_Init+0x328>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d037      	beq.n	8002e66 <HAL_GPIO_Init+0x23e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a56      	ldr	r2, [pc, #344]	; (8002f54 <HAL_GPIO_Init+0x32c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d031      	beq.n	8002e62 <HAL_GPIO_Init+0x23a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a55      	ldr	r2, [pc, #340]	; (8002f58 <HAL_GPIO_Init+0x330>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d02b      	beq.n	8002e5e <HAL_GPIO_Init+0x236>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a54      	ldr	r2, [pc, #336]	; (8002f5c <HAL_GPIO_Init+0x334>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d025      	beq.n	8002e5a <HAL_GPIO_Init+0x232>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a53      	ldr	r2, [pc, #332]	; (8002f60 <HAL_GPIO_Init+0x338>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d01f      	beq.n	8002e56 <HAL_GPIO_Init+0x22e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a52      	ldr	r2, [pc, #328]	; (8002f64 <HAL_GPIO_Init+0x33c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d019      	beq.n	8002e52 <HAL_GPIO_Init+0x22a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a51      	ldr	r2, [pc, #324]	; (8002f68 <HAL_GPIO_Init+0x340>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d013      	beq.n	8002e4e <HAL_GPIO_Init+0x226>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a50      	ldr	r2, [pc, #320]	; (8002f6c <HAL_GPIO_Init+0x344>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00d      	beq.n	8002e4a <HAL_GPIO_Init+0x222>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a4f      	ldr	r2, [pc, #316]	; (8002f70 <HAL_GPIO_Init+0x348>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d007      	beq.n	8002e46 <HAL_GPIO_Init+0x21e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a4e      	ldr	r2, [pc, #312]	; (8002f74 <HAL_GPIO_Init+0x34c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d101      	bne.n	8002e42 <HAL_GPIO_Init+0x21a>
 8002e3e:	2309      	movs	r3, #9
 8002e40:	e012      	b.n	8002e68 <HAL_GPIO_Init+0x240>
 8002e42:	230a      	movs	r3, #10
 8002e44:	e010      	b.n	8002e68 <HAL_GPIO_Init+0x240>
 8002e46:	2308      	movs	r3, #8
 8002e48:	e00e      	b.n	8002e68 <HAL_GPIO_Init+0x240>
 8002e4a:	2307      	movs	r3, #7
 8002e4c:	e00c      	b.n	8002e68 <HAL_GPIO_Init+0x240>
 8002e4e:	2306      	movs	r3, #6
 8002e50:	e00a      	b.n	8002e68 <HAL_GPIO_Init+0x240>
 8002e52:	2305      	movs	r3, #5
 8002e54:	e008      	b.n	8002e68 <HAL_GPIO_Init+0x240>
 8002e56:	2304      	movs	r3, #4
 8002e58:	e006      	b.n	8002e68 <HAL_GPIO_Init+0x240>
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e004      	b.n	8002e68 <HAL_GPIO_Init+0x240>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e002      	b.n	8002e68 <HAL_GPIO_Init+0x240>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <HAL_GPIO_Init+0x240>
 8002e66:	2300      	movs	r3, #0
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	f002 0203 	and.w	r2, r2, #3
 8002e6e:	0092      	lsls	r2, r2, #2
 8002e70:	4093      	lsls	r3, r2
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e78:	4934      	ldr	r1, [pc, #208]	; (8002f4c <HAL_GPIO_Init+0x324>)
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	089b      	lsrs	r3, r3, #2
 8002e7e:	3302      	adds	r3, #2
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e86:	4b3c      	ldr	r3, [pc, #240]	; (8002f78 <HAL_GPIO_Init+0x350>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eaa:	4a33      	ldr	r2, [pc, #204]	; (8002f78 <HAL_GPIO_Init+0x350>)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002eb0:	4b31      	ldr	r3, [pc, #196]	; (8002f78 <HAL_GPIO_Init+0x350>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ed4:	4a28      	ldr	r2, [pc, #160]	; (8002f78 <HAL_GPIO_Init+0x350>)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eda:	4b27      	ldr	r3, [pc, #156]	; (8002f78 <HAL_GPIO_Init+0x350>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002efe:	4a1e      	ldr	r2, [pc, #120]	; (8002f78 <HAL_GPIO_Init+0x350>)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f04:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <HAL_GPIO_Init+0x350>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f28:	4a13      	ldr	r2, [pc, #76]	; (8002f78 <HAL_GPIO_Init+0x350>)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3301      	adds	r3, #1
 8002f32:	61fb      	str	r3, [r7, #28]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	2b0f      	cmp	r3, #15
 8002f38:	f67f ae84 	bls.w	8002c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	3724      	adds	r7, #36	; 0x24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40013800 	.word	0x40013800
 8002f50:	40020000 	.word	0x40020000
 8002f54:	40020400 	.word	0x40020400
 8002f58:	40020800 	.word	0x40020800
 8002f5c:	40020c00 	.word	0x40020c00
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40021400 	.word	0x40021400
 8002f68:	40021800 	.word	0x40021800
 8002f6c:	40021c00 	.word	0x40021c00
 8002f70:	40022000 	.word	0x40022000
 8002f74:	40022400 	.word	0x40022400
 8002f78:	40013c00 	.word	0x40013c00

08002f7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	887b      	ldrh	r3, [r7, #2]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
 8002f98:	e001      	b.n	8002f9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	807b      	strh	r3, [r7, #2]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fbc:	787b      	ldrb	r3, [r7, #1]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fc2:	887a      	ldrh	r2, [r7, #2]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fc8:	e003      	b.n	8002fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fca:	887b      	ldrh	r3, [r7, #2]
 8002fcc:	041a      	lsls	r2, r3, #16
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	619a      	str	r2, [r3, #24]
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
	...

08002fe0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e0bf      	b.n	8003172 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fe ff3e 	bl	8001e88 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699a      	ldr	r2, [r3, #24]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003022:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6999      	ldr	r1, [r3, #24]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003038:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6899      	ldr	r1, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	4b4a      	ldr	r3, [pc, #296]	; (800317c <HAL_LTDC_Init+0x19c>)
 8003054:	400b      	ands	r3, r1
 8003056:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	041b      	lsls	r3, r3, #16
 800305e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6899      	ldr	r1, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699a      	ldr	r2, [r3, #24]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68d9      	ldr	r1, [r3, #12]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4b3e      	ldr	r3, [pc, #248]	; (800317c <HAL_LTDC_Init+0x19c>)
 8003082:	400b      	ands	r3, r1
 8003084:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	041b      	lsls	r3, r3, #16
 800308c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68d9      	ldr	r1, [r3, #12]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1a      	ldr	r2, [r3, #32]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6919      	ldr	r1, [r3, #16]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	4b33      	ldr	r3, [pc, #204]	; (800317c <HAL_LTDC_Init+0x19c>)
 80030b0:	400b      	ands	r3, r1
 80030b2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	041b      	lsls	r3, r3, #16
 80030ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6919      	ldr	r1, [r3, #16]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6959      	ldr	r1, [r3, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4b27      	ldr	r3, [pc, #156]	; (800317c <HAL_LTDC_Init+0x19c>)
 80030de:	400b      	ands	r3, r1
 80030e0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e6:	041b      	lsls	r3, r3, #16
 80030e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6959      	ldr	r1, [r3, #20]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003110:	041b      	lsls	r3, r3, #16
 8003112:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003122:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4313      	orrs	r3, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0206 	orr.w	r2, r2, #6
 800314e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699a      	ldr	r2, [r3, #24]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	f000f800 	.word	0xf000f800

08003180 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003196:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d023      	beq.n	80031ea <HAL_LTDC_IRQHandler+0x6a>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d01e      	beq.n	80031ea <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0204 	bic.w	r2, r2, #4
 80031ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2204      	movs	r2, #4
 80031c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031ca:	f043 0201 	orr.w	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2204      	movs	r2, #4
 80031d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f86f 	bl	80032c8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d023      	beq.n	800323c <HAL_LTDC_IRQHandler+0xbc>
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d01e      	beq.n	800323c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0202 	bic.w	r2, r2, #2
 800320c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2202      	movs	r2, #2
 8003214:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800321c:	f043 0202 	orr.w	r2, r3, #2
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2204      	movs	r2, #4
 800322a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f846 	bl	80032c8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d01b      	beq.n	800327e <HAL_LTDC_IRQHandler+0xfe>
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d016      	beq.n	800327e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0201 	bic.w	r2, r2, #1
 800325e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2201      	movs	r2, #1
 8003266:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f82f 	bl	80032dc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01b      	beq.n	80032c0 <HAL_LTDC_IRQHandler+0x140>
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d016      	beq.n	80032c0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0208 	bic.w	r2, r2, #8
 80032a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2208      	movs	r2, #8
 80032a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f818 	bl	80032f0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003304:	b5b0      	push	{r4, r5, r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003316:	2b01      	cmp	r3, #1
 8003318:	d101      	bne.n	800331e <HAL_LTDC_ConfigLayer+0x1a>
 800331a:	2302      	movs	r3, #2
 800331c:	e02c      	b.n	8003378 <HAL_LTDC_ConfigLayer+0x74>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2202      	movs	r2, #2
 800332a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2134      	movs	r1, #52	; 0x34
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	4413      	add	r3, r2
 800333a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	4614      	mov	r4, r2
 8003342:	461d      	mov	r5, r3
 8003344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800334a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800334c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800334e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003350:	682b      	ldr	r3, [r5, #0]
 8003352:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f811 	bl	8003380 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2201      	movs	r2, #1
 8003364:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bdb0      	pop	{r4, r5, r7, pc}

08003380 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003380:	b480      	push	{r7}
 8003382:	b089      	sub	sp, #36	; 0x24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	0c1b      	lsrs	r3, r3, #16
 8003398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339c:	4413      	add	r3, r2
 800339e:	041b      	lsls	r3, r3, #16
 80033a0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	01db      	lsls	r3, r3, #7
 80033ac:	4413      	add	r3, r2
 80033ae:	3384      	adds	r3, #132	; 0x84
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	6812      	ldr	r2, [r2, #0]
 80033b6:	4611      	mov	r1, r2
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	01d2      	lsls	r2, r2, #7
 80033bc:	440a      	add	r2, r1
 80033be:	3284      	adds	r2, #132	; 0x84
 80033c0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80033c4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	0c1b      	lsrs	r3, r3, #16
 80033d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d6:	4413      	add	r3, r2
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4619      	mov	r1, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	01db      	lsls	r3, r3, #7
 80033e4:	440b      	add	r3, r1
 80033e6:	3384      	adds	r3, #132	; 0x84
 80033e8:	4619      	mov	r1, r3
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033fe:	4413      	add	r3, r2
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	461a      	mov	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	01db      	lsls	r3, r3, #7
 800340e:	4413      	add	r3, r2
 8003410:	3384      	adds	r3, #132	; 0x84
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	4611      	mov	r1, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	01d2      	lsls	r2, r2, #7
 800341e:	440a      	add	r2, r1
 8003420:	3284      	adds	r2, #132	; 0x84
 8003422:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003426:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003436:	4413      	add	r3, r2
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4619      	mov	r1, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	01db      	lsls	r3, r3, #7
 8003444:	440b      	add	r3, r1
 8003446:	3384      	adds	r3, #132	; 0x84
 8003448:	4619      	mov	r1, r3
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	4313      	orrs	r3, r2
 800344e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	461a      	mov	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	01db      	lsls	r3, r3, #7
 800345a:	4413      	add	r3, r2
 800345c:	3384      	adds	r3, #132	; 0x84
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	4611      	mov	r1, r2
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	01d2      	lsls	r2, r2, #7
 800346a:	440a      	add	r2, r1
 800346c:	3284      	adds	r2, #132	; 0x84
 800346e:	f023 0307 	bic.w	r3, r3, #7
 8003472:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	01db      	lsls	r3, r3, #7
 800347e:	4413      	add	r3, r2
 8003480:	3384      	adds	r3, #132	; 0x84
 8003482:	461a      	mov	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003490:	021b      	lsls	r3, r3, #8
 8003492:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	061b      	lsls	r3, r3, #24
 80034a4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	01db      	lsls	r3, r3, #7
 80034b0:	4413      	add	r3, r2
 80034b2:	3384      	adds	r3, #132	; 0x84
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	01db      	lsls	r3, r3, #7
 80034c0:	4413      	add	r3, r2
 80034c2:	3384      	adds	r3, #132	; 0x84
 80034c4:	461a      	mov	r2, r3
 80034c6:	2300      	movs	r3, #0
 80034c8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034d0:	461a      	mov	r2, r3
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	431a      	orrs	r2, r3
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	431a      	orrs	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4619      	mov	r1, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	01db      	lsls	r3, r3, #7
 80034e4:	440b      	add	r3, r1
 80034e6:	3384      	adds	r3, #132	; 0x84
 80034e8:	4619      	mov	r1, r3
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	01db      	lsls	r3, r3, #7
 80034fa:	4413      	add	r3, r2
 80034fc:	3384      	adds	r3, #132	; 0x84
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	4611      	mov	r1, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	01d2      	lsls	r2, r2, #7
 800350a:	440a      	add	r2, r1
 800350c:	3284      	adds	r2, #132	; 0x84
 800350e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003512:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	461a      	mov	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	01db      	lsls	r3, r3, #7
 800351e:	4413      	add	r3, r2
 8003520:	3384      	adds	r3, #132	; 0x84
 8003522:	461a      	mov	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	461a      	mov	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	01db      	lsls	r3, r3, #7
 8003534:	4413      	add	r3, r2
 8003536:	3384      	adds	r3, #132	; 0x84
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	4611      	mov	r1, r2
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	01d2      	lsls	r2, r2, #7
 8003544:	440a      	add	r2, r1
 8003546:	3284      	adds	r2, #132	; 0x84
 8003548:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800354c:	f023 0307 	bic.w	r3, r3, #7
 8003550:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	69da      	ldr	r2, [r3, #28]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	68f9      	ldr	r1, [r7, #12]
 800355c:	6809      	ldr	r1, [r1, #0]
 800355e:	4608      	mov	r0, r1
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	01c9      	lsls	r1, r1, #7
 8003564:	4401      	add	r1, r0
 8003566:	3184      	adds	r1, #132	; 0x84
 8003568:	4313      	orrs	r3, r2
 800356a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	01db      	lsls	r3, r3, #7
 8003576:	4413      	add	r3, r2
 8003578:	3384      	adds	r3, #132	; 0x84
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	01db      	lsls	r3, r3, #7
 8003586:	4413      	add	r3, r2
 8003588:	3384      	adds	r3, #132	; 0x84
 800358a:	461a      	mov	r2, r3
 800358c:	2300      	movs	r3, #0
 800358e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	01db      	lsls	r3, r3, #7
 800359a:	4413      	add	r3, r2
 800359c:	3384      	adds	r3, #132	; 0x84
 800359e:	461a      	mov	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d102      	bne.n	80035b4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80035ae:	2304      	movs	r3, #4
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	e01b      	b.n	80035ec <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d102      	bne.n	80035c2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80035bc:	2303      	movs	r3, #3
 80035be:	61fb      	str	r3, [r7, #28]
 80035c0:	e014      	b.n	80035ec <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d00b      	beq.n	80035e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d007      	beq.n	80035e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d003      	beq.n	80035e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80035de:	2b07      	cmp	r3, #7
 80035e0:	d102      	bne.n	80035e8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80035e2:	2302      	movs	r3, #2
 80035e4:	61fb      	str	r3, [r7, #28]
 80035e6:	e001      	b.n	80035ec <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80035e8:	2301      	movs	r3, #1
 80035ea:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	01db      	lsls	r3, r3, #7
 80035f6:	4413      	add	r3, r2
 80035f8:	3384      	adds	r3, #132	; 0x84
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	4611      	mov	r1, r2
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	01d2      	lsls	r2, r2, #7
 8003606:	440a      	add	r2, r1
 8003608:	3284      	adds	r2, #132	; 0x84
 800360a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800360e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	fb02 f303 	mul.w	r3, r2, r3
 800361a:	041a      	lsls	r2, r3, #16
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	1acb      	subs	r3, r1, r3
 8003626:	69f9      	ldr	r1, [r7, #28]
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	3303      	adds	r3, #3
 800362e:	68f9      	ldr	r1, [r7, #12]
 8003630:	6809      	ldr	r1, [r1, #0]
 8003632:	4608      	mov	r0, r1
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	01c9      	lsls	r1, r1, #7
 8003638:	4401      	add	r1, r0
 800363a:	3184      	adds	r1, #132	; 0x84
 800363c:	4313      	orrs	r3, r2
 800363e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	01db      	lsls	r3, r3, #7
 800364a:	4413      	add	r3, r2
 800364c:	3384      	adds	r3, #132	; 0x84
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	4611      	mov	r1, r2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	01d2      	lsls	r2, r2, #7
 800365a:	440a      	add	r2, r1
 800365c:	3284      	adds	r2, #132	; 0x84
 800365e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003662:	f023 0307 	bic.w	r3, r3, #7
 8003666:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	01db      	lsls	r3, r3, #7
 8003672:	4413      	add	r3, r2
 8003674:	3384      	adds	r3, #132	; 0x84
 8003676:	461a      	mov	r2, r3
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	01db      	lsls	r3, r3, #7
 8003688:	4413      	add	r3, r2
 800368a:	3384      	adds	r3, #132	; 0x84
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	6812      	ldr	r2, [r2, #0]
 8003692:	4611      	mov	r1, r2
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	01d2      	lsls	r2, r2, #7
 8003698:	440a      	add	r2, r1
 800369a:	3284      	adds	r2, #132	; 0x84
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6013      	str	r3, [r2, #0]
}
 80036a2:	bf00      	nop
 80036a4:	3724      	adds	r7, #36	; 0x24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
	...

080036b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e25b      	b.n	8003b7a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d075      	beq.n	80037ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ce:	4ba3      	ldr	r3, [pc, #652]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d00c      	beq.n	80036f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036da:	4ba0      	ldr	r3, [pc, #640]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d112      	bne.n	800370c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036e6:	4b9d      	ldr	r3, [pc, #628]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f2:	d10b      	bne.n	800370c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f4:	4b99      	ldr	r3, [pc, #612]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d05b      	beq.n	80037b8 <HAL_RCC_OscConfig+0x108>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d157      	bne.n	80037b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e236      	b.n	8003b7a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003714:	d106      	bne.n	8003724 <HAL_RCC_OscConfig+0x74>
 8003716:	4b91      	ldr	r3, [pc, #580]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a90      	ldr	r2, [pc, #576]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 800371c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	e01d      	b.n	8003760 <HAL_RCC_OscConfig+0xb0>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800372c:	d10c      	bne.n	8003748 <HAL_RCC_OscConfig+0x98>
 800372e:	4b8b      	ldr	r3, [pc, #556]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a8a      	ldr	r2, [pc, #552]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	4b88      	ldr	r3, [pc, #544]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a87      	ldr	r2, [pc, #540]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	e00b      	b.n	8003760 <HAL_RCC_OscConfig+0xb0>
 8003748:	4b84      	ldr	r3, [pc, #528]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a83      	ldr	r2, [pc, #524]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 800374e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	4b81      	ldr	r3, [pc, #516]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a80      	ldr	r2, [pc, #512]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 800375a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800375e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d013      	beq.n	8003790 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003768:	f7fe ff46 	bl	80025f8 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003770:	f7fe ff42 	bl	80025f8 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b64      	cmp	r3, #100	; 0x64
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e1fb      	b.n	8003b7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	4b76      	ldr	r3, [pc, #472]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0xc0>
 800378e:	e014      	b.n	80037ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003790:	f7fe ff32 	bl	80025f8 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003798:	f7fe ff2e 	bl	80025f8 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b64      	cmp	r3, #100	; 0x64
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e1e7      	b.n	8003b7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037aa:	4b6c      	ldr	r3, [pc, #432]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0xe8>
 80037b6:	e000      	b.n	80037ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d063      	beq.n	800388e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037c6:	4b65      	ldr	r3, [pc, #404]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037d2:	4b62      	ldr	r3, [pc, #392]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d11c      	bne.n	8003818 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037de:	4b5f      	ldr	r3, [pc, #380]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d116      	bne.n	8003818 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ea:	4b5c      	ldr	r3, [pc, #368]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <HAL_RCC_OscConfig+0x152>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d001      	beq.n	8003802 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e1bb      	b.n	8003b7a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003802:	4b56      	ldr	r3, [pc, #344]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4952      	ldr	r1, [pc, #328]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003812:	4313      	orrs	r3, r2
 8003814:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003816:	e03a      	b.n	800388e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d020      	beq.n	8003862 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003820:	4b4f      	ldr	r3, [pc, #316]	; (8003960 <HAL_RCC_OscConfig+0x2b0>)
 8003822:	2201      	movs	r2, #1
 8003824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003826:	f7fe fee7 	bl	80025f8 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800382e:	f7fe fee3 	bl	80025f8 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e19c      	b.n	8003b7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003840:	4b46      	ldr	r3, [pc, #280]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0f0      	beq.n	800382e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384c:	4b43      	ldr	r3, [pc, #268]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4940      	ldr	r1, [pc, #256]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 800385c:	4313      	orrs	r3, r2
 800385e:	600b      	str	r3, [r1, #0]
 8003860:	e015      	b.n	800388e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003862:	4b3f      	ldr	r3, [pc, #252]	; (8003960 <HAL_RCC_OscConfig+0x2b0>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7fe fec6 	bl	80025f8 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003870:	f7fe fec2 	bl	80025f8 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e17b      	b.n	8003b7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003882:	4b36      	ldr	r3, [pc, #216]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d030      	beq.n	80038fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d016      	beq.n	80038d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038a2:	4b30      	ldr	r3, [pc, #192]	; (8003964 <HAL_RCC_OscConfig+0x2b4>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a8:	f7fe fea6 	bl	80025f8 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038b0:	f7fe fea2 	bl	80025f8 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e15b      	b.n	8003b7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c2:	4b26      	ldr	r3, [pc, #152]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 80038c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x200>
 80038ce:	e015      	b.n	80038fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038d0:	4b24      	ldr	r3, [pc, #144]	; (8003964 <HAL_RCC_OscConfig+0x2b4>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d6:	f7fe fe8f 	bl	80025f8 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038de:	f7fe fe8b 	bl	80025f8 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e144      	b.n	8003b7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f0:	4b1a      	ldr	r3, [pc, #104]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 80038f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1f0      	bne.n	80038de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80a0 	beq.w	8003a4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800390a:	2300      	movs	r3, #0
 800390c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800390e:	4b13      	ldr	r3, [pc, #76]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10f      	bne.n	800393a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	4b0f      	ldr	r3, [pc, #60]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	4a0e      	ldr	r2, [pc, #56]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 8003924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003928:	6413      	str	r3, [r2, #64]	; 0x40
 800392a:	4b0c      	ldr	r3, [pc, #48]	; (800395c <HAL_RCC_OscConfig+0x2ac>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003936:	2301      	movs	r3, #1
 8003938:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393a:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <HAL_RCC_OscConfig+0x2b8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d121      	bne.n	800398a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003946:	4b08      	ldr	r3, [pc, #32]	; (8003968 <HAL_RCC_OscConfig+0x2b8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a07      	ldr	r2, [pc, #28]	; (8003968 <HAL_RCC_OscConfig+0x2b8>)
 800394c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003952:	f7fe fe51 	bl	80025f8 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003958:	e011      	b.n	800397e <HAL_RCC_OscConfig+0x2ce>
 800395a:	bf00      	nop
 800395c:	40023800 	.word	0x40023800
 8003960:	42470000 	.word	0x42470000
 8003964:	42470e80 	.word	0x42470e80
 8003968:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396c:	f7fe fe44 	bl	80025f8 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e0fd      	b.n	8003b7a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397e:	4b81      	ldr	r3, [pc, #516]	; (8003b84 <HAL_RCC_OscConfig+0x4d4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d106      	bne.n	80039a0 <HAL_RCC_OscConfig+0x2f0>
 8003992:	4b7d      	ldr	r3, [pc, #500]	; (8003b88 <HAL_RCC_OscConfig+0x4d8>)
 8003994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003996:	4a7c      	ldr	r2, [pc, #496]	; (8003b88 <HAL_RCC_OscConfig+0x4d8>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	6713      	str	r3, [r2, #112]	; 0x70
 800399e:	e01c      	b.n	80039da <HAL_RCC_OscConfig+0x32a>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b05      	cmp	r3, #5
 80039a6:	d10c      	bne.n	80039c2 <HAL_RCC_OscConfig+0x312>
 80039a8:	4b77      	ldr	r3, [pc, #476]	; (8003b88 <HAL_RCC_OscConfig+0x4d8>)
 80039aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ac:	4a76      	ldr	r2, [pc, #472]	; (8003b88 <HAL_RCC_OscConfig+0x4d8>)
 80039ae:	f043 0304 	orr.w	r3, r3, #4
 80039b2:	6713      	str	r3, [r2, #112]	; 0x70
 80039b4:	4b74      	ldr	r3, [pc, #464]	; (8003b88 <HAL_RCC_OscConfig+0x4d8>)
 80039b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b8:	4a73      	ldr	r2, [pc, #460]	; (8003b88 <HAL_RCC_OscConfig+0x4d8>)
 80039ba:	f043 0301 	orr.w	r3, r3, #1
 80039be:	6713      	str	r3, [r2, #112]	; 0x70
 80039c0:	e00b      	b.n	80039da <HAL_RCC_OscConfig+0x32a>
 80039c2:	4b71      	ldr	r3, [pc, #452]	; (8003b88 <HAL_RCC_OscConfig+0x4d8>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	4a70      	ldr	r2, [pc, #448]	; (8003b88 <HAL_RCC_OscConfig+0x4d8>)
 80039c8:	f023 0301 	bic.w	r3, r3, #1
 80039cc:	6713      	str	r3, [r2, #112]	; 0x70
 80039ce:	4b6e      	ldr	r3, [pc, #440]	; (8003b88 <HAL_RCC_OscConfig+0x4d8>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d2:	4a6d      	ldr	r2, [pc, #436]	; (8003b88 <HAL_RCC_OscConfig+0x4d8>)
 80039d4:	f023 0304 	bic.w	r3, r3, #4
 80039d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d015      	beq.n	8003a0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e2:	f7fe fe09 	bl	80025f8 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e8:	e00a      	b.n	8003a00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ea:	f7fe fe05 	bl	80025f8 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e0bc      	b.n	8003b7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a00:	4b61      	ldr	r3, [pc, #388]	; (8003b88 <HAL_RCC_OscConfig+0x4d8>)
 8003a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0ee      	beq.n	80039ea <HAL_RCC_OscConfig+0x33a>
 8003a0c:	e014      	b.n	8003a38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a0e:	f7fe fdf3 	bl	80025f8 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a14:	e00a      	b.n	8003a2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a16:	f7fe fdef 	bl	80025f8 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e0a6      	b.n	8003b7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a2c:	4b56      	ldr	r3, [pc, #344]	; (8003b88 <HAL_RCC_OscConfig+0x4d8>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1ee      	bne.n	8003a16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a38:	7dfb      	ldrb	r3, [r7, #23]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d105      	bne.n	8003a4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a3e:	4b52      	ldr	r3, [pc, #328]	; (8003b88 <HAL_RCC_OscConfig+0x4d8>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	4a51      	ldr	r2, [pc, #324]	; (8003b88 <HAL_RCC_OscConfig+0x4d8>)
 8003a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 8092 	beq.w	8003b78 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a54:	4b4c      	ldr	r3, [pc, #304]	; (8003b88 <HAL_RCC_OscConfig+0x4d8>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 030c 	and.w	r3, r3, #12
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d05c      	beq.n	8003b1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d141      	bne.n	8003aec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a68:	4b48      	ldr	r3, [pc, #288]	; (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6e:	f7fe fdc3 	bl	80025f8 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a76:	f7fe fdbf 	bl	80025f8 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e078      	b.n	8003b7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a88:	4b3f      	ldr	r3, [pc, #252]	; (8003b88 <HAL_RCC_OscConfig+0x4d8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f0      	bne.n	8003a76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69da      	ldr	r2, [r3, #28]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	019b      	lsls	r3, r3, #6
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	085b      	lsrs	r3, r3, #1
 8003aac:	3b01      	subs	r3, #1
 8003aae:	041b      	lsls	r3, r3, #16
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	061b      	lsls	r3, r3, #24
 8003ab8:	4933      	ldr	r1, [pc, #204]	; (8003b88 <HAL_RCC_OscConfig+0x4d8>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003abe:	4b33      	ldr	r3, [pc, #204]	; (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7fe fd98 	bl	80025f8 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003acc:	f7fe fd94 	bl	80025f8 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e04d      	b.n	8003b7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ade:	4b2a      	ldr	r3, [pc, #168]	; (8003b88 <HAL_RCC_OscConfig+0x4d8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x41c>
 8003aea:	e045      	b.n	8003b78 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aec:	4b27      	ldr	r3, [pc, #156]	; (8003b8c <HAL_RCC_OscConfig+0x4dc>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af2:	f7fe fd81 	bl	80025f8 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afa:	f7fe fd7d 	bl	80025f8 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e036      	b.n	8003b7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0c:	4b1e      	ldr	r3, [pc, #120]	; (8003b88 <HAL_RCC_OscConfig+0x4d8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f0      	bne.n	8003afa <HAL_RCC_OscConfig+0x44a>
 8003b18:	e02e      	b.n	8003b78 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e029      	b.n	8003b7a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b26:	4b18      	ldr	r3, [pc, #96]	; (8003b88 <HAL_RCC_OscConfig+0x4d8>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d11c      	bne.n	8003b74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d115      	bne.n	8003b74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b4e:	4013      	ands	r3, r2
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d10d      	bne.n	8003b74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d106      	bne.n	8003b74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d001      	beq.n	8003b78 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40007000 	.word	0x40007000
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	42470060 	.word	0x42470060

08003b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0cc      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba4:	4b68      	ldr	r3, [pc, #416]	; (8003d48 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 030f 	and.w	r3, r3, #15
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d90c      	bls.n	8003bcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb2:	4b65      	ldr	r3, [pc, #404]	; (8003d48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bba:	4b63      	ldr	r3, [pc, #396]	; (8003d48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0b8      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d020      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d005      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003be4:	4b59      	ldr	r3, [pc, #356]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	4a58      	ldr	r2, [pc, #352]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bfc:	4b53      	ldr	r3, [pc, #332]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	4a52      	ldr	r2, [pc, #328]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c08:	4b50      	ldr	r3, [pc, #320]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	494d      	ldr	r1, [pc, #308]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d044      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d107      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2e:	4b47      	ldr	r3, [pc, #284]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d119      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e07f      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d003      	beq.n	8003c4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d107      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c4e:	4b3f      	ldr	r3, [pc, #252]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e06f      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c5e:	4b3b      	ldr	r3, [pc, #236]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e067      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c6e:	4b37      	ldr	r3, [pc, #220]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f023 0203 	bic.w	r2, r3, #3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4934      	ldr	r1, [pc, #208]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c80:	f7fe fcba 	bl	80025f8 <HAL_GetTick>
 8003c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c88:	f7fe fcb6 	bl	80025f8 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e04f      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9e:	4b2b      	ldr	r3, [pc, #172]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 020c 	and.w	r2, r3, #12
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d1eb      	bne.n	8003c88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb0:	4b25      	ldr	r3, [pc, #148]	; (8003d48 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d20c      	bcs.n	8003cd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cbe:	4b22      	ldr	r3, [pc, #136]	; (8003d48 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc6:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e032      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce4:	4b19      	ldr	r3, [pc, #100]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	4916      	ldr	r1, [pc, #88]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d02:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	490e      	ldr	r1, [pc, #56]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d16:	f000 f821 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 8003d1a:	4601      	mov	r1, r0
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	4a0a      	ldr	r2, [pc, #40]	; (8003d50 <HAL_RCC_ClockConfig+0x1c0>)
 8003d28:	5cd3      	ldrb	r3, [r2, r3]
 8003d2a:	fa21 f303 	lsr.w	r3, r1, r3
 8003d2e:	4a09      	ldr	r2, [pc, #36]	; (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d32:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fe fb0a 	bl	8002350 <HAL_InitTick>

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40023c00 	.word	0x40023c00
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	08008a74 	.word	0x08008a74
 8003d54:	20000000 	.word	0x20000000
 8003d58:	20000004 	.word	0x20000004

08003d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d72:	4b63      	ldr	r3, [pc, #396]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d007      	beq.n	8003d8e <HAL_RCC_GetSysClockFreq+0x32>
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d008      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x38>
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f040 80b4 	bne.w	8003ef0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d88:	4b5e      	ldr	r3, [pc, #376]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d8a:	60bb      	str	r3, [r7, #8]
       break;
 8003d8c:	e0b3      	b.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d8e:	4b5e      	ldr	r3, [pc, #376]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003d90:	60bb      	str	r3, [r7, #8]
      break;
 8003d92:	e0b0      	b.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d94:	4b5a      	ldr	r3, [pc, #360]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d9e:	4b58      	ldr	r3, [pc, #352]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d04a      	beq.n	8003e40 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003daa:	4b55      	ldr	r3, [pc, #340]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	099b      	lsrs	r3, r3, #6
 8003db0:	f04f 0400 	mov.w	r4, #0
 8003db4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	ea03 0501 	and.w	r5, r3, r1
 8003dc0:	ea04 0602 	and.w	r6, r4, r2
 8003dc4:	4629      	mov	r1, r5
 8003dc6:	4632      	mov	r2, r6
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	f04f 0400 	mov.w	r4, #0
 8003dd0:	0154      	lsls	r4, r2, #5
 8003dd2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003dd6:	014b      	lsls	r3, r1, #5
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4622      	mov	r2, r4
 8003ddc:	1b49      	subs	r1, r1, r5
 8003dde:	eb62 0206 	sbc.w	r2, r2, r6
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	f04f 0400 	mov.w	r4, #0
 8003dea:	0194      	lsls	r4, r2, #6
 8003dec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003df0:	018b      	lsls	r3, r1, #6
 8003df2:	1a5b      	subs	r3, r3, r1
 8003df4:	eb64 0402 	sbc.w	r4, r4, r2
 8003df8:	f04f 0100 	mov.w	r1, #0
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	00e2      	lsls	r2, r4, #3
 8003e02:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e06:	00d9      	lsls	r1, r3, #3
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4614      	mov	r4, r2
 8003e0c:	195b      	adds	r3, r3, r5
 8003e0e:	eb44 0406 	adc.w	r4, r4, r6
 8003e12:	f04f 0100 	mov.w	r1, #0
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	0262      	lsls	r2, r4, #9
 8003e1c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003e20:	0259      	lsls	r1, r3, #9
 8003e22:	460b      	mov	r3, r1
 8003e24:	4614      	mov	r4, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	4621      	mov	r1, r4
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f04f 0400 	mov.w	r4, #0
 8003e30:	461a      	mov	r2, r3
 8003e32:	4623      	mov	r3, r4
 8003e34:	f7fc ff18 	bl	8000c68 <__aeabi_uldivmod>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	460c      	mov	r4, r1
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	e049      	b.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e40:	4b2f      	ldr	r3, [pc, #188]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	099b      	lsrs	r3, r3, #6
 8003e46:	f04f 0400 	mov.w	r4, #0
 8003e4a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	ea03 0501 	and.w	r5, r3, r1
 8003e56:	ea04 0602 	and.w	r6, r4, r2
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	4632      	mov	r2, r6
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	f04f 0400 	mov.w	r4, #0
 8003e66:	0154      	lsls	r4, r2, #5
 8003e68:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e6c:	014b      	lsls	r3, r1, #5
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4622      	mov	r2, r4
 8003e72:	1b49      	subs	r1, r1, r5
 8003e74:	eb62 0206 	sbc.w	r2, r2, r6
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	f04f 0400 	mov.w	r4, #0
 8003e80:	0194      	lsls	r4, r2, #6
 8003e82:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e86:	018b      	lsls	r3, r1, #6
 8003e88:	1a5b      	subs	r3, r3, r1
 8003e8a:	eb64 0402 	sbc.w	r4, r4, r2
 8003e8e:	f04f 0100 	mov.w	r1, #0
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	00e2      	lsls	r2, r4, #3
 8003e98:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e9c:	00d9      	lsls	r1, r3, #3
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4614      	mov	r4, r2
 8003ea2:	195b      	adds	r3, r3, r5
 8003ea4:	eb44 0406 	adc.w	r4, r4, r6
 8003ea8:	f04f 0100 	mov.w	r1, #0
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	02a2      	lsls	r2, r4, #10
 8003eb2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003eb6:	0299      	lsls	r1, r3, #10
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4614      	mov	r4, r2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f04f 0400 	mov.w	r4, #0
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	4623      	mov	r3, r4
 8003eca:	f7fc fecd 	bl	8000c68 <__aeabi_uldivmod>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	460c      	mov	r4, r1
 8003ed2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ed4:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	0c1b      	lsrs	r3, r3, #16
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	3301      	adds	r3, #1
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eec:	60bb      	str	r3, [r7, #8]
      break;
 8003eee:	e002      	b.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003ef2:	60bb      	str	r3, [r7, #8]
      break;
 8003ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f00:	40023800 	.word	0x40023800
 8003f04:	00f42400 	.word	0x00f42400
 8003f08:	007a1200 	.word	0x007a1200

08003f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f10:	4b03      	ldr	r3, [pc, #12]	; (8003f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f12:	681b      	ldr	r3, [r3, #0]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	20000000 	.word	0x20000000

08003f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f28:	f7ff fff0 	bl	8003f0c <HAL_RCC_GetHCLKFreq>
 8003f2c:	4601      	mov	r1, r0
 8003f2e:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	0a9b      	lsrs	r3, r3, #10
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	4a03      	ldr	r2, [pc, #12]	; (8003f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f3a:	5cd3      	ldrb	r3, [r2, r3]
 8003f3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40023800 	.word	0x40023800
 8003f48:	08008a84 	.word	0x08008a84

08003f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f50:	f7ff ffdc 	bl	8003f0c <HAL_RCC_GetHCLKFreq>
 8003f54:	4601      	mov	r1, r0
 8003f56:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	0b5b      	lsrs	r3, r3, #13
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	4a03      	ldr	r2, [pc, #12]	; (8003f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f62:	5cd3      	ldrb	r3, [r2, r3]
 8003f64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	08008a84 	.word	0x08008a84

08003f74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	220f      	movs	r2, #15
 8003f82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f84:	4b12      	ldr	r3, [pc, #72]	; (8003fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 0203 	and.w	r2, r3, #3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f90:	4b0f      	ldr	r3, [pc, #60]	; (8003fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003fa8:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	08db      	lsrs	r3, r3, #3
 8003fae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003fb6:	4b07      	ldr	r3, [pc, #28]	; (8003fd4 <HAL_RCC_GetClockConfig+0x60>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 020f 	and.w	r2, r3, #15
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	601a      	str	r2, [r3, #0]
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	40023c00 	.word	0x40023c00

08003fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10b      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d105      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004008:	2b00      	cmp	r3, #0
 800400a:	d075      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800400c:	4bad      	ldr	r3, [pc, #692]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004012:	f7fe faf1 	bl	80025f8 <HAL_GetTick>
 8004016:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004018:	e008      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800401a:	f7fe faed 	bl	80025f8 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e18b      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800402c:	4ba6      	ldr	r3, [pc, #664]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f0      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d009      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	019a      	lsls	r2, r3, #6
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	071b      	lsls	r3, r3, #28
 8004050:	499d      	ldr	r1, [pc, #628]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d01f      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004064:	4b98      	ldr	r3, [pc, #608]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800406a:	0f1b      	lsrs	r3, r3, #28
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	019a      	lsls	r2, r3, #6
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	061b      	lsls	r3, r3, #24
 800407e:	431a      	orrs	r2, r3
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	071b      	lsls	r3, r3, #28
 8004084:	4990      	ldr	r1, [pc, #576]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800408c:	4b8e      	ldr	r3, [pc, #568]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800408e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004092:	f023 021f 	bic.w	r2, r3, #31
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	3b01      	subs	r3, #1
 800409c:	498a      	ldr	r1, [pc, #552]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00d      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	019a      	lsls	r2, r3, #6
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	061b      	lsls	r3, r3, #24
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	071b      	lsls	r3, r3, #28
 80040c4:	4980      	ldr	r1, [pc, #512]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040cc:	4b7d      	ldr	r3, [pc, #500]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040d2:	f7fe fa91 	bl	80025f8 <HAL_GetTick>
 80040d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040d8:	e008      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040da:	f7fe fa8d 	bl	80025f8 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e12b      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040ec:	4b76      	ldr	r3, [pc, #472]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	d105      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800410c:	2b00      	cmp	r3, #0
 800410e:	d079      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004110:	4b6e      	ldr	r3, [pc, #440]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004116:	f7fe fa6f 	bl	80025f8 <HAL_GetTick>
 800411a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800411c:	e008      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800411e:	f7fe fa6b 	bl	80025f8 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e109      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004130:	4b65      	ldr	r3, [pc, #404]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800413c:	d0ef      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	2b00      	cmp	r3, #0
 8004148:	d020      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800414a:	4b5f      	ldr	r3, [pc, #380]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004150:	0f1b      	lsrs	r3, r3, #28
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	019a      	lsls	r2, r3, #6
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	061b      	lsls	r3, r3, #24
 8004164:	431a      	orrs	r2, r3
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	071b      	lsls	r3, r3, #28
 800416a:	4957      	ldr	r1, [pc, #348]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004172:	4b55      	ldr	r3, [pc, #340]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004178:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	3b01      	subs	r3, #1
 8004182:	021b      	lsls	r3, r3, #8
 8004184:	4950      	ldr	r1, [pc, #320]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01e      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004198:	4b4b      	ldr	r3, [pc, #300]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419e:	0e1b      	lsrs	r3, r3, #24
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	019a      	lsls	r2, r3, #6
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	061b      	lsls	r3, r3, #24
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	071b      	lsls	r3, r3, #28
 80041b8:	4943      	ldr	r1, [pc, #268]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041c0:	4b41      	ldr	r3, [pc, #260]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	493e      	ldr	r1, [pc, #248]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80041d6:	4b3d      	ldr	r3, [pc, #244]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041d8:	2201      	movs	r2, #1
 80041da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041dc:	f7fe fa0c 	bl	80025f8 <HAL_GetTick>
 80041e0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80041e4:	f7fe fa08 	bl	80025f8 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e0a6      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041f6:	4b34      	ldr	r3, [pc, #208]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004202:	d1ef      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 808d 	beq.w	800432c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	4b2c      	ldr	r3, [pc, #176]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	4a2b      	ldr	r2, [pc, #172]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800421c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004220:	6413      	str	r3, [r2, #64]	; 0x40
 8004222:	4b29      	ldr	r3, [pc, #164]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800422e:	4b28      	ldr	r3, [pc, #160]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a27      	ldr	r2, [pc, #156]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004238:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800423a:	f7fe f9dd 	bl	80025f8 <HAL_GetTick>
 800423e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004240:	e008      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004242:	f7fe f9d9 	bl	80025f8 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d901      	bls.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e077      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004254:	4b1e      	ldr	r3, [pc, #120]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0f0      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004260:	4b19      	ldr	r3, [pc, #100]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004264:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004268:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d039      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004274:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	429a      	cmp	r2, r3
 800427c:	d032      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800427e:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004286:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004288:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800428a:	2201      	movs	r2, #1
 800428c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800428e:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004294:	4a0c      	ldr	r2, [pc, #48]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800429a:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800429c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d11e      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80042a6:	f7fe f9a7 	bl	80025f8 <HAL_GetTick>
 80042aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ac:	e014      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ae:	f7fe f9a3 	bl	80025f8 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042bc:	4293      	cmp	r3, r2
 80042be:	d90b      	bls.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e03f      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80042c4:	42470068 	.word	0x42470068
 80042c8:	40023800 	.word	0x40023800
 80042cc:	42470070 	.word	0x42470070
 80042d0:	40007000 	.word	0x40007000
 80042d4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d8:	4b1c      	ldr	r3, [pc, #112]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80042da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0e4      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042f0:	d10d      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x336>
 80042f2:	4b16      	ldr	r3, [pc, #88]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004306:	4911      	ldr	r1, [pc, #68]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004308:	4313      	orrs	r3, r2
 800430a:	608b      	str	r3, [r1, #8]
 800430c:	e005      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800430e:	4b0f      	ldr	r3, [pc, #60]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	4a0e      	ldr	r2, [pc, #56]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004314:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004318:	6093      	str	r3, [r2, #8]
 800431a:	4b0c      	ldr	r3, [pc, #48]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800431c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004326:	4909      	ldr	r1, [pc, #36]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004328:	4313      	orrs	r3, r2
 800432a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	2b00      	cmp	r3, #0
 8004336:	d004      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800433e:	4b04      	ldr	r3, [pc, #16]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004340:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40023800 	.word	0x40023800
 8004350:	424711e0 	.word	0x424711e0

08004354 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e025      	b.n	80043b4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d106      	bne.n	8004382 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7fd ffdd 	bl	800233c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2202      	movs	r2, #2
 8004386:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3304      	adds	r3, #4
 8004392:	4619      	mov	r1, r3
 8004394:	4610      	mov	r0, r2
 8004396:	f001 fca3 	bl	8005ce0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	461a      	mov	r2, r3
 80043a4:	6839      	ldr	r1, [r7, #0]
 80043a6:	f001 fd0e 	bl	8005dc6 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e056      	b.n	800447c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d106      	bne.n	80043ee <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7fd fe63 	bl	80020b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2202      	movs	r2, #2
 80043f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004404:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	ea42 0103 	orr.w	r1, r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	0c1b      	lsrs	r3, r3, #16
 800444c:	f003 0104 	and.w	r1, r3, #4
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69da      	ldr	r2, [r3, #28]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800446a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	4613      	mov	r3, r2
 8004492:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004494:	2300      	movs	r3, #0
 8004496:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d101      	bne.n	80044a6 <HAL_SPI_Transmit+0x22>
 80044a2:	2302      	movs	r3, #2
 80044a4:	e11e      	b.n	80046e4 <HAL_SPI_Transmit+0x260>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044ae:	f7fe f8a3 	bl	80025f8 <HAL_GetTick>
 80044b2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044b4:	88fb      	ldrh	r3, [r7, #6]
 80044b6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d002      	beq.n	80044ca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044c4:	2302      	movs	r3, #2
 80044c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044c8:	e103      	b.n	80046d2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <HAL_SPI_Transmit+0x52>
 80044d0:	88fb      	ldrh	r3, [r7, #6]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d102      	bne.n	80044dc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044da:	e0fa      	b.n	80046d2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2203      	movs	r2, #3
 80044e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	88fa      	ldrh	r2, [r7, #6]
 80044f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	88fa      	ldrh	r2, [r7, #6]
 80044fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004522:	d107      	bne.n	8004534 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004532:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453e:	2b40      	cmp	r3, #64	; 0x40
 8004540:	d007      	beq.n	8004552 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004550:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800455a:	d14b      	bne.n	80045f4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <HAL_SPI_Transmit+0xe6>
 8004564:	8afb      	ldrh	r3, [r7, #22]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d13e      	bne.n	80045e8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	881a      	ldrh	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457a:	1c9a      	adds	r2, r3, #2
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004584:	b29b      	uxth	r3, r3
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800458e:	e02b      	b.n	80045e8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b02      	cmp	r3, #2
 800459c:	d112      	bne.n	80045c4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	881a      	ldrh	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	1c9a      	adds	r2, r3, #2
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80045c2:	e011      	b.n	80045e8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045c4:	f7fe f818 	bl	80025f8 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d803      	bhi.n	80045dc <HAL_SPI_Transmit+0x158>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045da:	d102      	bne.n	80045e2 <HAL_SPI_Transmit+0x15e>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d102      	bne.n	80045e8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045e6:	e074      	b.n	80046d2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1ce      	bne.n	8004590 <HAL_SPI_Transmit+0x10c>
 80045f2:	e04c      	b.n	800468e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <HAL_SPI_Transmit+0x17e>
 80045fc:	8afb      	ldrh	r3, [r7, #22]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d140      	bne.n	8004684 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	330c      	adds	r3, #12
 800460c:	7812      	ldrb	r2, [r2, #0]
 800460e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800461e:	b29b      	uxth	r3, r3
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004628:	e02c      	b.n	8004684 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b02      	cmp	r3, #2
 8004636:	d113      	bne.n	8004660 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	330c      	adds	r3, #12
 8004642:	7812      	ldrb	r2, [r2, #0]
 8004644:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	86da      	strh	r2, [r3, #54]	; 0x36
 800465e:	e011      	b.n	8004684 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004660:	f7fd ffca 	bl	80025f8 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d803      	bhi.n	8004678 <HAL_SPI_Transmit+0x1f4>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004676:	d102      	bne.n	800467e <HAL_SPI_Transmit+0x1fa>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d102      	bne.n	8004684 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004682:	e026      	b.n	80046d2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1cd      	bne.n	800462a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	6839      	ldr	r1, [r7, #0]
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 fa36 	bl	8004b04 <SPI_EndRxTxTransaction>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2220      	movs	r2, #32
 80046a2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046ac:	2300      	movs	r3, #0
 80046ae:	613b      	str	r3, [r7, #16]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	613b      	str	r3, [r7, #16]
 80046c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	77fb      	strb	r3, [r7, #31]
 80046ce:	e000      	b.n	80046d2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80046d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3720      	adds	r7, #32
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08c      	sub	sp, #48	; 0x30
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046fa:	2301      	movs	r3, #1
 80046fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <HAL_SPI_TransmitReceive+0x26>
 800470e:	2302      	movs	r3, #2
 8004710:	e18a      	b.n	8004a28 <HAL_SPI_TransmitReceive+0x33c>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800471a:	f7fd ff6d 	bl	80025f8 <HAL_GetTick>
 800471e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004730:	887b      	ldrh	r3, [r7, #2]
 8004732:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004734:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004738:	2b01      	cmp	r3, #1
 800473a:	d00f      	beq.n	800475c <HAL_SPI_TransmitReceive+0x70>
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004742:	d107      	bne.n	8004754 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d103      	bne.n	8004754 <HAL_SPI_TransmitReceive+0x68>
 800474c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004750:	2b04      	cmp	r3, #4
 8004752:	d003      	beq.n	800475c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004754:	2302      	movs	r3, #2
 8004756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800475a:	e15b      	b.n	8004a14 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <HAL_SPI_TransmitReceive+0x82>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <HAL_SPI_TransmitReceive+0x82>
 8004768:	887b      	ldrh	r3, [r7, #2]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d103      	bne.n	8004776 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004774:	e14e      	b.n	8004a14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b04      	cmp	r3, #4
 8004780:	d003      	beq.n	800478a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2205      	movs	r2, #5
 8004786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	887a      	ldrh	r2, [r7, #2]
 800479a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	887a      	ldrh	r2, [r7, #2]
 80047a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	887a      	ldrh	r2, [r7, #2]
 80047ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	887a      	ldrh	r2, [r7, #2]
 80047b2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ca:	2b40      	cmp	r3, #64	; 0x40
 80047cc:	d007      	beq.n	80047de <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e6:	d178      	bne.n	80048da <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <HAL_SPI_TransmitReceive+0x10a>
 80047f0:	8b7b      	ldrh	r3, [r7, #26]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d166      	bne.n	80048c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	881a      	ldrh	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004806:	1c9a      	adds	r2, r3, #2
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004810:	b29b      	uxth	r3, r3
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800481a:	e053      	b.n	80048c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b02      	cmp	r3, #2
 8004828:	d11b      	bne.n	8004862 <HAL_SPI_TransmitReceive+0x176>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d016      	beq.n	8004862 <HAL_SPI_TransmitReceive+0x176>
 8004834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004836:	2b01      	cmp	r3, #1
 8004838:	d113      	bne.n	8004862 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	881a      	ldrh	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	1c9a      	adds	r2, r3, #2
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004854:	b29b      	uxth	r3, r3
 8004856:	3b01      	subs	r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b01      	cmp	r3, #1
 800486e:	d119      	bne.n	80048a4 <HAL_SPI_TransmitReceive+0x1b8>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004874:	b29b      	uxth	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d014      	beq.n	80048a4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004884:	b292      	uxth	r2, r2
 8004886:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	1c9a      	adds	r2, r3, #2
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048a0:	2301      	movs	r3, #1
 80048a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048a4:	f7fd fea8 	bl	80025f8 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d807      	bhi.n	80048c4 <HAL_SPI_TransmitReceive+0x1d8>
 80048b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ba:	d003      	beq.n	80048c4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80048c2:	e0a7      	b.n	8004a14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1a6      	bne.n	800481c <HAL_SPI_TransmitReceive+0x130>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1a1      	bne.n	800481c <HAL_SPI_TransmitReceive+0x130>
 80048d8:	e07c      	b.n	80049d4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <HAL_SPI_TransmitReceive+0x1fc>
 80048e2:	8b7b      	ldrh	r3, [r7, #26]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d16b      	bne.n	80049c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	330c      	adds	r3, #12
 80048f2:	7812      	ldrb	r2, [r2, #0]
 80048f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004904:	b29b      	uxth	r3, r3
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800490e:	e057      	b.n	80049c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b02      	cmp	r3, #2
 800491c:	d11c      	bne.n	8004958 <HAL_SPI_TransmitReceive+0x26c>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004922:	b29b      	uxth	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d017      	beq.n	8004958 <HAL_SPI_TransmitReceive+0x26c>
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492a:	2b01      	cmp	r3, #1
 800492c:	d114      	bne.n	8004958 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	330c      	adds	r3, #12
 8004938:	7812      	ldrb	r2, [r2, #0]
 800493a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b01      	cmp	r3, #1
 8004964:	d119      	bne.n	800499a <HAL_SPI_TransmitReceive+0x2ae>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d014      	beq.n	800499a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004996:	2301      	movs	r3, #1
 8004998:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800499a:	f7fd fe2d 	bl	80025f8 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d803      	bhi.n	80049b2 <HAL_SPI_TransmitReceive+0x2c6>
 80049aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b0:	d102      	bne.n	80049b8 <HAL_SPI_TransmitReceive+0x2cc>
 80049b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d103      	bne.n	80049c0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80049be:	e029      	b.n	8004a14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1a2      	bne.n	8004910 <HAL_SPI_TransmitReceive+0x224>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d19d      	bne.n	8004910 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f893 	bl	8004b04 <SPI_EndRxTxTransaction>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d006      	beq.n	80049f2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80049f0:	e010      	b.n	8004a14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10b      	bne.n	8004a12 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	617b      	str	r3, [r7, #20]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	e000      	b.n	8004a14 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004a12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3730      	adds	r7, #48	; 0x30
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	603b      	str	r3, [r7, #0]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a40:	e04c      	b.n	8004adc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a48:	d048      	beq.n	8004adc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004a4a:	f7fd fdd5 	bl	80025f8 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d902      	bls.n	8004a60 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d13d      	bne.n	8004adc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a78:	d111      	bne.n	8004a9e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a82:	d004      	beq.n	8004a8e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8c:	d107      	bne.n	8004a9e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa6:	d10f      	bne.n	8004ac8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ac6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e00f      	b.n	8004afc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	bf0c      	ite	eq
 8004aec:	2301      	moveq	r3, #1
 8004aee:	2300      	movne	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	461a      	mov	r2, r3
 8004af4:	79fb      	ldrb	r3, [r7, #7]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d1a3      	bne.n	8004a42 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b10:	4b1b      	ldr	r3, [pc, #108]	; (8004b80 <SPI_EndRxTxTransaction+0x7c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a1b      	ldr	r2, [pc, #108]	; (8004b84 <SPI_EndRxTxTransaction+0x80>)
 8004b16:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1a:	0d5b      	lsrs	r3, r3, #21
 8004b1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b20:	fb02 f303 	mul.w	r3, r2, r3
 8004b24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b2e:	d112      	bne.n	8004b56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2200      	movs	r2, #0
 8004b38:	2180      	movs	r1, #128	; 0x80
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f7ff ff78 	bl	8004a30 <SPI_WaitFlagStateUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d016      	beq.n	8004b74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4a:	f043 0220 	orr.w	r2, r3, #32
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e00f      	b.n	8004b76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6c:	2b80      	cmp	r3, #128	; 0x80
 8004b6e:	d0f2      	beq.n	8004b56 <SPI_EndRxTxTransaction+0x52>
 8004b70:	e000      	b.n	8004b74 <SPI_EndRxTxTransaction+0x70>
        break;
 8004b72:	bf00      	nop
  }

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20000000 	.word	0x20000000
 8004b84:	165e9f81 	.word	0x165e9f81

08004b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e01d      	b.n	8004bd6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d106      	bne.n	8004bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7fd fac8 	bl	8002144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	f000 fa14 	bl	8004ff4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b085      	sub	sp, #20
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f042 0201 	orr.w	r2, r2, #1
 8004bf4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b06      	cmp	r3, #6
 8004c06:	d007      	beq.n	8004c18 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0201 	orr.w	r2, r2, #1
 8004c16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d122      	bne.n	8004c82 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d11b      	bne.n	8004c82 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f06f 0202 	mvn.w	r2, #2
 8004c52:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	f003 0303 	and.w	r3, r3, #3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f9a5 	bl	8004fb8 <HAL_TIM_IC_CaptureCallback>
 8004c6e:	e005      	b.n	8004c7c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f997 	bl	8004fa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f9a8 	bl	8004fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d122      	bne.n	8004cd6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d11b      	bne.n	8004cd6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f06f 0204 	mvn.w	r2, #4
 8004ca6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f97b 	bl	8004fb8 <HAL_TIM_IC_CaptureCallback>
 8004cc2:	e005      	b.n	8004cd0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f96d 	bl	8004fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f97e 	bl	8004fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d122      	bne.n	8004d2a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d11b      	bne.n	8004d2a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f06f 0208 	mvn.w	r2, #8
 8004cfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2204      	movs	r2, #4
 8004d00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	f003 0303 	and.w	r3, r3, #3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f951 	bl	8004fb8 <HAL_TIM_IC_CaptureCallback>
 8004d16:	e005      	b.n	8004d24 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f943 	bl	8004fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f954 	bl	8004fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	f003 0310 	and.w	r3, r3, #16
 8004d34:	2b10      	cmp	r3, #16
 8004d36:	d122      	bne.n	8004d7e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f003 0310 	and.w	r3, r3, #16
 8004d42:	2b10      	cmp	r3, #16
 8004d44:	d11b      	bne.n	8004d7e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f06f 0210 	mvn.w	r2, #16
 8004d4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2208      	movs	r2, #8
 8004d54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f927 	bl	8004fb8 <HAL_TIM_IC_CaptureCallback>
 8004d6a:	e005      	b.n	8004d78 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f919 	bl	8004fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f92a 	bl	8004fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d10e      	bne.n	8004daa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d107      	bne.n	8004daa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f06f 0201 	mvn.w	r2, #1
 8004da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7fc ffdf 	bl	8001d68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db4:	2b80      	cmp	r3, #128	; 0x80
 8004db6:	d10e      	bne.n	8004dd6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc2:	2b80      	cmp	r3, #128	; 0x80
 8004dc4:	d107      	bne.n	8004dd6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 facf 	bl	8005374 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de0:	2b40      	cmp	r3, #64	; 0x40
 8004de2:	d10e      	bne.n	8004e02 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dee:	2b40      	cmp	r3, #64	; 0x40
 8004df0:	d107      	bne.n	8004e02 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f8ef 	bl	8004fe0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	f003 0320 	and.w	r3, r3, #32
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d10e      	bne.n	8004e2e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f003 0320 	and.w	r3, r3, #32
 8004e1a:	2b20      	cmp	r3, #32
 8004e1c:	d107      	bne.n	8004e2e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f06f 0220 	mvn.w	r2, #32
 8004e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fa99 	bl	8005360 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e2e:	bf00      	nop
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b084      	sub	sp, #16
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d101      	bne.n	8004e4e <HAL_TIM_ConfigClockSource+0x18>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	e0a6      	b.n	8004f9c <HAL_TIM_ConfigClockSource+0x166>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e6c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e74:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b40      	cmp	r3, #64	; 0x40
 8004e84:	d067      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x120>
 8004e86:	2b40      	cmp	r3, #64	; 0x40
 8004e88:	d80b      	bhi.n	8004ea2 <HAL_TIM_ConfigClockSource+0x6c>
 8004e8a:	2b10      	cmp	r3, #16
 8004e8c:	d073      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x140>
 8004e8e:	2b10      	cmp	r3, #16
 8004e90:	d802      	bhi.n	8004e98 <HAL_TIM_ConfigClockSource+0x62>
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d06f      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004e96:	e078      	b.n	8004f8a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d06c      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x140>
 8004e9c:	2b30      	cmp	r3, #48	; 0x30
 8004e9e:	d06a      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004ea0:	e073      	b.n	8004f8a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ea2:	2b70      	cmp	r3, #112	; 0x70
 8004ea4:	d00d      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0x8c>
 8004ea6:	2b70      	cmp	r3, #112	; 0x70
 8004ea8:	d804      	bhi.n	8004eb4 <HAL_TIM_ConfigClockSource+0x7e>
 8004eaa:	2b50      	cmp	r3, #80	; 0x50
 8004eac:	d033      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0xe0>
 8004eae:	2b60      	cmp	r3, #96	; 0x60
 8004eb0:	d041      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004eb2:	e06a      	b.n	8004f8a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb8:	d066      	beq.n	8004f88 <HAL_TIM_ConfigClockSource+0x152>
 8004eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ebe:	d017      	beq.n	8004ef0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004ec0:	e063      	b.n	8004f8a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	6899      	ldr	r1, [r3, #8]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f000 f9a9 	bl	8005228 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ee4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	609a      	str	r2, [r3, #8]
      break;
 8004eee:	e04c      	b.n	8004f8a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	6899      	ldr	r1, [r3, #8]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f000 f992 	bl	8005228 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f12:	609a      	str	r2, [r3, #8]
      break;
 8004f14:	e039      	b.n	8004f8a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	6859      	ldr	r1, [r3, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	461a      	mov	r2, r3
 8004f24:	f000 f906 	bl	8005134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2150      	movs	r1, #80	; 0x50
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 f95f 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004f34:	e029      	b.n	8004f8a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6818      	ldr	r0, [r3, #0]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	6859      	ldr	r1, [r3, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	461a      	mov	r2, r3
 8004f44:	f000 f925 	bl	8005192 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2160      	movs	r1, #96	; 0x60
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 f94f 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004f54:	e019      	b.n	8004f8a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	6859      	ldr	r1, [r3, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	461a      	mov	r2, r3
 8004f64:	f000 f8e6 	bl	8005134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2140      	movs	r1, #64	; 0x40
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 f93f 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004f74:	e009      	b.n	8004f8a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4610      	mov	r0, r2
 8004f82:	f000 f936 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004f86:	e000      	b.n	8004f8a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004f88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a40      	ldr	r2, [pc, #256]	; (8005108 <TIM_Base_SetConfig+0x114>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d013      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005012:	d00f      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a3d      	ldr	r2, [pc, #244]	; (800510c <TIM_Base_SetConfig+0x118>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00b      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a3c      	ldr	r2, [pc, #240]	; (8005110 <TIM_Base_SetConfig+0x11c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d007      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a3b      	ldr	r2, [pc, #236]	; (8005114 <TIM_Base_SetConfig+0x120>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d003      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a3a      	ldr	r2, [pc, #232]	; (8005118 <TIM_Base_SetConfig+0x124>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d108      	bne.n	8005046 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a2f      	ldr	r2, [pc, #188]	; (8005108 <TIM_Base_SetConfig+0x114>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d02b      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005054:	d027      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a2c      	ldr	r2, [pc, #176]	; (800510c <TIM_Base_SetConfig+0x118>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d023      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a2b      	ldr	r2, [pc, #172]	; (8005110 <TIM_Base_SetConfig+0x11c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d01f      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a2a      	ldr	r2, [pc, #168]	; (8005114 <TIM_Base_SetConfig+0x120>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d01b      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a29      	ldr	r2, [pc, #164]	; (8005118 <TIM_Base_SetConfig+0x124>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d017      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a28      	ldr	r2, [pc, #160]	; (800511c <TIM_Base_SetConfig+0x128>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d013      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a27      	ldr	r2, [pc, #156]	; (8005120 <TIM_Base_SetConfig+0x12c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00f      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a26      	ldr	r2, [pc, #152]	; (8005124 <TIM_Base_SetConfig+0x130>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d00b      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a25      	ldr	r2, [pc, #148]	; (8005128 <TIM_Base_SetConfig+0x134>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d007      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a24      	ldr	r2, [pc, #144]	; (800512c <TIM_Base_SetConfig+0x138>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d003      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a23      	ldr	r2, [pc, #140]	; (8005130 <TIM_Base_SetConfig+0x13c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d108      	bne.n	80050b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <TIM_Base_SetConfig+0x114>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_Base_SetConfig+0xf8>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a0c      	ldr	r2, [pc, #48]	; (8005118 <TIM_Base_SetConfig+0x124>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d103      	bne.n	80050f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	691a      	ldr	r2, [r3, #16]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	615a      	str	r2, [r3, #20]
}
 80050fa:	bf00      	nop
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40010000 	.word	0x40010000
 800510c:	40000400 	.word	0x40000400
 8005110:	40000800 	.word	0x40000800
 8005114:	40000c00 	.word	0x40000c00
 8005118:	40010400 	.word	0x40010400
 800511c:	40014000 	.word	0x40014000
 8005120:	40014400 	.word	0x40014400
 8005124:	40014800 	.word	0x40014800
 8005128:	40001800 	.word	0x40001800
 800512c:	40001c00 	.word	0x40001c00
 8005130:	40002000 	.word	0x40002000

08005134 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	f023 0201 	bic.w	r2, r3, #1
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800515e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4313      	orrs	r3, r2
 8005168:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f023 030a 	bic.w	r3, r3, #10
 8005170:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	621a      	str	r2, [r3, #32]
}
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005192:	b480      	push	{r7}
 8005194:	b087      	sub	sp, #28
 8005196:	af00      	add	r7, sp, #0
 8005198:	60f8      	str	r0, [r7, #12]
 800519a:	60b9      	str	r1, [r7, #8]
 800519c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	f023 0210 	bic.w	r2, r3, #16
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	031b      	lsls	r3, r3, #12
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	621a      	str	r2, [r3, #32]
}
 80051e6:	bf00      	nop
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b085      	sub	sp, #20
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005208:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	f043 0307 	orr.w	r3, r3, #7
 8005214:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	609a      	str	r2, [r3, #8]
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005242:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	021a      	lsls	r2, r3, #8
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	431a      	orrs	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4313      	orrs	r3, r2
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	609a      	str	r2, [r3, #8]
}
 800525c:	bf00      	nop
 800525e:	371c      	adds	r7, #28
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800527c:	2302      	movs	r3, #2
 800527e:	e05a      	b.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a21      	ldr	r2, [pc, #132]	; (8005344 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d022      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052cc:	d01d      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a1d      	ldr	r2, [pc, #116]	; (8005348 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d018      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a1b      	ldr	r2, [pc, #108]	; (800534c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d013      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a1a      	ldr	r2, [pc, #104]	; (8005350 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00e      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a18      	ldr	r2, [pc, #96]	; (8005354 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d009      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a17      	ldr	r2, [pc, #92]	; (8005358 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d004      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a15      	ldr	r2, [pc, #84]	; (800535c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d10c      	bne.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005310:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	4313      	orrs	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40010000 	.word	0x40010000
 8005348:	40000400 	.word	0x40000400
 800534c:	40000800 	.word	0x40000800
 8005350:	40000c00 	.word	0x40000c00
 8005354:	40010400 	.word	0x40010400
 8005358:	40014000 	.word	0x40014000
 800535c:	40001800 	.word	0x40001800

08005360 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e03f      	b.n	800541a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d106      	bne.n	80053b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fc feea 	bl	8002188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2224      	movs	r2, #36	; 0x24
 80053b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f90b 	bl	80055e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	695a      	ldr	r2, [r3, #20]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68da      	ldr	r2, [r3, #12]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005400:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2220      	movs	r2, #32
 800540c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2220      	movs	r2, #32
 8005414:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b088      	sub	sp, #32
 8005426:	af02      	add	r7, sp, #8
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	603b      	str	r3, [r7, #0]
 800542e:	4613      	mov	r3, r2
 8005430:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b20      	cmp	r3, #32
 8005440:	f040 8083 	bne.w	800554a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <HAL_UART_Transmit+0x2e>
 800544a:	88fb      	ldrh	r3, [r7, #6]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e07b      	b.n	800554c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800545a:	2b01      	cmp	r3, #1
 800545c:	d101      	bne.n	8005462 <HAL_UART_Transmit+0x40>
 800545e:	2302      	movs	r3, #2
 8005460:	e074      	b.n	800554c <HAL_UART_Transmit+0x12a>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2221      	movs	r2, #33	; 0x21
 8005474:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005478:	f7fd f8be 	bl	80025f8 <HAL_GetTick>
 800547c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	88fa      	ldrh	r2, [r7, #6]
 8005482:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	88fa      	ldrh	r2, [r7, #6]
 8005488:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005492:	e042      	b.n	800551a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005498:	b29b      	uxth	r3, r3
 800549a:	3b01      	subs	r3, #1
 800549c:	b29a      	uxth	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054aa:	d122      	bne.n	80054f2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	2200      	movs	r2, #0
 80054b4:	2180      	movs	r1, #128	; 0x80
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 f84c 	bl	8005554 <UART_WaitOnFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e042      	b.n	800554c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	461a      	mov	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054d8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d103      	bne.n	80054ea <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	3302      	adds	r3, #2
 80054e6:	60bb      	str	r3, [r7, #8]
 80054e8:	e017      	b.n	800551a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	3301      	adds	r3, #1
 80054ee:	60bb      	str	r3, [r7, #8]
 80054f0:	e013      	b.n	800551a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2200      	movs	r2, #0
 80054fa:	2180      	movs	r1, #128	; 0x80
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 f829 	bl	8005554 <UART_WaitOnFlagUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e01f      	b.n	800554c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	1c5a      	adds	r2, r3, #1
 8005510:	60ba      	str	r2, [r7, #8]
 8005512:	781a      	ldrb	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800551e:	b29b      	uxth	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1b7      	bne.n	8005494 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	2200      	movs	r2, #0
 800552c:	2140      	movs	r1, #64	; 0x40
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 f810 	bl	8005554 <UART_WaitOnFlagUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e006      	b.n	800554c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2220      	movs	r2, #32
 8005542:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	e000      	b.n	800554c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800554a:	2302      	movs	r3, #2
  }
}
 800554c:	4618      	mov	r0, r3
 800554e:	3718      	adds	r7, #24
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	4613      	mov	r3, r2
 8005562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005564:	e02c      	b.n	80055c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556c:	d028      	beq.n	80055c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d007      	beq.n	8005584 <UART_WaitOnFlagUntilTimeout+0x30>
 8005574:	f7fd f840 	bl	80025f8 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	429a      	cmp	r2, r3
 8005582:	d21d      	bcs.n	80055c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68da      	ldr	r2, [r3, #12]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005592:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0201 	bic.w	r2, r2, #1
 80055a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2220      	movs	r2, #32
 80055a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e00f      	b.n	80055e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	4013      	ands	r3, r2
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	bf0c      	ite	eq
 80055d0:	2301      	moveq	r3, #1
 80055d2:	2300      	movne	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	461a      	mov	r2, r3
 80055d8:	79fb      	ldrb	r3, [r7, #7]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d0c3      	beq.n	8005566 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ec:	b085      	sub	sp, #20
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	431a      	orrs	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	4313      	orrs	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800562a:	f023 030c 	bic.w	r3, r3, #12
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6812      	ldr	r2, [r2, #0]
 8005632:	68f9      	ldr	r1, [r7, #12]
 8005634:	430b      	orrs	r3, r1
 8005636:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699a      	ldr	r2, [r3, #24]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005656:	f040 818b 	bne.w	8005970 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4ac1      	ldr	r2, [pc, #772]	; (8005964 <UART_SetConfig+0x37c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d005      	beq.n	8005670 <UART_SetConfig+0x88>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4abf      	ldr	r2, [pc, #764]	; (8005968 <UART_SetConfig+0x380>)
 800566a:	4293      	cmp	r3, r2
 800566c:	f040 80bd 	bne.w	80057ea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005670:	f7fe fc6c 	bl	8003f4c <HAL_RCC_GetPCLK2Freq>
 8005674:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	461d      	mov	r5, r3
 800567a:	f04f 0600 	mov.w	r6, #0
 800567e:	46a8      	mov	r8, r5
 8005680:	46b1      	mov	r9, r6
 8005682:	eb18 0308 	adds.w	r3, r8, r8
 8005686:	eb49 0409 	adc.w	r4, r9, r9
 800568a:	4698      	mov	r8, r3
 800568c:	46a1      	mov	r9, r4
 800568e:	eb18 0805 	adds.w	r8, r8, r5
 8005692:	eb49 0906 	adc.w	r9, r9, r6
 8005696:	f04f 0100 	mov.w	r1, #0
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80056a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80056a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80056aa:	4688      	mov	r8, r1
 80056ac:	4691      	mov	r9, r2
 80056ae:	eb18 0005 	adds.w	r0, r8, r5
 80056b2:	eb49 0106 	adc.w	r1, r9, r6
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	461d      	mov	r5, r3
 80056bc:	f04f 0600 	mov.w	r6, #0
 80056c0:	196b      	adds	r3, r5, r5
 80056c2:	eb46 0406 	adc.w	r4, r6, r6
 80056c6:	461a      	mov	r2, r3
 80056c8:	4623      	mov	r3, r4
 80056ca:	f7fb facd 	bl	8000c68 <__aeabi_uldivmod>
 80056ce:	4603      	mov	r3, r0
 80056d0:	460c      	mov	r4, r1
 80056d2:	461a      	mov	r2, r3
 80056d4:	4ba5      	ldr	r3, [pc, #660]	; (800596c <UART_SetConfig+0x384>)
 80056d6:	fba3 2302 	umull	r2, r3, r3, r2
 80056da:	095b      	lsrs	r3, r3, #5
 80056dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	461d      	mov	r5, r3
 80056e4:	f04f 0600 	mov.w	r6, #0
 80056e8:	46a9      	mov	r9, r5
 80056ea:	46b2      	mov	sl, r6
 80056ec:	eb19 0309 	adds.w	r3, r9, r9
 80056f0:	eb4a 040a 	adc.w	r4, sl, sl
 80056f4:	4699      	mov	r9, r3
 80056f6:	46a2      	mov	sl, r4
 80056f8:	eb19 0905 	adds.w	r9, r9, r5
 80056fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8005700:	f04f 0100 	mov.w	r1, #0
 8005704:	f04f 0200 	mov.w	r2, #0
 8005708:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800570c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005710:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005714:	4689      	mov	r9, r1
 8005716:	4692      	mov	sl, r2
 8005718:	eb19 0005 	adds.w	r0, r9, r5
 800571c:	eb4a 0106 	adc.w	r1, sl, r6
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	461d      	mov	r5, r3
 8005726:	f04f 0600 	mov.w	r6, #0
 800572a:	196b      	adds	r3, r5, r5
 800572c:	eb46 0406 	adc.w	r4, r6, r6
 8005730:	461a      	mov	r2, r3
 8005732:	4623      	mov	r3, r4
 8005734:	f7fb fa98 	bl	8000c68 <__aeabi_uldivmod>
 8005738:	4603      	mov	r3, r0
 800573a:	460c      	mov	r4, r1
 800573c:	461a      	mov	r2, r3
 800573e:	4b8b      	ldr	r3, [pc, #556]	; (800596c <UART_SetConfig+0x384>)
 8005740:	fba3 1302 	umull	r1, r3, r3, r2
 8005744:	095b      	lsrs	r3, r3, #5
 8005746:	2164      	movs	r1, #100	; 0x64
 8005748:	fb01 f303 	mul.w	r3, r1, r3
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	3332      	adds	r3, #50	; 0x32
 8005752:	4a86      	ldr	r2, [pc, #536]	; (800596c <UART_SetConfig+0x384>)
 8005754:	fba2 2303 	umull	r2, r3, r2, r3
 8005758:	095b      	lsrs	r3, r3, #5
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005760:	4498      	add	r8, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	461d      	mov	r5, r3
 8005766:	f04f 0600 	mov.w	r6, #0
 800576a:	46a9      	mov	r9, r5
 800576c:	46b2      	mov	sl, r6
 800576e:	eb19 0309 	adds.w	r3, r9, r9
 8005772:	eb4a 040a 	adc.w	r4, sl, sl
 8005776:	4699      	mov	r9, r3
 8005778:	46a2      	mov	sl, r4
 800577a:	eb19 0905 	adds.w	r9, r9, r5
 800577e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005782:	f04f 0100 	mov.w	r1, #0
 8005786:	f04f 0200 	mov.w	r2, #0
 800578a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800578e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005792:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005796:	4689      	mov	r9, r1
 8005798:	4692      	mov	sl, r2
 800579a:	eb19 0005 	adds.w	r0, r9, r5
 800579e:	eb4a 0106 	adc.w	r1, sl, r6
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	461d      	mov	r5, r3
 80057a8:	f04f 0600 	mov.w	r6, #0
 80057ac:	196b      	adds	r3, r5, r5
 80057ae:	eb46 0406 	adc.w	r4, r6, r6
 80057b2:	461a      	mov	r2, r3
 80057b4:	4623      	mov	r3, r4
 80057b6:	f7fb fa57 	bl	8000c68 <__aeabi_uldivmod>
 80057ba:	4603      	mov	r3, r0
 80057bc:	460c      	mov	r4, r1
 80057be:	461a      	mov	r2, r3
 80057c0:	4b6a      	ldr	r3, [pc, #424]	; (800596c <UART_SetConfig+0x384>)
 80057c2:	fba3 1302 	umull	r1, r3, r3, r2
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	2164      	movs	r1, #100	; 0x64
 80057ca:	fb01 f303 	mul.w	r3, r1, r3
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	3332      	adds	r3, #50	; 0x32
 80057d4:	4a65      	ldr	r2, [pc, #404]	; (800596c <UART_SetConfig+0x384>)
 80057d6:	fba2 2303 	umull	r2, r3, r2, r3
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	f003 0207 	and.w	r2, r3, #7
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4442      	add	r2, r8
 80057e6:	609a      	str	r2, [r3, #8]
 80057e8:	e26f      	b.n	8005cca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057ea:	f7fe fb9b 	bl	8003f24 <HAL_RCC_GetPCLK1Freq>
 80057ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	461d      	mov	r5, r3
 80057f4:	f04f 0600 	mov.w	r6, #0
 80057f8:	46a8      	mov	r8, r5
 80057fa:	46b1      	mov	r9, r6
 80057fc:	eb18 0308 	adds.w	r3, r8, r8
 8005800:	eb49 0409 	adc.w	r4, r9, r9
 8005804:	4698      	mov	r8, r3
 8005806:	46a1      	mov	r9, r4
 8005808:	eb18 0805 	adds.w	r8, r8, r5
 800580c:	eb49 0906 	adc.w	r9, r9, r6
 8005810:	f04f 0100 	mov.w	r1, #0
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800581c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005820:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005824:	4688      	mov	r8, r1
 8005826:	4691      	mov	r9, r2
 8005828:	eb18 0005 	adds.w	r0, r8, r5
 800582c:	eb49 0106 	adc.w	r1, r9, r6
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	461d      	mov	r5, r3
 8005836:	f04f 0600 	mov.w	r6, #0
 800583a:	196b      	adds	r3, r5, r5
 800583c:	eb46 0406 	adc.w	r4, r6, r6
 8005840:	461a      	mov	r2, r3
 8005842:	4623      	mov	r3, r4
 8005844:	f7fb fa10 	bl	8000c68 <__aeabi_uldivmod>
 8005848:	4603      	mov	r3, r0
 800584a:	460c      	mov	r4, r1
 800584c:	461a      	mov	r2, r3
 800584e:	4b47      	ldr	r3, [pc, #284]	; (800596c <UART_SetConfig+0x384>)
 8005850:	fba3 2302 	umull	r2, r3, r3, r2
 8005854:	095b      	lsrs	r3, r3, #5
 8005856:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	461d      	mov	r5, r3
 800585e:	f04f 0600 	mov.w	r6, #0
 8005862:	46a9      	mov	r9, r5
 8005864:	46b2      	mov	sl, r6
 8005866:	eb19 0309 	adds.w	r3, r9, r9
 800586a:	eb4a 040a 	adc.w	r4, sl, sl
 800586e:	4699      	mov	r9, r3
 8005870:	46a2      	mov	sl, r4
 8005872:	eb19 0905 	adds.w	r9, r9, r5
 8005876:	eb4a 0a06 	adc.w	sl, sl, r6
 800587a:	f04f 0100 	mov.w	r1, #0
 800587e:	f04f 0200 	mov.w	r2, #0
 8005882:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005886:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800588a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800588e:	4689      	mov	r9, r1
 8005890:	4692      	mov	sl, r2
 8005892:	eb19 0005 	adds.w	r0, r9, r5
 8005896:	eb4a 0106 	adc.w	r1, sl, r6
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	461d      	mov	r5, r3
 80058a0:	f04f 0600 	mov.w	r6, #0
 80058a4:	196b      	adds	r3, r5, r5
 80058a6:	eb46 0406 	adc.w	r4, r6, r6
 80058aa:	461a      	mov	r2, r3
 80058ac:	4623      	mov	r3, r4
 80058ae:	f7fb f9db 	bl	8000c68 <__aeabi_uldivmod>
 80058b2:	4603      	mov	r3, r0
 80058b4:	460c      	mov	r4, r1
 80058b6:	461a      	mov	r2, r3
 80058b8:	4b2c      	ldr	r3, [pc, #176]	; (800596c <UART_SetConfig+0x384>)
 80058ba:	fba3 1302 	umull	r1, r3, r3, r2
 80058be:	095b      	lsrs	r3, r3, #5
 80058c0:	2164      	movs	r1, #100	; 0x64
 80058c2:	fb01 f303 	mul.w	r3, r1, r3
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	3332      	adds	r3, #50	; 0x32
 80058cc:	4a27      	ldr	r2, [pc, #156]	; (800596c <UART_SetConfig+0x384>)
 80058ce:	fba2 2303 	umull	r2, r3, r2, r3
 80058d2:	095b      	lsrs	r3, r3, #5
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058da:	4498      	add	r8, r3
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	461d      	mov	r5, r3
 80058e0:	f04f 0600 	mov.w	r6, #0
 80058e4:	46a9      	mov	r9, r5
 80058e6:	46b2      	mov	sl, r6
 80058e8:	eb19 0309 	adds.w	r3, r9, r9
 80058ec:	eb4a 040a 	adc.w	r4, sl, sl
 80058f0:	4699      	mov	r9, r3
 80058f2:	46a2      	mov	sl, r4
 80058f4:	eb19 0905 	adds.w	r9, r9, r5
 80058f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80058fc:	f04f 0100 	mov.w	r1, #0
 8005900:	f04f 0200 	mov.w	r2, #0
 8005904:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005908:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800590c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005910:	4689      	mov	r9, r1
 8005912:	4692      	mov	sl, r2
 8005914:	eb19 0005 	adds.w	r0, r9, r5
 8005918:	eb4a 0106 	adc.w	r1, sl, r6
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	461d      	mov	r5, r3
 8005922:	f04f 0600 	mov.w	r6, #0
 8005926:	196b      	adds	r3, r5, r5
 8005928:	eb46 0406 	adc.w	r4, r6, r6
 800592c:	461a      	mov	r2, r3
 800592e:	4623      	mov	r3, r4
 8005930:	f7fb f99a 	bl	8000c68 <__aeabi_uldivmod>
 8005934:	4603      	mov	r3, r0
 8005936:	460c      	mov	r4, r1
 8005938:	461a      	mov	r2, r3
 800593a:	4b0c      	ldr	r3, [pc, #48]	; (800596c <UART_SetConfig+0x384>)
 800593c:	fba3 1302 	umull	r1, r3, r3, r2
 8005940:	095b      	lsrs	r3, r3, #5
 8005942:	2164      	movs	r1, #100	; 0x64
 8005944:	fb01 f303 	mul.w	r3, r1, r3
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	3332      	adds	r3, #50	; 0x32
 800594e:	4a07      	ldr	r2, [pc, #28]	; (800596c <UART_SetConfig+0x384>)
 8005950:	fba2 2303 	umull	r2, r3, r2, r3
 8005954:	095b      	lsrs	r3, r3, #5
 8005956:	f003 0207 	and.w	r2, r3, #7
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4442      	add	r2, r8
 8005960:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005962:	e1b2      	b.n	8005cca <UART_SetConfig+0x6e2>
 8005964:	40011000 	.word	0x40011000
 8005968:	40011400 	.word	0x40011400
 800596c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4ad7      	ldr	r2, [pc, #860]	; (8005cd4 <UART_SetConfig+0x6ec>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d005      	beq.n	8005986 <UART_SetConfig+0x39e>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4ad6      	ldr	r2, [pc, #856]	; (8005cd8 <UART_SetConfig+0x6f0>)
 8005980:	4293      	cmp	r3, r2
 8005982:	f040 80d1 	bne.w	8005b28 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005986:	f7fe fae1 	bl	8003f4c <HAL_RCC_GetPCLK2Freq>
 800598a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	469a      	mov	sl, r3
 8005990:	f04f 0b00 	mov.w	fp, #0
 8005994:	46d0      	mov	r8, sl
 8005996:	46d9      	mov	r9, fp
 8005998:	eb18 0308 	adds.w	r3, r8, r8
 800599c:	eb49 0409 	adc.w	r4, r9, r9
 80059a0:	4698      	mov	r8, r3
 80059a2:	46a1      	mov	r9, r4
 80059a4:	eb18 080a 	adds.w	r8, r8, sl
 80059a8:	eb49 090b 	adc.w	r9, r9, fp
 80059ac:	f04f 0100 	mov.w	r1, #0
 80059b0:	f04f 0200 	mov.w	r2, #0
 80059b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80059b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80059bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80059c0:	4688      	mov	r8, r1
 80059c2:	4691      	mov	r9, r2
 80059c4:	eb1a 0508 	adds.w	r5, sl, r8
 80059c8:	eb4b 0609 	adc.w	r6, fp, r9
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	4619      	mov	r1, r3
 80059d2:	f04f 0200 	mov.w	r2, #0
 80059d6:	f04f 0300 	mov.w	r3, #0
 80059da:	f04f 0400 	mov.w	r4, #0
 80059de:	0094      	lsls	r4, r2, #2
 80059e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059e4:	008b      	lsls	r3, r1, #2
 80059e6:	461a      	mov	r2, r3
 80059e8:	4623      	mov	r3, r4
 80059ea:	4628      	mov	r0, r5
 80059ec:	4631      	mov	r1, r6
 80059ee:	f7fb f93b 	bl	8000c68 <__aeabi_uldivmod>
 80059f2:	4603      	mov	r3, r0
 80059f4:	460c      	mov	r4, r1
 80059f6:	461a      	mov	r2, r3
 80059f8:	4bb8      	ldr	r3, [pc, #736]	; (8005cdc <UART_SetConfig+0x6f4>)
 80059fa:	fba3 2302 	umull	r2, r3, r3, r2
 80059fe:	095b      	lsrs	r3, r3, #5
 8005a00:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	469b      	mov	fp, r3
 8005a08:	f04f 0c00 	mov.w	ip, #0
 8005a0c:	46d9      	mov	r9, fp
 8005a0e:	46e2      	mov	sl, ip
 8005a10:	eb19 0309 	adds.w	r3, r9, r9
 8005a14:	eb4a 040a 	adc.w	r4, sl, sl
 8005a18:	4699      	mov	r9, r3
 8005a1a:	46a2      	mov	sl, r4
 8005a1c:	eb19 090b 	adds.w	r9, r9, fp
 8005a20:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a24:	f04f 0100 	mov.w	r1, #0
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a38:	4689      	mov	r9, r1
 8005a3a:	4692      	mov	sl, r2
 8005a3c:	eb1b 0509 	adds.w	r5, fp, r9
 8005a40:	eb4c 060a 	adc.w	r6, ip, sl
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	4619      	mov	r1, r3
 8005a4a:	f04f 0200 	mov.w	r2, #0
 8005a4e:	f04f 0300 	mov.w	r3, #0
 8005a52:	f04f 0400 	mov.w	r4, #0
 8005a56:	0094      	lsls	r4, r2, #2
 8005a58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a5c:	008b      	lsls	r3, r1, #2
 8005a5e:	461a      	mov	r2, r3
 8005a60:	4623      	mov	r3, r4
 8005a62:	4628      	mov	r0, r5
 8005a64:	4631      	mov	r1, r6
 8005a66:	f7fb f8ff 	bl	8000c68 <__aeabi_uldivmod>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	460c      	mov	r4, r1
 8005a6e:	461a      	mov	r2, r3
 8005a70:	4b9a      	ldr	r3, [pc, #616]	; (8005cdc <UART_SetConfig+0x6f4>)
 8005a72:	fba3 1302 	umull	r1, r3, r3, r2
 8005a76:	095b      	lsrs	r3, r3, #5
 8005a78:	2164      	movs	r1, #100	; 0x64
 8005a7a:	fb01 f303 	mul.w	r3, r1, r3
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	011b      	lsls	r3, r3, #4
 8005a82:	3332      	adds	r3, #50	; 0x32
 8005a84:	4a95      	ldr	r2, [pc, #596]	; (8005cdc <UART_SetConfig+0x6f4>)
 8005a86:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a90:	4498      	add	r8, r3
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	469b      	mov	fp, r3
 8005a96:	f04f 0c00 	mov.w	ip, #0
 8005a9a:	46d9      	mov	r9, fp
 8005a9c:	46e2      	mov	sl, ip
 8005a9e:	eb19 0309 	adds.w	r3, r9, r9
 8005aa2:	eb4a 040a 	adc.w	r4, sl, sl
 8005aa6:	4699      	mov	r9, r3
 8005aa8:	46a2      	mov	sl, r4
 8005aaa:	eb19 090b 	adds.w	r9, r9, fp
 8005aae:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ab2:	f04f 0100 	mov.w	r1, #0
 8005ab6:	f04f 0200 	mov.w	r2, #0
 8005aba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005abe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ac2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ac6:	4689      	mov	r9, r1
 8005ac8:	4692      	mov	sl, r2
 8005aca:	eb1b 0509 	adds.w	r5, fp, r9
 8005ace:	eb4c 060a 	adc.w	r6, ip, sl
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	f04f 0200 	mov.w	r2, #0
 8005adc:	f04f 0300 	mov.w	r3, #0
 8005ae0:	f04f 0400 	mov.w	r4, #0
 8005ae4:	0094      	lsls	r4, r2, #2
 8005ae6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005aea:	008b      	lsls	r3, r1, #2
 8005aec:	461a      	mov	r2, r3
 8005aee:	4623      	mov	r3, r4
 8005af0:	4628      	mov	r0, r5
 8005af2:	4631      	mov	r1, r6
 8005af4:	f7fb f8b8 	bl	8000c68 <__aeabi_uldivmod>
 8005af8:	4603      	mov	r3, r0
 8005afa:	460c      	mov	r4, r1
 8005afc:	461a      	mov	r2, r3
 8005afe:	4b77      	ldr	r3, [pc, #476]	; (8005cdc <UART_SetConfig+0x6f4>)
 8005b00:	fba3 1302 	umull	r1, r3, r3, r2
 8005b04:	095b      	lsrs	r3, r3, #5
 8005b06:	2164      	movs	r1, #100	; 0x64
 8005b08:	fb01 f303 	mul.w	r3, r1, r3
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	3332      	adds	r3, #50	; 0x32
 8005b12:	4a72      	ldr	r2, [pc, #456]	; (8005cdc <UART_SetConfig+0x6f4>)
 8005b14:	fba2 2303 	umull	r2, r3, r2, r3
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	f003 020f 	and.w	r2, r3, #15
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4442      	add	r2, r8
 8005b24:	609a      	str	r2, [r3, #8]
 8005b26:	e0d0      	b.n	8005cca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b28:	f7fe f9fc 	bl	8003f24 <HAL_RCC_GetPCLK1Freq>
 8005b2c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	469a      	mov	sl, r3
 8005b32:	f04f 0b00 	mov.w	fp, #0
 8005b36:	46d0      	mov	r8, sl
 8005b38:	46d9      	mov	r9, fp
 8005b3a:	eb18 0308 	adds.w	r3, r8, r8
 8005b3e:	eb49 0409 	adc.w	r4, r9, r9
 8005b42:	4698      	mov	r8, r3
 8005b44:	46a1      	mov	r9, r4
 8005b46:	eb18 080a 	adds.w	r8, r8, sl
 8005b4a:	eb49 090b 	adc.w	r9, r9, fp
 8005b4e:	f04f 0100 	mov.w	r1, #0
 8005b52:	f04f 0200 	mov.w	r2, #0
 8005b56:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b5a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b5e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b62:	4688      	mov	r8, r1
 8005b64:	4691      	mov	r9, r2
 8005b66:	eb1a 0508 	adds.w	r5, sl, r8
 8005b6a:	eb4b 0609 	adc.w	r6, fp, r9
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4619      	mov	r1, r3
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	f04f 0300 	mov.w	r3, #0
 8005b7c:	f04f 0400 	mov.w	r4, #0
 8005b80:	0094      	lsls	r4, r2, #2
 8005b82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b86:	008b      	lsls	r3, r1, #2
 8005b88:	461a      	mov	r2, r3
 8005b8a:	4623      	mov	r3, r4
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	4631      	mov	r1, r6
 8005b90:	f7fb f86a 	bl	8000c68 <__aeabi_uldivmod>
 8005b94:	4603      	mov	r3, r0
 8005b96:	460c      	mov	r4, r1
 8005b98:	461a      	mov	r2, r3
 8005b9a:	4b50      	ldr	r3, [pc, #320]	; (8005cdc <UART_SetConfig+0x6f4>)
 8005b9c:	fba3 2302 	umull	r2, r3, r3, r2
 8005ba0:	095b      	lsrs	r3, r3, #5
 8005ba2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	469b      	mov	fp, r3
 8005baa:	f04f 0c00 	mov.w	ip, #0
 8005bae:	46d9      	mov	r9, fp
 8005bb0:	46e2      	mov	sl, ip
 8005bb2:	eb19 0309 	adds.w	r3, r9, r9
 8005bb6:	eb4a 040a 	adc.w	r4, sl, sl
 8005bba:	4699      	mov	r9, r3
 8005bbc:	46a2      	mov	sl, r4
 8005bbe:	eb19 090b 	adds.w	r9, r9, fp
 8005bc2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005bc6:	f04f 0100 	mov.w	r1, #0
 8005bca:	f04f 0200 	mov.w	r2, #0
 8005bce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bda:	4689      	mov	r9, r1
 8005bdc:	4692      	mov	sl, r2
 8005bde:	eb1b 0509 	adds.w	r5, fp, r9
 8005be2:	eb4c 060a 	adc.w	r6, ip, sl
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	4619      	mov	r1, r3
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	f04f 0400 	mov.w	r4, #0
 8005bf8:	0094      	lsls	r4, r2, #2
 8005bfa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bfe:	008b      	lsls	r3, r1, #2
 8005c00:	461a      	mov	r2, r3
 8005c02:	4623      	mov	r3, r4
 8005c04:	4628      	mov	r0, r5
 8005c06:	4631      	mov	r1, r6
 8005c08:	f7fb f82e 	bl	8000c68 <__aeabi_uldivmod>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	460c      	mov	r4, r1
 8005c10:	461a      	mov	r2, r3
 8005c12:	4b32      	ldr	r3, [pc, #200]	; (8005cdc <UART_SetConfig+0x6f4>)
 8005c14:	fba3 1302 	umull	r1, r3, r3, r2
 8005c18:	095b      	lsrs	r3, r3, #5
 8005c1a:	2164      	movs	r1, #100	; 0x64
 8005c1c:	fb01 f303 	mul.w	r3, r1, r3
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	3332      	adds	r3, #50	; 0x32
 8005c26:	4a2d      	ldr	r2, [pc, #180]	; (8005cdc <UART_SetConfig+0x6f4>)
 8005c28:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2c:	095b      	lsrs	r3, r3, #5
 8005c2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c32:	4498      	add	r8, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	469b      	mov	fp, r3
 8005c38:	f04f 0c00 	mov.w	ip, #0
 8005c3c:	46d9      	mov	r9, fp
 8005c3e:	46e2      	mov	sl, ip
 8005c40:	eb19 0309 	adds.w	r3, r9, r9
 8005c44:	eb4a 040a 	adc.w	r4, sl, sl
 8005c48:	4699      	mov	r9, r3
 8005c4a:	46a2      	mov	sl, r4
 8005c4c:	eb19 090b 	adds.w	r9, r9, fp
 8005c50:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c54:	f04f 0100 	mov.w	r1, #0
 8005c58:	f04f 0200 	mov.w	r2, #0
 8005c5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c68:	4689      	mov	r9, r1
 8005c6a:	4692      	mov	sl, r2
 8005c6c:	eb1b 0509 	adds.w	r5, fp, r9
 8005c70:	eb4c 060a 	adc.w	r6, ip, sl
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	4619      	mov	r1, r3
 8005c7a:	f04f 0200 	mov.w	r2, #0
 8005c7e:	f04f 0300 	mov.w	r3, #0
 8005c82:	f04f 0400 	mov.w	r4, #0
 8005c86:	0094      	lsls	r4, r2, #2
 8005c88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c8c:	008b      	lsls	r3, r1, #2
 8005c8e:	461a      	mov	r2, r3
 8005c90:	4623      	mov	r3, r4
 8005c92:	4628      	mov	r0, r5
 8005c94:	4631      	mov	r1, r6
 8005c96:	f7fa ffe7 	bl	8000c68 <__aeabi_uldivmod>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	460c      	mov	r4, r1
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	4b0e      	ldr	r3, [pc, #56]	; (8005cdc <UART_SetConfig+0x6f4>)
 8005ca2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ca6:	095b      	lsrs	r3, r3, #5
 8005ca8:	2164      	movs	r1, #100	; 0x64
 8005caa:	fb01 f303 	mul.w	r3, r1, r3
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	3332      	adds	r3, #50	; 0x32
 8005cb4:	4a09      	ldr	r2, [pc, #36]	; (8005cdc <UART_SetConfig+0x6f4>)
 8005cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	f003 020f 	and.w	r2, r3, #15
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4442      	add	r2, r8
 8005cc6:	609a      	str	r2, [r3, #8]
}
 8005cc8:	e7ff      	b.n	8005cca <UART_SetConfig+0x6e2>
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cd4:	40011000 	.word	0x40011000
 8005cd8:	40011400 	.word	0x40011400
 8005cdc:	51eb851f 	.word	0x51eb851f

08005ce0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d029      	beq.n	8005d4e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005d06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d0a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005d14:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8005d1a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8005d20:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8005d26:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8005d2c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8005d32:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8005d38:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8005d3e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	e034      	b.n	8005db8 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d5a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005d64:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005d6a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005d7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d82:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005d8c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8005d92:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8005d98:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8005d9e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8005da4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b087      	sub	sp, #28
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	60f8      	str	r0, [r7, #12]
 8005dce:	60b9      	str	r1, [r7, #8]
 8005dd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d02e      	beq.n	8005e3e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005dec:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005dfc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005e06:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005e10:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	3b01      	subs	r3, #1
 8005e18:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005e1a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005e24:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	609a      	str	r2, [r3, #8]
 8005e3c:	e03b      	b.n	8005eb6 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e4e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	3b01      	subs	r3, #1
 8005e56:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005e60:	4313      	orrs	r3, r2
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005e74:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005e84:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005e8e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005e98:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	371c      	adds	r7, #28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <__errno>:
 8005ec4:	4b01      	ldr	r3, [pc, #4]	; (8005ecc <__errno+0x8>)
 8005ec6:	6818      	ldr	r0, [r3, #0]
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	2000000c 	.word	0x2000000c

08005ed0 <__libc_init_array>:
 8005ed0:	b570      	push	{r4, r5, r6, lr}
 8005ed2:	4e0d      	ldr	r6, [pc, #52]	; (8005f08 <__libc_init_array+0x38>)
 8005ed4:	4c0d      	ldr	r4, [pc, #52]	; (8005f0c <__libc_init_array+0x3c>)
 8005ed6:	1ba4      	subs	r4, r4, r6
 8005ed8:	10a4      	asrs	r4, r4, #2
 8005eda:	2500      	movs	r5, #0
 8005edc:	42a5      	cmp	r5, r4
 8005ede:	d109      	bne.n	8005ef4 <__libc_init_array+0x24>
 8005ee0:	4e0b      	ldr	r6, [pc, #44]	; (8005f10 <__libc_init_array+0x40>)
 8005ee2:	4c0c      	ldr	r4, [pc, #48]	; (8005f14 <__libc_init_array+0x44>)
 8005ee4:	f002 fda8 	bl	8008a38 <_init>
 8005ee8:	1ba4      	subs	r4, r4, r6
 8005eea:	10a4      	asrs	r4, r4, #2
 8005eec:	2500      	movs	r5, #0
 8005eee:	42a5      	cmp	r5, r4
 8005ef0:	d105      	bne.n	8005efe <__libc_init_array+0x2e>
 8005ef2:	bd70      	pop	{r4, r5, r6, pc}
 8005ef4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ef8:	4798      	blx	r3
 8005efa:	3501      	adds	r5, #1
 8005efc:	e7ee      	b.n	8005edc <__libc_init_array+0xc>
 8005efe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f02:	4798      	blx	r3
 8005f04:	3501      	adds	r5, #1
 8005f06:	e7f2      	b.n	8005eee <__libc_init_array+0x1e>
 8005f08:	080090c0 	.word	0x080090c0
 8005f0c:	080090c0 	.word	0x080090c0
 8005f10:	080090c0 	.word	0x080090c0
 8005f14:	080090c4 	.word	0x080090c4

08005f18 <memset>:
 8005f18:	4402      	add	r2, r0
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d100      	bne.n	8005f22 <memset+0xa>
 8005f20:	4770      	bx	lr
 8005f22:	f803 1b01 	strb.w	r1, [r3], #1
 8005f26:	e7f9      	b.n	8005f1c <memset+0x4>

08005f28 <__cvt>:
 8005f28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f2c:	ec55 4b10 	vmov	r4, r5, d0
 8005f30:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005f32:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005f36:	2d00      	cmp	r5, #0
 8005f38:	460e      	mov	r6, r1
 8005f3a:	4691      	mov	r9, r2
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	bfb8      	it	lt
 8005f40:	4622      	movlt	r2, r4
 8005f42:	462b      	mov	r3, r5
 8005f44:	f027 0720 	bic.w	r7, r7, #32
 8005f48:	bfbb      	ittet	lt
 8005f4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005f4e:	461d      	movlt	r5, r3
 8005f50:	2300      	movge	r3, #0
 8005f52:	232d      	movlt	r3, #45	; 0x2d
 8005f54:	bfb8      	it	lt
 8005f56:	4614      	movlt	r4, r2
 8005f58:	2f46      	cmp	r7, #70	; 0x46
 8005f5a:	700b      	strb	r3, [r1, #0]
 8005f5c:	d004      	beq.n	8005f68 <__cvt+0x40>
 8005f5e:	2f45      	cmp	r7, #69	; 0x45
 8005f60:	d100      	bne.n	8005f64 <__cvt+0x3c>
 8005f62:	3601      	adds	r6, #1
 8005f64:	2102      	movs	r1, #2
 8005f66:	e000      	b.n	8005f6a <__cvt+0x42>
 8005f68:	2103      	movs	r1, #3
 8005f6a:	ab03      	add	r3, sp, #12
 8005f6c:	9301      	str	r3, [sp, #4]
 8005f6e:	ab02      	add	r3, sp, #8
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	4632      	mov	r2, r6
 8005f74:	4653      	mov	r3, sl
 8005f76:	ec45 4b10 	vmov	d0, r4, r5
 8005f7a:	f000 fcdd 	bl	8006938 <_dtoa_r>
 8005f7e:	2f47      	cmp	r7, #71	; 0x47
 8005f80:	4680      	mov	r8, r0
 8005f82:	d102      	bne.n	8005f8a <__cvt+0x62>
 8005f84:	f019 0f01 	tst.w	r9, #1
 8005f88:	d026      	beq.n	8005fd8 <__cvt+0xb0>
 8005f8a:	2f46      	cmp	r7, #70	; 0x46
 8005f8c:	eb08 0906 	add.w	r9, r8, r6
 8005f90:	d111      	bne.n	8005fb6 <__cvt+0x8e>
 8005f92:	f898 3000 	ldrb.w	r3, [r8]
 8005f96:	2b30      	cmp	r3, #48	; 0x30
 8005f98:	d10a      	bne.n	8005fb0 <__cvt+0x88>
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	4629      	mov	r1, r5
 8005fa2:	f7fa fda1 	bl	8000ae8 <__aeabi_dcmpeq>
 8005fa6:	b918      	cbnz	r0, 8005fb0 <__cvt+0x88>
 8005fa8:	f1c6 0601 	rsb	r6, r6, #1
 8005fac:	f8ca 6000 	str.w	r6, [sl]
 8005fb0:	f8da 3000 	ldr.w	r3, [sl]
 8005fb4:	4499      	add	r9, r3
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	2300      	movs	r3, #0
 8005fba:	4620      	mov	r0, r4
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	f7fa fd93 	bl	8000ae8 <__aeabi_dcmpeq>
 8005fc2:	b938      	cbnz	r0, 8005fd4 <__cvt+0xac>
 8005fc4:	2230      	movs	r2, #48	; 0x30
 8005fc6:	9b03      	ldr	r3, [sp, #12]
 8005fc8:	454b      	cmp	r3, r9
 8005fca:	d205      	bcs.n	8005fd8 <__cvt+0xb0>
 8005fcc:	1c59      	adds	r1, r3, #1
 8005fce:	9103      	str	r1, [sp, #12]
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	e7f8      	b.n	8005fc6 <__cvt+0x9e>
 8005fd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005fd8:	9b03      	ldr	r3, [sp, #12]
 8005fda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fdc:	eba3 0308 	sub.w	r3, r3, r8
 8005fe0:	4640      	mov	r0, r8
 8005fe2:	6013      	str	r3, [r2, #0]
 8005fe4:	b004      	add	sp, #16
 8005fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005fea <__exponent>:
 8005fea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fec:	2900      	cmp	r1, #0
 8005fee:	4604      	mov	r4, r0
 8005ff0:	bfba      	itte	lt
 8005ff2:	4249      	neglt	r1, r1
 8005ff4:	232d      	movlt	r3, #45	; 0x2d
 8005ff6:	232b      	movge	r3, #43	; 0x2b
 8005ff8:	2909      	cmp	r1, #9
 8005ffa:	f804 2b02 	strb.w	r2, [r4], #2
 8005ffe:	7043      	strb	r3, [r0, #1]
 8006000:	dd20      	ble.n	8006044 <__exponent+0x5a>
 8006002:	f10d 0307 	add.w	r3, sp, #7
 8006006:	461f      	mov	r7, r3
 8006008:	260a      	movs	r6, #10
 800600a:	fb91 f5f6 	sdiv	r5, r1, r6
 800600e:	fb06 1115 	mls	r1, r6, r5, r1
 8006012:	3130      	adds	r1, #48	; 0x30
 8006014:	2d09      	cmp	r5, #9
 8006016:	f803 1c01 	strb.w	r1, [r3, #-1]
 800601a:	f103 32ff 	add.w	r2, r3, #4294967295
 800601e:	4629      	mov	r1, r5
 8006020:	dc09      	bgt.n	8006036 <__exponent+0x4c>
 8006022:	3130      	adds	r1, #48	; 0x30
 8006024:	3b02      	subs	r3, #2
 8006026:	f802 1c01 	strb.w	r1, [r2, #-1]
 800602a:	42bb      	cmp	r3, r7
 800602c:	4622      	mov	r2, r4
 800602e:	d304      	bcc.n	800603a <__exponent+0x50>
 8006030:	1a10      	subs	r0, r2, r0
 8006032:	b003      	add	sp, #12
 8006034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006036:	4613      	mov	r3, r2
 8006038:	e7e7      	b.n	800600a <__exponent+0x20>
 800603a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800603e:	f804 2b01 	strb.w	r2, [r4], #1
 8006042:	e7f2      	b.n	800602a <__exponent+0x40>
 8006044:	2330      	movs	r3, #48	; 0x30
 8006046:	4419      	add	r1, r3
 8006048:	7083      	strb	r3, [r0, #2]
 800604a:	1d02      	adds	r2, r0, #4
 800604c:	70c1      	strb	r1, [r0, #3]
 800604e:	e7ef      	b.n	8006030 <__exponent+0x46>

08006050 <_printf_float>:
 8006050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006054:	b08d      	sub	sp, #52	; 0x34
 8006056:	460c      	mov	r4, r1
 8006058:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800605c:	4616      	mov	r6, r2
 800605e:	461f      	mov	r7, r3
 8006060:	4605      	mov	r5, r0
 8006062:	f001 fa21 	bl	80074a8 <_localeconv_r>
 8006066:	6803      	ldr	r3, [r0, #0]
 8006068:	9304      	str	r3, [sp, #16]
 800606a:	4618      	mov	r0, r3
 800606c:	f7fa f8c0 	bl	80001f0 <strlen>
 8006070:	2300      	movs	r3, #0
 8006072:	930a      	str	r3, [sp, #40]	; 0x28
 8006074:	f8d8 3000 	ldr.w	r3, [r8]
 8006078:	9005      	str	r0, [sp, #20]
 800607a:	3307      	adds	r3, #7
 800607c:	f023 0307 	bic.w	r3, r3, #7
 8006080:	f103 0208 	add.w	r2, r3, #8
 8006084:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006088:	f8d4 b000 	ldr.w	fp, [r4]
 800608c:	f8c8 2000 	str.w	r2, [r8]
 8006090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006094:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006098:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800609c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80060a0:	9307      	str	r3, [sp, #28]
 80060a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80060a6:	f04f 32ff 	mov.w	r2, #4294967295
 80060aa:	4ba7      	ldr	r3, [pc, #668]	; (8006348 <_printf_float+0x2f8>)
 80060ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060b0:	f7fa fd4c 	bl	8000b4c <__aeabi_dcmpun>
 80060b4:	bb70      	cbnz	r0, 8006114 <_printf_float+0xc4>
 80060b6:	f04f 32ff 	mov.w	r2, #4294967295
 80060ba:	4ba3      	ldr	r3, [pc, #652]	; (8006348 <_printf_float+0x2f8>)
 80060bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060c0:	f7fa fd26 	bl	8000b10 <__aeabi_dcmple>
 80060c4:	bb30      	cbnz	r0, 8006114 <_printf_float+0xc4>
 80060c6:	2200      	movs	r2, #0
 80060c8:	2300      	movs	r3, #0
 80060ca:	4640      	mov	r0, r8
 80060cc:	4649      	mov	r1, r9
 80060ce:	f7fa fd15 	bl	8000afc <__aeabi_dcmplt>
 80060d2:	b110      	cbz	r0, 80060da <_printf_float+0x8a>
 80060d4:	232d      	movs	r3, #45	; 0x2d
 80060d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060da:	4a9c      	ldr	r2, [pc, #624]	; (800634c <_printf_float+0x2fc>)
 80060dc:	4b9c      	ldr	r3, [pc, #624]	; (8006350 <_printf_float+0x300>)
 80060de:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80060e2:	bf8c      	ite	hi
 80060e4:	4690      	movhi	r8, r2
 80060e6:	4698      	movls	r8, r3
 80060e8:	2303      	movs	r3, #3
 80060ea:	f02b 0204 	bic.w	r2, fp, #4
 80060ee:	6123      	str	r3, [r4, #16]
 80060f0:	6022      	str	r2, [r4, #0]
 80060f2:	f04f 0900 	mov.w	r9, #0
 80060f6:	9700      	str	r7, [sp, #0]
 80060f8:	4633      	mov	r3, r6
 80060fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80060fc:	4621      	mov	r1, r4
 80060fe:	4628      	mov	r0, r5
 8006100:	f000 f9e6 	bl	80064d0 <_printf_common>
 8006104:	3001      	adds	r0, #1
 8006106:	f040 808d 	bne.w	8006224 <_printf_float+0x1d4>
 800610a:	f04f 30ff 	mov.w	r0, #4294967295
 800610e:	b00d      	add	sp, #52	; 0x34
 8006110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006114:	4642      	mov	r2, r8
 8006116:	464b      	mov	r3, r9
 8006118:	4640      	mov	r0, r8
 800611a:	4649      	mov	r1, r9
 800611c:	f7fa fd16 	bl	8000b4c <__aeabi_dcmpun>
 8006120:	b110      	cbz	r0, 8006128 <_printf_float+0xd8>
 8006122:	4a8c      	ldr	r2, [pc, #560]	; (8006354 <_printf_float+0x304>)
 8006124:	4b8c      	ldr	r3, [pc, #560]	; (8006358 <_printf_float+0x308>)
 8006126:	e7da      	b.n	80060de <_printf_float+0x8e>
 8006128:	6861      	ldr	r1, [r4, #4]
 800612a:	1c4b      	adds	r3, r1, #1
 800612c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006130:	a80a      	add	r0, sp, #40	; 0x28
 8006132:	d13e      	bne.n	80061b2 <_printf_float+0x162>
 8006134:	2306      	movs	r3, #6
 8006136:	6063      	str	r3, [r4, #4]
 8006138:	2300      	movs	r3, #0
 800613a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800613e:	ab09      	add	r3, sp, #36	; 0x24
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	ec49 8b10 	vmov	d0, r8, r9
 8006146:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800614a:	6022      	str	r2, [r4, #0]
 800614c:	f8cd a004 	str.w	sl, [sp, #4]
 8006150:	6861      	ldr	r1, [r4, #4]
 8006152:	4628      	mov	r0, r5
 8006154:	f7ff fee8 	bl	8005f28 <__cvt>
 8006158:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800615c:	2b47      	cmp	r3, #71	; 0x47
 800615e:	4680      	mov	r8, r0
 8006160:	d109      	bne.n	8006176 <_printf_float+0x126>
 8006162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006164:	1cd8      	adds	r0, r3, #3
 8006166:	db02      	blt.n	800616e <_printf_float+0x11e>
 8006168:	6862      	ldr	r2, [r4, #4]
 800616a:	4293      	cmp	r3, r2
 800616c:	dd47      	ble.n	80061fe <_printf_float+0x1ae>
 800616e:	f1aa 0a02 	sub.w	sl, sl, #2
 8006172:	fa5f fa8a 	uxtb.w	sl, sl
 8006176:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800617a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800617c:	d824      	bhi.n	80061c8 <_printf_float+0x178>
 800617e:	3901      	subs	r1, #1
 8006180:	4652      	mov	r2, sl
 8006182:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006186:	9109      	str	r1, [sp, #36]	; 0x24
 8006188:	f7ff ff2f 	bl	8005fea <__exponent>
 800618c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800618e:	1813      	adds	r3, r2, r0
 8006190:	2a01      	cmp	r2, #1
 8006192:	4681      	mov	r9, r0
 8006194:	6123      	str	r3, [r4, #16]
 8006196:	dc02      	bgt.n	800619e <_printf_float+0x14e>
 8006198:	6822      	ldr	r2, [r4, #0]
 800619a:	07d1      	lsls	r1, r2, #31
 800619c:	d501      	bpl.n	80061a2 <_printf_float+0x152>
 800619e:	3301      	adds	r3, #1
 80061a0:	6123      	str	r3, [r4, #16]
 80061a2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0a5      	beq.n	80060f6 <_printf_float+0xa6>
 80061aa:	232d      	movs	r3, #45	; 0x2d
 80061ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061b0:	e7a1      	b.n	80060f6 <_printf_float+0xa6>
 80061b2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80061b6:	f000 8177 	beq.w	80064a8 <_printf_float+0x458>
 80061ba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80061be:	d1bb      	bne.n	8006138 <_printf_float+0xe8>
 80061c0:	2900      	cmp	r1, #0
 80061c2:	d1b9      	bne.n	8006138 <_printf_float+0xe8>
 80061c4:	2301      	movs	r3, #1
 80061c6:	e7b6      	b.n	8006136 <_printf_float+0xe6>
 80061c8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80061cc:	d119      	bne.n	8006202 <_printf_float+0x1b2>
 80061ce:	2900      	cmp	r1, #0
 80061d0:	6863      	ldr	r3, [r4, #4]
 80061d2:	dd0c      	ble.n	80061ee <_printf_float+0x19e>
 80061d4:	6121      	str	r1, [r4, #16]
 80061d6:	b913      	cbnz	r3, 80061de <_printf_float+0x18e>
 80061d8:	6822      	ldr	r2, [r4, #0]
 80061da:	07d2      	lsls	r2, r2, #31
 80061dc:	d502      	bpl.n	80061e4 <_printf_float+0x194>
 80061de:	3301      	adds	r3, #1
 80061e0:	440b      	add	r3, r1
 80061e2:	6123      	str	r3, [r4, #16]
 80061e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e6:	65a3      	str	r3, [r4, #88]	; 0x58
 80061e8:	f04f 0900 	mov.w	r9, #0
 80061ec:	e7d9      	b.n	80061a2 <_printf_float+0x152>
 80061ee:	b913      	cbnz	r3, 80061f6 <_printf_float+0x1a6>
 80061f0:	6822      	ldr	r2, [r4, #0]
 80061f2:	07d0      	lsls	r0, r2, #31
 80061f4:	d501      	bpl.n	80061fa <_printf_float+0x1aa>
 80061f6:	3302      	adds	r3, #2
 80061f8:	e7f3      	b.n	80061e2 <_printf_float+0x192>
 80061fa:	2301      	movs	r3, #1
 80061fc:	e7f1      	b.n	80061e2 <_printf_float+0x192>
 80061fe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006202:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006206:	4293      	cmp	r3, r2
 8006208:	db05      	blt.n	8006216 <_printf_float+0x1c6>
 800620a:	6822      	ldr	r2, [r4, #0]
 800620c:	6123      	str	r3, [r4, #16]
 800620e:	07d1      	lsls	r1, r2, #31
 8006210:	d5e8      	bpl.n	80061e4 <_printf_float+0x194>
 8006212:	3301      	adds	r3, #1
 8006214:	e7e5      	b.n	80061e2 <_printf_float+0x192>
 8006216:	2b00      	cmp	r3, #0
 8006218:	bfd4      	ite	le
 800621a:	f1c3 0302 	rsble	r3, r3, #2
 800621e:	2301      	movgt	r3, #1
 8006220:	4413      	add	r3, r2
 8006222:	e7de      	b.n	80061e2 <_printf_float+0x192>
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	055a      	lsls	r2, r3, #21
 8006228:	d407      	bmi.n	800623a <_printf_float+0x1ea>
 800622a:	6923      	ldr	r3, [r4, #16]
 800622c:	4642      	mov	r2, r8
 800622e:	4631      	mov	r1, r6
 8006230:	4628      	mov	r0, r5
 8006232:	47b8      	blx	r7
 8006234:	3001      	adds	r0, #1
 8006236:	d12b      	bne.n	8006290 <_printf_float+0x240>
 8006238:	e767      	b.n	800610a <_printf_float+0xba>
 800623a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800623e:	f240 80dc 	bls.w	80063fa <_printf_float+0x3aa>
 8006242:	2200      	movs	r2, #0
 8006244:	2300      	movs	r3, #0
 8006246:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800624a:	f7fa fc4d 	bl	8000ae8 <__aeabi_dcmpeq>
 800624e:	2800      	cmp	r0, #0
 8006250:	d033      	beq.n	80062ba <_printf_float+0x26a>
 8006252:	2301      	movs	r3, #1
 8006254:	4a41      	ldr	r2, [pc, #260]	; (800635c <_printf_float+0x30c>)
 8006256:	4631      	mov	r1, r6
 8006258:	4628      	mov	r0, r5
 800625a:	47b8      	blx	r7
 800625c:	3001      	adds	r0, #1
 800625e:	f43f af54 	beq.w	800610a <_printf_float+0xba>
 8006262:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006266:	429a      	cmp	r2, r3
 8006268:	db02      	blt.n	8006270 <_printf_float+0x220>
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	07d8      	lsls	r0, r3, #31
 800626e:	d50f      	bpl.n	8006290 <_printf_float+0x240>
 8006270:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006274:	4631      	mov	r1, r6
 8006276:	4628      	mov	r0, r5
 8006278:	47b8      	blx	r7
 800627a:	3001      	adds	r0, #1
 800627c:	f43f af45 	beq.w	800610a <_printf_float+0xba>
 8006280:	f04f 0800 	mov.w	r8, #0
 8006284:	f104 091a 	add.w	r9, r4, #26
 8006288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800628a:	3b01      	subs	r3, #1
 800628c:	4543      	cmp	r3, r8
 800628e:	dc09      	bgt.n	80062a4 <_printf_float+0x254>
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	079b      	lsls	r3, r3, #30
 8006294:	f100 8103 	bmi.w	800649e <_printf_float+0x44e>
 8006298:	68e0      	ldr	r0, [r4, #12]
 800629a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800629c:	4298      	cmp	r0, r3
 800629e:	bfb8      	it	lt
 80062a0:	4618      	movlt	r0, r3
 80062a2:	e734      	b.n	800610e <_printf_float+0xbe>
 80062a4:	2301      	movs	r3, #1
 80062a6:	464a      	mov	r2, r9
 80062a8:	4631      	mov	r1, r6
 80062aa:	4628      	mov	r0, r5
 80062ac:	47b8      	blx	r7
 80062ae:	3001      	adds	r0, #1
 80062b0:	f43f af2b 	beq.w	800610a <_printf_float+0xba>
 80062b4:	f108 0801 	add.w	r8, r8, #1
 80062b8:	e7e6      	b.n	8006288 <_printf_float+0x238>
 80062ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062bc:	2b00      	cmp	r3, #0
 80062be:	dc2b      	bgt.n	8006318 <_printf_float+0x2c8>
 80062c0:	2301      	movs	r3, #1
 80062c2:	4a26      	ldr	r2, [pc, #152]	; (800635c <_printf_float+0x30c>)
 80062c4:	4631      	mov	r1, r6
 80062c6:	4628      	mov	r0, r5
 80062c8:	47b8      	blx	r7
 80062ca:	3001      	adds	r0, #1
 80062cc:	f43f af1d 	beq.w	800610a <_printf_float+0xba>
 80062d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d2:	b923      	cbnz	r3, 80062de <_printf_float+0x28e>
 80062d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062d6:	b913      	cbnz	r3, 80062de <_printf_float+0x28e>
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	07d9      	lsls	r1, r3, #31
 80062dc:	d5d8      	bpl.n	8006290 <_printf_float+0x240>
 80062de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062e2:	4631      	mov	r1, r6
 80062e4:	4628      	mov	r0, r5
 80062e6:	47b8      	blx	r7
 80062e8:	3001      	adds	r0, #1
 80062ea:	f43f af0e 	beq.w	800610a <_printf_float+0xba>
 80062ee:	f04f 0900 	mov.w	r9, #0
 80062f2:	f104 0a1a 	add.w	sl, r4, #26
 80062f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f8:	425b      	negs	r3, r3
 80062fa:	454b      	cmp	r3, r9
 80062fc:	dc01      	bgt.n	8006302 <_printf_float+0x2b2>
 80062fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006300:	e794      	b.n	800622c <_printf_float+0x1dc>
 8006302:	2301      	movs	r3, #1
 8006304:	4652      	mov	r2, sl
 8006306:	4631      	mov	r1, r6
 8006308:	4628      	mov	r0, r5
 800630a:	47b8      	blx	r7
 800630c:	3001      	adds	r0, #1
 800630e:	f43f aefc 	beq.w	800610a <_printf_float+0xba>
 8006312:	f109 0901 	add.w	r9, r9, #1
 8006316:	e7ee      	b.n	80062f6 <_printf_float+0x2a6>
 8006318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800631a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800631c:	429a      	cmp	r2, r3
 800631e:	bfa8      	it	ge
 8006320:	461a      	movge	r2, r3
 8006322:	2a00      	cmp	r2, #0
 8006324:	4691      	mov	r9, r2
 8006326:	dd07      	ble.n	8006338 <_printf_float+0x2e8>
 8006328:	4613      	mov	r3, r2
 800632a:	4631      	mov	r1, r6
 800632c:	4642      	mov	r2, r8
 800632e:	4628      	mov	r0, r5
 8006330:	47b8      	blx	r7
 8006332:	3001      	adds	r0, #1
 8006334:	f43f aee9 	beq.w	800610a <_printf_float+0xba>
 8006338:	f104 031a 	add.w	r3, r4, #26
 800633c:	f04f 0b00 	mov.w	fp, #0
 8006340:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006344:	9306      	str	r3, [sp, #24]
 8006346:	e015      	b.n	8006374 <_printf_float+0x324>
 8006348:	7fefffff 	.word	0x7fefffff
 800634c:	08008a90 	.word	0x08008a90
 8006350:	08008a8c 	.word	0x08008a8c
 8006354:	08008a98 	.word	0x08008a98
 8006358:	08008a94 	.word	0x08008a94
 800635c:	08008a9c 	.word	0x08008a9c
 8006360:	2301      	movs	r3, #1
 8006362:	9a06      	ldr	r2, [sp, #24]
 8006364:	4631      	mov	r1, r6
 8006366:	4628      	mov	r0, r5
 8006368:	47b8      	blx	r7
 800636a:	3001      	adds	r0, #1
 800636c:	f43f aecd 	beq.w	800610a <_printf_float+0xba>
 8006370:	f10b 0b01 	add.w	fp, fp, #1
 8006374:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006378:	ebaa 0309 	sub.w	r3, sl, r9
 800637c:	455b      	cmp	r3, fp
 800637e:	dcef      	bgt.n	8006360 <_printf_float+0x310>
 8006380:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006384:	429a      	cmp	r2, r3
 8006386:	44d0      	add	r8, sl
 8006388:	db15      	blt.n	80063b6 <_printf_float+0x366>
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	07da      	lsls	r2, r3, #31
 800638e:	d412      	bmi.n	80063b6 <_printf_float+0x366>
 8006390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006392:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006394:	eba3 020a 	sub.w	r2, r3, sl
 8006398:	eba3 0a01 	sub.w	sl, r3, r1
 800639c:	4592      	cmp	sl, r2
 800639e:	bfa8      	it	ge
 80063a0:	4692      	movge	sl, r2
 80063a2:	f1ba 0f00 	cmp.w	sl, #0
 80063a6:	dc0e      	bgt.n	80063c6 <_printf_float+0x376>
 80063a8:	f04f 0800 	mov.w	r8, #0
 80063ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80063b0:	f104 091a 	add.w	r9, r4, #26
 80063b4:	e019      	b.n	80063ea <_printf_float+0x39a>
 80063b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063ba:	4631      	mov	r1, r6
 80063bc:	4628      	mov	r0, r5
 80063be:	47b8      	blx	r7
 80063c0:	3001      	adds	r0, #1
 80063c2:	d1e5      	bne.n	8006390 <_printf_float+0x340>
 80063c4:	e6a1      	b.n	800610a <_printf_float+0xba>
 80063c6:	4653      	mov	r3, sl
 80063c8:	4642      	mov	r2, r8
 80063ca:	4631      	mov	r1, r6
 80063cc:	4628      	mov	r0, r5
 80063ce:	47b8      	blx	r7
 80063d0:	3001      	adds	r0, #1
 80063d2:	d1e9      	bne.n	80063a8 <_printf_float+0x358>
 80063d4:	e699      	b.n	800610a <_printf_float+0xba>
 80063d6:	2301      	movs	r3, #1
 80063d8:	464a      	mov	r2, r9
 80063da:	4631      	mov	r1, r6
 80063dc:	4628      	mov	r0, r5
 80063de:	47b8      	blx	r7
 80063e0:	3001      	adds	r0, #1
 80063e2:	f43f ae92 	beq.w	800610a <_printf_float+0xba>
 80063e6:	f108 0801 	add.w	r8, r8, #1
 80063ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063ee:	1a9b      	subs	r3, r3, r2
 80063f0:	eba3 030a 	sub.w	r3, r3, sl
 80063f4:	4543      	cmp	r3, r8
 80063f6:	dcee      	bgt.n	80063d6 <_printf_float+0x386>
 80063f8:	e74a      	b.n	8006290 <_printf_float+0x240>
 80063fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063fc:	2a01      	cmp	r2, #1
 80063fe:	dc01      	bgt.n	8006404 <_printf_float+0x3b4>
 8006400:	07db      	lsls	r3, r3, #31
 8006402:	d53a      	bpl.n	800647a <_printf_float+0x42a>
 8006404:	2301      	movs	r3, #1
 8006406:	4642      	mov	r2, r8
 8006408:	4631      	mov	r1, r6
 800640a:	4628      	mov	r0, r5
 800640c:	47b8      	blx	r7
 800640e:	3001      	adds	r0, #1
 8006410:	f43f ae7b 	beq.w	800610a <_printf_float+0xba>
 8006414:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006418:	4631      	mov	r1, r6
 800641a:	4628      	mov	r0, r5
 800641c:	47b8      	blx	r7
 800641e:	3001      	adds	r0, #1
 8006420:	f108 0801 	add.w	r8, r8, #1
 8006424:	f43f ae71 	beq.w	800610a <_printf_float+0xba>
 8006428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800642a:	2200      	movs	r2, #0
 800642c:	f103 3aff 	add.w	sl, r3, #4294967295
 8006430:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006434:	2300      	movs	r3, #0
 8006436:	f7fa fb57 	bl	8000ae8 <__aeabi_dcmpeq>
 800643a:	b9c8      	cbnz	r0, 8006470 <_printf_float+0x420>
 800643c:	4653      	mov	r3, sl
 800643e:	4642      	mov	r2, r8
 8006440:	4631      	mov	r1, r6
 8006442:	4628      	mov	r0, r5
 8006444:	47b8      	blx	r7
 8006446:	3001      	adds	r0, #1
 8006448:	d10e      	bne.n	8006468 <_printf_float+0x418>
 800644a:	e65e      	b.n	800610a <_printf_float+0xba>
 800644c:	2301      	movs	r3, #1
 800644e:	4652      	mov	r2, sl
 8006450:	4631      	mov	r1, r6
 8006452:	4628      	mov	r0, r5
 8006454:	47b8      	blx	r7
 8006456:	3001      	adds	r0, #1
 8006458:	f43f ae57 	beq.w	800610a <_printf_float+0xba>
 800645c:	f108 0801 	add.w	r8, r8, #1
 8006460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006462:	3b01      	subs	r3, #1
 8006464:	4543      	cmp	r3, r8
 8006466:	dcf1      	bgt.n	800644c <_printf_float+0x3fc>
 8006468:	464b      	mov	r3, r9
 800646a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800646e:	e6de      	b.n	800622e <_printf_float+0x1de>
 8006470:	f04f 0800 	mov.w	r8, #0
 8006474:	f104 0a1a 	add.w	sl, r4, #26
 8006478:	e7f2      	b.n	8006460 <_printf_float+0x410>
 800647a:	2301      	movs	r3, #1
 800647c:	e7df      	b.n	800643e <_printf_float+0x3ee>
 800647e:	2301      	movs	r3, #1
 8006480:	464a      	mov	r2, r9
 8006482:	4631      	mov	r1, r6
 8006484:	4628      	mov	r0, r5
 8006486:	47b8      	blx	r7
 8006488:	3001      	adds	r0, #1
 800648a:	f43f ae3e 	beq.w	800610a <_printf_float+0xba>
 800648e:	f108 0801 	add.w	r8, r8, #1
 8006492:	68e3      	ldr	r3, [r4, #12]
 8006494:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006496:	1a9b      	subs	r3, r3, r2
 8006498:	4543      	cmp	r3, r8
 800649a:	dcf0      	bgt.n	800647e <_printf_float+0x42e>
 800649c:	e6fc      	b.n	8006298 <_printf_float+0x248>
 800649e:	f04f 0800 	mov.w	r8, #0
 80064a2:	f104 0919 	add.w	r9, r4, #25
 80064a6:	e7f4      	b.n	8006492 <_printf_float+0x442>
 80064a8:	2900      	cmp	r1, #0
 80064aa:	f43f ae8b 	beq.w	80061c4 <_printf_float+0x174>
 80064ae:	2300      	movs	r3, #0
 80064b0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80064b4:	ab09      	add	r3, sp, #36	; 0x24
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	ec49 8b10 	vmov	d0, r8, r9
 80064bc:	6022      	str	r2, [r4, #0]
 80064be:	f8cd a004 	str.w	sl, [sp, #4]
 80064c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80064c6:	4628      	mov	r0, r5
 80064c8:	f7ff fd2e 	bl	8005f28 <__cvt>
 80064cc:	4680      	mov	r8, r0
 80064ce:	e648      	b.n	8006162 <_printf_float+0x112>

080064d0 <_printf_common>:
 80064d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d4:	4691      	mov	r9, r2
 80064d6:	461f      	mov	r7, r3
 80064d8:	688a      	ldr	r2, [r1, #8]
 80064da:	690b      	ldr	r3, [r1, #16]
 80064dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064e0:	4293      	cmp	r3, r2
 80064e2:	bfb8      	it	lt
 80064e4:	4613      	movlt	r3, r2
 80064e6:	f8c9 3000 	str.w	r3, [r9]
 80064ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064ee:	4606      	mov	r6, r0
 80064f0:	460c      	mov	r4, r1
 80064f2:	b112      	cbz	r2, 80064fa <_printf_common+0x2a>
 80064f4:	3301      	adds	r3, #1
 80064f6:	f8c9 3000 	str.w	r3, [r9]
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	0699      	lsls	r1, r3, #26
 80064fe:	bf42      	ittt	mi
 8006500:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006504:	3302      	addmi	r3, #2
 8006506:	f8c9 3000 	strmi.w	r3, [r9]
 800650a:	6825      	ldr	r5, [r4, #0]
 800650c:	f015 0506 	ands.w	r5, r5, #6
 8006510:	d107      	bne.n	8006522 <_printf_common+0x52>
 8006512:	f104 0a19 	add.w	sl, r4, #25
 8006516:	68e3      	ldr	r3, [r4, #12]
 8006518:	f8d9 2000 	ldr.w	r2, [r9]
 800651c:	1a9b      	subs	r3, r3, r2
 800651e:	42ab      	cmp	r3, r5
 8006520:	dc28      	bgt.n	8006574 <_printf_common+0xa4>
 8006522:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006526:	6822      	ldr	r2, [r4, #0]
 8006528:	3300      	adds	r3, #0
 800652a:	bf18      	it	ne
 800652c:	2301      	movne	r3, #1
 800652e:	0692      	lsls	r2, r2, #26
 8006530:	d42d      	bmi.n	800658e <_printf_common+0xbe>
 8006532:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006536:	4639      	mov	r1, r7
 8006538:	4630      	mov	r0, r6
 800653a:	47c0      	blx	r8
 800653c:	3001      	adds	r0, #1
 800653e:	d020      	beq.n	8006582 <_printf_common+0xb2>
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	68e5      	ldr	r5, [r4, #12]
 8006544:	f8d9 2000 	ldr.w	r2, [r9]
 8006548:	f003 0306 	and.w	r3, r3, #6
 800654c:	2b04      	cmp	r3, #4
 800654e:	bf08      	it	eq
 8006550:	1aad      	subeq	r5, r5, r2
 8006552:	68a3      	ldr	r3, [r4, #8]
 8006554:	6922      	ldr	r2, [r4, #16]
 8006556:	bf0c      	ite	eq
 8006558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800655c:	2500      	movne	r5, #0
 800655e:	4293      	cmp	r3, r2
 8006560:	bfc4      	itt	gt
 8006562:	1a9b      	subgt	r3, r3, r2
 8006564:	18ed      	addgt	r5, r5, r3
 8006566:	f04f 0900 	mov.w	r9, #0
 800656a:	341a      	adds	r4, #26
 800656c:	454d      	cmp	r5, r9
 800656e:	d11a      	bne.n	80065a6 <_printf_common+0xd6>
 8006570:	2000      	movs	r0, #0
 8006572:	e008      	b.n	8006586 <_printf_common+0xb6>
 8006574:	2301      	movs	r3, #1
 8006576:	4652      	mov	r2, sl
 8006578:	4639      	mov	r1, r7
 800657a:	4630      	mov	r0, r6
 800657c:	47c0      	blx	r8
 800657e:	3001      	adds	r0, #1
 8006580:	d103      	bne.n	800658a <_printf_common+0xba>
 8006582:	f04f 30ff 	mov.w	r0, #4294967295
 8006586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800658a:	3501      	adds	r5, #1
 800658c:	e7c3      	b.n	8006516 <_printf_common+0x46>
 800658e:	18e1      	adds	r1, r4, r3
 8006590:	1c5a      	adds	r2, r3, #1
 8006592:	2030      	movs	r0, #48	; 0x30
 8006594:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006598:	4422      	add	r2, r4
 800659a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800659e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065a2:	3302      	adds	r3, #2
 80065a4:	e7c5      	b.n	8006532 <_printf_common+0x62>
 80065a6:	2301      	movs	r3, #1
 80065a8:	4622      	mov	r2, r4
 80065aa:	4639      	mov	r1, r7
 80065ac:	4630      	mov	r0, r6
 80065ae:	47c0      	blx	r8
 80065b0:	3001      	adds	r0, #1
 80065b2:	d0e6      	beq.n	8006582 <_printf_common+0xb2>
 80065b4:	f109 0901 	add.w	r9, r9, #1
 80065b8:	e7d8      	b.n	800656c <_printf_common+0x9c>
	...

080065bc <_printf_i>:
 80065bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80065c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80065c4:	460c      	mov	r4, r1
 80065c6:	7e09      	ldrb	r1, [r1, #24]
 80065c8:	b085      	sub	sp, #20
 80065ca:	296e      	cmp	r1, #110	; 0x6e
 80065cc:	4617      	mov	r7, r2
 80065ce:	4606      	mov	r6, r0
 80065d0:	4698      	mov	r8, r3
 80065d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065d4:	f000 80b3 	beq.w	800673e <_printf_i+0x182>
 80065d8:	d822      	bhi.n	8006620 <_printf_i+0x64>
 80065da:	2963      	cmp	r1, #99	; 0x63
 80065dc:	d036      	beq.n	800664c <_printf_i+0x90>
 80065de:	d80a      	bhi.n	80065f6 <_printf_i+0x3a>
 80065e0:	2900      	cmp	r1, #0
 80065e2:	f000 80b9 	beq.w	8006758 <_printf_i+0x19c>
 80065e6:	2958      	cmp	r1, #88	; 0x58
 80065e8:	f000 8083 	beq.w	80066f2 <_printf_i+0x136>
 80065ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80065f4:	e032      	b.n	800665c <_printf_i+0xa0>
 80065f6:	2964      	cmp	r1, #100	; 0x64
 80065f8:	d001      	beq.n	80065fe <_printf_i+0x42>
 80065fa:	2969      	cmp	r1, #105	; 0x69
 80065fc:	d1f6      	bne.n	80065ec <_printf_i+0x30>
 80065fe:	6820      	ldr	r0, [r4, #0]
 8006600:	6813      	ldr	r3, [r2, #0]
 8006602:	0605      	lsls	r5, r0, #24
 8006604:	f103 0104 	add.w	r1, r3, #4
 8006608:	d52a      	bpl.n	8006660 <_printf_i+0xa4>
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6011      	str	r1, [r2, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	da03      	bge.n	800661a <_printf_i+0x5e>
 8006612:	222d      	movs	r2, #45	; 0x2d
 8006614:	425b      	negs	r3, r3
 8006616:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800661a:	486f      	ldr	r0, [pc, #444]	; (80067d8 <_printf_i+0x21c>)
 800661c:	220a      	movs	r2, #10
 800661e:	e039      	b.n	8006694 <_printf_i+0xd8>
 8006620:	2973      	cmp	r1, #115	; 0x73
 8006622:	f000 809d 	beq.w	8006760 <_printf_i+0x1a4>
 8006626:	d808      	bhi.n	800663a <_printf_i+0x7e>
 8006628:	296f      	cmp	r1, #111	; 0x6f
 800662a:	d020      	beq.n	800666e <_printf_i+0xb2>
 800662c:	2970      	cmp	r1, #112	; 0x70
 800662e:	d1dd      	bne.n	80065ec <_printf_i+0x30>
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	f043 0320 	orr.w	r3, r3, #32
 8006636:	6023      	str	r3, [r4, #0]
 8006638:	e003      	b.n	8006642 <_printf_i+0x86>
 800663a:	2975      	cmp	r1, #117	; 0x75
 800663c:	d017      	beq.n	800666e <_printf_i+0xb2>
 800663e:	2978      	cmp	r1, #120	; 0x78
 8006640:	d1d4      	bne.n	80065ec <_printf_i+0x30>
 8006642:	2378      	movs	r3, #120	; 0x78
 8006644:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006648:	4864      	ldr	r0, [pc, #400]	; (80067dc <_printf_i+0x220>)
 800664a:	e055      	b.n	80066f8 <_printf_i+0x13c>
 800664c:	6813      	ldr	r3, [r2, #0]
 800664e:	1d19      	adds	r1, r3, #4
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6011      	str	r1, [r2, #0]
 8006654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006658:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800665c:	2301      	movs	r3, #1
 800665e:	e08c      	b.n	800677a <_printf_i+0x1be>
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6011      	str	r1, [r2, #0]
 8006664:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006668:	bf18      	it	ne
 800666a:	b21b      	sxthne	r3, r3
 800666c:	e7cf      	b.n	800660e <_printf_i+0x52>
 800666e:	6813      	ldr	r3, [r2, #0]
 8006670:	6825      	ldr	r5, [r4, #0]
 8006672:	1d18      	adds	r0, r3, #4
 8006674:	6010      	str	r0, [r2, #0]
 8006676:	0628      	lsls	r0, r5, #24
 8006678:	d501      	bpl.n	800667e <_printf_i+0xc2>
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	e002      	b.n	8006684 <_printf_i+0xc8>
 800667e:	0668      	lsls	r0, r5, #25
 8006680:	d5fb      	bpl.n	800667a <_printf_i+0xbe>
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	4854      	ldr	r0, [pc, #336]	; (80067d8 <_printf_i+0x21c>)
 8006686:	296f      	cmp	r1, #111	; 0x6f
 8006688:	bf14      	ite	ne
 800668a:	220a      	movne	r2, #10
 800668c:	2208      	moveq	r2, #8
 800668e:	2100      	movs	r1, #0
 8006690:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006694:	6865      	ldr	r5, [r4, #4]
 8006696:	60a5      	str	r5, [r4, #8]
 8006698:	2d00      	cmp	r5, #0
 800669a:	f2c0 8095 	blt.w	80067c8 <_printf_i+0x20c>
 800669e:	6821      	ldr	r1, [r4, #0]
 80066a0:	f021 0104 	bic.w	r1, r1, #4
 80066a4:	6021      	str	r1, [r4, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d13d      	bne.n	8006726 <_printf_i+0x16a>
 80066aa:	2d00      	cmp	r5, #0
 80066ac:	f040 808e 	bne.w	80067cc <_printf_i+0x210>
 80066b0:	4665      	mov	r5, ip
 80066b2:	2a08      	cmp	r2, #8
 80066b4:	d10b      	bne.n	80066ce <_printf_i+0x112>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	07db      	lsls	r3, r3, #31
 80066ba:	d508      	bpl.n	80066ce <_printf_i+0x112>
 80066bc:	6923      	ldr	r3, [r4, #16]
 80066be:	6862      	ldr	r2, [r4, #4]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	bfde      	ittt	le
 80066c4:	2330      	movle	r3, #48	; 0x30
 80066c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066ce:	ebac 0305 	sub.w	r3, ip, r5
 80066d2:	6123      	str	r3, [r4, #16]
 80066d4:	f8cd 8000 	str.w	r8, [sp]
 80066d8:	463b      	mov	r3, r7
 80066da:	aa03      	add	r2, sp, #12
 80066dc:	4621      	mov	r1, r4
 80066de:	4630      	mov	r0, r6
 80066e0:	f7ff fef6 	bl	80064d0 <_printf_common>
 80066e4:	3001      	adds	r0, #1
 80066e6:	d14d      	bne.n	8006784 <_printf_i+0x1c8>
 80066e8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ec:	b005      	add	sp, #20
 80066ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066f2:	4839      	ldr	r0, [pc, #228]	; (80067d8 <_printf_i+0x21c>)
 80066f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80066f8:	6813      	ldr	r3, [r2, #0]
 80066fa:	6821      	ldr	r1, [r4, #0]
 80066fc:	1d1d      	adds	r5, r3, #4
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6015      	str	r5, [r2, #0]
 8006702:	060a      	lsls	r2, r1, #24
 8006704:	d50b      	bpl.n	800671e <_printf_i+0x162>
 8006706:	07ca      	lsls	r2, r1, #31
 8006708:	bf44      	itt	mi
 800670a:	f041 0120 	orrmi.w	r1, r1, #32
 800670e:	6021      	strmi	r1, [r4, #0]
 8006710:	b91b      	cbnz	r3, 800671a <_printf_i+0x15e>
 8006712:	6822      	ldr	r2, [r4, #0]
 8006714:	f022 0220 	bic.w	r2, r2, #32
 8006718:	6022      	str	r2, [r4, #0]
 800671a:	2210      	movs	r2, #16
 800671c:	e7b7      	b.n	800668e <_printf_i+0xd2>
 800671e:	064d      	lsls	r5, r1, #25
 8006720:	bf48      	it	mi
 8006722:	b29b      	uxthmi	r3, r3
 8006724:	e7ef      	b.n	8006706 <_printf_i+0x14a>
 8006726:	4665      	mov	r5, ip
 8006728:	fbb3 f1f2 	udiv	r1, r3, r2
 800672c:	fb02 3311 	mls	r3, r2, r1, r3
 8006730:	5cc3      	ldrb	r3, [r0, r3]
 8006732:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006736:	460b      	mov	r3, r1
 8006738:	2900      	cmp	r1, #0
 800673a:	d1f5      	bne.n	8006728 <_printf_i+0x16c>
 800673c:	e7b9      	b.n	80066b2 <_printf_i+0xf6>
 800673e:	6813      	ldr	r3, [r2, #0]
 8006740:	6825      	ldr	r5, [r4, #0]
 8006742:	6961      	ldr	r1, [r4, #20]
 8006744:	1d18      	adds	r0, r3, #4
 8006746:	6010      	str	r0, [r2, #0]
 8006748:	0628      	lsls	r0, r5, #24
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	d501      	bpl.n	8006752 <_printf_i+0x196>
 800674e:	6019      	str	r1, [r3, #0]
 8006750:	e002      	b.n	8006758 <_printf_i+0x19c>
 8006752:	066a      	lsls	r2, r5, #25
 8006754:	d5fb      	bpl.n	800674e <_printf_i+0x192>
 8006756:	8019      	strh	r1, [r3, #0]
 8006758:	2300      	movs	r3, #0
 800675a:	6123      	str	r3, [r4, #16]
 800675c:	4665      	mov	r5, ip
 800675e:	e7b9      	b.n	80066d4 <_printf_i+0x118>
 8006760:	6813      	ldr	r3, [r2, #0]
 8006762:	1d19      	adds	r1, r3, #4
 8006764:	6011      	str	r1, [r2, #0]
 8006766:	681d      	ldr	r5, [r3, #0]
 8006768:	6862      	ldr	r2, [r4, #4]
 800676a:	2100      	movs	r1, #0
 800676c:	4628      	mov	r0, r5
 800676e:	f7f9 fd47 	bl	8000200 <memchr>
 8006772:	b108      	cbz	r0, 8006778 <_printf_i+0x1bc>
 8006774:	1b40      	subs	r0, r0, r5
 8006776:	6060      	str	r0, [r4, #4]
 8006778:	6863      	ldr	r3, [r4, #4]
 800677a:	6123      	str	r3, [r4, #16]
 800677c:	2300      	movs	r3, #0
 800677e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006782:	e7a7      	b.n	80066d4 <_printf_i+0x118>
 8006784:	6923      	ldr	r3, [r4, #16]
 8006786:	462a      	mov	r2, r5
 8006788:	4639      	mov	r1, r7
 800678a:	4630      	mov	r0, r6
 800678c:	47c0      	blx	r8
 800678e:	3001      	adds	r0, #1
 8006790:	d0aa      	beq.n	80066e8 <_printf_i+0x12c>
 8006792:	6823      	ldr	r3, [r4, #0]
 8006794:	079b      	lsls	r3, r3, #30
 8006796:	d413      	bmi.n	80067c0 <_printf_i+0x204>
 8006798:	68e0      	ldr	r0, [r4, #12]
 800679a:	9b03      	ldr	r3, [sp, #12]
 800679c:	4298      	cmp	r0, r3
 800679e:	bfb8      	it	lt
 80067a0:	4618      	movlt	r0, r3
 80067a2:	e7a3      	b.n	80066ec <_printf_i+0x130>
 80067a4:	2301      	movs	r3, #1
 80067a6:	464a      	mov	r2, r9
 80067a8:	4639      	mov	r1, r7
 80067aa:	4630      	mov	r0, r6
 80067ac:	47c0      	blx	r8
 80067ae:	3001      	adds	r0, #1
 80067b0:	d09a      	beq.n	80066e8 <_printf_i+0x12c>
 80067b2:	3501      	adds	r5, #1
 80067b4:	68e3      	ldr	r3, [r4, #12]
 80067b6:	9a03      	ldr	r2, [sp, #12]
 80067b8:	1a9b      	subs	r3, r3, r2
 80067ba:	42ab      	cmp	r3, r5
 80067bc:	dcf2      	bgt.n	80067a4 <_printf_i+0x1e8>
 80067be:	e7eb      	b.n	8006798 <_printf_i+0x1dc>
 80067c0:	2500      	movs	r5, #0
 80067c2:	f104 0919 	add.w	r9, r4, #25
 80067c6:	e7f5      	b.n	80067b4 <_printf_i+0x1f8>
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1ac      	bne.n	8006726 <_printf_i+0x16a>
 80067cc:	7803      	ldrb	r3, [r0, #0]
 80067ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067d6:	e76c      	b.n	80066b2 <_printf_i+0xf6>
 80067d8:	08008a9e 	.word	0x08008a9e
 80067dc:	08008aaf 	.word	0x08008aaf

080067e0 <siprintf>:
 80067e0:	b40e      	push	{r1, r2, r3}
 80067e2:	b500      	push	{lr}
 80067e4:	b09c      	sub	sp, #112	; 0x70
 80067e6:	ab1d      	add	r3, sp, #116	; 0x74
 80067e8:	9002      	str	r0, [sp, #8]
 80067ea:	9006      	str	r0, [sp, #24]
 80067ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067f0:	4809      	ldr	r0, [pc, #36]	; (8006818 <siprintf+0x38>)
 80067f2:	9107      	str	r1, [sp, #28]
 80067f4:	9104      	str	r1, [sp, #16]
 80067f6:	4909      	ldr	r1, [pc, #36]	; (800681c <siprintf+0x3c>)
 80067f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80067fc:	9105      	str	r1, [sp, #20]
 80067fe:	6800      	ldr	r0, [r0, #0]
 8006800:	9301      	str	r3, [sp, #4]
 8006802:	a902      	add	r1, sp, #8
 8006804:	f001 fa5c 	bl	8007cc0 <_svfiprintf_r>
 8006808:	9b02      	ldr	r3, [sp, #8]
 800680a:	2200      	movs	r2, #0
 800680c:	701a      	strb	r2, [r3, #0]
 800680e:	b01c      	add	sp, #112	; 0x70
 8006810:	f85d eb04 	ldr.w	lr, [sp], #4
 8006814:	b003      	add	sp, #12
 8006816:	4770      	bx	lr
 8006818:	2000000c 	.word	0x2000000c
 800681c:	ffff0208 	.word	0xffff0208

08006820 <quorem>:
 8006820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006824:	6903      	ldr	r3, [r0, #16]
 8006826:	690c      	ldr	r4, [r1, #16]
 8006828:	42a3      	cmp	r3, r4
 800682a:	4680      	mov	r8, r0
 800682c:	f2c0 8082 	blt.w	8006934 <quorem+0x114>
 8006830:	3c01      	subs	r4, #1
 8006832:	f101 0714 	add.w	r7, r1, #20
 8006836:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800683a:	f100 0614 	add.w	r6, r0, #20
 800683e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006842:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006846:	eb06 030c 	add.w	r3, r6, ip
 800684a:	3501      	adds	r5, #1
 800684c:	eb07 090c 	add.w	r9, r7, ip
 8006850:	9301      	str	r3, [sp, #4]
 8006852:	fbb0 f5f5 	udiv	r5, r0, r5
 8006856:	b395      	cbz	r5, 80068be <quorem+0x9e>
 8006858:	f04f 0a00 	mov.w	sl, #0
 800685c:	4638      	mov	r0, r7
 800685e:	46b6      	mov	lr, r6
 8006860:	46d3      	mov	fp, sl
 8006862:	f850 2b04 	ldr.w	r2, [r0], #4
 8006866:	b293      	uxth	r3, r2
 8006868:	fb05 a303 	mla	r3, r5, r3, sl
 800686c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006870:	b29b      	uxth	r3, r3
 8006872:	ebab 0303 	sub.w	r3, fp, r3
 8006876:	0c12      	lsrs	r2, r2, #16
 8006878:	f8de b000 	ldr.w	fp, [lr]
 800687c:	fb05 a202 	mla	r2, r5, r2, sl
 8006880:	fa13 f38b 	uxtah	r3, r3, fp
 8006884:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006888:	fa1f fb82 	uxth.w	fp, r2
 800688c:	f8de 2000 	ldr.w	r2, [lr]
 8006890:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006894:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006898:	b29b      	uxth	r3, r3
 800689a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800689e:	4581      	cmp	r9, r0
 80068a0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80068a4:	f84e 3b04 	str.w	r3, [lr], #4
 80068a8:	d2db      	bcs.n	8006862 <quorem+0x42>
 80068aa:	f856 300c 	ldr.w	r3, [r6, ip]
 80068ae:	b933      	cbnz	r3, 80068be <quorem+0x9e>
 80068b0:	9b01      	ldr	r3, [sp, #4]
 80068b2:	3b04      	subs	r3, #4
 80068b4:	429e      	cmp	r6, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	d330      	bcc.n	800691c <quorem+0xfc>
 80068ba:	f8c8 4010 	str.w	r4, [r8, #16]
 80068be:	4640      	mov	r0, r8
 80068c0:	f001 f828 	bl	8007914 <__mcmp>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	db25      	blt.n	8006914 <quorem+0xf4>
 80068c8:	3501      	adds	r5, #1
 80068ca:	4630      	mov	r0, r6
 80068cc:	f04f 0c00 	mov.w	ip, #0
 80068d0:	f857 2b04 	ldr.w	r2, [r7], #4
 80068d4:	f8d0 e000 	ldr.w	lr, [r0]
 80068d8:	b293      	uxth	r3, r2
 80068da:	ebac 0303 	sub.w	r3, ip, r3
 80068de:	0c12      	lsrs	r2, r2, #16
 80068e0:	fa13 f38e 	uxtah	r3, r3, lr
 80068e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80068e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068f2:	45b9      	cmp	r9, r7
 80068f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80068f8:	f840 3b04 	str.w	r3, [r0], #4
 80068fc:	d2e8      	bcs.n	80068d0 <quorem+0xb0>
 80068fe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006902:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006906:	b92a      	cbnz	r2, 8006914 <quorem+0xf4>
 8006908:	3b04      	subs	r3, #4
 800690a:	429e      	cmp	r6, r3
 800690c:	461a      	mov	r2, r3
 800690e:	d30b      	bcc.n	8006928 <quorem+0x108>
 8006910:	f8c8 4010 	str.w	r4, [r8, #16]
 8006914:	4628      	mov	r0, r5
 8006916:	b003      	add	sp, #12
 8006918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800691c:	6812      	ldr	r2, [r2, #0]
 800691e:	3b04      	subs	r3, #4
 8006920:	2a00      	cmp	r2, #0
 8006922:	d1ca      	bne.n	80068ba <quorem+0x9a>
 8006924:	3c01      	subs	r4, #1
 8006926:	e7c5      	b.n	80068b4 <quorem+0x94>
 8006928:	6812      	ldr	r2, [r2, #0]
 800692a:	3b04      	subs	r3, #4
 800692c:	2a00      	cmp	r2, #0
 800692e:	d1ef      	bne.n	8006910 <quorem+0xf0>
 8006930:	3c01      	subs	r4, #1
 8006932:	e7ea      	b.n	800690a <quorem+0xea>
 8006934:	2000      	movs	r0, #0
 8006936:	e7ee      	b.n	8006916 <quorem+0xf6>

08006938 <_dtoa_r>:
 8006938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693c:	ec57 6b10 	vmov	r6, r7, d0
 8006940:	b097      	sub	sp, #92	; 0x5c
 8006942:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006944:	9106      	str	r1, [sp, #24]
 8006946:	4604      	mov	r4, r0
 8006948:	920b      	str	r2, [sp, #44]	; 0x2c
 800694a:	9312      	str	r3, [sp, #72]	; 0x48
 800694c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006950:	e9cd 6700 	strd	r6, r7, [sp]
 8006954:	b93d      	cbnz	r5, 8006966 <_dtoa_r+0x2e>
 8006956:	2010      	movs	r0, #16
 8006958:	f000 fdb4 	bl	80074c4 <malloc>
 800695c:	6260      	str	r0, [r4, #36]	; 0x24
 800695e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006962:	6005      	str	r5, [r0, #0]
 8006964:	60c5      	str	r5, [r0, #12]
 8006966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006968:	6819      	ldr	r1, [r3, #0]
 800696a:	b151      	cbz	r1, 8006982 <_dtoa_r+0x4a>
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	604a      	str	r2, [r1, #4]
 8006970:	2301      	movs	r3, #1
 8006972:	4093      	lsls	r3, r2
 8006974:	608b      	str	r3, [r1, #8]
 8006976:	4620      	mov	r0, r4
 8006978:	f000 fdeb 	bl	8007552 <_Bfree>
 800697c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800697e:	2200      	movs	r2, #0
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	1e3b      	subs	r3, r7, #0
 8006984:	bfbb      	ittet	lt
 8006986:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800698a:	9301      	strlt	r3, [sp, #4]
 800698c:	2300      	movge	r3, #0
 800698e:	2201      	movlt	r2, #1
 8006990:	bfac      	ite	ge
 8006992:	f8c8 3000 	strge.w	r3, [r8]
 8006996:	f8c8 2000 	strlt.w	r2, [r8]
 800699a:	4baf      	ldr	r3, [pc, #700]	; (8006c58 <_dtoa_r+0x320>)
 800699c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80069a0:	ea33 0308 	bics.w	r3, r3, r8
 80069a4:	d114      	bne.n	80069d0 <_dtoa_r+0x98>
 80069a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	9b00      	ldr	r3, [sp, #0]
 80069b0:	b923      	cbnz	r3, 80069bc <_dtoa_r+0x84>
 80069b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80069b6:	2800      	cmp	r0, #0
 80069b8:	f000 8542 	beq.w	8007440 <_dtoa_r+0xb08>
 80069bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006c6c <_dtoa_r+0x334>
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f000 8544 	beq.w	8007450 <_dtoa_r+0xb18>
 80069c8:	f10b 0303 	add.w	r3, fp, #3
 80069cc:	f000 bd3e 	b.w	800744c <_dtoa_r+0xb14>
 80069d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80069d4:	2200      	movs	r2, #0
 80069d6:	2300      	movs	r3, #0
 80069d8:	4630      	mov	r0, r6
 80069da:	4639      	mov	r1, r7
 80069dc:	f7fa f884 	bl	8000ae8 <__aeabi_dcmpeq>
 80069e0:	4681      	mov	r9, r0
 80069e2:	b168      	cbz	r0, 8006a00 <_dtoa_r+0xc8>
 80069e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069e6:	2301      	movs	r3, #1
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 8524 	beq.w	800743a <_dtoa_r+0xb02>
 80069f2:	4b9a      	ldr	r3, [pc, #616]	; (8006c5c <_dtoa_r+0x324>)
 80069f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069f6:	f103 3bff 	add.w	fp, r3, #4294967295
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	f000 bd28 	b.w	8007450 <_dtoa_r+0xb18>
 8006a00:	aa14      	add	r2, sp, #80	; 0x50
 8006a02:	a915      	add	r1, sp, #84	; 0x54
 8006a04:	ec47 6b10 	vmov	d0, r6, r7
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f000 fffa 	bl	8007a02 <__d2b>
 8006a0e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006a12:	9004      	str	r0, [sp, #16]
 8006a14:	2d00      	cmp	r5, #0
 8006a16:	d07c      	beq.n	8006b12 <_dtoa_r+0x1da>
 8006a18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a1c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006a20:	46b2      	mov	sl, r6
 8006a22:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006a26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a2a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006a2e:	2200      	movs	r2, #0
 8006a30:	4b8b      	ldr	r3, [pc, #556]	; (8006c60 <_dtoa_r+0x328>)
 8006a32:	4650      	mov	r0, sl
 8006a34:	4659      	mov	r1, fp
 8006a36:	f7f9 fc37 	bl	80002a8 <__aeabi_dsub>
 8006a3a:	a381      	add	r3, pc, #516	; (adr r3, 8006c40 <_dtoa_r+0x308>)
 8006a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a40:	f7f9 fdea 	bl	8000618 <__aeabi_dmul>
 8006a44:	a380      	add	r3, pc, #512	; (adr r3, 8006c48 <_dtoa_r+0x310>)
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	f7f9 fc2f 	bl	80002ac <__adddf3>
 8006a4e:	4606      	mov	r6, r0
 8006a50:	4628      	mov	r0, r5
 8006a52:	460f      	mov	r7, r1
 8006a54:	f7f9 fd76 	bl	8000544 <__aeabi_i2d>
 8006a58:	a37d      	add	r3, pc, #500	; (adr r3, 8006c50 <_dtoa_r+0x318>)
 8006a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5e:	f7f9 fddb 	bl	8000618 <__aeabi_dmul>
 8006a62:	4602      	mov	r2, r0
 8006a64:	460b      	mov	r3, r1
 8006a66:	4630      	mov	r0, r6
 8006a68:	4639      	mov	r1, r7
 8006a6a:	f7f9 fc1f 	bl	80002ac <__adddf3>
 8006a6e:	4606      	mov	r6, r0
 8006a70:	460f      	mov	r7, r1
 8006a72:	f7fa f881 	bl	8000b78 <__aeabi_d2iz>
 8006a76:	2200      	movs	r2, #0
 8006a78:	4682      	mov	sl, r0
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	4639      	mov	r1, r7
 8006a80:	f7fa f83c 	bl	8000afc <__aeabi_dcmplt>
 8006a84:	b148      	cbz	r0, 8006a9a <_dtoa_r+0x162>
 8006a86:	4650      	mov	r0, sl
 8006a88:	f7f9 fd5c 	bl	8000544 <__aeabi_i2d>
 8006a8c:	4632      	mov	r2, r6
 8006a8e:	463b      	mov	r3, r7
 8006a90:	f7fa f82a 	bl	8000ae8 <__aeabi_dcmpeq>
 8006a94:	b908      	cbnz	r0, 8006a9a <_dtoa_r+0x162>
 8006a96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a9a:	f1ba 0f16 	cmp.w	sl, #22
 8006a9e:	d859      	bhi.n	8006b54 <_dtoa_r+0x21c>
 8006aa0:	4970      	ldr	r1, [pc, #448]	; (8006c64 <_dtoa_r+0x32c>)
 8006aa2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006aa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006aaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aae:	f7fa f843 	bl	8000b38 <__aeabi_dcmpgt>
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d050      	beq.n	8006b58 <_dtoa_r+0x220>
 8006ab6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006aba:	2300      	movs	r3, #0
 8006abc:	930f      	str	r3, [sp, #60]	; 0x3c
 8006abe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ac0:	1b5d      	subs	r5, r3, r5
 8006ac2:	f1b5 0801 	subs.w	r8, r5, #1
 8006ac6:	bf49      	itett	mi
 8006ac8:	f1c5 0301 	rsbmi	r3, r5, #1
 8006acc:	2300      	movpl	r3, #0
 8006ace:	9305      	strmi	r3, [sp, #20]
 8006ad0:	f04f 0800 	movmi.w	r8, #0
 8006ad4:	bf58      	it	pl
 8006ad6:	9305      	strpl	r3, [sp, #20]
 8006ad8:	f1ba 0f00 	cmp.w	sl, #0
 8006adc:	db3e      	blt.n	8006b5c <_dtoa_r+0x224>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	44d0      	add	r8, sl
 8006ae2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006ae6:	9307      	str	r3, [sp, #28]
 8006ae8:	9b06      	ldr	r3, [sp, #24]
 8006aea:	2b09      	cmp	r3, #9
 8006aec:	f200 8090 	bhi.w	8006c10 <_dtoa_r+0x2d8>
 8006af0:	2b05      	cmp	r3, #5
 8006af2:	bfc4      	itt	gt
 8006af4:	3b04      	subgt	r3, #4
 8006af6:	9306      	strgt	r3, [sp, #24]
 8006af8:	9b06      	ldr	r3, [sp, #24]
 8006afa:	f1a3 0302 	sub.w	r3, r3, #2
 8006afe:	bfcc      	ite	gt
 8006b00:	2500      	movgt	r5, #0
 8006b02:	2501      	movle	r5, #1
 8006b04:	2b03      	cmp	r3, #3
 8006b06:	f200 808f 	bhi.w	8006c28 <_dtoa_r+0x2f0>
 8006b0a:	e8df f003 	tbb	[pc, r3]
 8006b0e:	7f7d      	.short	0x7f7d
 8006b10:	7131      	.short	0x7131
 8006b12:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006b16:	441d      	add	r5, r3
 8006b18:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006b1c:	2820      	cmp	r0, #32
 8006b1e:	dd13      	ble.n	8006b48 <_dtoa_r+0x210>
 8006b20:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006b24:	9b00      	ldr	r3, [sp, #0]
 8006b26:	fa08 f800 	lsl.w	r8, r8, r0
 8006b2a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006b2e:	fa23 f000 	lsr.w	r0, r3, r0
 8006b32:	ea48 0000 	orr.w	r0, r8, r0
 8006b36:	f7f9 fcf5 	bl	8000524 <__aeabi_ui2d>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	4682      	mov	sl, r0
 8006b3e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006b42:	3d01      	subs	r5, #1
 8006b44:	9313      	str	r3, [sp, #76]	; 0x4c
 8006b46:	e772      	b.n	8006a2e <_dtoa_r+0xf6>
 8006b48:	9b00      	ldr	r3, [sp, #0]
 8006b4a:	f1c0 0020 	rsb	r0, r0, #32
 8006b4e:	fa03 f000 	lsl.w	r0, r3, r0
 8006b52:	e7f0      	b.n	8006b36 <_dtoa_r+0x1fe>
 8006b54:	2301      	movs	r3, #1
 8006b56:	e7b1      	b.n	8006abc <_dtoa_r+0x184>
 8006b58:	900f      	str	r0, [sp, #60]	; 0x3c
 8006b5a:	e7b0      	b.n	8006abe <_dtoa_r+0x186>
 8006b5c:	9b05      	ldr	r3, [sp, #20]
 8006b5e:	eba3 030a 	sub.w	r3, r3, sl
 8006b62:	9305      	str	r3, [sp, #20]
 8006b64:	f1ca 0300 	rsb	r3, sl, #0
 8006b68:	9307      	str	r3, [sp, #28]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	930e      	str	r3, [sp, #56]	; 0x38
 8006b6e:	e7bb      	b.n	8006ae8 <_dtoa_r+0x1b0>
 8006b70:	2301      	movs	r3, #1
 8006b72:	930a      	str	r3, [sp, #40]	; 0x28
 8006b74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	dd59      	ble.n	8006c2e <_dtoa_r+0x2f6>
 8006b7a:	9302      	str	r3, [sp, #8]
 8006b7c:	4699      	mov	r9, r3
 8006b7e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006b80:	2200      	movs	r2, #0
 8006b82:	6072      	str	r2, [r6, #4]
 8006b84:	2204      	movs	r2, #4
 8006b86:	f102 0014 	add.w	r0, r2, #20
 8006b8a:	4298      	cmp	r0, r3
 8006b8c:	6871      	ldr	r1, [r6, #4]
 8006b8e:	d953      	bls.n	8006c38 <_dtoa_r+0x300>
 8006b90:	4620      	mov	r0, r4
 8006b92:	f000 fcaa 	bl	80074ea <_Balloc>
 8006b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b98:	6030      	str	r0, [r6, #0]
 8006b9a:	f1b9 0f0e 	cmp.w	r9, #14
 8006b9e:	f8d3 b000 	ldr.w	fp, [r3]
 8006ba2:	f200 80e6 	bhi.w	8006d72 <_dtoa_r+0x43a>
 8006ba6:	2d00      	cmp	r5, #0
 8006ba8:	f000 80e3 	beq.w	8006d72 <_dtoa_r+0x43a>
 8006bac:	ed9d 7b00 	vldr	d7, [sp]
 8006bb0:	f1ba 0f00 	cmp.w	sl, #0
 8006bb4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006bb8:	dd74      	ble.n	8006ca4 <_dtoa_r+0x36c>
 8006bba:	4a2a      	ldr	r2, [pc, #168]	; (8006c64 <_dtoa_r+0x32c>)
 8006bbc:	f00a 030f 	and.w	r3, sl, #15
 8006bc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006bc4:	ed93 7b00 	vldr	d7, [r3]
 8006bc8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006bcc:	06f0      	lsls	r0, r6, #27
 8006bce:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006bd2:	d565      	bpl.n	8006ca0 <_dtoa_r+0x368>
 8006bd4:	4b24      	ldr	r3, [pc, #144]	; (8006c68 <_dtoa_r+0x330>)
 8006bd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006bda:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bde:	f7f9 fe45 	bl	800086c <__aeabi_ddiv>
 8006be2:	e9cd 0100 	strd	r0, r1, [sp]
 8006be6:	f006 060f 	and.w	r6, r6, #15
 8006bea:	2503      	movs	r5, #3
 8006bec:	4f1e      	ldr	r7, [pc, #120]	; (8006c68 <_dtoa_r+0x330>)
 8006bee:	e04c      	b.n	8006c8a <_dtoa_r+0x352>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	930a      	str	r3, [sp, #40]	; 0x28
 8006bf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bf6:	4453      	add	r3, sl
 8006bf8:	f103 0901 	add.w	r9, r3, #1
 8006bfc:	9302      	str	r3, [sp, #8]
 8006bfe:	464b      	mov	r3, r9
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	bfb8      	it	lt
 8006c04:	2301      	movlt	r3, #1
 8006c06:	e7ba      	b.n	8006b7e <_dtoa_r+0x246>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	e7b2      	b.n	8006b72 <_dtoa_r+0x23a>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	e7f0      	b.n	8006bf2 <_dtoa_r+0x2ba>
 8006c10:	2501      	movs	r5, #1
 8006c12:	2300      	movs	r3, #0
 8006c14:	9306      	str	r3, [sp, #24]
 8006c16:	950a      	str	r5, [sp, #40]	; 0x28
 8006c18:	f04f 33ff 	mov.w	r3, #4294967295
 8006c1c:	9302      	str	r3, [sp, #8]
 8006c1e:	4699      	mov	r9, r3
 8006c20:	2200      	movs	r2, #0
 8006c22:	2312      	movs	r3, #18
 8006c24:	920b      	str	r2, [sp, #44]	; 0x2c
 8006c26:	e7aa      	b.n	8006b7e <_dtoa_r+0x246>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	930a      	str	r3, [sp, #40]	; 0x28
 8006c2c:	e7f4      	b.n	8006c18 <_dtoa_r+0x2e0>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	9302      	str	r3, [sp, #8]
 8006c32:	4699      	mov	r9, r3
 8006c34:	461a      	mov	r2, r3
 8006c36:	e7f5      	b.n	8006c24 <_dtoa_r+0x2ec>
 8006c38:	3101      	adds	r1, #1
 8006c3a:	6071      	str	r1, [r6, #4]
 8006c3c:	0052      	lsls	r2, r2, #1
 8006c3e:	e7a2      	b.n	8006b86 <_dtoa_r+0x24e>
 8006c40:	636f4361 	.word	0x636f4361
 8006c44:	3fd287a7 	.word	0x3fd287a7
 8006c48:	8b60c8b3 	.word	0x8b60c8b3
 8006c4c:	3fc68a28 	.word	0x3fc68a28
 8006c50:	509f79fb 	.word	0x509f79fb
 8006c54:	3fd34413 	.word	0x3fd34413
 8006c58:	7ff00000 	.word	0x7ff00000
 8006c5c:	08008a9d 	.word	0x08008a9d
 8006c60:	3ff80000 	.word	0x3ff80000
 8006c64:	08008af8 	.word	0x08008af8
 8006c68:	08008ad0 	.word	0x08008ad0
 8006c6c:	08008ac9 	.word	0x08008ac9
 8006c70:	07f1      	lsls	r1, r6, #31
 8006c72:	d508      	bpl.n	8006c86 <_dtoa_r+0x34e>
 8006c74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c7c:	f7f9 fccc 	bl	8000618 <__aeabi_dmul>
 8006c80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006c84:	3501      	adds	r5, #1
 8006c86:	1076      	asrs	r6, r6, #1
 8006c88:	3708      	adds	r7, #8
 8006c8a:	2e00      	cmp	r6, #0
 8006c8c:	d1f0      	bne.n	8006c70 <_dtoa_r+0x338>
 8006c8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c96:	f7f9 fde9 	bl	800086c <__aeabi_ddiv>
 8006c9a:	e9cd 0100 	strd	r0, r1, [sp]
 8006c9e:	e01a      	b.n	8006cd6 <_dtoa_r+0x39e>
 8006ca0:	2502      	movs	r5, #2
 8006ca2:	e7a3      	b.n	8006bec <_dtoa_r+0x2b4>
 8006ca4:	f000 80a0 	beq.w	8006de8 <_dtoa_r+0x4b0>
 8006ca8:	f1ca 0600 	rsb	r6, sl, #0
 8006cac:	4b9f      	ldr	r3, [pc, #636]	; (8006f2c <_dtoa_r+0x5f4>)
 8006cae:	4fa0      	ldr	r7, [pc, #640]	; (8006f30 <_dtoa_r+0x5f8>)
 8006cb0:	f006 020f 	and.w	r2, r6, #15
 8006cb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006cc0:	f7f9 fcaa 	bl	8000618 <__aeabi_dmul>
 8006cc4:	e9cd 0100 	strd	r0, r1, [sp]
 8006cc8:	1136      	asrs	r6, r6, #4
 8006cca:	2300      	movs	r3, #0
 8006ccc:	2502      	movs	r5, #2
 8006cce:	2e00      	cmp	r6, #0
 8006cd0:	d17f      	bne.n	8006dd2 <_dtoa_r+0x49a>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e1      	bne.n	8006c9a <_dtoa_r+0x362>
 8006cd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 8087 	beq.w	8006dec <_dtoa_r+0x4b4>
 8006cde:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	4b93      	ldr	r3, [pc, #588]	; (8006f34 <_dtoa_r+0x5fc>)
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	4639      	mov	r1, r7
 8006cea:	f7f9 ff07 	bl	8000afc <__aeabi_dcmplt>
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	d07c      	beq.n	8006dec <_dtoa_r+0x4b4>
 8006cf2:	f1b9 0f00 	cmp.w	r9, #0
 8006cf6:	d079      	beq.n	8006dec <_dtoa_r+0x4b4>
 8006cf8:	9b02      	ldr	r3, [sp, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	dd35      	ble.n	8006d6a <_dtoa_r+0x432>
 8006cfe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006d02:	9308      	str	r3, [sp, #32]
 8006d04:	4639      	mov	r1, r7
 8006d06:	2200      	movs	r2, #0
 8006d08:	4b8b      	ldr	r3, [pc, #556]	; (8006f38 <_dtoa_r+0x600>)
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	f7f9 fc84 	bl	8000618 <__aeabi_dmul>
 8006d10:	e9cd 0100 	strd	r0, r1, [sp]
 8006d14:	9f02      	ldr	r7, [sp, #8]
 8006d16:	3501      	adds	r5, #1
 8006d18:	4628      	mov	r0, r5
 8006d1a:	f7f9 fc13 	bl	8000544 <__aeabi_i2d>
 8006d1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d22:	f7f9 fc79 	bl	8000618 <__aeabi_dmul>
 8006d26:	2200      	movs	r2, #0
 8006d28:	4b84      	ldr	r3, [pc, #528]	; (8006f3c <_dtoa_r+0x604>)
 8006d2a:	f7f9 fabf 	bl	80002ac <__adddf3>
 8006d2e:	4605      	mov	r5, r0
 8006d30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006d34:	2f00      	cmp	r7, #0
 8006d36:	d15d      	bne.n	8006df4 <_dtoa_r+0x4bc>
 8006d38:	2200      	movs	r2, #0
 8006d3a:	4b81      	ldr	r3, [pc, #516]	; (8006f40 <_dtoa_r+0x608>)
 8006d3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d40:	f7f9 fab2 	bl	80002a8 <__aeabi_dsub>
 8006d44:	462a      	mov	r2, r5
 8006d46:	4633      	mov	r3, r6
 8006d48:	e9cd 0100 	strd	r0, r1, [sp]
 8006d4c:	f7f9 fef4 	bl	8000b38 <__aeabi_dcmpgt>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	f040 8288 	bne.w	8007266 <_dtoa_r+0x92e>
 8006d56:	462a      	mov	r2, r5
 8006d58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006d5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d60:	f7f9 fecc 	bl	8000afc <__aeabi_dcmplt>
 8006d64:	2800      	cmp	r0, #0
 8006d66:	f040 827c 	bne.w	8007262 <_dtoa_r+0x92a>
 8006d6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d6e:	e9cd 2300 	strd	r2, r3, [sp]
 8006d72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f2c0 8150 	blt.w	800701a <_dtoa_r+0x6e2>
 8006d7a:	f1ba 0f0e 	cmp.w	sl, #14
 8006d7e:	f300 814c 	bgt.w	800701a <_dtoa_r+0x6e2>
 8006d82:	4b6a      	ldr	r3, [pc, #424]	; (8006f2c <_dtoa_r+0x5f4>)
 8006d84:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d88:	ed93 7b00 	vldr	d7, [r3]
 8006d8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006d94:	f280 80d8 	bge.w	8006f48 <_dtoa_r+0x610>
 8006d98:	f1b9 0f00 	cmp.w	r9, #0
 8006d9c:	f300 80d4 	bgt.w	8006f48 <_dtoa_r+0x610>
 8006da0:	f040 825e 	bne.w	8007260 <_dtoa_r+0x928>
 8006da4:	2200      	movs	r2, #0
 8006da6:	4b66      	ldr	r3, [pc, #408]	; (8006f40 <_dtoa_r+0x608>)
 8006da8:	ec51 0b17 	vmov	r0, r1, d7
 8006dac:	f7f9 fc34 	bl	8000618 <__aeabi_dmul>
 8006db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006db4:	f7f9 feb6 	bl	8000b24 <__aeabi_dcmpge>
 8006db8:	464f      	mov	r7, r9
 8006dba:	464e      	mov	r6, r9
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	f040 8234 	bne.w	800722a <_dtoa_r+0x8f2>
 8006dc2:	2331      	movs	r3, #49	; 0x31
 8006dc4:	f10b 0501 	add.w	r5, fp, #1
 8006dc8:	f88b 3000 	strb.w	r3, [fp]
 8006dcc:	f10a 0a01 	add.w	sl, sl, #1
 8006dd0:	e22f      	b.n	8007232 <_dtoa_r+0x8fa>
 8006dd2:	07f2      	lsls	r2, r6, #31
 8006dd4:	d505      	bpl.n	8006de2 <_dtoa_r+0x4aa>
 8006dd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dda:	f7f9 fc1d 	bl	8000618 <__aeabi_dmul>
 8006dde:	3501      	adds	r5, #1
 8006de0:	2301      	movs	r3, #1
 8006de2:	1076      	asrs	r6, r6, #1
 8006de4:	3708      	adds	r7, #8
 8006de6:	e772      	b.n	8006cce <_dtoa_r+0x396>
 8006de8:	2502      	movs	r5, #2
 8006dea:	e774      	b.n	8006cd6 <_dtoa_r+0x39e>
 8006dec:	f8cd a020 	str.w	sl, [sp, #32]
 8006df0:	464f      	mov	r7, r9
 8006df2:	e791      	b.n	8006d18 <_dtoa_r+0x3e0>
 8006df4:	4b4d      	ldr	r3, [pc, #308]	; (8006f2c <_dtoa_r+0x5f4>)
 8006df6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006dfa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d047      	beq.n	8006e94 <_dtoa_r+0x55c>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	2000      	movs	r0, #0
 8006e0a:	494e      	ldr	r1, [pc, #312]	; (8006f44 <_dtoa_r+0x60c>)
 8006e0c:	f7f9 fd2e 	bl	800086c <__aeabi_ddiv>
 8006e10:	462a      	mov	r2, r5
 8006e12:	4633      	mov	r3, r6
 8006e14:	f7f9 fa48 	bl	80002a8 <__aeabi_dsub>
 8006e18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006e1c:	465d      	mov	r5, fp
 8006e1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e22:	f7f9 fea9 	bl	8000b78 <__aeabi_d2iz>
 8006e26:	4606      	mov	r6, r0
 8006e28:	f7f9 fb8c 	bl	8000544 <__aeabi_i2d>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e34:	f7f9 fa38 	bl	80002a8 <__aeabi_dsub>
 8006e38:	3630      	adds	r6, #48	; 0x30
 8006e3a:	f805 6b01 	strb.w	r6, [r5], #1
 8006e3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006e42:	e9cd 0100 	strd	r0, r1, [sp]
 8006e46:	f7f9 fe59 	bl	8000afc <__aeabi_dcmplt>
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	d163      	bne.n	8006f16 <_dtoa_r+0x5de>
 8006e4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e52:	2000      	movs	r0, #0
 8006e54:	4937      	ldr	r1, [pc, #220]	; (8006f34 <_dtoa_r+0x5fc>)
 8006e56:	f7f9 fa27 	bl	80002a8 <__aeabi_dsub>
 8006e5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006e5e:	f7f9 fe4d 	bl	8000afc <__aeabi_dcmplt>
 8006e62:	2800      	cmp	r0, #0
 8006e64:	f040 80b7 	bne.w	8006fd6 <_dtoa_r+0x69e>
 8006e68:	eba5 030b 	sub.w	r3, r5, fp
 8006e6c:	429f      	cmp	r7, r3
 8006e6e:	f77f af7c 	ble.w	8006d6a <_dtoa_r+0x432>
 8006e72:	2200      	movs	r2, #0
 8006e74:	4b30      	ldr	r3, [pc, #192]	; (8006f38 <_dtoa_r+0x600>)
 8006e76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e7a:	f7f9 fbcd 	bl	8000618 <__aeabi_dmul>
 8006e7e:	2200      	movs	r2, #0
 8006e80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006e84:	4b2c      	ldr	r3, [pc, #176]	; (8006f38 <_dtoa_r+0x600>)
 8006e86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e8a:	f7f9 fbc5 	bl	8000618 <__aeabi_dmul>
 8006e8e:	e9cd 0100 	strd	r0, r1, [sp]
 8006e92:	e7c4      	b.n	8006e1e <_dtoa_r+0x4e6>
 8006e94:	462a      	mov	r2, r5
 8006e96:	4633      	mov	r3, r6
 8006e98:	f7f9 fbbe 	bl	8000618 <__aeabi_dmul>
 8006e9c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006ea0:	eb0b 0507 	add.w	r5, fp, r7
 8006ea4:	465e      	mov	r6, fp
 8006ea6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006eaa:	f7f9 fe65 	bl	8000b78 <__aeabi_d2iz>
 8006eae:	4607      	mov	r7, r0
 8006eb0:	f7f9 fb48 	bl	8000544 <__aeabi_i2d>
 8006eb4:	3730      	adds	r7, #48	; 0x30
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ebe:	f7f9 f9f3 	bl	80002a8 <__aeabi_dsub>
 8006ec2:	f806 7b01 	strb.w	r7, [r6], #1
 8006ec6:	42ae      	cmp	r6, r5
 8006ec8:	e9cd 0100 	strd	r0, r1, [sp]
 8006ecc:	f04f 0200 	mov.w	r2, #0
 8006ed0:	d126      	bne.n	8006f20 <_dtoa_r+0x5e8>
 8006ed2:	4b1c      	ldr	r3, [pc, #112]	; (8006f44 <_dtoa_r+0x60c>)
 8006ed4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ed8:	f7f9 f9e8 	bl	80002ac <__adddf3>
 8006edc:	4602      	mov	r2, r0
 8006ede:	460b      	mov	r3, r1
 8006ee0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ee4:	f7f9 fe28 	bl	8000b38 <__aeabi_dcmpgt>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d174      	bne.n	8006fd6 <_dtoa_r+0x69e>
 8006eec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	4914      	ldr	r1, [pc, #80]	; (8006f44 <_dtoa_r+0x60c>)
 8006ef4:	f7f9 f9d8 	bl	80002a8 <__aeabi_dsub>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f00:	f7f9 fdfc 	bl	8000afc <__aeabi_dcmplt>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	f43f af30 	beq.w	8006d6a <_dtoa_r+0x432>
 8006f0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f0e:	2b30      	cmp	r3, #48	; 0x30
 8006f10:	f105 32ff 	add.w	r2, r5, #4294967295
 8006f14:	d002      	beq.n	8006f1c <_dtoa_r+0x5e4>
 8006f16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006f1a:	e04a      	b.n	8006fb2 <_dtoa_r+0x67a>
 8006f1c:	4615      	mov	r5, r2
 8006f1e:	e7f4      	b.n	8006f0a <_dtoa_r+0x5d2>
 8006f20:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <_dtoa_r+0x600>)
 8006f22:	f7f9 fb79 	bl	8000618 <__aeabi_dmul>
 8006f26:	e9cd 0100 	strd	r0, r1, [sp]
 8006f2a:	e7bc      	b.n	8006ea6 <_dtoa_r+0x56e>
 8006f2c:	08008af8 	.word	0x08008af8
 8006f30:	08008ad0 	.word	0x08008ad0
 8006f34:	3ff00000 	.word	0x3ff00000
 8006f38:	40240000 	.word	0x40240000
 8006f3c:	401c0000 	.word	0x401c0000
 8006f40:	40140000 	.word	0x40140000
 8006f44:	3fe00000 	.word	0x3fe00000
 8006f48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006f4c:	465d      	mov	r5, fp
 8006f4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f52:	4630      	mov	r0, r6
 8006f54:	4639      	mov	r1, r7
 8006f56:	f7f9 fc89 	bl	800086c <__aeabi_ddiv>
 8006f5a:	f7f9 fe0d 	bl	8000b78 <__aeabi_d2iz>
 8006f5e:	4680      	mov	r8, r0
 8006f60:	f7f9 faf0 	bl	8000544 <__aeabi_i2d>
 8006f64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f68:	f7f9 fb56 	bl	8000618 <__aeabi_dmul>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4630      	mov	r0, r6
 8006f72:	4639      	mov	r1, r7
 8006f74:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006f78:	f7f9 f996 	bl	80002a8 <__aeabi_dsub>
 8006f7c:	f805 6b01 	strb.w	r6, [r5], #1
 8006f80:	eba5 060b 	sub.w	r6, r5, fp
 8006f84:	45b1      	cmp	r9, r6
 8006f86:	4602      	mov	r2, r0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	d139      	bne.n	8007000 <_dtoa_r+0x6c8>
 8006f8c:	f7f9 f98e 	bl	80002ac <__adddf3>
 8006f90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f94:	4606      	mov	r6, r0
 8006f96:	460f      	mov	r7, r1
 8006f98:	f7f9 fdce 	bl	8000b38 <__aeabi_dcmpgt>
 8006f9c:	b9c8      	cbnz	r0, 8006fd2 <_dtoa_r+0x69a>
 8006f9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	4639      	mov	r1, r7
 8006fa6:	f7f9 fd9f 	bl	8000ae8 <__aeabi_dcmpeq>
 8006faa:	b110      	cbz	r0, 8006fb2 <_dtoa_r+0x67a>
 8006fac:	f018 0f01 	tst.w	r8, #1
 8006fb0:	d10f      	bne.n	8006fd2 <_dtoa_r+0x69a>
 8006fb2:	9904      	ldr	r1, [sp, #16]
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f000 facc 	bl	8007552 <_Bfree>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006fbe:	702b      	strb	r3, [r5, #0]
 8006fc0:	f10a 0301 	add.w	r3, sl, #1
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 8241 	beq.w	8007450 <_dtoa_r+0xb18>
 8006fce:	601d      	str	r5, [r3, #0]
 8006fd0:	e23e      	b.n	8007450 <_dtoa_r+0xb18>
 8006fd2:	f8cd a020 	str.w	sl, [sp, #32]
 8006fd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006fda:	2a39      	cmp	r2, #57	; 0x39
 8006fdc:	f105 33ff 	add.w	r3, r5, #4294967295
 8006fe0:	d108      	bne.n	8006ff4 <_dtoa_r+0x6bc>
 8006fe2:	459b      	cmp	fp, r3
 8006fe4:	d10a      	bne.n	8006ffc <_dtoa_r+0x6c4>
 8006fe6:	9b08      	ldr	r3, [sp, #32]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	9308      	str	r3, [sp, #32]
 8006fec:	2330      	movs	r3, #48	; 0x30
 8006fee:	f88b 3000 	strb.w	r3, [fp]
 8006ff2:	465b      	mov	r3, fp
 8006ff4:	781a      	ldrb	r2, [r3, #0]
 8006ff6:	3201      	adds	r2, #1
 8006ff8:	701a      	strb	r2, [r3, #0]
 8006ffa:	e78c      	b.n	8006f16 <_dtoa_r+0x5de>
 8006ffc:	461d      	mov	r5, r3
 8006ffe:	e7ea      	b.n	8006fd6 <_dtoa_r+0x69e>
 8007000:	2200      	movs	r2, #0
 8007002:	4b9b      	ldr	r3, [pc, #620]	; (8007270 <_dtoa_r+0x938>)
 8007004:	f7f9 fb08 	bl	8000618 <__aeabi_dmul>
 8007008:	2200      	movs	r2, #0
 800700a:	2300      	movs	r3, #0
 800700c:	4606      	mov	r6, r0
 800700e:	460f      	mov	r7, r1
 8007010:	f7f9 fd6a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007014:	2800      	cmp	r0, #0
 8007016:	d09a      	beq.n	8006f4e <_dtoa_r+0x616>
 8007018:	e7cb      	b.n	8006fb2 <_dtoa_r+0x67a>
 800701a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800701c:	2a00      	cmp	r2, #0
 800701e:	f000 808b 	beq.w	8007138 <_dtoa_r+0x800>
 8007022:	9a06      	ldr	r2, [sp, #24]
 8007024:	2a01      	cmp	r2, #1
 8007026:	dc6e      	bgt.n	8007106 <_dtoa_r+0x7ce>
 8007028:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800702a:	2a00      	cmp	r2, #0
 800702c:	d067      	beq.n	80070fe <_dtoa_r+0x7c6>
 800702e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007032:	9f07      	ldr	r7, [sp, #28]
 8007034:	9d05      	ldr	r5, [sp, #20]
 8007036:	9a05      	ldr	r2, [sp, #20]
 8007038:	2101      	movs	r1, #1
 800703a:	441a      	add	r2, r3
 800703c:	4620      	mov	r0, r4
 800703e:	9205      	str	r2, [sp, #20]
 8007040:	4498      	add	r8, r3
 8007042:	f000 fb26 	bl	8007692 <__i2b>
 8007046:	4606      	mov	r6, r0
 8007048:	2d00      	cmp	r5, #0
 800704a:	dd0c      	ble.n	8007066 <_dtoa_r+0x72e>
 800704c:	f1b8 0f00 	cmp.w	r8, #0
 8007050:	dd09      	ble.n	8007066 <_dtoa_r+0x72e>
 8007052:	4545      	cmp	r5, r8
 8007054:	9a05      	ldr	r2, [sp, #20]
 8007056:	462b      	mov	r3, r5
 8007058:	bfa8      	it	ge
 800705a:	4643      	movge	r3, r8
 800705c:	1ad2      	subs	r2, r2, r3
 800705e:	9205      	str	r2, [sp, #20]
 8007060:	1aed      	subs	r5, r5, r3
 8007062:	eba8 0803 	sub.w	r8, r8, r3
 8007066:	9b07      	ldr	r3, [sp, #28]
 8007068:	b1eb      	cbz	r3, 80070a6 <_dtoa_r+0x76e>
 800706a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800706c:	2b00      	cmp	r3, #0
 800706e:	d067      	beq.n	8007140 <_dtoa_r+0x808>
 8007070:	b18f      	cbz	r7, 8007096 <_dtoa_r+0x75e>
 8007072:	4631      	mov	r1, r6
 8007074:	463a      	mov	r2, r7
 8007076:	4620      	mov	r0, r4
 8007078:	f000 fbaa 	bl	80077d0 <__pow5mult>
 800707c:	9a04      	ldr	r2, [sp, #16]
 800707e:	4601      	mov	r1, r0
 8007080:	4606      	mov	r6, r0
 8007082:	4620      	mov	r0, r4
 8007084:	f000 fb0e 	bl	80076a4 <__multiply>
 8007088:	9904      	ldr	r1, [sp, #16]
 800708a:	9008      	str	r0, [sp, #32]
 800708c:	4620      	mov	r0, r4
 800708e:	f000 fa60 	bl	8007552 <_Bfree>
 8007092:	9b08      	ldr	r3, [sp, #32]
 8007094:	9304      	str	r3, [sp, #16]
 8007096:	9b07      	ldr	r3, [sp, #28]
 8007098:	1bda      	subs	r2, r3, r7
 800709a:	d004      	beq.n	80070a6 <_dtoa_r+0x76e>
 800709c:	9904      	ldr	r1, [sp, #16]
 800709e:	4620      	mov	r0, r4
 80070a0:	f000 fb96 	bl	80077d0 <__pow5mult>
 80070a4:	9004      	str	r0, [sp, #16]
 80070a6:	2101      	movs	r1, #1
 80070a8:	4620      	mov	r0, r4
 80070aa:	f000 faf2 	bl	8007692 <__i2b>
 80070ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070b0:	4607      	mov	r7, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 81d0 	beq.w	8007458 <_dtoa_r+0xb20>
 80070b8:	461a      	mov	r2, r3
 80070ba:	4601      	mov	r1, r0
 80070bc:	4620      	mov	r0, r4
 80070be:	f000 fb87 	bl	80077d0 <__pow5mult>
 80070c2:	9b06      	ldr	r3, [sp, #24]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	4607      	mov	r7, r0
 80070c8:	dc40      	bgt.n	800714c <_dtoa_r+0x814>
 80070ca:	9b00      	ldr	r3, [sp, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d139      	bne.n	8007144 <_dtoa_r+0x80c>
 80070d0:	9b01      	ldr	r3, [sp, #4]
 80070d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d136      	bne.n	8007148 <_dtoa_r+0x810>
 80070da:	9b01      	ldr	r3, [sp, #4]
 80070dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070e0:	0d1b      	lsrs	r3, r3, #20
 80070e2:	051b      	lsls	r3, r3, #20
 80070e4:	b12b      	cbz	r3, 80070f2 <_dtoa_r+0x7ba>
 80070e6:	9b05      	ldr	r3, [sp, #20]
 80070e8:	3301      	adds	r3, #1
 80070ea:	9305      	str	r3, [sp, #20]
 80070ec:	f108 0801 	add.w	r8, r8, #1
 80070f0:	2301      	movs	r3, #1
 80070f2:	9307      	str	r3, [sp, #28]
 80070f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d12a      	bne.n	8007150 <_dtoa_r+0x818>
 80070fa:	2001      	movs	r0, #1
 80070fc:	e030      	b.n	8007160 <_dtoa_r+0x828>
 80070fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007100:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007104:	e795      	b.n	8007032 <_dtoa_r+0x6fa>
 8007106:	9b07      	ldr	r3, [sp, #28]
 8007108:	f109 37ff 	add.w	r7, r9, #4294967295
 800710c:	42bb      	cmp	r3, r7
 800710e:	bfbf      	itttt	lt
 8007110:	9b07      	ldrlt	r3, [sp, #28]
 8007112:	9707      	strlt	r7, [sp, #28]
 8007114:	1afa      	sublt	r2, r7, r3
 8007116:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007118:	bfbb      	ittet	lt
 800711a:	189b      	addlt	r3, r3, r2
 800711c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800711e:	1bdf      	subge	r7, r3, r7
 8007120:	2700      	movlt	r7, #0
 8007122:	f1b9 0f00 	cmp.w	r9, #0
 8007126:	bfb5      	itete	lt
 8007128:	9b05      	ldrlt	r3, [sp, #20]
 800712a:	9d05      	ldrge	r5, [sp, #20]
 800712c:	eba3 0509 	sublt.w	r5, r3, r9
 8007130:	464b      	movge	r3, r9
 8007132:	bfb8      	it	lt
 8007134:	2300      	movlt	r3, #0
 8007136:	e77e      	b.n	8007036 <_dtoa_r+0x6fe>
 8007138:	9f07      	ldr	r7, [sp, #28]
 800713a:	9d05      	ldr	r5, [sp, #20]
 800713c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800713e:	e783      	b.n	8007048 <_dtoa_r+0x710>
 8007140:	9a07      	ldr	r2, [sp, #28]
 8007142:	e7ab      	b.n	800709c <_dtoa_r+0x764>
 8007144:	2300      	movs	r3, #0
 8007146:	e7d4      	b.n	80070f2 <_dtoa_r+0x7ba>
 8007148:	9b00      	ldr	r3, [sp, #0]
 800714a:	e7d2      	b.n	80070f2 <_dtoa_r+0x7ba>
 800714c:	2300      	movs	r3, #0
 800714e:	9307      	str	r3, [sp, #28]
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007156:	6918      	ldr	r0, [r3, #16]
 8007158:	f000 fa4d 	bl	80075f6 <__hi0bits>
 800715c:	f1c0 0020 	rsb	r0, r0, #32
 8007160:	4440      	add	r0, r8
 8007162:	f010 001f 	ands.w	r0, r0, #31
 8007166:	d047      	beq.n	80071f8 <_dtoa_r+0x8c0>
 8007168:	f1c0 0320 	rsb	r3, r0, #32
 800716c:	2b04      	cmp	r3, #4
 800716e:	dd3b      	ble.n	80071e8 <_dtoa_r+0x8b0>
 8007170:	9b05      	ldr	r3, [sp, #20]
 8007172:	f1c0 001c 	rsb	r0, r0, #28
 8007176:	4403      	add	r3, r0
 8007178:	9305      	str	r3, [sp, #20]
 800717a:	4405      	add	r5, r0
 800717c:	4480      	add	r8, r0
 800717e:	9b05      	ldr	r3, [sp, #20]
 8007180:	2b00      	cmp	r3, #0
 8007182:	dd05      	ble.n	8007190 <_dtoa_r+0x858>
 8007184:	461a      	mov	r2, r3
 8007186:	9904      	ldr	r1, [sp, #16]
 8007188:	4620      	mov	r0, r4
 800718a:	f000 fb6f 	bl	800786c <__lshift>
 800718e:	9004      	str	r0, [sp, #16]
 8007190:	f1b8 0f00 	cmp.w	r8, #0
 8007194:	dd05      	ble.n	80071a2 <_dtoa_r+0x86a>
 8007196:	4639      	mov	r1, r7
 8007198:	4642      	mov	r2, r8
 800719a:	4620      	mov	r0, r4
 800719c:	f000 fb66 	bl	800786c <__lshift>
 80071a0:	4607      	mov	r7, r0
 80071a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071a4:	b353      	cbz	r3, 80071fc <_dtoa_r+0x8c4>
 80071a6:	4639      	mov	r1, r7
 80071a8:	9804      	ldr	r0, [sp, #16]
 80071aa:	f000 fbb3 	bl	8007914 <__mcmp>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	da24      	bge.n	80071fc <_dtoa_r+0x8c4>
 80071b2:	2300      	movs	r3, #0
 80071b4:	220a      	movs	r2, #10
 80071b6:	9904      	ldr	r1, [sp, #16]
 80071b8:	4620      	mov	r0, r4
 80071ba:	f000 f9e1 	bl	8007580 <__multadd>
 80071be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071c0:	9004      	str	r0, [sp, #16]
 80071c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 814d 	beq.w	8007466 <_dtoa_r+0xb2e>
 80071cc:	2300      	movs	r3, #0
 80071ce:	4631      	mov	r1, r6
 80071d0:	220a      	movs	r2, #10
 80071d2:	4620      	mov	r0, r4
 80071d4:	f000 f9d4 	bl	8007580 <__multadd>
 80071d8:	9b02      	ldr	r3, [sp, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	4606      	mov	r6, r0
 80071de:	dc4f      	bgt.n	8007280 <_dtoa_r+0x948>
 80071e0:	9b06      	ldr	r3, [sp, #24]
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	dd4c      	ble.n	8007280 <_dtoa_r+0x948>
 80071e6:	e011      	b.n	800720c <_dtoa_r+0x8d4>
 80071e8:	d0c9      	beq.n	800717e <_dtoa_r+0x846>
 80071ea:	9a05      	ldr	r2, [sp, #20]
 80071ec:	331c      	adds	r3, #28
 80071ee:	441a      	add	r2, r3
 80071f0:	9205      	str	r2, [sp, #20]
 80071f2:	441d      	add	r5, r3
 80071f4:	4498      	add	r8, r3
 80071f6:	e7c2      	b.n	800717e <_dtoa_r+0x846>
 80071f8:	4603      	mov	r3, r0
 80071fa:	e7f6      	b.n	80071ea <_dtoa_r+0x8b2>
 80071fc:	f1b9 0f00 	cmp.w	r9, #0
 8007200:	dc38      	bgt.n	8007274 <_dtoa_r+0x93c>
 8007202:	9b06      	ldr	r3, [sp, #24]
 8007204:	2b02      	cmp	r3, #2
 8007206:	dd35      	ble.n	8007274 <_dtoa_r+0x93c>
 8007208:	f8cd 9008 	str.w	r9, [sp, #8]
 800720c:	9b02      	ldr	r3, [sp, #8]
 800720e:	b963      	cbnz	r3, 800722a <_dtoa_r+0x8f2>
 8007210:	4639      	mov	r1, r7
 8007212:	2205      	movs	r2, #5
 8007214:	4620      	mov	r0, r4
 8007216:	f000 f9b3 	bl	8007580 <__multadd>
 800721a:	4601      	mov	r1, r0
 800721c:	4607      	mov	r7, r0
 800721e:	9804      	ldr	r0, [sp, #16]
 8007220:	f000 fb78 	bl	8007914 <__mcmp>
 8007224:	2800      	cmp	r0, #0
 8007226:	f73f adcc 	bgt.w	8006dc2 <_dtoa_r+0x48a>
 800722a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800722c:	465d      	mov	r5, fp
 800722e:	ea6f 0a03 	mvn.w	sl, r3
 8007232:	f04f 0900 	mov.w	r9, #0
 8007236:	4639      	mov	r1, r7
 8007238:	4620      	mov	r0, r4
 800723a:	f000 f98a 	bl	8007552 <_Bfree>
 800723e:	2e00      	cmp	r6, #0
 8007240:	f43f aeb7 	beq.w	8006fb2 <_dtoa_r+0x67a>
 8007244:	f1b9 0f00 	cmp.w	r9, #0
 8007248:	d005      	beq.n	8007256 <_dtoa_r+0x91e>
 800724a:	45b1      	cmp	r9, r6
 800724c:	d003      	beq.n	8007256 <_dtoa_r+0x91e>
 800724e:	4649      	mov	r1, r9
 8007250:	4620      	mov	r0, r4
 8007252:	f000 f97e 	bl	8007552 <_Bfree>
 8007256:	4631      	mov	r1, r6
 8007258:	4620      	mov	r0, r4
 800725a:	f000 f97a 	bl	8007552 <_Bfree>
 800725e:	e6a8      	b.n	8006fb2 <_dtoa_r+0x67a>
 8007260:	2700      	movs	r7, #0
 8007262:	463e      	mov	r6, r7
 8007264:	e7e1      	b.n	800722a <_dtoa_r+0x8f2>
 8007266:	f8dd a020 	ldr.w	sl, [sp, #32]
 800726a:	463e      	mov	r6, r7
 800726c:	e5a9      	b.n	8006dc2 <_dtoa_r+0x48a>
 800726e:	bf00      	nop
 8007270:	40240000 	.word	0x40240000
 8007274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007276:	f8cd 9008 	str.w	r9, [sp, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 80fa 	beq.w	8007474 <_dtoa_r+0xb3c>
 8007280:	2d00      	cmp	r5, #0
 8007282:	dd05      	ble.n	8007290 <_dtoa_r+0x958>
 8007284:	4631      	mov	r1, r6
 8007286:	462a      	mov	r2, r5
 8007288:	4620      	mov	r0, r4
 800728a:	f000 faef 	bl	800786c <__lshift>
 800728e:	4606      	mov	r6, r0
 8007290:	9b07      	ldr	r3, [sp, #28]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d04c      	beq.n	8007330 <_dtoa_r+0x9f8>
 8007296:	6871      	ldr	r1, [r6, #4]
 8007298:	4620      	mov	r0, r4
 800729a:	f000 f926 	bl	80074ea <_Balloc>
 800729e:	6932      	ldr	r2, [r6, #16]
 80072a0:	3202      	adds	r2, #2
 80072a2:	4605      	mov	r5, r0
 80072a4:	0092      	lsls	r2, r2, #2
 80072a6:	f106 010c 	add.w	r1, r6, #12
 80072aa:	300c      	adds	r0, #12
 80072ac:	f000 f912 	bl	80074d4 <memcpy>
 80072b0:	2201      	movs	r2, #1
 80072b2:	4629      	mov	r1, r5
 80072b4:	4620      	mov	r0, r4
 80072b6:	f000 fad9 	bl	800786c <__lshift>
 80072ba:	9b00      	ldr	r3, [sp, #0]
 80072bc:	f8cd b014 	str.w	fp, [sp, #20]
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	46b1      	mov	r9, r6
 80072c6:	9307      	str	r3, [sp, #28]
 80072c8:	4606      	mov	r6, r0
 80072ca:	4639      	mov	r1, r7
 80072cc:	9804      	ldr	r0, [sp, #16]
 80072ce:	f7ff faa7 	bl	8006820 <quorem>
 80072d2:	4649      	mov	r1, r9
 80072d4:	4605      	mov	r5, r0
 80072d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80072da:	9804      	ldr	r0, [sp, #16]
 80072dc:	f000 fb1a 	bl	8007914 <__mcmp>
 80072e0:	4632      	mov	r2, r6
 80072e2:	9000      	str	r0, [sp, #0]
 80072e4:	4639      	mov	r1, r7
 80072e6:	4620      	mov	r0, r4
 80072e8:	f000 fb2e 	bl	8007948 <__mdiff>
 80072ec:	68c3      	ldr	r3, [r0, #12]
 80072ee:	4602      	mov	r2, r0
 80072f0:	bb03      	cbnz	r3, 8007334 <_dtoa_r+0x9fc>
 80072f2:	4601      	mov	r1, r0
 80072f4:	9008      	str	r0, [sp, #32]
 80072f6:	9804      	ldr	r0, [sp, #16]
 80072f8:	f000 fb0c 	bl	8007914 <__mcmp>
 80072fc:	9a08      	ldr	r2, [sp, #32]
 80072fe:	4603      	mov	r3, r0
 8007300:	4611      	mov	r1, r2
 8007302:	4620      	mov	r0, r4
 8007304:	9308      	str	r3, [sp, #32]
 8007306:	f000 f924 	bl	8007552 <_Bfree>
 800730a:	9b08      	ldr	r3, [sp, #32]
 800730c:	b9a3      	cbnz	r3, 8007338 <_dtoa_r+0xa00>
 800730e:	9a06      	ldr	r2, [sp, #24]
 8007310:	b992      	cbnz	r2, 8007338 <_dtoa_r+0xa00>
 8007312:	9a07      	ldr	r2, [sp, #28]
 8007314:	b982      	cbnz	r2, 8007338 <_dtoa_r+0xa00>
 8007316:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800731a:	d029      	beq.n	8007370 <_dtoa_r+0xa38>
 800731c:	9b00      	ldr	r3, [sp, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	dd01      	ble.n	8007326 <_dtoa_r+0x9ee>
 8007322:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007326:	9b05      	ldr	r3, [sp, #20]
 8007328:	1c5d      	adds	r5, r3, #1
 800732a:	f883 8000 	strb.w	r8, [r3]
 800732e:	e782      	b.n	8007236 <_dtoa_r+0x8fe>
 8007330:	4630      	mov	r0, r6
 8007332:	e7c2      	b.n	80072ba <_dtoa_r+0x982>
 8007334:	2301      	movs	r3, #1
 8007336:	e7e3      	b.n	8007300 <_dtoa_r+0x9c8>
 8007338:	9a00      	ldr	r2, [sp, #0]
 800733a:	2a00      	cmp	r2, #0
 800733c:	db04      	blt.n	8007348 <_dtoa_r+0xa10>
 800733e:	d125      	bne.n	800738c <_dtoa_r+0xa54>
 8007340:	9a06      	ldr	r2, [sp, #24]
 8007342:	bb1a      	cbnz	r2, 800738c <_dtoa_r+0xa54>
 8007344:	9a07      	ldr	r2, [sp, #28]
 8007346:	bb0a      	cbnz	r2, 800738c <_dtoa_r+0xa54>
 8007348:	2b00      	cmp	r3, #0
 800734a:	ddec      	ble.n	8007326 <_dtoa_r+0x9ee>
 800734c:	2201      	movs	r2, #1
 800734e:	9904      	ldr	r1, [sp, #16]
 8007350:	4620      	mov	r0, r4
 8007352:	f000 fa8b 	bl	800786c <__lshift>
 8007356:	4639      	mov	r1, r7
 8007358:	9004      	str	r0, [sp, #16]
 800735a:	f000 fadb 	bl	8007914 <__mcmp>
 800735e:	2800      	cmp	r0, #0
 8007360:	dc03      	bgt.n	800736a <_dtoa_r+0xa32>
 8007362:	d1e0      	bne.n	8007326 <_dtoa_r+0x9ee>
 8007364:	f018 0f01 	tst.w	r8, #1
 8007368:	d0dd      	beq.n	8007326 <_dtoa_r+0x9ee>
 800736a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800736e:	d1d8      	bne.n	8007322 <_dtoa_r+0x9ea>
 8007370:	9b05      	ldr	r3, [sp, #20]
 8007372:	9a05      	ldr	r2, [sp, #20]
 8007374:	1c5d      	adds	r5, r3, #1
 8007376:	2339      	movs	r3, #57	; 0x39
 8007378:	7013      	strb	r3, [r2, #0]
 800737a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800737e:	2b39      	cmp	r3, #57	; 0x39
 8007380:	f105 32ff 	add.w	r2, r5, #4294967295
 8007384:	d04f      	beq.n	8007426 <_dtoa_r+0xaee>
 8007386:	3301      	adds	r3, #1
 8007388:	7013      	strb	r3, [r2, #0]
 800738a:	e754      	b.n	8007236 <_dtoa_r+0x8fe>
 800738c:	9a05      	ldr	r2, [sp, #20]
 800738e:	2b00      	cmp	r3, #0
 8007390:	f102 0501 	add.w	r5, r2, #1
 8007394:	dd06      	ble.n	80073a4 <_dtoa_r+0xa6c>
 8007396:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800739a:	d0e9      	beq.n	8007370 <_dtoa_r+0xa38>
 800739c:	f108 0801 	add.w	r8, r8, #1
 80073a0:	9b05      	ldr	r3, [sp, #20]
 80073a2:	e7c2      	b.n	800732a <_dtoa_r+0x9f2>
 80073a4:	9a02      	ldr	r2, [sp, #8]
 80073a6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80073aa:	eba5 030b 	sub.w	r3, r5, fp
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d021      	beq.n	80073f6 <_dtoa_r+0xabe>
 80073b2:	2300      	movs	r3, #0
 80073b4:	220a      	movs	r2, #10
 80073b6:	9904      	ldr	r1, [sp, #16]
 80073b8:	4620      	mov	r0, r4
 80073ba:	f000 f8e1 	bl	8007580 <__multadd>
 80073be:	45b1      	cmp	r9, r6
 80073c0:	9004      	str	r0, [sp, #16]
 80073c2:	f04f 0300 	mov.w	r3, #0
 80073c6:	f04f 020a 	mov.w	r2, #10
 80073ca:	4649      	mov	r1, r9
 80073cc:	4620      	mov	r0, r4
 80073ce:	d105      	bne.n	80073dc <_dtoa_r+0xaa4>
 80073d0:	f000 f8d6 	bl	8007580 <__multadd>
 80073d4:	4681      	mov	r9, r0
 80073d6:	4606      	mov	r6, r0
 80073d8:	9505      	str	r5, [sp, #20]
 80073da:	e776      	b.n	80072ca <_dtoa_r+0x992>
 80073dc:	f000 f8d0 	bl	8007580 <__multadd>
 80073e0:	4631      	mov	r1, r6
 80073e2:	4681      	mov	r9, r0
 80073e4:	2300      	movs	r3, #0
 80073e6:	220a      	movs	r2, #10
 80073e8:	4620      	mov	r0, r4
 80073ea:	f000 f8c9 	bl	8007580 <__multadd>
 80073ee:	4606      	mov	r6, r0
 80073f0:	e7f2      	b.n	80073d8 <_dtoa_r+0xaa0>
 80073f2:	f04f 0900 	mov.w	r9, #0
 80073f6:	2201      	movs	r2, #1
 80073f8:	9904      	ldr	r1, [sp, #16]
 80073fa:	4620      	mov	r0, r4
 80073fc:	f000 fa36 	bl	800786c <__lshift>
 8007400:	4639      	mov	r1, r7
 8007402:	9004      	str	r0, [sp, #16]
 8007404:	f000 fa86 	bl	8007914 <__mcmp>
 8007408:	2800      	cmp	r0, #0
 800740a:	dcb6      	bgt.n	800737a <_dtoa_r+0xa42>
 800740c:	d102      	bne.n	8007414 <_dtoa_r+0xadc>
 800740e:	f018 0f01 	tst.w	r8, #1
 8007412:	d1b2      	bne.n	800737a <_dtoa_r+0xa42>
 8007414:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007418:	2b30      	cmp	r3, #48	; 0x30
 800741a:	f105 32ff 	add.w	r2, r5, #4294967295
 800741e:	f47f af0a 	bne.w	8007236 <_dtoa_r+0x8fe>
 8007422:	4615      	mov	r5, r2
 8007424:	e7f6      	b.n	8007414 <_dtoa_r+0xadc>
 8007426:	4593      	cmp	fp, r2
 8007428:	d105      	bne.n	8007436 <_dtoa_r+0xafe>
 800742a:	2331      	movs	r3, #49	; 0x31
 800742c:	f10a 0a01 	add.w	sl, sl, #1
 8007430:	f88b 3000 	strb.w	r3, [fp]
 8007434:	e6ff      	b.n	8007236 <_dtoa_r+0x8fe>
 8007436:	4615      	mov	r5, r2
 8007438:	e79f      	b.n	800737a <_dtoa_r+0xa42>
 800743a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80074a0 <_dtoa_r+0xb68>
 800743e:	e007      	b.n	8007450 <_dtoa_r+0xb18>
 8007440:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007442:	f8df b060 	ldr.w	fp, [pc, #96]	; 80074a4 <_dtoa_r+0xb6c>
 8007446:	b11b      	cbz	r3, 8007450 <_dtoa_r+0xb18>
 8007448:	f10b 0308 	add.w	r3, fp, #8
 800744c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	4658      	mov	r0, fp
 8007452:	b017      	add	sp, #92	; 0x5c
 8007454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007458:	9b06      	ldr	r3, [sp, #24]
 800745a:	2b01      	cmp	r3, #1
 800745c:	f77f ae35 	ble.w	80070ca <_dtoa_r+0x792>
 8007460:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007462:	9307      	str	r3, [sp, #28]
 8007464:	e649      	b.n	80070fa <_dtoa_r+0x7c2>
 8007466:	9b02      	ldr	r3, [sp, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	dc03      	bgt.n	8007474 <_dtoa_r+0xb3c>
 800746c:	9b06      	ldr	r3, [sp, #24]
 800746e:	2b02      	cmp	r3, #2
 8007470:	f73f aecc 	bgt.w	800720c <_dtoa_r+0x8d4>
 8007474:	465d      	mov	r5, fp
 8007476:	4639      	mov	r1, r7
 8007478:	9804      	ldr	r0, [sp, #16]
 800747a:	f7ff f9d1 	bl	8006820 <quorem>
 800747e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007482:	f805 8b01 	strb.w	r8, [r5], #1
 8007486:	9a02      	ldr	r2, [sp, #8]
 8007488:	eba5 030b 	sub.w	r3, r5, fp
 800748c:	429a      	cmp	r2, r3
 800748e:	ddb0      	ble.n	80073f2 <_dtoa_r+0xaba>
 8007490:	2300      	movs	r3, #0
 8007492:	220a      	movs	r2, #10
 8007494:	9904      	ldr	r1, [sp, #16]
 8007496:	4620      	mov	r0, r4
 8007498:	f000 f872 	bl	8007580 <__multadd>
 800749c:	9004      	str	r0, [sp, #16]
 800749e:	e7ea      	b.n	8007476 <_dtoa_r+0xb3e>
 80074a0:	08008a9c 	.word	0x08008a9c
 80074a4:	08008ac0 	.word	0x08008ac0

080074a8 <_localeconv_r>:
 80074a8:	4b04      	ldr	r3, [pc, #16]	; (80074bc <_localeconv_r+0x14>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6a18      	ldr	r0, [r3, #32]
 80074ae:	4b04      	ldr	r3, [pc, #16]	; (80074c0 <_localeconv_r+0x18>)
 80074b0:	2800      	cmp	r0, #0
 80074b2:	bf08      	it	eq
 80074b4:	4618      	moveq	r0, r3
 80074b6:	30f0      	adds	r0, #240	; 0xf0
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	2000000c 	.word	0x2000000c
 80074c0:	20000070 	.word	0x20000070

080074c4 <malloc>:
 80074c4:	4b02      	ldr	r3, [pc, #8]	; (80074d0 <malloc+0xc>)
 80074c6:	4601      	mov	r1, r0
 80074c8:	6818      	ldr	r0, [r3, #0]
 80074ca:	f000 bb45 	b.w	8007b58 <_malloc_r>
 80074ce:	bf00      	nop
 80074d0:	2000000c 	.word	0x2000000c

080074d4 <memcpy>:
 80074d4:	b510      	push	{r4, lr}
 80074d6:	1e43      	subs	r3, r0, #1
 80074d8:	440a      	add	r2, r1
 80074da:	4291      	cmp	r1, r2
 80074dc:	d100      	bne.n	80074e0 <memcpy+0xc>
 80074de:	bd10      	pop	{r4, pc}
 80074e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074e8:	e7f7      	b.n	80074da <memcpy+0x6>

080074ea <_Balloc>:
 80074ea:	b570      	push	{r4, r5, r6, lr}
 80074ec:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80074ee:	4604      	mov	r4, r0
 80074f0:	460e      	mov	r6, r1
 80074f2:	b93d      	cbnz	r5, 8007504 <_Balloc+0x1a>
 80074f4:	2010      	movs	r0, #16
 80074f6:	f7ff ffe5 	bl	80074c4 <malloc>
 80074fa:	6260      	str	r0, [r4, #36]	; 0x24
 80074fc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007500:	6005      	str	r5, [r0, #0]
 8007502:	60c5      	str	r5, [r0, #12]
 8007504:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007506:	68eb      	ldr	r3, [r5, #12]
 8007508:	b183      	cbz	r3, 800752c <_Balloc+0x42>
 800750a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007512:	b9b8      	cbnz	r0, 8007544 <_Balloc+0x5a>
 8007514:	2101      	movs	r1, #1
 8007516:	fa01 f506 	lsl.w	r5, r1, r6
 800751a:	1d6a      	adds	r2, r5, #5
 800751c:	0092      	lsls	r2, r2, #2
 800751e:	4620      	mov	r0, r4
 8007520:	f000 fabe 	bl	8007aa0 <_calloc_r>
 8007524:	b160      	cbz	r0, 8007540 <_Balloc+0x56>
 8007526:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800752a:	e00e      	b.n	800754a <_Balloc+0x60>
 800752c:	2221      	movs	r2, #33	; 0x21
 800752e:	2104      	movs	r1, #4
 8007530:	4620      	mov	r0, r4
 8007532:	f000 fab5 	bl	8007aa0 <_calloc_r>
 8007536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007538:	60e8      	str	r0, [r5, #12]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e4      	bne.n	800750a <_Balloc+0x20>
 8007540:	2000      	movs	r0, #0
 8007542:	bd70      	pop	{r4, r5, r6, pc}
 8007544:	6802      	ldr	r2, [r0, #0]
 8007546:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800754a:	2300      	movs	r3, #0
 800754c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007550:	e7f7      	b.n	8007542 <_Balloc+0x58>

08007552 <_Bfree>:
 8007552:	b570      	push	{r4, r5, r6, lr}
 8007554:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007556:	4606      	mov	r6, r0
 8007558:	460d      	mov	r5, r1
 800755a:	b93c      	cbnz	r4, 800756c <_Bfree+0x1a>
 800755c:	2010      	movs	r0, #16
 800755e:	f7ff ffb1 	bl	80074c4 <malloc>
 8007562:	6270      	str	r0, [r6, #36]	; 0x24
 8007564:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007568:	6004      	str	r4, [r0, #0]
 800756a:	60c4      	str	r4, [r0, #12]
 800756c:	b13d      	cbz	r5, 800757e <_Bfree+0x2c>
 800756e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007570:	686a      	ldr	r2, [r5, #4]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007578:	6029      	str	r1, [r5, #0]
 800757a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800757e:	bd70      	pop	{r4, r5, r6, pc}

08007580 <__multadd>:
 8007580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007584:	690d      	ldr	r5, [r1, #16]
 8007586:	461f      	mov	r7, r3
 8007588:	4606      	mov	r6, r0
 800758a:	460c      	mov	r4, r1
 800758c:	f101 0c14 	add.w	ip, r1, #20
 8007590:	2300      	movs	r3, #0
 8007592:	f8dc 0000 	ldr.w	r0, [ip]
 8007596:	b281      	uxth	r1, r0
 8007598:	fb02 7101 	mla	r1, r2, r1, r7
 800759c:	0c0f      	lsrs	r7, r1, #16
 800759e:	0c00      	lsrs	r0, r0, #16
 80075a0:	fb02 7000 	mla	r0, r2, r0, r7
 80075a4:	b289      	uxth	r1, r1
 80075a6:	3301      	adds	r3, #1
 80075a8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80075ac:	429d      	cmp	r5, r3
 80075ae:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80075b2:	f84c 1b04 	str.w	r1, [ip], #4
 80075b6:	dcec      	bgt.n	8007592 <__multadd+0x12>
 80075b8:	b1d7      	cbz	r7, 80075f0 <__multadd+0x70>
 80075ba:	68a3      	ldr	r3, [r4, #8]
 80075bc:	42ab      	cmp	r3, r5
 80075be:	dc12      	bgt.n	80075e6 <__multadd+0x66>
 80075c0:	6861      	ldr	r1, [r4, #4]
 80075c2:	4630      	mov	r0, r6
 80075c4:	3101      	adds	r1, #1
 80075c6:	f7ff ff90 	bl	80074ea <_Balloc>
 80075ca:	6922      	ldr	r2, [r4, #16]
 80075cc:	3202      	adds	r2, #2
 80075ce:	f104 010c 	add.w	r1, r4, #12
 80075d2:	4680      	mov	r8, r0
 80075d4:	0092      	lsls	r2, r2, #2
 80075d6:	300c      	adds	r0, #12
 80075d8:	f7ff ff7c 	bl	80074d4 <memcpy>
 80075dc:	4621      	mov	r1, r4
 80075de:	4630      	mov	r0, r6
 80075e0:	f7ff ffb7 	bl	8007552 <_Bfree>
 80075e4:	4644      	mov	r4, r8
 80075e6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80075ea:	3501      	adds	r5, #1
 80075ec:	615f      	str	r7, [r3, #20]
 80075ee:	6125      	str	r5, [r4, #16]
 80075f0:	4620      	mov	r0, r4
 80075f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080075f6 <__hi0bits>:
 80075f6:	0c02      	lsrs	r2, r0, #16
 80075f8:	0412      	lsls	r2, r2, #16
 80075fa:	4603      	mov	r3, r0
 80075fc:	b9b2      	cbnz	r2, 800762c <__hi0bits+0x36>
 80075fe:	0403      	lsls	r3, r0, #16
 8007600:	2010      	movs	r0, #16
 8007602:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007606:	bf04      	itt	eq
 8007608:	021b      	lsleq	r3, r3, #8
 800760a:	3008      	addeq	r0, #8
 800760c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007610:	bf04      	itt	eq
 8007612:	011b      	lsleq	r3, r3, #4
 8007614:	3004      	addeq	r0, #4
 8007616:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800761a:	bf04      	itt	eq
 800761c:	009b      	lsleq	r3, r3, #2
 800761e:	3002      	addeq	r0, #2
 8007620:	2b00      	cmp	r3, #0
 8007622:	db06      	blt.n	8007632 <__hi0bits+0x3c>
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	d503      	bpl.n	8007630 <__hi0bits+0x3a>
 8007628:	3001      	adds	r0, #1
 800762a:	4770      	bx	lr
 800762c:	2000      	movs	r0, #0
 800762e:	e7e8      	b.n	8007602 <__hi0bits+0xc>
 8007630:	2020      	movs	r0, #32
 8007632:	4770      	bx	lr

08007634 <__lo0bits>:
 8007634:	6803      	ldr	r3, [r0, #0]
 8007636:	f013 0207 	ands.w	r2, r3, #7
 800763a:	4601      	mov	r1, r0
 800763c:	d00b      	beq.n	8007656 <__lo0bits+0x22>
 800763e:	07da      	lsls	r2, r3, #31
 8007640:	d423      	bmi.n	800768a <__lo0bits+0x56>
 8007642:	0798      	lsls	r0, r3, #30
 8007644:	bf49      	itett	mi
 8007646:	085b      	lsrmi	r3, r3, #1
 8007648:	089b      	lsrpl	r3, r3, #2
 800764a:	2001      	movmi	r0, #1
 800764c:	600b      	strmi	r3, [r1, #0]
 800764e:	bf5c      	itt	pl
 8007650:	600b      	strpl	r3, [r1, #0]
 8007652:	2002      	movpl	r0, #2
 8007654:	4770      	bx	lr
 8007656:	b298      	uxth	r0, r3
 8007658:	b9a8      	cbnz	r0, 8007686 <__lo0bits+0x52>
 800765a:	0c1b      	lsrs	r3, r3, #16
 800765c:	2010      	movs	r0, #16
 800765e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007662:	bf04      	itt	eq
 8007664:	0a1b      	lsreq	r3, r3, #8
 8007666:	3008      	addeq	r0, #8
 8007668:	071a      	lsls	r2, r3, #28
 800766a:	bf04      	itt	eq
 800766c:	091b      	lsreq	r3, r3, #4
 800766e:	3004      	addeq	r0, #4
 8007670:	079a      	lsls	r2, r3, #30
 8007672:	bf04      	itt	eq
 8007674:	089b      	lsreq	r3, r3, #2
 8007676:	3002      	addeq	r0, #2
 8007678:	07da      	lsls	r2, r3, #31
 800767a:	d402      	bmi.n	8007682 <__lo0bits+0x4e>
 800767c:	085b      	lsrs	r3, r3, #1
 800767e:	d006      	beq.n	800768e <__lo0bits+0x5a>
 8007680:	3001      	adds	r0, #1
 8007682:	600b      	str	r3, [r1, #0]
 8007684:	4770      	bx	lr
 8007686:	4610      	mov	r0, r2
 8007688:	e7e9      	b.n	800765e <__lo0bits+0x2a>
 800768a:	2000      	movs	r0, #0
 800768c:	4770      	bx	lr
 800768e:	2020      	movs	r0, #32
 8007690:	4770      	bx	lr

08007692 <__i2b>:
 8007692:	b510      	push	{r4, lr}
 8007694:	460c      	mov	r4, r1
 8007696:	2101      	movs	r1, #1
 8007698:	f7ff ff27 	bl	80074ea <_Balloc>
 800769c:	2201      	movs	r2, #1
 800769e:	6144      	str	r4, [r0, #20]
 80076a0:	6102      	str	r2, [r0, #16]
 80076a2:	bd10      	pop	{r4, pc}

080076a4 <__multiply>:
 80076a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a8:	4614      	mov	r4, r2
 80076aa:	690a      	ldr	r2, [r1, #16]
 80076ac:	6923      	ldr	r3, [r4, #16]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	bfb8      	it	lt
 80076b2:	460b      	movlt	r3, r1
 80076b4:	4688      	mov	r8, r1
 80076b6:	bfbc      	itt	lt
 80076b8:	46a0      	movlt	r8, r4
 80076ba:	461c      	movlt	r4, r3
 80076bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80076c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80076c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80076cc:	eb07 0609 	add.w	r6, r7, r9
 80076d0:	42b3      	cmp	r3, r6
 80076d2:	bfb8      	it	lt
 80076d4:	3101      	addlt	r1, #1
 80076d6:	f7ff ff08 	bl	80074ea <_Balloc>
 80076da:	f100 0514 	add.w	r5, r0, #20
 80076de:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80076e2:	462b      	mov	r3, r5
 80076e4:	2200      	movs	r2, #0
 80076e6:	4573      	cmp	r3, lr
 80076e8:	d316      	bcc.n	8007718 <__multiply+0x74>
 80076ea:	f104 0214 	add.w	r2, r4, #20
 80076ee:	f108 0114 	add.w	r1, r8, #20
 80076f2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80076f6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80076fa:	9300      	str	r3, [sp, #0]
 80076fc:	9b00      	ldr	r3, [sp, #0]
 80076fe:	9201      	str	r2, [sp, #4]
 8007700:	4293      	cmp	r3, r2
 8007702:	d80c      	bhi.n	800771e <__multiply+0x7a>
 8007704:	2e00      	cmp	r6, #0
 8007706:	dd03      	ble.n	8007710 <__multiply+0x6c>
 8007708:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800770c:	2b00      	cmp	r3, #0
 800770e:	d05d      	beq.n	80077cc <__multiply+0x128>
 8007710:	6106      	str	r6, [r0, #16]
 8007712:	b003      	add	sp, #12
 8007714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007718:	f843 2b04 	str.w	r2, [r3], #4
 800771c:	e7e3      	b.n	80076e6 <__multiply+0x42>
 800771e:	f8b2 b000 	ldrh.w	fp, [r2]
 8007722:	f1bb 0f00 	cmp.w	fp, #0
 8007726:	d023      	beq.n	8007770 <__multiply+0xcc>
 8007728:	4689      	mov	r9, r1
 800772a:	46ac      	mov	ip, r5
 800772c:	f04f 0800 	mov.w	r8, #0
 8007730:	f859 4b04 	ldr.w	r4, [r9], #4
 8007734:	f8dc a000 	ldr.w	sl, [ip]
 8007738:	b2a3      	uxth	r3, r4
 800773a:	fa1f fa8a 	uxth.w	sl, sl
 800773e:	fb0b a303 	mla	r3, fp, r3, sl
 8007742:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007746:	f8dc 4000 	ldr.w	r4, [ip]
 800774a:	4443      	add	r3, r8
 800774c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007750:	fb0b 840a 	mla	r4, fp, sl, r8
 8007754:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007758:	46e2      	mov	sl, ip
 800775a:	b29b      	uxth	r3, r3
 800775c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007760:	454f      	cmp	r7, r9
 8007762:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007766:	f84a 3b04 	str.w	r3, [sl], #4
 800776a:	d82b      	bhi.n	80077c4 <__multiply+0x120>
 800776c:	f8cc 8004 	str.w	r8, [ip, #4]
 8007770:	9b01      	ldr	r3, [sp, #4]
 8007772:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007776:	3204      	adds	r2, #4
 8007778:	f1ba 0f00 	cmp.w	sl, #0
 800777c:	d020      	beq.n	80077c0 <__multiply+0x11c>
 800777e:	682b      	ldr	r3, [r5, #0]
 8007780:	4689      	mov	r9, r1
 8007782:	46a8      	mov	r8, r5
 8007784:	f04f 0b00 	mov.w	fp, #0
 8007788:	f8b9 c000 	ldrh.w	ip, [r9]
 800778c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007790:	fb0a 440c 	mla	r4, sl, ip, r4
 8007794:	445c      	add	r4, fp
 8007796:	46c4      	mov	ip, r8
 8007798:	b29b      	uxth	r3, r3
 800779a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800779e:	f84c 3b04 	str.w	r3, [ip], #4
 80077a2:	f859 3b04 	ldr.w	r3, [r9], #4
 80077a6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80077aa:	0c1b      	lsrs	r3, r3, #16
 80077ac:	fb0a b303 	mla	r3, sl, r3, fp
 80077b0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80077b4:	454f      	cmp	r7, r9
 80077b6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80077ba:	d805      	bhi.n	80077c8 <__multiply+0x124>
 80077bc:	f8c8 3004 	str.w	r3, [r8, #4]
 80077c0:	3504      	adds	r5, #4
 80077c2:	e79b      	b.n	80076fc <__multiply+0x58>
 80077c4:	46d4      	mov	ip, sl
 80077c6:	e7b3      	b.n	8007730 <__multiply+0x8c>
 80077c8:	46e0      	mov	r8, ip
 80077ca:	e7dd      	b.n	8007788 <__multiply+0xe4>
 80077cc:	3e01      	subs	r6, #1
 80077ce:	e799      	b.n	8007704 <__multiply+0x60>

080077d0 <__pow5mult>:
 80077d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077d4:	4615      	mov	r5, r2
 80077d6:	f012 0203 	ands.w	r2, r2, #3
 80077da:	4606      	mov	r6, r0
 80077dc:	460f      	mov	r7, r1
 80077de:	d007      	beq.n	80077f0 <__pow5mult+0x20>
 80077e0:	3a01      	subs	r2, #1
 80077e2:	4c21      	ldr	r4, [pc, #132]	; (8007868 <__pow5mult+0x98>)
 80077e4:	2300      	movs	r3, #0
 80077e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077ea:	f7ff fec9 	bl	8007580 <__multadd>
 80077ee:	4607      	mov	r7, r0
 80077f0:	10ad      	asrs	r5, r5, #2
 80077f2:	d035      	beq.n	8007860 <__pow5mult+0x90>
 80077f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80077f6:	b93c      	cbnz	r4, 8007808 <__pow5mult+0x38>
 80077f8:	2010      	movs	r0, #16
 80077fa:	f7ff fe63 	bl	80074c4 <malloc>
 80077fe:	6270      	str	r0, [r6, #36]	; 0x24
 8007800:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007804:	6004      	str	r4, [r0, #0]
 8007806:	60c4      	str	r4, [r0, #12]
 8007808:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800780c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007810:	b94c      	cbnz	r4, 8007826 <__pow5mult+0x56>
 8007812:	f240 2171 	movw	r1, #625	; 0x271
 8007816:	4630      	mov	r0, r6
 8007818:	f7ff ff3b 	bl	8007692 <__i2b>
 800781c:	2300      	movs	r3, #0
 800781e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007822:	4604      	mov	r4, r0
 8007824:	6003      	str	r3, [r0, #0]
 8007826:	f04f 0800 	mov.w	r8, #0
 800782a:	07eb      	lsls	r3, r5, #31
 800782c:	d50a      	bpl.n	8007844 <__pow5mult+0x74>
 800782e:	4639      	mov	r1, r7
 8007830:	4622      	mov	r2, r4
 8007832:	4630      	mov	r0, r6
 8007834:	f7ff ff36 	bl	80076a4 <__multiply>
 8007838:	4639      	mov	r1, r7
 800783a:	4681      	mov	r9, r0
 800783c:	4630      	mov	r0, r6
 800783e:	f7ff fe88 	bl	8007552 <_Bfree>
 8007842:	464f      	mov	r7, r9
 8007844:	106d      	asrs	r5, r5, #1
 8007846:	d00b      	beq.n	8007860 <__pow5mult+0x90>
 8007848:	6820      	ldr	r0, [r4, #0]
 800784a:	b938      	cbnz	r0, 800785c <__pow5mult+0x8c>
 800784c:	4622      	mov	r2, r4
 800784e:	4621      	mov	r1, r4
 8007850:	4630      	mov	r0, r6
 8007852:	f7ff ff27 	bl	80076a4 <__multiply>
 8007856:	6020      	str	r0, [r4, #0]
 8007858:	f8c0 8000 	str.w	r8, [r0]
 800785c:	4604      	mov	r4, r0
 800785e:	e7e4      	b.n	800782a <__pow5mult+0x5a>
 8007860:	4638      	mov	r0, r7
 8007862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007866:	bf00      	nop
 8007868:	08008bc0 	.word	0x08008bc0

0800786c <__lshift>:
 800786c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007870:	460c      	mov	r4, r1
 8007872:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007876:	6923      	ldr	r3, [r4, #16]
 8007878:	6849      	ldr	r1, [r1, #4]
 800787a:	eb0a 0903 	add.w	r9, sl, r3
 800787e:	68a3      	ldr	r3, [r4, #8]
 8007880:	4607      	mov	r7, r0
 8007882:	4616      	mov	r6, r2
 8007884:	f109 0501 	add.w	r5, r9, #1
 8007888:	42ab      	cmp	r3, r5
 800788a:	db32      	blt.n	80078f2 <__lshift+0x86>
 800788c:	4638      	mov	r0, r7
 800788e:	f7ff fe2c 	bl	80074ea <_Balloc>
 8007892:	2300      	movs	r3, #0
 8007894:	4680      	mov	r8, r0
 8007896:	f100 0114 	add.w	r1, r0, #20
 800789a:	461a      	mov	r2, r3
 800789c:	4553      	cmp	r3, sl
 800789e:	db2b      	blt.n	80078f8 <__lshift+0x8c>
 80078a0:	6920      	ldr	r0, [r4, #16]
 80078a2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078a6:	f104 0314 	add.w	r3, r4, #20
 80078aa:	f016 021f 	ands.w	r2, r6, #31
 80078ae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078b2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80078b6:	d025      	beq.n	8007904 <__lshift+0x98>
 80078b8:	f1c2 0e20 	rsb	lr, r2, #32
 80078bc:	2000      	movs	r0, #0
 80078be:	681e      	ldr	r6, [r3, #0]
 80078c0:	468a      	mov	sl, r1
 80078c2:	4096      	lsls	r6, r2
 80078c4:	4330      	orrs	r0, r6
 80078c6:	f84a 0b04 	str.w	r0, [sl], #4
 80078ca:	f853 0b04 	ldr.w	r0, [r3], #4
 80078ce:	459c      	cmp	ip, r3
 80078d0:	fa20 f00e 	lsr.w	r0, r0, lr
 80078d4:	d814      	bhi.n	8007900 <__lshift+0x94>
 80078d6:	6048      	str	r0, [r1, #4]
 80078d8:	b108      	cbz	r0, 80078de <__lshift+0x72>
 80078da:	f109 0502 	add.w	r5, r9, #2
 80078de:	3d01      	subs	r5, #1
 80078e0:	4638      	mov	r0, r7
 80078e2:	f8c8 5010 	str.w	r5, [r8, #16]
 80078e6:	4621      	mov	r1, r4
 80078e8:	f7ff fe33 	bl	8007552 <_Bfree>
 80078ec:	4640      	mov	r0, r8
 80078ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f2:	3101      	adds	r1, #1
 80078f4:	005b      	lsls	r3, r3, #1
 80078f6:	e7c7      	b.n	8007888 <__lshift+0x1c>
 80078f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80078fc:	3301      	adds	r3, #1
 80078fe:	e7cd      	b.n	800789c <__lshift+0x30>
 8007900:	4651      	mov	r1, sl
 8007902:	e7dc      	b.n	80078be <__lshift+0x52>
 8007904:	3904      	subs	r1, #4
 8007906:	f853 2b04 	ldr.w	r2, [r3], #4
 800790a:	f841 2f04 	str.w	r2, [r1, #4]!
 800790e:	459c      	cmp	ip, r3
 8007910:	d8f9      	bhi.n	8007906 <__lshift+0x9a>
 8007912:	e7e4      	b.n	80078de <__lshift+0x72>

08007914 <__mcmp>:
 8007914:	6903      	ldr	r3, [r0, #16]
 8007916:	690a      	ldr	r2, [r1, #16]
 8007918:	1a9b      	subs	r3, r3, r2
 800791a:	b530      	push	{r4, r5, lr}
 800791c:	d10c      	bne.n	8007938 <__mcmp+0x24>
 800791e:	0092      	lsls	r2, r2, #2
 8007920:	3014      	adds	r0, #20
 8007922:	3114      	adds	r1, #20
 8007924:	1884      	adds	r4, r0, r2
 8007926:	4411      	add	r1, r2
 8007928:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800792c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007930:	4295      	cmp	r5, r2
 8007932:	d003      	beq.n	800793c <__mcmp+0x28>
 8007934:	d305      	bcc.n	8007942 <__mcmp+0x2e>
 8007936:	2301      	movs	r3, #1
 8007938:	4618      	mov	r0, r3
 800793a:	bd30      	pop	{r4, r5, pc}
 800793c:	42a0      	cmp	r0, r4
 800793e:	d3f3      	bcc.n	8007928 <__mcmp+0x14>
 8007940:	e7fa      	b.n	8007938 <__mcmp+0x24>
 8007942:	f04f 33ff 	mov.w	r3, #4294967295
 8007946:	e7f7      	b.n	8007938 <__mcmp+0x24>

08007948 <__mdiff>:
 8007948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800794c:	460d      	mov	r5, r1
 800794e:	4607      	mov	r7, r0
 8007950:	4611      	mov	r1, r2
 8007952:	4628      	mov	r0, r5
 8007954:	4614      	mov	r4, r2
 8007956:	f7ff ffdd 	bl	8007914 <__mcmp>
 800795a:	1e06      	subs	r6, r0, #0
 800795c:	d108      	bne.n	8007970 <__mdiff+0x28>
 800795e:	4631      	mov	r1, r6
 8007960:	4638      	mov	r0, r7
 8007962:	f7ff fdc2 	bl	80074ea <_Balloc>
 8007966:	2301      	movs	r3, #1
 8007968:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800796c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007970:	bfa4      	itt	ge
 8007972:	4623      	movge	r3, r4
 8007974:	462c      	movge	r4, r5
 8007976:	4638      	mov	r0, r7
 8007978:	6861      	ldr	r1, [r4, #4]
 800797a:	bfa6      	itte	ge
 800797c:	461d      	movge	r5, r3
 800797e:	2600      	movge	r6, #0
 8007980:	2601      	movlt	r6, #1
 8007982:	f7ff fdb2 	bl	80074ea <_Balloc>
 8007986:	692b      	ldr	r3, [r5, #16]
 8007988:	60c6      	str	r6, [r0, #12]
 800798a:	6926      	ldr	r6, [r4, #16]
 800798c:	f105 0914 	add.w	r9, r5, #20
 8007990:	f104 0214 	add.w	r2, r4, #20
 8007994:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007998:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800799c:	f100 0514 	add.w	r5, r0, #20
 80079a0:	f04f 0e00 	mov.w	lr, #0
 80079a4:	f852 ab04 	ldr.w	sl, [r2], #4
 80079a8:	f859 4b04 	ldr.w	r4, [r9], #4
 80079ac:	fa1e f18a 	uxtah	r1, lr, sl
 80079b0:	b2a3      	uxth	r3, r4
 80079b2:	1ac9      	subs	r1, r1, r3
 80079b4:	0c23      	lsrs	r3, r4, #16
 80079b6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80079ba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80079be:	b289      	uxth	r1, r1
 80079c0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80079c4:	45c8      	cmp	r8, r9
 80079c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80079ca:	4694      	mov	ip, r2
 80079cc:	f845 3b04 	str.w	r3, [r5], #4
 80079d0:	d8e8      	bhi.n	80079a4 <__mdiff+0x5c>
 80079d2:	45bc      	cmp	ip, r7
 80079d4:	d304      	bcc.n	80079e0 <__mdiff+0x98>
 80079d6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80079da:	b183      	cbz	r3, 80079fe <__mdiff+0xb6>
 80079dc:	6106      	str	r6, [r0, #16]
 80079de:	e7c5      	b.n	800796c <__mdiff+0x24>
 80079e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80079e4:	fa1e f381 	uxtah	r3, lr, r1
 80079e8:	141a      	asrs	r2, r3, #16
 80079ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079f4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80079f8:	f845 3b04 	str.w	r3, [r5], #4
 80079fc:	e7e9      	b.n	80079d2 <__mdiff+0x8a>
 80079fe:	3e01      	subs	r6, #1
 8007a00:	e7e9      	b.n	80079d6 <__mdiff+0x8e>

08007a02 <__d2b>:
 8007a02:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a06:	460e      	mov	r6, r1
 8007a08:	2101      	movs	r1, #1
 8007a0a:	ec59 8b10 	vmov	r8, r9, d0
 8007a0e:	4615      	mov	r5, r2
 8007a10:	f7ff fd6b 	bl	80074ea <_Balloc>
 8007a14:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007a18:	4607      	mov	r7, r0
 8007a1a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a1e:	bb34      	cbnz	r4, 8007a6e <__d2b+0x6c>
 8007a20:	9301      	str	r3, [sp, #4]
 8007a22:	f1b8 0300 	subs.w	r3, r8, #0
 8007a26:	d027      	beq.n	8007a78 <__d2b+0x76>
 8007a28:	a802      	add	r0, sp, #8
 8007a2a:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007a2e:	f7ff fe01 	bl	8007634 <__lo0bits>
 8007a32:	9900      	ldr	r1, [sp, #0]
 8007a34:	b1f0      	cbz	r0, 8007a74 <__d2b+0x72>
 8007a36:	9a01      	ldr	r2, [sp, #4]
 8007a38:	f1c0 0320 	rsb	r3, r0, #32
 8007a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a40:	430b      	orrs	r3, r1
 8007a42:	40c2      	lsrs	r2, r0
 8007a44:	617b      	str	r3, [r7, #20]
 8007a46:	9201      	str	r2, [sp, #4]
 8007a48:	9b01      	ldr	r3, [sp, #4]
 8007a4a:	61bb      	str	r3, [r7, #24]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	bf14      	ite	ne
 8007a50:	2102      	movne	r1, #2
 8007a52:	2101      	moveq	r1, #1
 8007a54:	6139      	str	r1, [r7, #16]
 8007a56:	b1c4      	cbz	r4, 8007a8a <__d2b+0x88>
 8007a58:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007a5c:	4404      	add	r4, r0
 8007a5e:	6034      	str	r4, [r6, #0]
 8007a60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a64:	6028      	str	r0, [r5, #0]
 8007a66:	4638      	mov	r0, r7
 8007a68:	b003      	add	sp, #12
 8007a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a72:	e7d5      	b.n	8007a20 <__d2b+0x1e>
 8007a74:	6179      	str	r1, [r7, #20]
 8007a76:	e7e7      	b.n	8007a48 <__d2b+0x46>
 8007a78:	a801      	add	r0, sp, #4
 8007a7a:	f7ff fddb 	bl	8007634 <__lo0bits>
 8007a7e:	9b01      	ldr	r3, [sp, #4]
 8007a80:	617b      	str	r3, [r7, #20]
 8007a82:	2101      	movs	r1, #1
 8007a84:	6139      	str	r1, [r7, #16]
 8007a86:	3020      	adds	r0, #32
 8007a88:	e7e5      	b.n	8007a56 <__d2b+0x54>
 8007a8a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007a8e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a92:	6030      	str	r0, [r6, #0]
 8007a94:	6918      	ldr	r0, [r3, #16]
 8007a96:	f7ff fdae 	bl	80075f6 <__hi0bits>
 8007a9a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007a9e:	e7e1      	b.n	8007a64 <__d2b+0x62>

08007aa0 <_calloc_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	fb02 f401 	mul.w	r4, r2, r1
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	f000 f856 	bl	8007b58 <_malloc_r>
 8007aac:	4605      	mov	r5, r0
 8007aae:	b118      	cbz	r0, 8007ab8 <_calloc_r+0x18>
 8007ab0:	4622      	mov	r2, r4
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	f7fe fa30 	bl	8005f18 <memset>
 8007ab8:	4628      	mov	r0, r5
 8007aba:	bd38      	pop	{r3, r4, r5, pc}

08007abc <_free_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4605      	mov	r5, r0
 8007ac0:	2900      	cmp	r1, #0
 8007ac2:	d045      	beq.n	8007b50 <_free_r+0x94>
 8007ac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ac8:	1f0c      	subs	r4, r1, #4
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	bfb8      	it	lt
 8007ace:	18e4      	addlt	r4, r4, r3
 8007ad0:	f000 fa29 	bl	8007f26 <__malloc_lock>
 8007ad4:	4a1f      	ldr	r2, [pc, #124]	; (8007b54 <_free_r+0x98>)
 8007ad6:	6813      	ldr	r3, [r2, #0]
 8007ad8:	4610      	mov	r0, r2
 8007ada:	b933      	cbnz	r3, 8007aea <_free_r+0x2e>
 8007adc:	6063      	str	r3, [r4, #4]
 8007ade:	6014      	str	r4, [r2, #0]
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ae6:	f000 ba1f 	b.w	8007f28 <__malloc_unlock>
 8007aea:	42a3      	cmp	r3, r4
 8007aec:	d90c      	bls.n	8007b08 <_free_r+0x4c>
 8007aee:	6821      	ldr	r1, [r4, #0]
 8007af0:	1862      	adds	r2, r4, r1
 8007af2:	4293      	cmp	r3, r2
 8007af4:	bf04      	itt	eq
 8007af6:	681a      	ldreq	r2, [r3, #0]
 8007af8:	685b      	ldreq	r3, [r3, #4]
 8007afa:	6063      	str	r3, [r4, #4]
 8007afc:	bf04      	itt	eq
 8007afe:	1852      	addeq	r2, r2, r1
 8007b00:	6022      	streq	r2, [r4, #0]
 8007b02:	6004      	str	r4, [r0, #0]
 8007b04:	e7ec      	b.n	8007ae0 <_free_r+0x24>
 8007b06:	4613      	mov	r3, r2
 8007b08:	685a      	ldr	r2, [r3, #4]
 8007b0a:	b10a      	cbz	r2, 8007b10 <_free_r+0x54>
 8007b0c:	42a2      	cmp	r2, r4
 8007b0e:	d9fa      	bls.n	8007b06 <_free_r+0x4a>
 8007b10:	6819      	ldr	r1, [r3, #0]
 8007b12:	1858      	adds	r0, r3, r1
 8007b14:	42a0      	cmp	r0, r4
 8007b16:	d10b      	bne.n	8007b30 <_free_r+0x74>
 8007b18:	6820      	ldr	r0, [r4, #0]
 8007b1a:	4401      	add	r1, r0
 8007b1c:	1858      	adds	r0, r3, r1
 8007b1e:	4282      	cmp	r2, r0
 8007b20:	6019      	str	r1, [r3, #0]
 8007b22:	d1dd      	bne.n	8007ae0 <_free_r+0x24>
 8007b24:	6810      	ldr	r0, [r2, #0]
 8007b26:	6852      	ldr	r2, [r2, #4]
 8007b28:	605a      	str	r2, [r3, #4]
 8007b2a:	4401      	add	r1, r0
 8007b2c:	6019      	str	r1, [r3, #0]
 8007b2e:	e7d7      	b.n	8007ae0 <_free_r+0x24>
 8007b30:	d902      	bls.n	8007b38 <_free_r+0x7c>
 8007b32:	230c      	movs	r3, #12
 8007b34:	602b      	str	r3, [r5, #0]
 8007b36:	e7d3      	b.n	8007ae0 <_free_r+0x24>
 8007b38:	6820      	ldr	r0, [r4, #0]
 8007b3a:	1821      	adds	r1, r4, r0
 8007b3c:	428a      	cmp	r2, r1
 8007b3e:	bf04      	itt	eq
 8007b40:	6811      	ldreq	r1, [r2, #0]
 8007b42:	6852      	ldreq	r2, [r2, #4]
 8007b44:	6062      	str	r2, [r4, #4]
 8007b46:	bf04      	itt	eq
 8007b48:	1809      	addeq	r1, r1, r0
 8007b4a:	6021      	streq	r1, [r4, #0]
 8007b4c:	605c      	str	r4, [r3, #4]
 8007b4e:	e7c7      	b.n	8007ae0 <_free_r+0x24>
 8007b50:	bd38      	pop	{r3, r4, r5, pc}
 8007b52:	bf00      	nop
 8007b54:	20000200 	.word	0x20000200

08007b58 <_malloc_r>:
 8007b58:	b570      	push	{r4, r5, r6, lr}
 8007b5a:	1ccd      	adds	r5, r1, #3
 8007b5c:	f025 0503 	bic.w	r5, r5, #3
 8007b60:	3508      	adds	r5, #8
 8007b62:	2d0c      	cmp	r5, #12
 8007b64:	bf38      	it	cc
 8007b66:	250c      	movcc	r5, #12
 8007b68:	2d00      	cmp	r5, #0
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	db01      	blt.n	8007b72 <_malloc_r+0x1a>
 8007b6e:	42a9      	cmp	r1, r5
 8007b70:	d903      	bls.n	8007b7a <_malloc_r+0x22>
 8007b72:	230c      	movs	r3, #12
 8007b74:	6033      	str	r3, [r6, #0]
 8007b76:	2000      	movs	r0, #0
 8007b78:	bd70      	pop	{r4, r5, r6, pc}
 8007b7a:	f000 f9d4 	bl	8007f26 <__malloc_lock>
 8007b7e:	4a21      	ldr	r2, [pc, #132]	; (8007c04 <_malloc_r+0xac>)
 8007b80:	6814      	ldr	r4, [r2, #0]
 8007b82:	4621      	mov	r1, r4
 8007b84:	b991      	cbnz	r1, 8007bac <_malloc_r+0x54>
 8007b86:	4c20      	ldr	r4, [pc, #128]	; (8007c08 <_malloc_r+0xb0>)
 8007b88:	6823      	ldr	r3, [r4, #0]
 8007b8a:	b91b      	cbnz	r3, 8007b94 <_malloc_r+0x3c>
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f000 f98f 	bl	8007eb0 <_sbrk_r>
 8007b92:	6020      	str	r0, [r4, #0]
 8007b94:	4629      	mov	r1, r5
 8007b96:	4630      	mov	r0, r6
 8007b98:	f000 f98a 	bl	8007eb0 <_sbrk_r>
 8007b9c:	1c43      	adds	r3, r0, #1
 8007b9e:	d124      	bne.n	8007bea <_malloc_r+0x92>
 8007ba0:	230c      	movs	r3, #12
 8007ba2:	6033      	str	r3, [r6, #0]
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	f000 f9bf 	bl	8007f28 <__malloc_unlock>
 8007baa:	e7e4      	b.n	8007b76 <_malloc_r+0x1e>
 8007bac:	680b      	ldr	r3, [r1, #0]
 8007bae:	1b5b      	subs	r3, r3, r5
 8007bb0:	d418      	bmi.n	8007be4 <_malloc_r+0x8c>
 8007bb2:	2b0b      	cmp	r3, #11
 8007bb4:	d90f      	bls.n	8007bd6 <_malloc_r+0x7e>
 8007bb6:	600b      	str	r3, [r1, #0]
 8007bb8:	50cd      	str	r5, [r1, r3]
 8007bba:	18cc      	adds	r4, r1, r3
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	f000 f9b3 	bl	8007f28 <__malloc_unlock>
 8007bc2:	f104 000b 	add.w	r0, r4, #11
 8007bc6:	1d23      	adds	r3, r4, #4
 8007bc8:	f020 0007 	bic.w	r0, r0, #7
 8007bcc:	1ac3      	subs	r3, r0, r3
 8007bce:	d0d3      	beq.n	8007b78 <_malloc_r+0x20>
 8007bd0:	425a      	negs	r2, r3
 8007bd2:	50e2      	str	r2, [r4, r3]
 8007bd4:	e7d0      	b.n	8007b78 <_malloc_r+0x20>
 8007bd6:	428c      	cmp	r4, r1
 8007bd8:	684b      	ldr	r3, [r1, #4]
 8007bda:	bf16      	itet	ne
 8007bdc:	6063      	strne	r3, [r4, #4]
 8007bde:	6013      	streq	r3, [r2, #0]
 8007be0:	460c      	movne	r4, r1
 8007be2:	e7eb      	b.n	8007bbc <_malloc_r+0x64>
 8007be4:	460c      	mov	r4, r1
 8007be6:	6849      	ldr	r1, [r1, #4]
 8007be8:	e7cc      	b.n	8007b84 <_malloc_r+0x2c>
 8007bea:	1cc4      	adds	r4, r0, #3
 8007bec:	f024 0403 	bic.w	r4, r4, #3
 8007bf0:	42a0      	cmp	r0, r4
 8007bf2:	d005      	beq.n	8007c00 <_malloc_r+0xa8>
 8007bf4:	1a21      	subs	r1, r4, r0
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	f000 f95a 	bl	8007eb0 <_sbrk_r>
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	d0cf      	beq.n	8007ba0 <_malloc_r+0x48>
 8007c00:	6025      	str	r5, [r4, #0]
 8007c02:	e7db      	b.n	8007bbc <_malloc_r+0x64>
 8007c04:	20000200 	.word	0x20000200
 8007c08:	20000204 	.word	0x20000204

08007c0c <__ssputs_r>:
 8007c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c10:	688e      	ldr	r6, [r1, #8]
 8007c12:	429e      	cmp	r6, r3
 8007c14:	4682      	mov	sl, r0
 8007c16:	460c      	mov	r4, r1
 8007c18:	4690      	mov	r8, r2
 8007c1a:	4699      	mov	r9, r3
 8007c1c:	d837      	bhi.n	8007c8e <__ssputs_r+0x82>
 8007c1e:	898a      	ldrh	r2, [r1, #12]
 8007c20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c24:	d031      	beq.n	8007c8a <__ssputs_r+0x7e>
 8007c26:	6825      	ldr	r5, [r4, #0]
 8007c28:	6909      	ldr	r1, [r1, #16]
 8007c2a:	1a6f      	subs	r7, r5, r1
 8007c2c:	6965      	ldr	r5, [r4, #20]
 8007c2e:	2302      	movs	r3, #2
 8007c30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c34:	fb95 f5f3 	sdiv	r5, r5, r3
 8007c38:	f109 0301 	add.w	r3, r9, #1
 8007c3c:	443b      	add	r3, r7
 8007c3e:	429d      	cmp	r5, r3
 8007c40:	bf38      	it	cc
 8007c42:	461d      	movcc	r5, r3
 8007c44:	0553      	lsls	r3, r2, #21
 8007c46:	d530      	bpl.n	8007caa <__ssputs_r+0x9e>
 8007c48:	4629      	mov	r1, r5
 8007c4a:	f7ff ff85 	bl	8007b58 <_malloc_r>
 8007c4e:	4606      	mov	r6, r0
 8007c50:	b950      	cbnz	r0, 8007c68 <__ssputs_r+0x5c>
 8007c52:	230c      	movs	r3, #12
 8007c54:	f8ca 3000 	str.w	r3, [sl]
 8007c58:	89a3      	ldrh	r3, [r4, #12]
 8007c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c5e:	81a3      	strh	r3, [r4, #12]
 8007c60:	f04f 30ff 	mov.w	r0, #4294967295
 8007c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c68:	463a      	mov	r2, r7
 8007c6a:	6921      	ldr	r1, [r4, #16]
 8007c6c:	f7ff fc32 	bl	80074d4 <memcpy>
 8007c70:	89a3      	ldrh	r3, [r4, #12]
 8007c72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c7a:	81a3      	strh	r3, [r4, #12]
 8007c7c:	6126      	str	r6, [r4, #16]
 8007c7e:	6165      	str	r5, [r4, #20]
 8007c80:	443e      	add	r6, r7
 8007c82:	1bed      	subs	r5, r5, r7
 8007c84:	6026      	str	r6, [r4, #0]
 8007c86:	60a5      	str	r5, [r4, #8]
 8007c88:	464e      	mov	r6, r9
 8007c8a:	454e      	cmp	r6, r9
 8007c8c:	d900      	bls.n	8007c90 <__ssputs_r+0x84>
 8007c8e:	464e      	mov	r6, r9
 8007c90:	4632      	mov	r2, r6
 8007c92:	4641      	mov	r1, r8
 8007c94:	6820      	ldr	r0, [r4, #0]
 8007c96:	f000 f92d 	bl	8007ef4 <memmove>
 8007c9a:	68a3      	ldr	r3, [r4, #8]
 8007c9c:	1b9b      	subs	r3, r3, r6
 8007c9e:	60a3      	str	r3, [r4, #8]
 8007ca0:	6823      	ldr	r3, [r4, #0]
 8007ca2:	441e      	add	r6, r3
 8007ca4:	6026      	str	r6, [r4, #0]
 8007ca6:	2000      	movs	r0, #0
 8007ca8:	e7dc      	b.n	8007c64 <__ssputs_r+0x58>
 8007caa:	462a      	mov	r2, r5
 8007cac:	f000 f93d 	bl	8007f2a <_realloc_r>
 8007cb0:	4606      	mov	r6, r0
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d1e2      	bne.n	8007c7c <__ssputs_r+0x70>
 8007cb6:	6921      	ldr	r1, [r4, #16]
 8007cb8:	4650      	mov	r0, sl
 8007cba:	f7ff feff 	bl	8007abc <_free_r>
 8007cbe:	e7c8      	b.n	8007c52 <__ssputs_r+0x46>

08007cc0 <_svfiprintf_r>:
 8007cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc4:	461d      	mov	r5, r3
 8007cc6:	898b      	ldrh	r3, [r1, #12]
 8007cc8:	061f      	lsls	r7, r3, #24
 8007cca:	b09d      	sub	sp, #116	; 0x74
 8007ccc:	4680      	mov	r8, r0
 8007cce:	460c      	mov	r4, r1
 8007cd0:	4616      	mov	r6, r2
 8007cd2:	d50f      	bpl.n	8007cf4 <_svfiprintf_r+0x34>
 8007cd4:	690b      	ldr	r3, [r1, #16]
 8007cd6:	b96b      	cbnz	r3, 8007cf4 <_svfiprintf_r+0x34>
 8007cd8:	2140      	movs	r1, #64	; 0x40
 8007cda:	f7ff ff3d 	bl	8007b58 <_malloc_r>
 8007cde:	6020      	str	r0, [r4, #0]
 8007ce0:	6120      	str	r0, [r4, #16]
 8007ce2:	b928      	cbnz	r0, 8007cf0 <_svfiprintf_r+0x30>
 8007ce4:	230c      	movs	r3, #12
 8007ce6:	f8c8 3000 	str.w	r3, [r8]
 8007cea:	f04f 30ff 	mov.w	r0, #4294967295
 8007cee:	e0c8      	b.n	8007e82 <_svfiprintf_r+0x1c2>
 8007cf0:	2340      	movs	r3, #64	; 0x40
 8007cf2:	6163      	str	r3, [r4, #20]
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cf8:	2320      	movs	r3, #32
 8007cfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cfe:	2330      	movs	r3, #48	; 0x30
 8007d00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d04:	9503      	str	r5, [sp, #12]
 8007d06:	f04f 0b01 	mov.w	fp, #1
 8007d0a:	4637      	mov	r7, r6
 8007d0c:	463d      	mov	r5, r7
 8007d0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007d12:	b10b      	cbz	r3, 8007d18 <_svfiprintf_r+0x58>
 8007d14:	2b25      	cmp	r3, #37	; 0x25
 8007d16:	d13e      	bne.n	8007d96 <_svfiprintf_r+0xd6>
 8007d18:	ebb7 0a06 	subs.w	sl, r7, r6
 8007d1c:	d00b      	beq.n	8007d36 <_svfiprintf_r+0x76>
 8007d1e:	4653      	mov	r3, sl
 8007d20:	4632      	mov	r2, r6
 8007d22:	4621      	mov	r1, r4
 8007d24:	4640      	mov	r0, r8
 8007d26:	f7ff ff71 	bl	8007c0c <__ssputs_r>
 8007d2a:	3001      	adds	r0, #1
 8007d2c:	f000 80a4 	beq.w	8007e78 <_svfiprintf_r+0x1b8>
 8007d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d32:	4453      	add	r3, sl
 8007d34:	9309      	str	r3, [sp, #36]	; 0x24
 8007d36:	783b      	ldrb	r3, [r7, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 809d 	beq.w	8007e78 <_svfiprintf_r+0x1b8>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f04f 32ff 	mov.w	r2, #4294967295
 8007d44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d48:	9304      	str	r3, [sp, #16]
 8007d4a:	9307      	str	r3, [sp, #28]
 8007d4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d50:	931a      	str	r3, [sp, #104]	; 0x68
 8007d52:	462f      	mov	r7, r5
 8007d54:	2205      	movs	r2, #5
 8007d56:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007d5a:	4850      	ldr	r0, [pc, #320]	; (8007e9c <_svfiprintf_r+0x1dc>)
 8007d5c:	f7f8 fa50 	bl	8000200 <memchr>
 8007d60:	9b04      	ldr	r3, [sp, #16]
 8007d62:	b9d0      	cbnz	r0, 8007d9a <_svfiprintf_r+0xda>
 8007d64:	06d9      	lsls	r1, r3, #27
 8007d66:	bf44      	itt	mi
 8007d68:	2220      	movmi	r2, #32
 8007d6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d6e:	071a      	lsls	r2, r3, #28
 8007d70:	bf44      	itt	mi
 8007d72:	222b      	movmi	r2, #43	; 0x2b
 8007d74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d78:	782a      	ldrb	r2, [r5, #0]
 8007d7a:	2a2a      	cmp	r2, #42	; 0x2a
 8007d7c:	d015      	beq.n	8007daa <_svfiprintf_r+0xea>
 8007d7e:	9a07      	ldr	r2, [sp, #28]
 8007d80:	462f      	mov	r7, r5
 8007d82:	2000      	movs	r0, #0
 8007d84:	250a      	movs	r5, #10
 8007d86:	4639      	mov	r1, r7
 8007d88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d8c:	3b30      	subs	r3, #48	; 0x30
 8007d8e:	2b09      	cmp	r3, #9
 8007d90:	d94d      	bls.n	8007e2e <_svfiprintf_r+0x16e>
 8007d92:	b1b8      	cbz	r0, 8007dc4 <_svfiprintf_r+0x104>
 8007d94:	e00f      	b.n	8007db6 <_svfiprintf_r+0xf6>
 8007d96:	462f      	mov	r7, r5
 8007d98:	e7b8      	b.n	8007d0c <_svfiprintf_r+0x4c>
 8007d9a:	4a40      	ldr	r2, [pc, #256]	; (8007e9c <_svfiprintf_r+0x1dc>)
 8007d9c:	1a80      	subs	r0, r0, r2
 8007d9e:	fa0b f000 	lsl.w	r0, fp, r0
 8007da2:	4318      	orrs	r0, r3
 8007da4:	9004      	str	r0, [sp, #16]
 8007da6:	463d      	mov	r5, r7
 8007da8:	e7d3      	b.n	8007d52 <_svfiprintf_r+0x92>
 8007daa:	9a03      	ldr	r2, [sp, #12]
 8007dac:	1d11      	adds	r1, r2, #4
 8007dae:	6812      	ldr	r2, [r2, #0]
 8007db0:	9103      	str	r1, [sp, #12]
 8007db2:	2a00      	cmp	r2, #0
 8007db4:	db01      	blt.n	8007dba <_svfiprintf_r+0xfa>
 8007db6:	9207      	str	r2, [sp, #28]
 8007db8:	e004      	b.n	8007dc4 <_svfiprintf_r+0x104>
 8007dba:	4252      	negs	r2, r2
 8007dbc:	f043 0302 	orr.w	r3, r3, #2
 8007dc0:	9207      	str	r2, [sp, #28]
 8007dc2:	9304      	str	r3, [sp, #16]
 8007dc4:	783b      	ldrb	r3, [r7, #0]
 8007dc6:	2b2e      	cmp	r3, #46	; 0x2e
 8007dc8:	d10c      	bne.n	8007de4 <_svfiprintf_r+0x124>
 8007dca:	787b      	ldrb	r3, [r7, #1]
 8007dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8007dce:	d133      	bne.n	8007e38 <_svfiprintf_r+0x178>
 8007dd0:	9b03      	ldr	r3, [sp, #12]
 8007dd2:	1d1a      	adds	r2, r3, #4
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	9203      	str	r2, [sp, #12]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	bfb8      	it	lt
 8007ddc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007de0:	3702      	adds	r7, #2
 8007de2:	9305      	str	r3, [sp, #20]
 8007de4:	4d2e      	ldr	r5, [pc, #184]	; (8007ea0 <_svfiprintf_r+0x1e0>)
 8007de6:	7839      	ldrb	r1, [r7, #0]
 8007de8:	2203      	movs	r2, #3
 8007dea:	4628      	mov	r0, r5
 8007dec:	f7f8 fa08 	bl	8000200 <memchr>
 8007df0:	b138      	cbz	r0, 8007e02 <_svfiprintf_r+0x142>
 8007df2:	2340      	movs	r3, #64	; 0x40
 8007df4:	1b40      	subs	r0, r0, r5
 8007df6:	fa03 f000 	lsl.w	r0, r3, r0
 8007dfa:	9b04      	ldr	r3, [sp, #16]
 8007dfc:	4303      	orrs	r3, r0
 8007dfe:	3701      	adds	r7, #1
 8007e00:	9304      	str	r3, [sp, #16]
 8007e02:	7839      	ldrb	r1, [r7, #0]
 8007e04:	4827      	ldr	r0, [pc, #156]	; (8007ea4 <_svfiprintf_r+0x1e4>)
 8007e06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e0a:	2206      	movs	r2, #6
 8007e0c:	1c7e      	adds	r6, r7, #1
 8007e0e:	f7f8 f9f7 	bl	8000200 <memchr>
 8007e12:	2800      	cmp	r0, #0
 8007e14:	d038      	beq.n	8007e88 <_svfiprintf_r+0x1c8>
 8007e16:	4b24      	ldr	r3, [pc, #144]	; (8007ea8 <_svfiprintf_r+0x1e8>)
 8007e18:	bb13      	cbnz	r3, 8007e60 <_svfiprintf_r+0x1a0>
 8007e1a:	9b03      	ldr	r3, [sp, #12]
 8007e1c:	3307      	adds	r3, #7
 8007e1e:	f023 0307 	bic.w	r3, r3, #7
 8007e22:	3308      	adds	r3, #8
 8007e24:	9303      	str	r3, [sp, #12]
 8007e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e28:	444b      	add	r3, r9
 8007e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e2c:	e76d      	b.n	8007d0a <_svfiprintf_r+0x4a>
 8007e2e:	fb05 3202 	mla	r2, r5, r2, r3
 8007e32:	2001      	movs	r0, #1
 8007e34:	460f      	mov	r7, r1
 8007e36:	e7a6      	b.n	8007d86 <_svfiprintf_r+0xc6>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	3701      	adds	r7, #1
 8007e3c:	9305      	str	r3, [sp, #20]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	250a      	movs	r5, #10
 8007e42:	4638      	mov	r0, r7
 8007e44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e48:	3a30      	subs	r2, #48	; 0x30
 8007e4a:	2a09      	cmp	r2, #9
 8007e4c:	d903      	bls.n	8007e56 <_svfiprintf_r+0x196>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d0c8      	beq.n	8007de4 <_svfiprintf_r+0x124>
 8007e52:	9105      	str	r1, [sp, #20]
 8007e54:	e7c6      	b.n	8007de4 <_svfiprintf_r+0x124>
 8007e56:	fb05 2101 	mla	r1, r5, r1, r2
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	4607      	mov	r7, r0
 8007e5e:	e7f0      	b.n	8007e42 <_svfiprintf_r+0x182>
 8007e60:	ab03      	add	r3, sp, #12
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	4622      	mov	r2, r4
 8007e66:	4b11      	ldr	r3, [pc, #68]	; (8007eac <_svfiprintf_r+0x1ec>)
 8007e68:	a904      	add	r1, sp, #16
 8007e6a:	4640      	mov	r0, r8
 8007e6c:	f7fe f8f0 	bl	8006050 <_printf_float>
 8007e70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007e74:	4681      	mov	r9, r0
 8007e76:	d1d6      	bne.n	8007e26 <_svfiprintf_r+0x166>
 8007e78:	89a3      	ldrh	r3, [r4, #12]
 8007e7a:	065b      	lsls	r3, r3, #25
 8007e7c:	f53f af35 	bmi.w	8007cea <_svfiprintf_r+0x2a>
 8007e80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e82:	b01d      	add	sp, #116	; 0x74
 8007e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e88:	ab03      	add	r3, sp, #12
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	4622      	mov	r2, r4
 8007e8e:	4b07      	ldr	r3, [pc, #28]	; (8007eac <_svfiprintf_r+0x1ec>)
 8007e90:	a904      	add	r1, sp, #16
 8007e92:	4640      	mov	r0, r8
 8007e94:	f7fe fb92 	bl	80065bc <_printf_i>
 8007e98:	e7ea      	b.n	8007e70 <_svfiprintf_r+0x1b0>
 8007e9a:	bf00      	nop
 8007e9c:	08008bcc 	.word	0x08008bcc
 8007ea0:	08008bd2 	.word	0x08008bd2
 8007ea4:	08008bd6 	.word	0x08008bd6
 8007ea8:	08006051 	.word	0x08006051
 8007eac:	08007c0d 	.word	0x08007c0d

08007eb0 <_sbrk_r>:
 8007eb0:	b538      	push	{r3, r4, r5, lr}
 8007eb2:	4c06      	ldr	r4, [pc, #24]	; (8007ecc <_sbrk_r+0x1c>)
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	4608      	mov	r0, r1
 8007eba:	6023      	str	r3, [r4, #0]
 8007ebc:	f7fa faf0 	bl	80024a0 <_sbrk>
 8007ec0:	1c43      	adds	r3, r0, #1
 8007ec2:	d102      	bne.n	8007eca <_sbrk_r+0x1a>
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	b103      	cbz	r3, 8007eca <_sbrk_r+0x1a>
 8007ec8:	602b      	str	r3, [r5, #0]
 8007eca:	bd38      	pop	{r3, r4, r5, pc}
 8007ecc:	20000448 	.word	0x20000448

08007ed0 <__ascii_mbtowc>:
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	b901      	cbnz	r1, 8007ed6 <__ascii_mbtowc+0x6>
 8007ed4:	a901      	add	r1, sp, #4
 8007ed6:	b142      	cbz	r2, 8007eea <__ascii_mbtowc+0x1a>
 8007ed8:	b14b      	cbz	r3, 8007eee <__ascii_mbtowc+0x1e>
 8007eda:	7813      	ldrb	r3, [r2, #0]
 8007edc:	600b      	str	r3, [r1, #0]
 8007ede:	7812      	ldrb	r2, [r2, #0]
 8007ee0:	1c10      	adds	r0, r2, #0
 8007ee2:	bf18      	it	ne
 8007ee4:	2001      	movne	r0, #1
 8007ee6:	b002      	add	sp, #8
 8007ee8:	4770      	bx	lr
 8007eea:	4610      	mov	r0, r2
 8007eec:	e7fb      	b.n	8007ee6 <__ascii_mbtowc+0x16>
 8007eee:	f06f 0001 	mvn.w	r0, #1
 8007ef2:	e7f8      	b.n	8007ee6 <__ascii_mbtowc+0x16>

08007ef4 <memmove>:
 8007ef4:	4288      	cmp	r0, r1
 8007ef6:	b510      	push	{r4, lr}
 8007ef8:	eb01 0302 	add.w	r3, r1, r2
 8007efc:	d807      	bhi.n	8007f0e <memmove+0x1a>
 8007efe:	1e42      	subs	r2, r0, #1
 8007f00:	4299      	cmp	r1, r3
 8007f02:	d00a      	beq.n	8007f1a <memmove+0x26>
 8007f04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f08:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007f0c:	e7f8      	b.n	8007f00 <memmove+0xc>
 8007f0e:	4283      	cmp	r3, r0
 8007f10:	d9f5      	bls.n	8007efe <memmove+0xa>
 8007f12:	1881      	adds	r1, r0, r2
 8007f14:	1ad2      	subs	r2, r2, r3
 8007f16:	42d3      	cmn	r3, r2
 8007f18:	d100      	bne.n	8007f1c <memmove+0x28>
 8007f1a:	bd10      	pop	{r4, pc}
 8007f1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f20:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007f24:	e7f7      	b.n	8007f16 <memmove+0x22>

08007f26 <__malloc_lock>:
 8007f26:	4770      	bx	lr

08007f28 <__malloc_unlock>:
 8007f28:	4770      	bx	lr

08007f2a <_realloc_r>:
 8007f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2c:	4607      	mov	r7, r0
 8007f2e:	4614      	mov	r4, r2
 8007f30:	460e      	mov	r6, r1
 8007f32:	b921      	cbnz	r1, 8007f3e <_realloc_r+0x14>
 8007f34:	4611      	mov	r1, r2
 8007f36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f3a:	f7ff be0d 	b.w	8007b58 <_malloc_r>
 8007f3e:	b922      	cbnz	r2, 8007f4a <_realloc_r+0x20>
 8007f40:	f7ff fdbc 	bl	8007abc <_free_r>
 8007f44:	4625      	mov	r5, r4
 8007f46:	4628      	mov	r0, r5
 8007f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f4a:	f000 f821 	bl	8007f90 <_malloc_usable_size_r>
 8007f4e:	42a0      	cmp	r0, r4
 8007f50:	d20f      	bcs.n	8007f72 <_realloc_r+0x48>
 8007f52:	4621      	mov	r1, r4
 8007f54:	4638      	mov	r0, r7
 8007f56:	f7ff fdff 	bl	8007b58 <_malloc_r>
 8007f5a:	4605      	mov	r5, r0
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	d0f2      	beq.n	8007f46 <_realloc_r+0x1c>
 8007f60:	4631      	mov	r1, r6
 8007f62:	4622      	mov	r2, r4
 8007f64:	f7ff fab6 	bl	80074d4 <memcpy>
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4638      	mov	r0, r7
 8007f6c:	f7ff fda6 	bl	8007abc <_free_r>
 8007f70:	e7e9      	b.n	8007f46 <_realloc_r+0x1c>
 8007f72:	4635      	mov	r5, r6
 8007f74:	e7e7      	b.n	8007f46 <_realloc_r+0x1c>

08007f76 <__ascii_wctomb>:
 8007f76:	b149      	cbz	r1, 8007f8c <__ascii_wctomb+0x16>
 8007f78:	2aff      	cmp	r2, #255	; 0xff
 8007f7a:	bf85      	ittet	hi
 8007f7c:	238a      	movhi	r3, #138	; 0x8a
 8007f7e:	6003      	strhi	r3, [r0, #0]
 8007f80:	700a      	strbls	r2, [r1, #0]
 8007f82:	f04f 30ff 	movhi.w	r0, #4294967295
 8007f86:	bf98      	it	ls
 8007f88:	2001      	movls	r0, #1
 8007f8a:	4770      	bx	lr
 8007f8c:	4608      	mov	r0, r1
 8007f8e:	4770      	bx	lr

08007f90 <_malloc_usable_size_r>:
 8007f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f94:	1f18      	subs	r0, r3, #4
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	bfbc      	itt	lt
 8007f9a:	580b      	ldrlt	r3, [r1, r0]
 8007f9c:	18c0      	addlt	r0, r0, r3
 8007f9e:	4770      	bx	lr

08007fa0 <sinf>:
 8007fa0:	ee10 3a10 	vmov	r3, s0
 8007fa4:	b507      	push	{r0, r1, r2, lr}
 8007fa6:	4a1d      	ldr	r2, [pc, #116]	; (800801c <sinf+0x7c>)
 8007fa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fac:	4293      	cmp	r3, r2
 8007fae:	dc05      	bgt.n	8007fbc <sinf+0x1c>
 8007fb0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8008020 <sinf+0x80>
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	f000 fc41 	bl	800883c <__kernel_sinf>
 8007fba:	e004      	b.n	8007fc6 <sinf+0x26>
 8007fbc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007fc0:	db04      	blt.n	8007fcc <sinf+0x2c>
 8007fc2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007fc6:	b003      	add	sp, #12
 8007fc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8007fcc:	4668      	mov	r0, sp
 8007fce:	f000 f829 	bl	8008024 <__ieee754_rem_pio2f>
 8007fd2:	f000 0003 	and.w	r0, r0, #3
 8007fd6:	2801      	cmp	r0, #1
 8007fd8:	d008      	beq.n	8007fec <sinf+0x4c>
 8007fda:	2802      	cmp	r0, #2
 8007fdc:	d00d      	beq.n	8007ffa <sinf+0x5a>
 8007fde:	b9b0      	cbnz	r0, 800800e <sinf+0x6e>
 8007fe0:	2001      	movs	r0, #1
 8007fe2:	eddd 0a01 	vldr	s1, [sp, #4]
 8007fe6:	ed9d 0a00 	vldr	s0, [sp]
 8007fea:	e7e4      	b.n	8007fb6 <sinf+0x16>
 8007fec:	eddd 0a01 	vldr	s1, [sp, #4]
 8007ff0:	ed9d 0a00 	vldr	s0, [sp]
 8007ff4:	f000 f942 	bl	800827c <__kernel_cosf>
 8007ff8:	e7e5      	b.n	8007fc6 <sinf+0x26>
 8007ffa:	2001      	movs	r0, #1
 8007ffc:	eddd 0a01 	vldr	s1, [sp, #4]
 8008000:	ed9d 0a00 	vldr	s0, [sp]
 8008004:	f000 fc1a 	bl	800883c <__kernel_sinf>
 8008008:	eeb1 0a40 	vneg.f32	s0, s0
 800800c:	e7db      	b.n	8007fc6 <sinf+0x26>
 800800e:	eddd 0a01 	vldr	s1, [sp, #4]
 8008012:	ed9d 0a00 	vldr	s0, [sp]
 8008016:	f000 f931 	bl	800827c <__kernel_cosf>
 800801a:	e7f5      	b.n	8008008 <sinf+0x68>
 800801c:	3f490fd8 	.word	0x3f490fd8
 8008020:	00000000 	.word	0x00000000

08008024 <__ieee754_rem_pio2f>:
 8008024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008026:	ee10 6a10 	vmov	r6, s0
 800802a:	4b86      	ldr	r3, [pc, #536]	; (8008244 <__ieee754_rem_pio2f+0x220>)
 800802c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8008030:	429c      	cmp	r4, r3
 8008032:	b087      	sub	sp, #28
 8008034:	4605      	mov	r5, r0
 8008036:	dc05      	bgt.n	8008044 <__ieee754_rem_pio2f+0x20>
 8008038:	2300      	movs	r3, #0
 800803a:	ed85 0a00 	vstr	s0, [r5]
 800803e:	6043      	str	r3, [r0, #4]
 8008040:	2000      	movs	r0, #0
 8008042:	e020      	b.n	8008086 <__ieee754_rem_pio2f+0x62>
 8008044:	4b80      	ldr	r3, [pc, #512]	; (8008248 <__ieee754_rem_pio2f+0x224>)
 8008046:	429c      	cmp	r4, r3
 8008048:	dc38      	bgt.n	80080bc <__ieee754_rem_pio2f+0x98>
 800804a:	2e00      	cmp	r6, #0
 800804c:	f024 040f 	bic.w	r4, r4, #15
 8008050:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800824c <__ieee754_rem_pio2f+0x228>
 8008054:	4b7e      	ldr	r3, [pc, #504]	; (8008250 <__ieee754_rem_pio2f+0x22c>)
 8008056:	dd18      	ble.n	800808a <__ieee754_rem_pio2f+0x66>
 8008058:	429c      	cmp	r4, r3
 800805a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800805e:	bf09      	itett	eq
 8008060:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8008254 <__ieee754_rem_pio2f+0x230>
 8008064:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8008258 <__ieee754_rem_pio2f+0x234>
 8008068:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800806c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800825c <__ieee754_rem_pio2f+0x238>
 8008070:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008074:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008078:	edc0 6a00 	vstr	s13, [r0]
 800807c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008080:	edc0 7a01 	vstr	s15, [r0, #4]
 8008084:	2001      	movs	r0, #1
 8008086:	b007      	add	sp, #28
 8008088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800808a:	429c      	cmp	r4, r3
 800808c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8008090:	bf09      	itett	eq
 8008092:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8008254 <__ieee754_rem_pio2f+0x230>
 8008096:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8008258 <__ieee754_rem_pio2f+0x234>
 800809a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800809e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800825c <__ieee754_rem_pio2f+0x238>
 80080a2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80080a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80080aa:	edc0 6a00 	vstr	s13, [r0]
 80080ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080b2:	edc0 7a01 	vstr	s15, [r0, #4]
 80080b6:	f04f 30ff 	mov.w	r0, #4294967295
 80080ba:	e7e4      	b.n	8008086 <__ieee754_rem_pio2f+0x62>
 80080bc:	4b68      	ldr	r3, [pc, #416]	; (8008260 <__ieee754_rem_pio2f+0x23c>)
 80080be:	429c      	cmp	r4, r3
 80080c0:	dc71      	bgt.n	80081a6 <__ieee754_rem_pio2f+0x182>
 80080c2:	f000 fc03 	bl	80088cc <fabsf>
 80080c6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008264 <__ieee754_rem_pio2f+0x240>
 80080ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80080ce:	eee0 7a07 	vfma.f32	s15, s0, s14
 80080d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080d6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80080da:	ee17 0a90 	vmov	r0, s15
 80080de:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800824c <__ieee754_rem_pio2f+0x228>
 80080e2:	eeb1 7a46 	vneg.f32	s14, s12
 80080e6:	eea7 0a27 	vfma.f32	s0, s14, s15
 80080ea:	281f      	cmp	r0, #31
 80080ec:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008258 <__ieee754_rem_pio2f+0x234>
 80080f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80080f4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80080f8:	ee16 3a90 	vmov	r3, s13
 80080fc:	dc1c      	bgt.n	8008138 <__ieee754_rem_pio2f+0x114>
 80080fe:	1e47      	subs	r7, r0, #1
 8008100:	4959      	ldr	r1, [pc, #356]	; (8008268 <__ieee754_rem_pio2f+0x244>)
 8008102:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8008106:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800810a:	428a      	cmp	r2, r1
 800810c:	d014      	beq.n	8008138 <__ieee754_rem_pio2f+0x114>
 800810e:	602b      	str	r3, [r5, #0]
 8008110:	ed95 7a00 	vldr	s14, [r5]
 8008114:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008118:	2e00      	cmp	r6, #0
 800811a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800811e:	ed85 0a01 	vstr	s0, [r5, #4]
 8008122:	dab0      	bge.n	8008086 <__ieee754_rem_pio2f+0x62>
 8008124:	eeb1 7a47 	vneg.f32	s14, s14
 8008128:	eeb1 0a40 	vneg.f32	s0, s0
 800812c:	ed85 7a00 	vstr	s14, [r5]
 8008130:	ed85 0a01 	vstr	s0, [r5, #4]
 8008134:	4240      	negs	r0, r0
 8008136:	e7a6      	b.n	8008086 <__ieee754_rem_pio2f+0x62>
 8008138:	15e4      	asrs	r4, r4, #23
 800813a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800813e:	1aa2      	subs	r2, r4, r2
 8008140:	2a08      	cmp	r2, #8
 8008142:	dde4      	ble.n	800810e <__ieee754_rem_pio2f+0xea>
 8008144:	eddf 7a43 	vldr	s15, [pc, #268]	; 8008254 <__ieee754_rem_pio2f+0x230>
 8008148:	eef0 6a40 	vmov.f32	s13, s0
 800814c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008150:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008154:	eea7 0a27 	vfma.f32	s0, s14, s15
 8008158:	eddf 7a40 	vldr	s15, [pc, #256]	; 800825c <__ieee754_rem_pio2f+0x238>
 800815c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8008160:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8008164:	eef0 7a40 	vmov.f32	s15, s0
 8008168:	ee15 3a90 	vmov	r3, s11
 800816c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008170:	1aa4      	subs	r4, r4, r2
 8008172:	2c19      	cmp	r4, #25
 8008174:	dc04      	bgt.n	8008180 <__ieee754_rem_pio2f+0x15c>
 8008176:	edc5 5a00 	vstr	s11, [r5]
 800817a:	eeb0 0a66 	vmov.f32	s0, s13
 800817e:	e7c7      	b.n	8008110 <__ieee754_rem_pio2f+0xec>
 8008180:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800826c <__ieee754_rem_pio2f+0x248>
 8008184:	eeb0 0a66 	vmov.f32	s0, s13
 8008188:	eea7 0a25 	vfma.f32	s0, s14, s11
 800818c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008190:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008194:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008270 <__ieee754_rem_pio2f+0x24c>
 8008198:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800819c:	ee30 7a67 	vsub.f32	s14, s0, s15
 80081a0:	ed85 7a00 	vstr	s14, [r5]
 80081a4:	e7b4      	b.n	8008110 <__ieee754_rem_pio2f+0xec>
 80081a6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80081aa:	db06      	blt.n	80081ba <__ieee754_rem_pio2f+0x196>
 80081ac:	ee70 7a40 	vsub.f32	s15, s0, s0
 80081b0:	edc0 7a01 	vstr	s15, [r0, #4]
 80081b4:	edc0 7a00 	vstr	s15, [r0]
 80081b8:	e742      	b.n	8008040 <__ieee754_rem_pio2f+0x1c>
 80081ba:	15e2      	asrs	r2, r4, #23
 80081bc:	3a86      	subs	r2, #134	; 0x86
 80081be:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80081c2:	ee07 3a90 	vmov	s15, r3
 80081c6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80081ca:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8008274 <__ieee754_rem_pio2f+0x250>
 80081ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80081d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80081d6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80081da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80081de:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80081e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80081e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80081ea:	ed8d 7a04 	vstr	s14, [sp, #16]
 80081ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80081f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80081f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081fa:	edcd 7a05 	vstr	s15, [sp, #20]
 80081fe:	d11e      	bne.n	800823e <__ieee754_rem_pio2f+0x21a>
 8008200:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008208:	bf0c      	ite	eq
 800820a:	2301      	moveq	r3, #1
 800820c:	2302      	movne	r3, #2
 800820e:	491a      	ldr	r1, [pc, #104]	; (8008278 <__ieee754_rem_pio2f+0x254>)
 8008210:	9101      	str	r1, [sp, #4]
 8008212:	2102      	movs	r1, #2
 8008214:	9100      	str	r1, [sp, #0]
 8008216:	a803      	add	r0, sp, #12
 8008218:	4629      	mov	r1, r5
 800821a:	f000 f88d 	bl	8008338 <__kernel_rem_pio2f>
 800821e:	2e00      	cmp	r6, #0
 8008220:	f6bf af31 	bge.w	8008086 <__ieee754_rem_pio2f+0x62>
 8008224:	edd5 7a00 	vldr	s15, [r5]
 8008228:	eef1 7a67 	vneg.f32	s15, s15
 800822c:	edc5 7a00 	vstr	s15, [r5]
 8008230:	edd5 7a01 	vldr	s15, [r5, #4]
 8008234:	eef1 7a67 	vneg.f32	s15, s15
 8008238:	edc5 7a01 	vstr	s15, [r5, #4]
 800823c:	e77a      	b.n	8008134 <__ieee754_rem_pio2f+0x110>
 800823e:	2303      	movs	r3, #3
 8008240:	e7e5      	b.n	800820e <__ieee754_rem_pio2f+0x1ea>
 8008242:	bf00      	nop
 8008244:	3f490fd8 	.word	0x3f490fd8
 8008248:	4016cbe3 	.word	0x4016cbe3
 800824c:	3fc90f80 	.word	0x3fc90f80
 8008250:	3fc90fd0 	.word	0x3fc90fd0
 8008254:	37354400 	.word	0x37354400
 8008258:	37354443 	.word	0x37354443
 800825c:	2e85a308 	.word	0x2e85a308
 8008260:	43490f80 	.word	0x43490f80
 8008264:	3f22f984 	.word	0x3f22f984
 8008268:	08008ce8 	.word	0x08008ce8
 800826c:	2e85a300 	.word	0x2e85a300
 8008270:	248d3132 	.word	0x248d3132
 8008274:	43800000 	.word	0x43800000
 8008278:	08008d68 	.word	0x08008d68

0800827c <__kernel_cosf>:
 800827c:	ee10 3a10 	vmov	r3, s0
 8008280:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008284:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008288:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800828c:	da05      	bge.n	800829a <__kernel_cosf+0x1e>
 800828e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008292:	ee17 2a90 	vmov	r2, s15
 8008296:	2a00      	cmp	r2, #0
 8008298:	d03b      	beq.n	8008312 <__kernel_cosf+0x96>
 800829a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800829e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80082a2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008318 <__kernel_cosf+0x9c>
 80082a6:	4a1d      	ldr	r2, [pc, #116]	; (800831c <__kernel_cosf+0xa0>)
 80082a8:	ee66 7a07 	vmul.f32	s15, s12, s14
 80082ac:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8008320 <__kernel_cosf+0xa4>
 80082b0:	eea6 7a25 	vfma.f32	s14, s12, s11
 80082b4:	4293      	cmp	r3, r2
 80082b6:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8008324 <__kernel_cosf+0xa8>
 80082ba:	eee7 5a06 	vfma.f32	s11, s14, s12
 80082be:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008328 <__kernel_cosf+0xac>
 80082c2:	eea5 7a86 	vfma.f32	s14, s11, s12
 80082c6:	eddf 5a19 	vldr	s11, [pc, #100]	; 800832c <__kernel_cosf+0xb0>
 80082ca:	eee7 5a06 	vfma.f32	s11, s14, s12
 80082ce:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8008330 <__kernel_cosf+0xb4>
 80082d2:	eea5 7a86 	vfma.f32	s14, s11, s12
 80082d6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80082da:	ee27 7a06 	vmul.f32	s14, s14, s12
 80082de:	eee6 0a07 	vfma.f32	s1, s12, s14
 80082e2:	dc04      	bgt.n	80082ee <__kernel_cosf+0x72>
 80082e4:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80082e8:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80082ec:	4770      	bx	lr
 80082ee:	4a11      	ldr	r2, [pc, #68]	; (8008334 <__kernel_cosf+0xb8>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	bfda      	itte	le
 80082f4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80082f8:	ee07 3a10 	vmovle	s14, r3
 80082fc:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8008300:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008304:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8008308:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800830c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008310:	4770      	bx	lr
 8008312:	eeb0 0a66 	vmov.f32	s0, s13
 8008316:	4770      	bx	lr
 8008318:	ad47d74e 	.word	0xad47d74e
 800831c:	3e999999 	.word	0x3e999999
 8008320:	310f74f6 	.word	0x310f74f6
 8008324:	b493f27c 	.word	0xb493f27c
 8008328:	37d00d01 	.word	0x37d00d01
 800832c:	bab60b61 	.word	0xbab60b61
 8008330:	3d2aaaab 	.word	0x3d2aaaab
 8008334:	3f480000 	.word	0x3f480000

08008338 <__kernel_rem_pio2f>:
 8008338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833c:	ed2d 8b04 	vpush	{d8-d9}
 8008340:	b0d7      	sub	sp, #348	; 0x15c
 8008342:	469b      	mov	fp, r3
 8008344:	460e      	mov	r6, r1
 8008346:	4bbe      	ldr	r3, [pc, #760]	; (8008640 <__kernel_rem_pio2f+0x308>)
 8008348:	9964      	ldr	r1, [sp, #400]	; 0x190
 800834a:	9002      	str	r0, [sp, #8]
 800834c:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8008350:	9865      	ldr	r0, [sp, #404]	; 0x194
 8008352:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8008650 <__kernel_rem_pio2f+0x318>
 8008356:	1ed1      	subs	r1, r2, #3
 8008358:	2308      	movs	r3, #8
 800835a:	fb91 f1f3 	sdiv	r1, r1, r3
 800835e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8008362:	f10b 3aff 	add.w	sl, fp, #4294967295
 8008366:	1c4c      	adds	r4, r1, #1
 8008368:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800836c:	eba1 050a 	sub.w	r5, r1, sl
 8008370:	aa1a      	add	r2, sp, #104	; 0x68
 8008372:	eb09 070a 	add.w	r7, r9, sl
 8008376:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800837a:	4696      	mov	lr, r2
 800837c:	2300      	movs	r3, #0
 800837e:	42bb      	cmp	r3, r7
 8008380:	dd0f      	ble.n	80083a2 <__kernel_rem_pio2f+0x6a>
 8008382:	af42      	add	r7, sp, #264	; 0x108
 8008384:	2200      	movs	r2, #0
 8008386:	454a      	cmp	r2, r9
 8008388:	dc27      	bgt.n	80083da <__kernel_rem_pio2f+0xa2>
 800838a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800838e:	eb0b 0302 	add.w	r3, fp, r2
 8008392:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8008396:	9d02      	ldr	r5, [sp, #8]
 8008398:	eddf 7aad 	vldr	s15, [pc, #692]	; 8008650 <__kernel_rem_pio2f+0x318>
 800839c:	f04f 0c00 	mov.w	ip, #0
 80083a0:	e015      	b.n	80083ce <__kernel_rem_pio2f+0x96>
 80083a2:	42dd      	cmn	r5, r3
 80083a4:	bf5d      	ittte	pl
 80083a6:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 80083aa:	ee07 2a90 	vmovpl	s15, r2
 80083ae:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80083b2:	eef0 7a47 	vmovmi.f32	s15, s14
 80083b6:	ecee 7a01 	vstmia	lr!, {s15}
 80083ba:	3301      	adds	r3, #1
 80083bc:	e7df      	b.n	800837e <__kernel_rem_pio2f+0x46>
 80083be:	ecf5 6a01 	vldmia	r5!, {s13}
 80083c2:	ed33 7a01 	vldmdb	r3!, {s14}
 80083c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80083ca:	f10c 0c01 	add.w	ip, ip, #1
 80083ce:	45d4      	cmp	ip, sl
 80083d0:	ddf5      	ble.n	80083be <__kernel_rem_pio2f+0x86>
 80083d2:	ece7 7a01 	vstmia	r7!, {s15}
 80083d6:	3201      	adds	r2, #1
 80083d8:	e7d5      	b.n	8008386 <__kernel_rem_pio2f+0x4e>
 80083da:	ab06      	add	r3, sp, #24
 80083dc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80083e0:	9304      	str	r3, [sp, #16]
 80083e2:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800864c <__kernel_rem_pio2f+0x314>
 80083e6:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8008648 <__kernel_rem_pio2f+0x310>
 80083ea:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80083ee:	9303      	str	r3, [sp, #12]
 80083f0:	464d      	mov	r5, r9
 80083f2:	ab56      	add	r3, sp, #344	; 0x158
 80083f4:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80083f8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80083fc:	3f01      	subs	r7, #1
 80083fe:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8008402:	00bf      	lsls	r7, r7, #2
 8008404:	ab56      	add	r3, sp, #344	; 0x158
 8008406:	19da      	adds	r2, r3, r7
 8008408:	3a4c      	subs	r2, #76	; 0x4c
 800840a:	2300      	movs	r3, #0
 800840c:	1ae9      	subs	r1, r5, r3
 800840e:	2900      	cmp	r1, #0
 8008410:	dc4c      	bgt.n	80084ac <__kernel_rem_pio2f+0x174>
 8008412:	4620      	mov	r0, r4
 8008414:	f000 faa4 	bl	8008960 <scalbnf>
 8008418:	eeb0 8a40 	vmov.f32	s16, s0
 800841c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008420:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008424:	f000 fa5a 	bl	80088dc <floorf>
 8008428:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800842c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008430:	2c00      	cmp	r4, #0
 8008432:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008436:	edcd 7a01 	vstr	s15, [sp, #4]
 800843a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800843e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008442:	dd48      	ble.n	80084d6 <__kernel_rem_pio2f+0x19e>
 8008444:	1e69      	subs	r1, r5, #1
 8008446:	ab06      	add	r3, sp, #24
 8008448:	f1c4 0008 	rsb	r0, r4, #8
 800844c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8008450:	9a01      	ldr	r2, [sp, #4]
 8008452:	fa4c f300 	asr.w	r3, ip, r0
 8008456:	441a      	add	r2, r3
 8008458:	4083      	lsls	r3, r0
 800845a:	9201      	str	r2, [sp, #4]
 800845c:	ebac 0203 	sub.w	r2, ip, r3
 8008460:	ab06      	add	r3, sp, #24
 8008462:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8008466:	f1c4 0307 	rsb	r3, r4, #7
 800846a:	fa42 f803 	asr.w	r8, r2, r3
 800846e:	f1b8 0f00 	cmp.w	r8, #0
 8008472:	dd41      	ble.n	80084f8 <__kernel_rem_pio2f+0x1c0>
 8008474:	9b01      	ldr	r3, [sp, #4]
 8008476:	2000      	movs	r0, #0
 8008478:	3301      	adds	r3, #1
 800847a:	9301      	str	r3, [sp, #4]
 800847c:	4601      	mov	r1, r0
 800847e:	4285      	cmp	r5, r0
 8008480:	dc6d      	bgt.n	800855e <__kernel_rem_pio2f+0x226>
 8008482:	2c00      	cmp	r4, #0
 8008484:	dd04      	ble.n	8008490 <__kernel_rem_pio2f+0x158>
 8008486:	2c01      	cmp	r4, #1
 8008488:	d07e      	beq.n	8008588 <__kernel_rem_pio2f+0x250>
 800848a:	2c02      	cmp	r4, #2
 800848c:	f000 8086 	beq.w	800859c <__kernel_rem_pio2f+0x264>
 8008490:	f1b8 0f02 	cmp.w	r8, #2
 8008494:	d130      	bne.n	80084f8 <__kernel_rem_pio2f+0x1c0>
 8008496:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800849a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800849e:	b359      	cbz	r1, 80084f8 <__kernel_rem_pio2f+0x1c0>
 80084a0:	4620      	mov	r0, r4
 80084a2:	f000 fa5d 	bl	8008960 <scalbnf>
 80084a6:	ee38 8a40 	vsub.f32	s16, s16, s0
 80084aa:	e025      	b.n	80084f8 <__kernel_rem_pio2f+0x1c0>
 80084ac:	ee60 7a28 	vmul.f32	s15, s0, s17
 80084b0:	a806      	add	r0, sp, #24
 80084b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084ba:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80084be:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80084c2:	ee10 1a10 	vmov	r1, s0
 80084c6:	ed32 0a01 	vldmdb	r2!, {s0}
 80084ca:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80084ce:	ee37 0a80 	vadd.f32	s0, s15, s0
 80084d2:	3301      	adds	r3, #1
 80084d4:	e79a      	b.n	800840c <__kernel_rem_pio2f+0xd4>
 80084d6:	d106      	bne.n	80084e6 <__kernel_rem_pio2f+0x1ae>
 80084d8:	1e6b      	subs	r3, r5, #1
 80084da:	aa06      	add	r2, sp, #24
 80084dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80084e0:	ea4f 2822 	mov.w	r8, r2, asr #8
 80084e4:	e7c3      	b.n	800846e <__kernel_rem_pio2f+0x136>
 80084e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80084ea:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80084ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084f2:	da31      	bge.n	8008558 <__kernel_rem_pio2f+0x220>
 80084f4:	f04f 0800 	mov.w	r8, #0
 80084f8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80084fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008500:	f040 80a8 	bne.w	8008654 <__kernel_rem_pio2f+0x31c>
 8008504:	1e6b      	subs	r3, r5, #1
 8008506:	4618      	mov	r0, r3
 8008508:	2200      	movs	r2, #0
 800850a:	4548      	cmp	r0, r9
 800850c:	da4d      	bge.n	80085aa <__kernel_rem_pio2f+0x272>
 800850e:	2a00      	cmp	r2, #0
 8008510:	f000 8087 	beq.w	8008622 <__kernel_rem_pio2f+0x2ea>
 8008514:	aa06      	add	r2, sp, #24
 8008516:	3c08      	subs	r4, #8
 8008518:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800851c:	2900      	cmp	r1, #0
 800851e:	f000 808d 	beq.w	800863c <__kernel_rem_pio2f+0x304>
 8008522:	4620      	mov	r0, r4
 8008524:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008528:	9302      	str	r3, [sp, #8]
 800852a:	f000 fa19 	bl	8008960 <scalbnf>
 800852e:	9b02      	ldr	r3, [sp, #8]
 8008530:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800864c <__kernel_rem_pio2f+0x314>
 8008534:	0099      	lsls	r1, r3, #2
 8008536:	aa42      	add	r2, sp, #264	; 0x108
 8008538:	1850      	adds	r0, r2, r1
 800853a:	1d05      	adds	r5, r0, #4
 800853c:	461c      	mov	r4, r3
 800853e:	2c00      	cmp	r4, #0
 8008540:	f280 80b8 	bge.w	80086b4 <__kernel_rem_pio2f+0x37c>
 8008544:	2500      	movs	r5, #0
 8008546:	1b5c      	subs	r4, r3, r5
 8008548:	2c00      	cmp	r4, #0
 800854a:	f2c0 80d8 	blt.w	80086fe <__kernel_rem_pio2f+0x3c6>
 800854e:	4f3d      	ldr	r7, [pc, #244]	; (8008644 <__kernel_rem_pio2f+0x30c>)
 8008550:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8008650 <__kernel_rem_pio2f+0x318>
 8008554:	2400      	movs	r4, #0
 8008556:	e0c6      	b.n	80086e6 <__kernel_rem_pio2f+0x3ae>
 8008558:	f04f 0802 	mov.w	r8, #2
 800855c:	e78a      	b.n	8008474 <__kernel_rem_pio2f+0x13c>
 800855e:	ab06      	add	r3, sp, #24
 8008560:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008564:	b949      	cbnz	r1, 800857a <__kernel_rem_pio2f+0x242>
 8008566:	b12b      	cbz	r3, 8008574 <__kernel_rem_pio2f+0x23c>
 8008568:	aa06      	add	r2, sp, #24
 800856a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800856e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008572:	2301      	movs	r3, #1
 8008574:	3001      	adds	r0, #1
 8008576:	4619      	mov	r1, r3
 8008578:	e781      	b.n	800847e <__kernel_rem_pio2f+0x146>
 800857a:	aa06      	add	r2, sp, #24
 800857c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8008580:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008584:	460b      	mov	r3, r1
 8008586:	e7f5      	b.n	8008574 <__kernel_rem_pio2f+0x23c>
 8008588:	1e68      	subs	r0, r5, #1
 800858a:	ab06      	add	r3, sp, #24
 800858c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008594:	aa06      	add	r2, sp, #24
 8008596:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800859a:	e779      	b.n	8008490 <__kernel_rem_pio2f+0x158>
 800859c:	1e68      	subs	r0, r5, #1
 800859e:	ab06      	add	r3, sp, #24
 80085a0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80085a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085a8:	e7f4      	b.n	8008594 <__kernel_rem_pio2f+0x25c>
 80085aa:	a906      	add	r1, sp, #24
 80085ac:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80085b0:	3801      	subs	r0, #1
 80085b2:	430a      	orrs	r2, r1
 80085b4:	e7a9      	b.n	800850a <__kernel_rem_pio2f+0x1d2>
 80085b6:	f10c 0c01 	add.w	ip, ip, #1
 80085ba:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80085be:	2a00      	cmp	r2, #0
 80085c0:	d0f9      	beq.n	80085b6 <__kernel_rem_pio2f+0x27e>
 80085c2:	eb0b 0305 	add.w	r3, fp, r5
 80085c6:	aa1a      	add	r2, sp, #104	; 0x68
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	1898      	adds	r0, r3, r2
 80085cc:	3004      	adds	r0, #4
 80085ce:	1c69      	adds	r1, r5, #1
 80085d0:	3704      	adds	r7, #4
 80085d2:	2200      	movs	r2, #0
 80085d4:	4465      	add	r5, ip
 80085d6:	9005      	str	r0, [sp, #20]
 80085d8:	428d      	cmp	r5, r1
 80085da:	f6ff af0a 	blt.w	80083f2 <__kernel_rem_pio2f+0xba>
 80085de:	a81a      	add	r0, sp, #104	; 0x68
 80085e0:	eb02 0c03 	add.w	ip, r2, r3
 80085e4:	4484      	add	ip, r0
 80085e6:	9803      	ldr	r0, [sp, #12]
 80085e8:	f8dd e008 	ldr.w	lr, [sp, #8]
 80085ec:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80085f0:	9001      	str	r0, [sp, #4]
 80085f2:	ee07 0a90 	vmov	s15, r0
 80085f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085fa:	9805      	ldr	r0, [sp, #20]
 80085fc:	edcc 7a00 	vstr	s15, [ip]
 8008600:	eddf 7a13 	vldr	s15, [pc, #76]	; 8008650 <__kernel_rem_pio2f+0x318>
 8008604:	eb00 0802 	add.w	r8, r0, r2
 8008608:	f04f 0c00 	mov.w	ip, #0
 800860c:	45d4      	cmp	ip, sl
 800860e:	dd0c      	ble.n	800862a <__kernel_rem_pio2f+0x2f2>
 8008610:	eb02 0c07 	add.w	ip, r2, r7
 8008614:	a842      	add	r0, sp, #264	; 0x108
 8008616:	4484      	add	ip, r0
 8008618:	edcc 7a01 	vstr	s15, [ip, #4]
 800861c:	3101      	adds	r1, #1
 800861e:	3204      	adds	r2, #4
 8008620:	e7da      	b.n	80085d8 <__kernel_rem_pio2f+0x2a0>
 8008622:	9b04      	ldr	r3, [sp, #16]
 8008624:	f04f 0c01 	mov.w	ip, #1
 8008628:	e7c7      	b.n	80085ba <__kernel_rem_pio2f+0x282>
 800862a:	ecfe 6a01 	vldmia	lr!, {s13}
 800862e:	ed38 7a01 	vldmdb	r8!, {s14}
 8008632:	f10c 0c01 	add.w	ip, ip, #1
 8008636:	eee6 7a87 	vfma.f32	s15, s13, s14
 800863a:	e7e7      	b.n	800860c <__kernel_rem_pio2f+0x2d4>
 800863c:	3b01      	subs	r3, #1
 800863e:	e769      	b.n	8008514 <__kernel_rem_pio2f+0x1dc>
 8008640:	080090ac 	.word	0x080090ac
 8008644:	08009080 	.word	0x08009080
 8008648:	43800000 	.word	0x43800000
 800864c:	3b800000 	.word	0x3b800000
 8008650:	00000000 	.word	0x00000000
 8008654:	4260      	negs	r0, r4
 8008656:	eeb0 0a48 	vmov.f32	s0, s16
 800865a:	f000 f981 	bl	8008960 <scalbnf>
 800865e:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8008648 <__kernel_rem_pio2f+0x310>
 8008662:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800866a:	db1a      	blt.n	80086a2 <__kernel_rem_pio2f+0x36a>
 800866c:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800864c <__kernel_rem_pio2f+0x314>
 8008670:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008674:	aa06      	add	r2, sp, #24
 8008676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800867a:	a906      	add	r1, sp, #24
 800867c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008680:	3408      	adds	r4, #8
 8008682:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008686:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800868a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800868e:	ee10 3a10 	vmov	r3, s0
 8008692:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008696:	1c6b      	adds	r3, r5, #1
 8008698:	ee17 2a90 	vmov	r2, s15
 800869c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80086a0:	e73f      	b.n	8008522 <__kernel_rem_pio2f+0x1ea>
 80086a2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80086a6:	aa06      	add	r2, sp, #24
 80086a8:	ee10 3a10 	vmov	r3, s0
 80086ac:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80086b0:	462b      	mov	r3, r5
 80086b2:	e736      	b.n	8008522 <__kernel_rem_pio2f+0x1ea>
 80086b4:	aa06      	add	r2, sp, #24
 80086b6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80086ba:	9202      	str	r2, [sp, #8]
 80086bc:	ee07 2a90 	vmov	s15, r2
 80086c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086c4:	3c01      	subs	r4, #1
 80086c6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80086ca:	ee20 0a07 	vmul.f32	s0, s0, s14
 80086ce:	ed65 7a01 	vstmdb	r5!, {s15}
 80086d2:	e734      	b.n	800853e <__kernel_rem_pio2f+0x206>
 80086d4:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80086d8:	ecf7 6a01 	vldmia	r7!, {s13}
 80086dc:	ed9c 7a00 	vldr	s14, [ip]
 80086e0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80086e4:	3401      	adds	r4, #1
 80086e6:	454c      	cmp	r4, r9
 80086e8:	dc01      	bgt.n	80086ee <__kernel_rem_pio2f+0x3b6>
 80086ea:	42a5      	cmp	r5, r4
 80086ec:	daf2      	bge.n	80086d4 <__kernel_rem_pio2f+0x39c>
 80086ee:	aa56      	add	r2, sp, #344	; 0x158
 80086f0:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80086f4:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80086f8:	3501      	adds	r5, #1
 80086fa:	3804      	subs	r0, #4
 80086fc:	e723      	b.n	8008546 <__kernel_rem_pio2f+0x20e>
 80086fe:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8008700:	2a03      	cmp	r2, #3
 8008702:	d84d      	bhi.n	80087a0 <__kernel_rem_pio2f+0x468>
 8008704:	e8df f002 	tbb	[pc, r2]
 8008708:	021f1f3e 	.word	0x021f1f3e
 800870c:	aa56      	add	r2, sp, #344	; 0x158
 800870e:	4411      	add	r1, r2
 8008710:	399c      	subs	r1, #156	; 0x9c
 8008712:	4608      	mov	r0, r1
 8008714:	461c      	mov	r4, r3
 8008716:	2c00      	cmp	r4, #0
 8008718:	dc5f      	bgt.n	80087da <__kernel_rem_pio2f+0x4a2>
 800871a:	4608      	mov	r0, r1
 800871c:	461c      	mov	r4, r3
 800871e:	2c01      	cmp	r4, #1
 8008720:	dc6b      	bgt.n	80087fa <__kernel_rem_pio2f+0x4c2>
 8008722:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8008650 <__kernel_rem_pio2f+0x318>
 8008726:	2b01      	cmp	r3, #1
 8008728:	dc77      	bgt.n	800881a <__kernel_rem_pio2f+0x4e2>
 800872a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800872e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8008732:	f1b8 0f00 	cmp.w	r8, #0
 8008736:	d176      	bne.n	8008826 <__kernel_rem_pio2f+0x4ee>
 8008738:	edc6 6a00 	vstr	s13, [r6]
 800873c:	ed86 7a01 	vstr	s14, [r6, #4]
 8008740:	edc6 7a02 	vstr	s15, [r6, #8]
 8008744:	e02c      	b.n	80087a0 <__kernel_rem_pio2f+0x468>
 8008746:	aa56      	add	r2, sp, #344	; 0x158
 8008748:	4411      	add	r1, r2
 800874a:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8008650 <__kernel_rem_pio2f+0x318>
 800874e:	399c      	subs	r1, #156	; 0x9c
 8008750:	4618      	mov	r0, r3
 8008752:	2800      	cmp	r0, #0
 8008754:	da32      	bge.n	80087bc <__kernel_rem_pio2f+0x484>
 8008756:	f1b8 0f00 	cmp.w	r8, #0
 800875a:	d035      	beq.n	80087c8 <__kernel_rem_pio2f+0x490>
 800875c:	eef1 7a47 	vneg.f32	s15, s14
 8008760:	edc6 7a00 	vstr	s15, [r6]
 8008764:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8008768:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800876c:	a82f      	add	r0, sp, #188	; 0xbc
 800876e:	2101      	movs	r1, #1
 8008770:	428b      	cmp	r3, r1
 8008772:	da2c      	bge.n	80087ce <__kernel_rem_pio2f+0x496>
 8008774:	f1b8 0f00 	cmp.w	r8, #0
 8008778:	d001      	beq.n	800877e <__kernel_rem_pio2f+0x446>
 800877a:	eef1 7a67 	vneg.f32	s15, s15
 800877e:	edc6 7a01 	vstr	s15, [r6, #4]
 8008782:	e00d      	b.n	80087a0 <__kernel_rem_pio2f+0x468>
 8008784:	aa56      	add	r2, sp, #344	; 0x158
 8008786:	4411      	add	r1, r2
 8008788:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8008650 <__kernel_rem_pio2f+0x318>
 800878c:	399c      	subs	r1, #156	; 0x9c
 800878e:	2b00      	cmp	r3, #0
 8008790:	da0e      	bge.n	80087b0 <__kernel_rem_pio2f+0x478>
 8008792:	f1b8 0f00 	cmp.w	r8, #0
 8008796:	d001      	beq.n	800879c <__kernel_rem_pio2f+0x464>
 8008798:	eef1 7a67 	vneg.f32	s15, s15
 800879c:	edc6 7a00 	vstr	s15, [r6]
 80087a0:	9b01      	ldr	r3, [sp, #4]
 80087a2:	f003 0007 	and.w	r0, r3, #7
 80087a6:	b057      	add	sp, #348	; 0x15c
 80087a8:	ecbd 8b04 	vpop	{d8-d9}
 80087ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b0:	ed31 7a01 	vldmdb	r1!, {s14}
 80087b4:	3b01      	subs	r3, #1
 80087b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80087ba:	e7e8      	b.n	800878e <__kernel_rem_pio2f+0x456>
 80087bc:	ed71 7a01 	vldmdb	r1!, {s15}
 80087c0:	3801      	subs	r0, #1
 80087c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80087c6:	e7c4      	b.n	8008752 <__kernel_rem_pio2f+0x41a>
 80087c8:	eef0 7a47 	vmov.f32	s15, s14
 80087cc:	e7c8      	b.n	8008760 <__kernel_rem_pio2f+0x428>
 80087ce:	ecb0 7a01 	vldmia	r0!, {s14}
 80087d2:	3101      	adds	r1, #1
 80087d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80087d8:	e7ca      	b.n	8008770 <__kernel_rem_pio2f+0x438>
 80087da:	ed50 7a02 	vldr	s15, [r0, #-8]
 80087de:	ed70 6a01 	vldmdb	r0!, {s13}
 80087e2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80087e6:	3c01      	subs	r4, #1
 80087e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80087ec:	ed00 7a01 	vstr	s14, [r0, #-4]
 80087f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087f4:	edc0 7a00 	vstr	s15, [r0]
 80087f8:	e78d      	b.n	8008716 <__kernel_rem_pio2f+0x3de>
 80087fa:	ed50 7a02 	vldr	s15, [r0, #-8]
 80087fe:	ed70 6a01 	vldmdb	r0!, {s13}
 8008802:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008806:	3c01      	subs	r4, #1
 8008808:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800880c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8008810:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008814:	edc0 7a00 	vstr	s15, [r0]
 8008818:	e781      	b.n	800871e <__kernel_rem_pio2f+0x3e6>
 800881a:	ed31 7a01 	vldmdb	r1!, {s14}
 800881e:	3b01      	subs	r3, #1
 8008820:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008824:	e77f      	b.n	8008726 <__kernel_rem_pio2f+0x3ee>
 8008826:	eef1 6a66 	vneg.f32	s13, s13
 800882a:	eeb1 7a47 	vneg.f32	s14, s14
 800882e:	edc6 6a00 	vstr	s13, [r6]
 8008832:	ed86 7a01 	vstr	s14, [r6, #4]
 8008836:	eef1 7a67 	vneg.f32	s15, s15
 800883a:	e781      	b.n	8008740 <__kernel_rem_pio2f+0x408>

0800883c <__kernel_sinf>:
 800883c:	ee10 3a10 	vmov	r3, s0
 8008840:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008844:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008848:	da04      	bge.n	8008854 <__kernel_sinf+0x18>
 800884a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800884e:	ee17 3a90 	vmov	r3, s15
 8008852:	b35b      	cbz	r3, 80088ac <__kernel_sinf+0x70>
 8008854:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008858:	eddf 7a15 	vldr	s15, [pc, #84]	; 80088b0 <__kernel_sinf+0x74>
 800885c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80088b4 <__kernel_sinf+0x78>
 8008860:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008864:	eddf 7a14 	vldr	s15, [pc, #80]	; 80088b8 <__kernel_sinf+0x7c>
 8008868:	eee6 7a07 	vfma.f32	s15, s12, s14
 800886c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80088bc <__kernel_sinf+0x80>
 8008870:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008874:	eddf 7a12 	vldr	s15, [pc, #72]	; 80088c0 <__kernel_sinf+0x84>
 8008878:	ee60 6a07 	vmul.f32	s13, s0, s14
 800887c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008880:	b930      	cbnz	r0, 8008890 <__kernel_sinf+0x54>
 8008882:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80088c4 <__kernel_sinf+0x88>
 8008886:	eea7 6a27 	vfma.f32	s12, s14, s15
 800888a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800888e:	4770      	bx	lr
 8008890:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008894:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008898:	eee0 7a86 	vfma.f32	s15, s1, s12
 800889c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80088a0:	eddf 7a09 	vldr	s15, [pc, #36]	; 80088c8 <__kernel_sinf+0x8c>
 80088a4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80088a8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	2f2ec9d3 	.word	0x2f2ec9d3
 80088b4:	b2d72f34 	.word	0xb2d72f34
 80088b8:	3638ef1b 	.word	0x3638ef1b
 80088bc:	b9500d01 	.word	0xb9500d01
 80088c0:	3c088889 	.word	0x3c088889
 80088c4:	be2aaaab 	.word	0xbe2aaaab
 80088c8:	3e2aaaab 	.word	0x3e2aaaab

080088cc <fabsf>:
 80088cc:	ee10 3a10 	vmov	r3, s0
 80088d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088d4:	ee00 3a10 	vmov	s0, r3
 80088d8:	4770      	bx	lr
	...

080088dc <floorf>:
 80088dc:	ee10 3a10 	vmov	r3, s0
 80088e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80088e4:	0dca      	lsrs	r2, r1, #23
 80088e6:	3a7f      	subs	r2, #127	; 0x7f
 80088e8:	2a16      	cmp	r2, #22
 80088ea:	dc2a      	bgt.n	8008942 <floorf+0x66>
 80088ec:	2a00      	cmp	r2, #0
 80088ee:	da11      	bge.n	8008914 <floorf+0x38>
 80088f0:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008954 <floorf+0x78>
 80088f4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80088f8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80088fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008900:	dd05      	ble.n	800890e <floorf+0x32>
 8008902:	2b00      	cmp	r3, #0
 8008904:	da23      	bge.n	800894e <floorf+0x72>
 8008906:	4a14      	ldr	r2, [pc, #80]	; (8008958 <floorf+0x7c>)
 8008908:	2900      	cmp	r1, #0
 800890a:	bf18      	it	ne
 800890c:	4613      	movne	r3, r2
 800890e:	ee00 3a10 	vmov	s0, r3
 8008912:	4770      	bx	lr
 8008914:	4911      	ldr	r1, [pc, #68]	; (800895c <floorf+0x80>)
 8008916:	4111      	asrs	r1, r2
 8008918:	420b      	tst	r3, r1
 800891a:	d0fa      	beq.n	8008912 <floorf+0x36>
 800891c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008954 <floorf+0x78>
 8008920:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008924:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800892c:	ddef      	ble.n	800890e <floorf+0x32>
 800892e:	2b00      	cmp	r3, #0
 8008930:	bfbe      	ittt	lt
 8008932:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008936:	fa40 f202 	asrlt.w	r2, r0, r2
 800893a:	189b      	addlt	r3, r3, r2
 800893c:	ea23 0301 	bic.w	r3, r3, r1
 8008940:	e7e5      	b.n	800890e <floorf+0x32>
 8008942:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008946:	d3e4      	bcc.n	8008912 <floorf+0x36>
 8008948:	ee30 0a00 	vadd.f32	s0, s0, s0
 800894c:	4770      	bx	lr
 800894e:	2300      	movs	r3, #0
 8008950:	e7dd      	b.n	800890e <floorf+0x32>
 8008952:	bf00      	nop
 8008954:	7149f2ca 	.word	0x7149f2ca
 8008958:	bf800000 	.word	0xbf800000
 800895c:	007fffff 	.word	0x007fffff

08008960 <scalbnf>:
 8008960:	b508      	push	{r3, lr}
 8008962:	ee10 2a10 	vmov	r2, s0
 8008966:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800896a:	ed2d 8b02 	vpush	{d8}
 800896e:	eef0 0a40 	vmov.f32	s1, s0
 8008972:	d004      	beq.n	800897e <scalbnf+0x1e>
 8008974:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008978:	d306      	bcc.n	8008988 <scalbnf+0x28>
 800897a:	ee70 0a00 	vadd.f32	s1, s0, s0
 800897e:	ecbd 8b02 	vpop	{d8}
 8008982:	eeb0 0a60 	vmov.f32	s0, s1
 8008986:	bd08      	pop	{r3, pc}
 8008988:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800898c:	d21c      	bcs.n	80089c8 <scalbnf+0x68>
 800898e:	4b1f      	ldr	r3, [pc, #124]	; (8008a0c <scalbnf+0xac>)
 8008990:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008a10 <scalbnf+0xb0>
 8008994:	4298      	cmp	r0, r3
 8008996:	ee60 0a27 	vmul.f32	s1, s0, s15
 800899a:	db10      	blt.n	80089be <scalbnf+0x5e>
 800899c:	ee10 2a90 	vmov	r2, s1
 80089a0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80089a4:	3b19      	subs	r3, #25
 80089a6:	4403      	add	r3, r0
 80089a8:	2bfe      	cmp	r3, #254	; 0xfe
 80089aa:	dd0f      	ble.n	80089cc <scalbnf+0x6c>
 80089ac:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8008a14 <scalbnf+0xb4>
 80089b0:	eeb0 0a48 	vmov.f32	s0, s16
 80089b4:	f000 f834 	bl	8008a20 <copysignf>
 80089b8:	ee60 0a08 	vmul.f32	s1, s0, s16
 80089bc:	e7df      	b.n	800897e <scalbnf+0x1e>
 80089be:	eddf 7a16 	vldr	s15, [pc, #88]	; 8008a18 <scalbnf+0xb8>
 80089c2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80089c6:	e7da      	b.n	800897e <scalbnf+0x1e>
 80089c8:	0ddb      	lsrs	r3, r3, #23
 80089ca:	e7ec      	b.n	80089a6 <scalbnf+0x46>
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	dd06      	ble.n	80089de <scalbnf+0x7e>
 80089d0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80089d4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80089d8:	ee00 3a90 	vmov	s1, r3
 80089dc:	e7cf      	b.n	800897e <scalbnf+0x1e>
 80089de:	f113 0f16 	cmn.w	r3, #22
 80089e2:	da06      	bge.n	80089f2 <scalbnf+0x92>
 80089e4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80089e8:	4298      	cmp	r0, r3
 80089ea:	dcdf      	bgt.n	80089ac <scalbnf+0x4c>
 80089ec:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8008a18 <scalbnf+0xb8>
 80089f0:	e7de      	b.n	80089b0 <scalbnf+0x50>
 80089f2:	3319      	adds	r3, #25
 80089f4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80089f8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80089fc:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008a1c <scalbnf+0xbc>
 8008a00:	ee07 3a10 	vmov	s14, r3
 8008a04:	ee67 0a27 	vmul.f32	s1, s14, s15
 8008a08:	e7b9      	b.n	800897e <scalbnf+0x1e>
 8008a0a:	bf00      	nop
 8008a0c:	ffff3cb0 	.word	0xffff3cb0
 8008a10:	4c000000 	.word	0x4c000000
 8008a14:	7149f2ca 	.word	0x7149f2ca
 8008a18:	0da24260 	.word	0x0da24260
 8008a1c:	33000000 	.word	0x33000000

08008a20 <copysignf>:
 8008a20:	ee10 3a10 	vmov	r3, s0
 8008a24:	ee10 2a90 	vmov	r2, s1
 8008a28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a2c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008a30:	4313      	orrs	r3, r2
 8008a32:	ee00 3a10 	vmov	s0, r3
 8008a36:	4770      	bx	lr

08008a38 <_init>:
 8008a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3a:	bf00      	nop
 8008a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3e:	bc08      	pop	{r3}
 8008a40:	469e      	mov	lr, r3
 8008a42:	4770      	bx	lr

08008a44 <_fini>:
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a46:	bf00      	nop
 8008a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4a:	bc08      	pop	{r3}
 8008a4c:	469e      	mov	lr, r3
 8008a4e:	4770      	bx	lr
